
[1] HTTP での [CODE(MIME)[[[multipart/*]]]] 媒体型の使用について。

[2] [[MIME]] で複数の[[実体]]を一つの[[メッセージ]]に詰め込むために用意されている
[CODE(MIME)[multipart/[VAR[*]]]] 型は、 [[HTTP]] でも使うことがあります。

しかしながら、実際には使えるとも使えないともいえない中途半端な状態で実装されています。

[[#comment]]

* HTTP でよく使われる亜型

[4] HTTP 応用では、幾つかの亜型は対応している実装がかなりありますが、
全体としてはほとんど無視している状態です。 MIME でも HTTP
でも、未対応の [CODE(MIME)[multipart/[VAR[*]]]] に出会ったら
[CODE(MIME)[[[multipart/mixed]]]] と同じに振舞うことになっていますが、
ほとんどの応用が [CODE(MIME)[multipart/mixed]] に対応していないのだからどうしようもありません。。。

[5] 
: [CODE(MIME)[[[multipart/form-data]]]] : [CODE(HTMLe)[[[form]]]] 要素などの[[フォーム]]からデータを送信する時に [CODE(HTTP)[[[POST]]]] 要求でよく使われる型です。
[[ファイルうp]]には必須とあって一気に普及しましたが、行き当たりばったりな実装ばかりで無難にやり過ごすとしたら最低限のこともできないかもしれません。[WEAK[まあ Web 関連規格は大体がそういう状態ですな。]]
: [CODE(MIME)[[[multipart/byteranges]]]] : [CODE(HTTP)[[[206]]]] 応答で内容全体ではなく内容の一部を複数個送るときに使います。
大方のサーバーと大方の [[WWWブラウザ]]や prefetcher が対応しています。
: [CODE(MIME)[[[multipart/x-byteranges]]]] : [CODE(MIME)[byterange]] の規格制定過程の古い形式で、今でも対応している WWW ブラウザもあります。
とはいえ歴史的なものでおそらく誰も使って無いでしょう。
: [CODE(MIME)[[[multipart/x-mixed-replace]]]] : [[プッシュ]]が流行り始めた時代に
[[NN]] が実装していました。成長し始めの[[コンテンツ業界]] (謎)
でも流行ったみたいで、それ系の掲示板 (謎) で最近までたまに話題に上がっていましたが、
これに対応していない [[WinIE]] の台頭とプッシュが廃れたのでもう死滅状態でしょうか。
[WEAK[ちなみに [[Gecko]] Mozilla は対応していません。]]
逐次レンダリングしないといけないという代物。
: [CODE(MIME)@en[[[multipart/related]]]] :
[[SOAP]] [[メッセージ]]を [[HTTP]] で送信する場合で、 [[SOAP]] [[メッセージ]]内に[[バイナリ・データ]]が含まれる時には、
[CODE(MIME)@en[[[multipart/related]]]] を使えることになっています。仕様上は。
実際使われているのかは謎です。そもそも [[SOAP]] 自体(ry

[6] これ以外の亜型に対応した実装はほとんどありません。

複数個の本体があるとどうレンダリングしたらいいか困っちゃいますからねぇ。
ブラウザとしては。[[フレーム]]と同じようにしたらどうよ? という気もしないでもないですが。

[7] 電子メイルを扱える WWW ブラウザだと、 [CODE(MIME)[multipart/[VAR[*]]]]
を直接扱えなくても HTTP 的には [CODE(MIME)[[[message/rfc822]]]]
で、その中に多部分がある感じにすれば、 (電子メイルを扱う時と同程度には)
表示できたりします。でもまあこんなの HTTP での多部分に対応しているとは言わんな。

[[#comment]]

* MIME と HTTP

[3] HTTP が MIME を採用していれば何も問題はなかったのですが、あいにく
HTTP は「MIME 的なもの」を含んでいるので、多部分を完全に MIME
的に取扱っても良いのか、はっきり書かれていないと困ってしまいます。

何も言っていないのは特に変更しないからだと判断して MIME
的に実装してしまうのももっともなのですが、
そうすると整合性の点で問題になっちゃうこともあるような気もします。

歴代仕様書を比較すると、最新の RFC 2616 は以前の RFC
より MIME との互換性に気を遣っているような感じです。

[[#comment]]

** 改行の扱い

[8] HTTP は [CODE(MIME)[[[text/*]]]] については MIME とは違って
[[CRLF]] への正規化を要求していません。しかし、 [CODE(MIME)[multipart/*]]
の改行は MIME と同じで CRLF でなければなりません。

この点は RFC 1945 からしっかり明記されています。

[[#comment]]

** 本体部分の実体頭欄

[9] 本体部分中の実体の頭欄は、 MIME の規定によれば、
MIME の頭欄 ([CODE(MIME)[Content-]] で始まる。) 以外は無視されることになっています。

[10] ところが、 RFC 1945 と RFC 2068 では、任意の HTTP
頭欄を入れることができます。[WEAK[入れても無視すれば両方とも矛盾は無いですか? そうですね。そうですよ。だけどそれは明らかに 1945 と 2068 の意図することとは違う。]]
[CODE(HTTP)[[[Expires]]]] とか [CODE(HTTP)[[[Link]]]] とか、
メッセージではなく実体の頭欄・・・つまり[[実体頭欄]]ですね、
そういうのを入れることを意図していたんだと思います。

MIME 的思想では、 MIME の制定をもってメッセージ (822) と実体は意味的に分割されて、
以後新たに実体の属性を頭欄として実装するときには [CODE(MIME)[Content-[VAR[*]]]]
名前空間に置こうと考えたのでしょう。ところが、その設計思想は HTTP
の実装には反映されなかった。[WEAK[HTTP の設計した人達はその命名規則を理解していたかもしれませんが —きっと理解していたでしょうが、設計よりも実装がどんどん先走ったのは周知の通り。]]
結局、 HTTP では (名前からは機械的に決定できない) 実体頭欄だのなんたら頭欄だのという分類ができることになるわけです。

[11] ところが、 RFC 2616 で以前の規定はなくなってしまっています。
本体部分の実体の頭欄は MIME 的に解釈されると書いてあります。
やっぱり MIME と非互換ではいかんということでしょうか。

- [17] ''Met-cast HTTP'' <http://zowie.metnet.navy.mil/~spawar/JMV-TNG/Met-Cast-HTTP.html#samples> の実装例では [CODE(HTTP)[[[Content-Length]]]] や [CODE(HTTP)[[[Last-Modified]]]] が本体部分の頭欄に使われています。
[[#comment]]

** 内容符号化

[12] MIME の [CODE(MIME)[[[Content-Transfer-Encoding]]]],
HTTP の [CODE(MIME)[[[Content-Encoding]]]] はそれぞれ固有のものです。
ではこれらを本体部分の実体の頭欄で使うことができるのか。
HTTP RFC ではどこにもその規定はありません。

[13] RFC 2616 で、本体部分実体頭欄は MIME 的に解釈されるという規定になりました。
これに従うなら、 [CODE(MIME)[Content-Transfer-Encoding]]
欄があったなら MIME 的に解釈するべきでしょう。

一方 [CODE(MIME)[Content-Encoding]] 欄は MIME で規定されていないので、
解釈なしになってしまいます。 RFC 2068 までの規定に従えば任意の HTTP
頭欄が使えるので、 HTTP 的に適当に解釈してもらえるはずなのですが・・・。

[[#comment]]

** 頭欄の文字符号化

[14] RFC 2068 までの規定では、本体部分の頭欄には HTTP
頭欄をいれることができましたから、素直に解釈すればそこは HTTP
により解釈します。ということは、 RFC 1945 では [[US-ASCII]] + 任意の8ビット符号,
RFC 2068 では [[ISO-8859-1]] が使えるということになります。
MIME 的には [[US-ASCII]] しか使えず、それ以外は [CODE(ABNF)[[[encoded-word]]]]
ということになるのですが。。。

[15] RFC 2616 の規定では、 MIME 的な意味でと言っているので、
MIME の規定に従えと解釈すれば、 US-ASCII を使わないといけません。
[WEAK[(Semantic は MIME と言ってるけど syntax も MIME とは言ってないから ISO-8859-1 を使ってもいいという主張もできるのですが。。。)]]

[[#comment]]

** 後書き

[16] MIME の規定では、最後の本体部分の終わりの境界の後に任意の (US-ASCII) 文字列を入れることができます。
その部分は MIME UA には無視されます。
この部分のことを[DFN[[[後書き]]]]といいます。

HTTP では後書きを禁止しています。本来 [CODE(HTTP)[[[Content-Length]]]]
が必要な場合でも [CODE(MIME)[multipart/*]] 
を使っていれば省略してもいいことになっています。
これは本体部分の最後の境界で終わりを示せるからです。
ところが後書きがあるとこの仮定が崩れます。
だから禁止しているのです。

[[#comment]]

* 仕様書から
** RFC 1945 (HTTP/1.0) 3.6.2; RFC 2068・2616 (HTTP/1.1) 3.7.2 Multipart Types
> MIME provides for a number of "multipart" types -- encapsulations 
of [DEL[[INS[{1945}]] several]] [INS[[INS[{2068,2616}]] one or more]] entities within a 
single [DEL[[INS[{1945}]] message's Entity-Body]] [INS[[INS[{2068,2616}]] message-body]]. [DEL[[INS[{1945}]] The multipart types registered by IANA [15] do not have any special meaning for HTTP/1.0, though user agents may need to understand each type in order to correctly interpret the purpose of each body-part. An HTTP user agent should follow the same or similar behavior as a MIME user agent does upon receipt of a multipart type. HTTP servers should not assume that all HTTP clients are prepared to handle multipart types.]]

[[MIME]] は、幾つかの [CODE(MIME)[multipart]] (多部分)
型を提供しています。これを使うと、一つの [CODE(ABNF)[[[message-body]]]]
に一つ以上の[[実体]]をカプセル化できます。 [DEL[IANA に登録されている多部分型は、 HTTP/1.0 に対して特別な意味を持っていません。ただし[[利用者エージェント]]は各[[本体部分]]の目的を正しく解釈するために各型を理解する必要があるかもしれません。 HTTP 利用者エージェントは、多部分型を受信した時の MIME 利用者エージェントと同じか同様の振る舞いをするべきです。 HTTP [[サーバー]]は、すべての HTTP [[クライアント]]が多部分型を扱う準備ができていると仮定するべきではありません。]]

> All multipart types share a common syntax[INS[, [INS[{2068,2616}]] as defined in  [DEL[MIME [7] ]][INS[section 5.1.1 of RFC 2046 [40] ]],]] and [DEL[[INS[{1945}]] must]] [INS[MUST]]
include a boundary parameter as part of the media type value. The message body is itself a protocol element and [DEL[[INS[{1945}]] must]] [INS[MUST]]
therefore use only CRLF to represent line breaks between body-parts. [DEL[[INS[{1945}]] Multipart body-parts may contain HTTP header fields which are significant to the meaning of that part.]] [INS[[INS[{2068,2616}]] Unlike in [DEL[MIME]] [INS[RFC 2046]], the epilogue of any multipart message MUST be empty; HTTP applications MUST NOT transmit the epilogue (even if the original multipart contains an epilogue). [INS[[INS[{2616}]] These restrictions exist in order to preserve the self-delimiting nature of a multipart message-body, wherein the "end" of the message-body is indicated by the ending multipart boundary.]]]]

すべての多部分型は、 MIME で定義されている共通の構文を共有し、
媒体型値の一部として [CODE(MIME)[[[boundary]]]] (境界) 引数を含みます。
メッセージ本体はそれ自体プロトコル要素ですから、
本体部分間の[[改行]]を表現するときには [CODE(MIME)[[[CRLF]]]]
だけを使用しなければ'''なりません'''。 [DEL[多部分本体部分は、その部分の意味にとって重要である HTTP 頭欄を含んでも構いません。]] [INS[MIME とは異なり、多部分メッセージの [CODE(ABNF)[[[epilogue]]]] (後書き) は空でなければなりません。 HTTP [[応用]]は、 (たとえもとの多部分が後書きを含んでいたとしても) 後書きを転送しては'''なりません'''。[INS[この制限は、多部分 [CODE(ABNF)[message-body]] の自己区切性を維持するために存在します。 [CODE(ABNF)[message-body]] の「終了」は終了多部分境界で示します。]]]]

[INS[
[INS[
>[INS[{2616}]] In general, HTTP treats a multipart message-body no differently than
any other media type: strictly as payload. The one exception is the
"multipart/byteranges" type (appendix 19.2) when it appears in a 206
(Partial Content) response, which will be interpreted by some HTTP
caching mechanisms as described in sections 13.5.4 and 14.16. In all
other cases, an HTTP user agent SHOULD follow the same or similar
behavior as a MIME user agent would upon receipt of a multipart type.
The MIME header fields within each body-part of a multipart message-body do not have any significance to HTTP beyond that defined by
their MIME semantics.

通常、 HTTP は多部分 [CODE(ABNF)[message-body]] を他の媒体型と何ら違わず、
厳密に積荷として扱います。1つの例外は [CODE(MIME)[[[multipart/byteranges]]]]
型が [CODE(HTTP)[[[206]] (部分内容)]] 応答で使われた時で、
12.5.3節と14.16節で説明する HTTP [[キャッシュ]]機構により解釈されます。
これ以外の全ての場合には、 HTTP 利用者エージェントは、多部分型を受信した時の MIME 利用者エージェントと同じか同様の振る舞いをする'''べきです'''。
多部分 [CODE(ABNF)[message-body]] の各本体部分中の MIME 頭欄は、
HTTP ではその MIME 的な意味で定義された以上の意義を持ちません。

]INS]
[DEL[
>[INS[{2068}]]  In HTTP, multipart body-parts MAY contain header fields which are
significant to the meaning of that part. A Content-Location header
field (section 14.15) SHOULD be included in the body-part of each
enclosed entity that can be identified by a URL.

HTTP では、多部分本体部分は、その部分の意味にとって重要である HTTP 頭欄を含んでも'''構いません'''。
[[URL]] で識別できる[[囲まれた実体]]の本体部分には
[CODE(HTTP)[[[Content-Location]]]] 頭欄を含める'''べきです'''。
]DEL]

>[INS[{2068,2616}]] In general, an HTTP user agent SHOULD follow the same or similar
behavior as a MIME user agent would upon receipt of a multipart type.
If an application receives an unrecognized multipart subtype, the
application MUST treat it as being equivalent to "multipart/mixed".

通常、 HTTP 利用者代理者は、多部分型を受信した時の 
MIME 利用者エージェントと同じか同様の振る舞いをする'''べきです'''。
応用が認識出来ない多部分亜型を受け取った場合は、
応用は [CODE(MIME)[[[multipart/mixed]]]] と同等として扱わなければ'''なりません'''。

> Note: The "multipart/form-data" type has been specifically defined
for carrying form data suitable for processing via the POST request
method, as described in RFC 1867 [15].

注意: [CODE(MIME)[[[multipart/form-data]]]] 型が特に
[CODE(HTTP)[[[POST]]]] 要求方式での処理に適当なフォーム・データ運搬のために定義されています。
これは [[RFC1867]] で説明されています。
]INS]

** RFC 1945 (HTTP/1.0) C.5; RFC 2068 (HTTP/1.1) 19.4.5 HTTP Header Fields in Multipart Body-Parts
> In [DEL[RFC 1521]] [INS[MIME]], most header fields in multipart body-parts are generally
ignored unless the field name begins with "Content-". In [DEL[HTTP/1.0]] [INS[HTTP/1.1]],
multipart body-parts may contain any HTTP header fields which are
significant to the meaning of that part.

MIME では、多部分本体部分中のほとんどの頭欄が、欄名が [CODE(MIME)[Content-]]
で始まらない限り通常は無視されます。 HTTP
では、多部分本体部分に、その部分の意味にとって重要な任意の 
HTTP 頭欄を入れることができます。

[INS[
注: この節は、 RFC 2616 では削除されています。
]INS]
** RFC の部分のライセンス
[[RFCのライセンス]]
* メモ
