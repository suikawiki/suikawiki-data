* 仕様書

[REFS[
- [3] [CITE[Web IDL (Second Edition)]] ([TIME[2015-05-27 01:29:33 +09:00]] 版) <http://heycam.github.io/webidl/#dfn-exception>
- [7] [CITE[Web IDL (Second Edition)]] ([TIME[2015-05-27 01:29:33 +09:00]] 版) <http://heycam.github.io/webidl/#dfn-current-global-environment>
]REFS]

* 演算

[4] [[例外]]は、[[エラー名]]を指定して[DFN[[RUBYB[投げる]@en[throw]]]]ことができます [SRC[>>3]]。
その動作は[[言語束縛]]により決まります [SRC[>>3]]。

[6] [[JavaScript]] においては、指定された[[エラー名]]や[[利用者エージェント]]依存の[[メッセージ (例外)]]
によって[[例外を作成]]し、それを[[投げる]]ようにしなければ[['''なりません''']] [SRC[>>7]]。

[8] [[Web IDL]] 仕様内で [[JavaScript]] 組み込みの [CODE(JS)@en[[[Error]]]]
を[[投げる]]というときは、[[現在大域環境]]の組み込みオブジェクトを使わなければ[['''なりません''']]
[SRC[>>7]]。

[9] [[Web IDL]] [[JavaScript]] 束縛が [CODE(JS)@en[[[Function]]]] を呼び出し、
[[例外]]が投げられた場合、 [[Web IDL]] 束縛としてはそれをそのまま伝播するので、
呼び出し元へと順に伝播することになります。 [SRC[>>7]]

* 歴史

[1] [CITE@en-us[throw Statement - MDC Doc Center]]
([TIME[2010-12-15 16:20:53 +09:00]] 版)
<https://developer.mozilla.org/ja/JavaScript/Guide/Exception_Handling_Statements/throw_Statement>

[2] [[WinIE]] では [CODE(JS)@en[[[throw]]]] は [CODE(JS)@en[[[try]]]] 内でないと構文エラーになる、
と思いきやならなかったりもしてよくわかりませんねぇ。

[5] 例外は発生 ([DFN[raise]]) するとも言われることがあります。