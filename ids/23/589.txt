[2] [[Web IDL]] の[[型定義]]された[[型]] [DFN[[CODE(DOMi)@en[[[VibratePattern]]]]]] は、
[CODE(IDL)@en[[[unsigned long]]]] または [CODE(IDL)@en[[[unsigned long]]]] の [CODE(IDL)@en[[[sequence<>]]]]
です [SRC[>>1]]。

* 仕様書

[REFS[
- [1] [CITE@en[Vibration API]] ([TIME[2014-11-20 01:59:39 +09:00]] 版) <http://dev.w3.org/2009/dap/vibration/#h2_vibration-interface>
-- [4] [CITE@en[Vibration API]] ([TIME[2014-11-20 01:59:39 +09:00]] 版) <http://dev.w3.org/2009/dap/vibration/#dfn-validate-and-normalize>
]REFS]

* 文脈

[3] [CODE(DOMi)@en[[[VibratePattern]]]] は、 [CODE(DOMm)@en[[[vibrate]]]]
[[メソッド]]の[[引数]]に使われています。

* 検証および正規化

[5] [[バイブレーションパターン]]の[DFN[[RUBYB[検証および正規化]@en[validate and normalize]]]]とは、次のような操作です [SRC[>>4]]。
[FIG(steps)[
= [6] 与えられた[[バイブレーションパターン]]が単一の値なら、この値のみを含むリストとします。
= [7] リストの長さが最大値より大きければ、
先頭から最大値分の要素だけを残し、残りを削除します。
= [8] リストの長さが[[正]]の[[偶数]]なら、末尾の要素は無意味ですから、除去して構いません。
= [9] リストの各要素の値が時間間隔の最大値より大きければ、最大値に置き換えます。
= [10] 得られたリストを返します。
]FIG]

[11] リストの長さの最大値は、[[実装依存]]です。[[利用者エージェント]]は、[[装置]]や [[OS]]
の制限より長い時に内部的にパターンを分割することで、実質的にそれより長いパターンに対応できます。
しかし、[[利用者]]に対する[[DoS攻撃]]を企てる[[アプリケーション]]があるかもしれませんから、
あまりに長いパターンは無視するべきかもしれません。
なお[[アプリケーション]]も、同様に[[利用者エージェント]]が対応できないとわかっている長いパターンを分割して [CODE(JS)@en[[[navigator.vibrate]]]] を呼び出すことはできます。 [SRC[>>4]]

[12] [RUBYB[時間間隔]@en[duration]]の最大値は、[[実装依存]]です [SRC[>>4]]。
