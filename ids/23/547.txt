[2] [DFN[[RUBYB[revoke エンドポイント]@en[revocation endpoint]]]]は、[[アクセストークン]]や[[更新トークン]]を取り消し ([[revoke]]) するための[[エンドポイント]]です。

* 仕様書

[REFS[
- [1] '''[CITE@en[RFC 7009 - OAuth 2.0 Token Revocation]] ([TIME[2014-12-21 18:10:21 +09:00]] 版) <http://tools.ietf.org/html/rfc7009>'''
- [10] [CITE@en[RFC 6749 - The OAuth 2.0 Authorization Framework]] ([TIME[2014-12-15 14:15:35 +09:00]] 版) <http://tools.ietf.org/html/rfc6749#section-3.1>
]REFS]

* 意味

[3] [RUBYB[取り消し要求]@en[revocation request]]により、
指定した[[アクセストークン]]や[[更新トークン]]と、
必要に応じて同じ[[認可承諾]]に基づく他のトークンや当該[[認可承諾]]を含めて[RUBYB[非妥当化]@en[invalidate]]することができます [SRC[>>1]]。

[4] [[OAuth]] はしばしば [[Webアプリケーション]]の[[ログイン]]の仕組みとして使われますが、
この [[revoke]] の仕組みにより、[[末端利用者]]が[[ログアウト]]したり、
[[identity]] を変更したり、[[アプリケーション]]を[[アンインストール]]したりするときに
[[OAuth 2.0]] [[クライアント]]が[[トークン]]を非妥当化することができます [SRC[>>1]]。

[5] [[revoke]] すると[[認可鯖]]に伝えることで、[[認可鯖]]は[[トークン]]に関連付けられたデータ
(例えばセッションデータ) や、[[認可承諾]]を消去できます。
これによって特定の[[クライアント]]に対する[[認可承諾]]が[[末端利用者]]の気づかないまま残ってしまうことを防げます。
使わなくなった[[トークン]]が乱用されることも防げます。
[[認可鯖]]が[[末端利用者]]に対して[[認可承諾]]の一覧を提示している場合には、
そこからも消去されるので、[[末端利用者]]に対してより良い体験を提示できます。 [SRC[>>1]]

[6] 実装は、[[更新トークン]]の [[revoke]] に対応しなければ[['''なりません''']] [SRC[>>1]]。

[7] 実装は、[[アクセストークン]]の [[revoke]] に対応する[['''べき''']]です [SRC[>>1]]。

;; [8] しかしながら、実装が [[revoke]] に対応すること自体は必須とはなっていません。
[[OAuth]] 本体に対応していても、 [[revoke]] には対応していない可能性があります。
また[[更新トークン]]を使わない実装は[[更新トークン]]の [[revoke]]
にも対応していない (できない) かもしれません。

[24] [[クライアント]]は、 [[revokeエンドポイント]]が [CODE(HTTP)[[[200]]]]
を返した後その[[トークン]]を使おうと試みてはなりません [SRC[>>1]]。

[26] なお、[[トークン]]はこの仕組み以外でも無効になることがあります。
[[クライアント]]は、いつでも[[トークン]]が無効にされる可能性を考慮しておかなければなりません
[SRC[>>1]]。例えば[[資源所有者]]が [[revoke]] するかもしれませんし、
[[認可鯖]]が自身の判断で無効化するかもしれません。

* クライアントの要求

[9] [[クライアント]]は、 [CODE(HTTP)@en[[[POST]]]] [[要求]]を使います [SRC[>>1]]。

[13] [[クライアント]]が [[revokeエンドポイント]]の [[URL]]
を得る方法は、 [[OAuth]] 仕様の範囲外です。[[鯖]]のドキュメントから調べても構いませんし、
自動的な[[発見]]の仕組みを使っても構いません。いずれにせよ信頼できる情報源に拠る必要があります。
[SRC[>>1]]

[14] [[revokeエンドポイント]]の [[URL]] は、 [[HTTPS]] でなければ[['''なりません''']]。
[[認可鯖]]は [[TLS]] を使わなければ[['''なりません''']]。
[[クライアント]]は [[HTTPS]] の [[URL]] であることを[RUBYB[検証]@en[verify]]しなければ[['''なりません''']]。
[SRC[>>1]]

[15] [[revokeエンドポイント]]が素の [[HTTP]] でも利用できるなら、
そちらでの [[revoke]] にも対応する[['''べき''']]ですが、
これを [[revokeエンドポイント]]の [[URL]] として出版しては[['''なりません''']]。 [SRC[>>1]]

;; [16] こうすることにより、誤って [[HTTP]] で送信してしまったトークンも [[revoke]]
できます [SRC[>>1]]。

[11] [[revokeエンドポイント]]の [[URL]] は、
[CODE(MIME)@en[[[application/x-www-form-urlencoded]]]]
形式の [[query]] を含んでいても構いません [SRC[>>1, >>10]]。

[12] [[URL]] に[[引数]]を追加する時は、元の [[query]] を残さなければ[['''なりません''']]
[SRC[>>1, >>10]]。

[17] [[クライアント]]は [[payload body]] に
[CODE(MIME)@en[[[application/x-www-form-urlencoded]]]] 
形式で次の[[引数]]を指定します [SRC[>>1]]。
[FIG(list members)[
[FIGCAPTION[
[[payload body]] ([CODE(MIME)@en[[[application/x-www-form-urlencoded]]]])
]FIGCAPTION]
:[18] [CODE(URI)@en[[[token]]]]:[[revoke]] したい[[トークン]]を指定しなければ[['''なりません''']] [SRC[>>1]]。
:[19] [CODE(URI)@en[[[token_type_hint]]]]:[CODE(URI)@en[[[token]]]] の種別のヒントです。
[[クライアント]]はこれを指定しても構いません。
]FIG]

[20] [[クライアント]]は、[[クライアント認証]]も含めます [SRC[>>1]]。

[CODE(URI)@en[[[access_token]]]] が[[アクセストークン]]、
[CODE(URI)@en[[[refresh_token]]]] が[[更新トークン]]を表します。

* 認可鯖の処理

[21] [[認可鯖]]は、まず ([[機密]]の[[クライアント]]なら)
[[クライアントcredentials]]を[RUBYB[検証]@en[validate]]します [SRC[>>1]]。

;; [[クライアント認証]]参照。

[22] [[認可鯖]]は、次に[[トークン]]が当該[[クライアント]]に発行されたものか[RUBYB[検証]@en[verify]]します。
失敗した場合は、エラーを返して終わります。 [SRC[>>1]]

[23] [[認可鯖]]は、その後[[トークン]]を非妥当化します。非妥当化は直ちに行われ、
以後[[トークン]]は使えなくなります。実際には伝播遅延があるかもしれませんが、
できるだけ短期間で反映されるようにするべきです。 [SRC[>>1]]

[25] [[認可鯖]]は、 [[revoke]] に関する方針次第で、
関連するトークンや元になった[[認可承諾]]をも [[revoke]]
して構いません。 [[更新トークン]]の [[revoke]] においては、
[[認可鯖]]が[[アクセストークン]]の [[revoke]]
にも対応しているなら、同じ[[認可承諾]]に基づくすべての[[アクセストークン]]をも
[[revoke]] する[['''べき''']]です。
[[アクセストークン]]の [[revoke]] においては、
対応する[[更新トークン]]も [[revoke]] して構いません。 [SRC[>>1]]
