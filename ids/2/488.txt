* utf8 旗と utf8 文字列

@@ ・・・

* [CODE(perl)@en[use utf8]]

@@ ・・・

** [CODE(perl)@en[use encoding]] との関係

@@ ・・・

* [CODE(perl)@en[utf8]] 符号化

[2] [[Perl]] の [CODE(perl)@en[[[Encode]]]] [[モジュール]]は[[文字符号化]]の名前として
「[CODE(perl)@en[[[utf8]]]]」 と 「[CODE(perl)@en[[[utf-8]]]]」に対応しています。
前者は [[Perl]] の[[文字列]]の[[内部符号化]]方式としての [[UTF-8]]
(の[[バイト文字列]]としての表現)、
後者は [[Unicode]] の[[文字符号化方式]]である [[UTF-8]] を表しています。

* [CODE(perl)@en[:utf8]] PerlIO 層

[1]
[KBD@en[[[perldoc]] [[PerlIO]]]] にもちゃんと書いてありましたが、
[[PerlIO]] [[層]] [CODE(perl)@en[:[[utf8]]]] を使った入力は不正な入力も黙って受け入れます。
読み込むファイルが [[UTF-8]] として不正な[[バイト列]]であったとしても、警告も何も無しで、
黙って [[utf8]] [[旗]]を立てた SV にするみたいです。なので、入力が不正なバイト列である可能性がある場合、
[CODE(perl)@en[:[[encoding]]([[utf8]])]] を使う必要があります。
こちらは不正なバイト列を [CODE(example)[\x[VAR[HH]]]] に置き換えるようです。

おそらく [CODE(perl)@en[:[[utf8]]]] の方が早いのでしょうが、もし不正なバイト列が混入していた場合、
読み込みの時点では何も起こらず、その後読み込んだ文字列に対して何らかの操作を行おうとした時点で
[Q@en[Malformed UTF-8 character (fatal)]]
というエラーが出ますので、デバッグが難しくなるかもしれません。

* EBCDIC 環境との関係

@@ ・・・


[3] [CITE[Perl, utf8 フラグ, ハッシュ, リテラル, =&gt; - 冬通りに消え行く制服ガールは、夢物語にリアルを求めない。 - subtech]]
([TIME[2010-03-25 09:56:06 +09:00]] 版)
<http://subtech.g.hatena.ne.jp/cho45/20100323/1269329227>