[7] [DFN[MySQL]] は、[[データベース]]です。

* MySQL over TLS

[2] [[TLS]] が有効かどうかは [CODE[SHOW STATUS LIKE "Ssl_cipher"]] で確認できます。
適当な [[cipher]] が返ってきたら、 [[TLS]] が有効です。

[3] [KBD[mysql]] [[コマンド]]ほかいくつかの[[クライアントライブラリー]]は
[[TLS]] が指定されていてもそれが適用されなかった場合にも、これをエラーとしないので、
注意が必要です。

* [CODE(URI)@en[mysql:]] URL scheme

[8] [CITE[Extended indexing features]] <http://www.dataparksearch.org/dpsearch-extended-indexing.en.html#htdb>
([TIME[2006-03-20 13:56:51 +00:00]])

[FIG(quote)[ [9] [SRC[>>8]]
>
[PRE(code URI)[
mysql://foo:bar@localhost/search/?dbmode=single
]PRE]
]FIG]

[10] [CITE@en[Engine Configuration — SQLAlchemy 0.7 Documentation]]
( ([TIME[2012-10-28 05:05:12 +09:00]] 版))
<http://docs.sqlalchemy.org/en/rel_0_7/core/engines.html#database-urls>

[11] [CITE[felixge/node-mysql · GitHub]] ([TIME[2013-05-09 08:29:39 +09:00]] 版) <https://github.com/felixge/node-mysql>

[12] [[mysqld]] の既定の[[ポート番号]]は [N[3306]]。

[FIG(quote)[
[FIGCAPTION[
[13] [CITE[Mojo::MySQL5::URL - search.cpan.org]]
([TIME[2015-07-09 00:25:59 +09:00]] 版)
<http://search.cpan.org/dist/Mojo-MySQL5/lib/Mojo/MySQL5/URL.pm>
]FIGCAPTION]


>
[PRE(perl code)[
  my $url = Mojo::MySQL5::URL->new('mysql://sri:foo@server:3306/test?foo=bar');
]PRE]

]FIG]

[5] 他に [CODE(URI)@en[mysqlgis:]] があります。

* メモ

[1] [CITE@en[MySQL :: MySQL Internals Manual :: 14 MySQL Client/Server Protocol]] ([TIME[2014-10-12 05:41:20 +09:00]] 版) <http://dev.mysql.com/doc/internals/en/client-server-protocol.html>

[4] [CITE@ja[Dockerの公式MySQLイメージの使い方を徹底的に解説するよ · DQNEO起業日記]]
( ([TIME[2016-06-14 17:32:26 +09:00]]))
<http://dqn.sakusakutto.jp/2015/10/docker_mysqld_tutorial.html>

[6] ([TIME[2016-08-15 18:36:29 +09:00]])
<https://hub.docker.com/_/mysql/>

[FIG(quote)[
[FIGCAPTION[
[14] [CITE@en[MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.1 Driver/Datasource Class Names, URL Syntax and Configuration Properties for Connector/J]]
([TIME[2016-11-17 21:53:23 +09:00]])
<https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html>
]FIGCAPTION]

> The general format for a JDBC URL for connecting to a MySQL server is as follows, with items in square brackets ('''[''' ''']''') being optional:
> jdbc:mysql://'''['''host1''']''''''[''':port1''']''''''[''','''['''host2''']''''''[''':port2''']'''''']'''...'''['''/'''['''database''']'''''']''' »
> '''['''?propertyName1=propertyValue1'''['''&propertyName2=propertyValue2''']'''...''']'''
> Here is a simple example for a connection URL:
> jdbc:mysql://localhost:3306/sakila?profileSQL=true

]FIG]


[FIG(quote)[
[FIGCAPTION[
[15] [CITE@en[MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.1 Driver/Datasource Class Names, URL Syntax and Configuration Properties for Connector/J]]
([TIME[2016-11-17 21:54:08 +09:00]])
<https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html>
]FIGCAPTION]

> The following is an alternate format for JDBC URLs connecting to a MySQL server, which is mandatory for IPv6 connections, but can also be used with IPv4 (items in square brackets ('''[''' ''']''') are optional):
> jdbc:mysql://address=(key1=value)'''['''(key2=value)''']'''...'''[''',address=(key3=value)'''['''(key4=value)''']'''...''']'''...'''['''/'''['''database''']'''''']'''»
> '''['''?propertyName1=propertyValue1'''['''&propertyName2=propertyValue2''']'''...''']'''
> Supported key-value pairs include:
> (protocol=tcp), or (protocol=pipe) for named pipes on Windows.
> (path=path_to_pipe) for path of named pipes. Default value for the path is \\.\pipe\MySQL. Use the key-value pair to specify a custom named pipe.
> (host=hostname) for TCP connections.
> (port=port_number) for TCP connections.
> For example:
> jdbc:mysql://address=(protocol=tcp)(host=localhost)(port=3306)/db

]FIG]


[FIG(quote)[
[FIGCAPTION[
[16] [CITE@en[mysqljs/mysql: A pure node.js JavaScript Client implementing the MySql protocol.]]
([TIME[2016-11-17 21:56:26 +09:00]])
<https://github.com/mysqljs/mysql>
]FIGCAPTION]

> In addition to passing these options as an object, you can also use a url string. For example:
> var connection = mysql.createConnection('mysql://user:pass@host/db?debug=true&charset=BIG5_CHINESE_CI&timezone=-0700');
> Note: The query values are first attempted to be parsed as JSON, and if that fails assumed to be plaintext strings.

]FIG]


[FIG(quote)[
[FIGCAPTION[
[17] [CITE@en[mysql/ConnectionConfig.js at master · mysqljs/mysql]]
([TIME[2016-11-17 22:00:25 +09:00]])
<https://github.com/mysqljs/mysql/blob/master/lib/ConnectionConfig.js>
]FIGCAPTION]

> 
>   if (url.query) {
>     for (var key in url.query) {
>       var value = url.query'''['''key''']''';
>       try {
>         // Try to parse this as a JSON expression first
>         options'''['''key''']''' = JSON.parse(value);
>       } catch (err) {
>         // Otherwise assume it is a plain string
>         options'''['''key''']''' = value;
>       }
>     }
>   }

]FIG]


[FIG(quote)[
[FIGCAPTION[
[18] [CITE@en[Engine Configuration — SQLAlchemy 0.9 Documentation]]
([TIME[2016-11-05 07:07:26 +09:00]])
<http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html#database-urls>
]FIGCAPTION]

> # default
> engine = create_engine('mysql://scott:tiger@localhost/foo')
> # mysql-python
> engine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo')
> # MySQL-connector-python
> engine = create_engine('mysql+mysqlconnector://scott:tiger@localhost/foo')
> # OurSQL
> engine = create_engine('mysql+oursql://scott:tiger@localhost/foo')

]FIG]
