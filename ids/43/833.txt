[2] 
[DFN[Workaholicd]]
は
[[Webアプリケーション]]の[[非同期処理]]用[[デーモン]]です。


[1] [CITE@en[wakaba/workaholicd]], [TIME[2023-04-18T09:03:08.000Z]] <https://github.com/wakaba/workaholicd>


[3] 
名称はいわゆる[[ワーカー]]のもじりです。


[4] 
[[Workaholickd]] 
は、設計当時よく使われていた既存の[[ワーカー]]実装各種とは違って、
それ自体は[[アプリケーション]]依存のプログラムを実行しません。
かわりに、ワーカージョブとしてデータベースに挿入される形で指示された
[[HTTP]] 
[[要求]]を実行します。
アプリケーション依存のロジックは、
[[HTTP]] で呼び出される[[アプリケーションサーバー]]に実装する形となります。

[17] 
某社の巨大ゲームSNSの投稿記事タイムラインサーバーで利用されていました。


[5] 
従来[[ワーカー]]が同じプロセスで直接[[アプリケーション]]コードを呼び出す実装形態が一般的でしたが、

- [6] [[HTTPサーバー]]と[[ワーカー]]の2種類の異なる[[アプリケーション]]プログラムの実行環境を稼働させなければならない
-- [7] 開発においては、微妙に違う2つの異なる実行形態を意識しながら作り分けなければならない
-- [9] [[デプロイ]]においては、どちら (または両方) の更新が必要か把握し、どの順番で更新するか常に考えないといけない
--- [10] (今なら両方とも [[CD]] で自動更新させる、が正解かもしれないが、当時は手動でやっていたので念のため両方とも、は作業コストが案外大きかった)
-- [8] 運用においては、性質の違う2種類のサービスの稼働環境を用意しなければならない
--- [12] 片方にはインストールした依存モジュールがもう一方にはない、
のような事故もまま起きていた
- [11] 実際問題として、 [[HTTPサーバー]]はよく作り込まれているのに[[ワーカー]]はそこまででもないので、
すぐに動作が不安定になるとか、ログがちゃんと出てこなくて何が起こっているかよくわからないとか、
困っていた
- [14] その[[ワーカー]]デーモンも[[アプリケーション]]ごとに動作が微妙に違っていたりしていた
([[HTTP]] のような共通インターフェイスがないので)
-- [15] 
多数のアプリケーションを同時並行で開発・運用しているとその挙動の違いに戸惑ったりすることもしばしば

のような問題があって、[[アプリケーション]]の処理を[[HTTP要求]]が来たら
[[HTTP応答]]を返す、に一本化しようという発想で作ったものでした。


[13] [[Workaholicd]] では、従来[[ワーカー]]のジョブの1種類として実装されていたものは、
[[HTTPサーバー]]の内部処理用の1[[エンドポイント]]として実装することになります。

[16] 実運用では、短い処理が多い一般利用者向け[[エンドポイント]]の処理と長い処理が多い[[ワーカー]]は、
やっぱり別サーバー群に分けた方が性能や運用の都合上よかったりもするのですが、
それも[[逆プロキシ]]で制御するなり、そもそもDBに挿入する [[URL]] をワーカー用サーバーに切り替えたりできます。
肝心なのは、小規模サービスなら1つにまとめ、中規模・大規模に成長したら分けるような柔軟性があることと、
[[HTTP]] という共通インターフェイスですべての処理を書けるようになったというところです。



[18] 
ジョブ挿入も [[HTTP]] にすればすべての通信が [[HTTP]] になってアーキテクチャー的には美しいのですが、
[[データベース]]への [CODE[INSERT]] にしてあります。
これは、ジョブの挿入をより低コストで行えるのは [[HTTP]] より [[MySQL]]
プロトコルだろうということと、
[[アプリケーション]]の[[デプロイ]]などに伴う一時的な接続不可が生じうる 
[[HTTPサーバー]]よりも長時間安定稼働すると期待できる
[[MySQL]] サーバーの方が信頼できるだろうということが理由にあります。





