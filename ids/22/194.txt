[1] [[要素]]の作成は、
[FIG(list)[
- [CODE(DOMm)@en[[[createElement]]]]
- [CODE(DOMm)@en[[[createElementNS]]]]
- [[HTML構文解析器]]・[[XML構文解析器]]
- [[clone]]
]FIG]
... の4種類の方法があり、それぞれで作れる[[要素]]の範囲が少しずつ違っています。
また、[[HTML文書]]と[[XML文書]]でも、動作が異なります。

* 仕様書

[REFS[
- [7] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2014-07-20 22:41:10 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#create-an-element-for-the-token>
- [2] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2014-07-02 23:06:24 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#blocked-on-parser>
]REFS]

* 共通の動作

[28] どの作成方法によっても共通して実行される[[要素]]の種類に依存する操作がいくつかあります。

[FIG(list)[
- [CODE(HTMLe)@en[[[img]]]] - [[update the image data]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[template]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[a]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[area]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[canvas]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[object]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[marquee]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[video]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[audio]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[track]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[frame]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[input]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[option]]]] [SRC[[[HTML Standard]]]]
- [[フォーム被関連付け要素]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[details]]]] [SRC[[[HTML Standard]]]]
- [CODE(HTMLe)@en[[[dialog]]]] [SRC[[[HTML Standard]]]]
]FIG]

;; 多くは初期状態の設定に関するものですが、いくつかは何らかの動作を開始させるものです。

* 構文解析器固有の動作

[8] [[HTML構文解析器]]による[[要素の作成]]は、
[DFN[[RUBYB[[[字句から要素を作成]]]@en[create an element for a token]]]]する手順 [SRC[>>7]]
によって行われます。この手順は、[[字句化器]]から得られた[[字句]]、
または [[HTML構文解析器]]内部の処理によって生成された架空の[[字句]]に基づき、
[[要素]]を作成します。具体的には次のように処理されます [SRC[>>7]]。

[FIG(steps)[
= [9] 指定された[[名前空間]]に属し、[[字句]]の[[タグ名]]が[[局所名]]である[[要素]]を作成します
[SRC[>>7]]。
-- [10] なおこの[[タグ名]]は、[[構文解析器]]によって大文字・小文字や
[CODE(HTMLe)@en[[[image]]]] → [CODE(HTMLe)@en[[[img]]]] のような変換を経たものです。
-- [13] [[要素]]の[[節点文書]]は、想定親として与えられた[[節点]]の[[節点親]]とします [SRC[>>7]]。
= [11] [[字句]]の[[属性]]を[[要素]]に設定します [SRC[>>7]]。
-- [12] この時の[[属性]]の順序は、定義されていません。
普通は出現順、または出現の逆順に設定されます。
-- [15] [[属性名]]は、[[構文解析器]]によって大文字・小文字が変換されていたり、
[[名前空間URL]]が関連付けられたりすることがあります。
-- [14] [[XMLNS名前空間]]の [CODE(XMLa)@en[[[xmlns]]]] [[属性]]や
[CODE(XMLa)@en[[[xmlns:xlink]]]] [[属性]]が設定される場合、
その[[属性値]]が適切なものでなければ、[[構文解析エラー]]です [SRC[>>7]]。
= [16] [[再設定可能要素]]なら、[[再設定アルゴリズム]]を呼び出します [SRC[>>7]]。
= [17] 次の条件を満たすか調べます [SRC[>>7]]。
=- [18] [[フォーム被関連付け要素]]である
=- [19] [[[CODE(HTMLe)@en[form]]要素指示子]]が [[null]] ではない
=- [20] [[開いている要素のスタック]]に [CODE(HTMLe)@en[[[template]]]] [[要素]]がない
=- [21] 新しい[[要素]]が[[再関連付け可能要素]]でないか、
[CODE(HTMLa)@en[[[form]]]] [[属性]]を持たない
=- [22] [[[CODE(HTMLe)@en[form]]要素指示子]]の[[要素]]と指定された想定親が同じ[[家部分木]]にある
= [23] >>17 をすべて満たしているなら、
=- [24] 新しい[[要素]]に[[[CODE(HTMLe)@en[form]]要素指示子]]の[[要素]]を関連付けます [SRC[>>7]]。
=- [25] [[構文解析器]]が後ほどこの[[要素]]を挿入することによって行われる[[フォーム所有者の再設定]]アルゴリズムの実行を抑制します [SRC[>>7]]。
]FIG]

[26] 作成時に指定される「[RUBYB[想定親]@en[intended parent]]」は、
その後作成された[[要素]]が挿入されることになる[[節点]]です。ただし [[AAA]]
内で作成されるときは、[[親節点]]ではなく、祖先となることがあります。
この想定親は、[[節点文書]]の決定 (>>13) と[[フォーム所有者]]の処理 (>>22)
に使われます。通常はこれは構文解析の対象となる[[文書]]を[[根]]とする[[木]]に属する[[節点]]で、
目に見えた違いは生じませんが、 [CODE(HTMLe)@en[[[template]]]] [[要素]]の[[雛形内容]]に属することになる場合や、
[[スクリプト]]によって挿入先が本来の[[文書]]の[[木]]から除去されている場合には違いが生じます。

[27] [[構文解析器]]は、 [CODE(DOMm)@en[[[createElementNS]]]] だと[[例外]]が発生して作成できない[[名前]]を持つ[[要素]]や[[属性]]を作成することがあります。

[6] [[HTML構文解析器]]や[[XML構文解析器]]によって作成された [CODE(HTMLe)@en[[[script]]]]
[[要素]]は特別なフラグが設定されます。

[3] [[HTML構文解析器]]と[[XML構文解析器]]で[[媒体要素]]を作成した場合には、
[[blocked-on-parser]] フラグが真に設定されます [SRC[>>2]]。

;; このフラグは[[開いている要素のスタック]]から外された時に偽に設定されます。

[4] [[構文解析器]]による[[要素]]の作成の場合、[[属性]]の順序は仕様上未定義とされています。

;; 通常は[[属性]]は追加された順序が保持されます。

[5] [[フォーム所有者の再設定]]は、通常の[[挿入]]時とは若干異なる形で行われます [SRC[>>7]]。