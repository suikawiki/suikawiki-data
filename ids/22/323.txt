[19] This page describes how source positions of nodes, attributes, tokens, and errors
are stored and handled in [[manakai]]'s  DOM/HTML related [[Perl]] modules.

* DocumentIndex

[2] A DocumentIndex is a positive integer used to identify a source data stream.

[3] The value [CODE[-1]] represents that the source is an unknown data stream.

* CharacterIndex

[4] A CharacterIndex is a non-negative integer representing the location of a character in the given source character stream.  It is the offset from the beginning of the character string.

;; [5] It is unclear whether "an unknown character index" is necessary or not at the time of writing.  If necessary, the value [CODE[-1]] will be used.

* IndexedStringSegment

[6] An IndexedStringSegment is an array reference containing a character string,
a DocumentIndex, and a CharacterIndex.

[7] The pair of the DocumentIndex and the CharacterIndex identifies the source
location of the first character of the character string.

[8] An IndexedStringSegment represents the character string.

* IndexedString

[1] An IndexedString is an array reference containing zero or more IndexedStringSegment,
representing a string consist of concatenation of strings represented by
the IndexedStringSegments, in order.

* Web IDL Perl binding extensions

[9] If the type of an argument is IndexedStringSegment, run these steps:
[FIG(steps)[
= Let [VAR[value]] be the specified value.
= If [VAR[value]] is not an array reference, throw an [[TypeError]] and abort these steps.
= Let [VAR[new value]] be a new array reference.
= Push ToString([VAR[value]]->[0]) to [VAR[new value]].
= Push ToNumber([VAR[value]]->[1]) to [VAR[new value]].
= Push ToNumber([VAR[value]]->[2]) to [VAR[new value]].
= Return [VAR[new value]].
]FIG]

[10] If the type of an argument is IndexedString, run these steps:
[FIG(steps)[
= Let [VAR[value]] be the specified value.
= If [VAR[value]] is not an array reference, throw an [[TypeError]] and abort these steps.
= If there is an item in [VAR[value]] which is not an array reference, throw an [[TypeError]] and abort these steps.
= Let [VAR[new value]] be a new array reference.
= For each item in [VAR[value]], in order,
== Apply >>9 to the item and push the result into [VAR[new value]].
= Return [VAR[new value]].
]FIG]

* DOM [CODE(DOMi)@en[Node]] extensions

[11] Each [CODE(DOMi)@en[Node]] and [CODE(DOMi)@en[Attr]] has associated
source document index and source character index.  Initially, they are unset.

[FIG[
[PRE(IDL code)[
partial interface Node {
  IndexedStringSegment manakaiGetSourceLocation;
  void manakaiSetSourceLocation (IndexedStringSegment? new);
};
partial interface Attr {
  IndexedStringSegment manakaiGetSourceLocation;
  void manakaiSetSourceLocation (IndexedStringSegment? new);
};
]PRE]
]FIG]

[12] The [CODE(DOMm)@en[[[manakaiGetSourceLocation]]]] method [['''MUST''']]
run these steps:
[FIG(steps)[
= If the source document index of the [[context object]] is set,
== Return a new IndexedStringSegment whose character string is the empty string,
DocumentIndex is the source document index of the [[context object]], and
CharacterIndex is the source character index of the [[context object]].
= Otherwise, if the [[context object]] is a [CODE(DOMi)@en[[[CharacterData]]]]
or [CODE(DOMi)@en[[[Attr]]]] and its data or value consist of one or more
IndexedStringSegment, 
== Let [VAR[segment]] be the first IndexedStringSegment of the data or value
of the [[context object]].
== Return a new IndexedStringSegment whose character string is the empty string,
DocumentIndex is the DocumentIndex of [VAR[segment]],
and CharacterIndex is the CharacterIndex of [VAR[segment]].
= Otherwise, return a new IndexedStringSegment whose character string is the empty string,
DocumentIndex is -1, and CharacterIndex is 0.
]FIG]

[13] The [CODE(DOMm)@en[[[manakaiSetSourceLocation]]]] method [['''MUST''']]
run these steps:
[FIG(steps)[
= If the argument is [[null]], unset the source document index 
and the source character index of the [[context object]].
= Otherwise, set the source document index of the [[context object]]
to the DocumentIndex of the argument and the source character index of the 
[[context object]] to the CharacterIndex of the argument.
]FIG]

[14] The data of a [CODE(DOMi)@en[[[CharacterData]]]] node and
the value of an [CODE(DOMi)@en[[[Attr]]]] object are internally stored
as IndexedString (or equivalent).

[15] When they are to be modified by a method that does not aware of IndexedString,
it [['''MUST''']] be performed in a way that does not make DocumentIndex and CharactrIndex
contained in the IndexedString incorrect.  When it is not desired to preserve
DocumentIndex and CharacterIndex of affected IndexedStringSegments
or when a [CODE(DOMi)@en[[[DOMString]]]] is inserted, their DocumentIndex
and CharacterIndex [['''MUST''']] be set to -1 and 0, respectively.

[FIG[
[PRE(IDL code)[
partial interface Node {
  IndexedString? manakaiGetIndexedString ();
  void manakaiAppendIndexedString (IndexedString s);
};
partial interface Attr {
  IndexedString? manakaiGetIndexedString ();
  void manakaiAppendIndexedString (IndexedString s);
};
]PRE]
]FIG]

[16] The [CODE(DOMm)@en[[[manakaiGetIndexedString]]]] method
[['''MUST''']] return a new IndexedString which represents the same
string as the [CODE(DOMa)@en[[[textContent]]]] attribute
of the [[context object]].  DocumentIndex and CharacterIndex contained
in it [['''MUST''']] be set to appropriate values.

[17] The [CODE(DOMm)@en[[[manakaiAppendIndexedString]]]] method
[['''MUST''']] act as if the [CODE(DOMm)@en[[[manakaiAppendText]]]]
method is invoked with the character string of the IndexedString argument.
In addition, DocumentIndex and CharacterIndex contained in the IndexedString
argument [['''MUST''']] be used to update the data or value of relevant
objects.

[FIG[
[PRE(IDL code)[
partial interface Element {
  IndexedString? manakaiGetAttributeIndexedStringNS (DOMString? namespace, DOMString localName);
  void manakaiSetAttributeIndexedStringNS (DOMString? namespace, DOMString name, IndexedString value);
};
]PRE]
]FIG]

[20] The [CODE(DOMm)@en[[[manakaiGetAttributeIndexedStringNS]]]] method [['''MUST''']]
act as if the [CODE(DOMm)@en[[[getAttributeNS]]]] method is invoked, except
the method [['''MUST''']] return a new [CODE(DOMi)@en[[[IndexedString]]]]
instead of a [CODE(DOMi)@en[[[DOMString]]]].

[21] The [CODE(DOMm)@en[[[manakaiSetAttributeIndexedStringNS]]]] method [['''MUST''']]
act as if the [CODE(DOMm)@en[[[setAttributeNS]]]] method is invoked
with same [VAR[namespace]] and [VAR[name]] arguments,
and [VAR[value]] argument which is a [CODE(DOMi)@en[[[DOMString]]]] equivalent to
the character string of the IndexedString argument.
In addition, DocumentIndex and CharacterIndex contained in the IndexedString
argument [['''MUST''']] be used to set the value of the attribute.

;; [18] Exactly how DocumentIndex and CharacterIndex is handled by various
methods defined here or by DOM Standard is a quality of implementation issue.
