* DocumentIndex

[2] A DocumentIndex is a scalar value used to identify a source data stream.  It must be a true value.  A positive integer should be used.

[3] The value [CODE[-1]] represents that the source is an unknown data stream.

* CharacterIndex

[4] A CharacterIndex is a non-negative integer representing the location of a character in the given source character stream.  It is the offset from the beginning of the character string.

;; [5] It is unclear whether "an unknown character index" is necessary or not at the time of writing.  If necessary, the value [CODE[-1]] will be used.

* IndexedStringSegment

[6] An IndexedStringSegment is an array reference containing a character string,
a DocumentIndex, and a CharacterIndex.

[7] The pair of the DocumentIndex and the CharacterIndex identifies the source
location of the first character of the character string.

[8] An IndexedStringSegment represents the character string.

* IndexedString

[1] An IndexedString is an array reference containing zero or more IndexedStringSegment,
representing a string consist of concatenation of strings represented by
the IndexedStringSegments, in order.

* Web IDL Perl binding extensions

[9] If the type of an argument is IndexedStringSegment, run these steps:
[FIG(steps)[
= Let [VAR[value]] be the specified value.
= If [VAR[value]] is not an array reference, throw an [[TypeError]] and abort these steps.
= Let [VAR[new value]] be a new array reference.
= Push ToString([VAR[value]]->[0]) to [VAR[new value]].
= Push ToNumber([VAR[value]]->[1]) to [VAR[new value]].
= Push ToNumber([VAR[value]]->[2]) to [VAR[new value]].
= Return [VAR[new value]].
]FIG]

[10] If the type of an argument is IndexedString, run these steps:
[FIG(steps)[
= Let [VAR[value]] be the specified value.
= If [VAR[value]] is not an array reference, throw an [[TypeError]] and abort these steps.
= If there is an item in [VAR[value]] which is not an array reference, throw an [[TypeError]] and abort these steps.
= Let [VAR[new value]] be a new array reference.
= For each item in [VAR[value]], in order,
== Apply >>9 to the item and push the result into [VAR[new value]].
= Return [VAR[new value]].
]FIG]

* DOM [CODE(DOMi)@en[Node]] extensions

[FIG[
[PRE(IDL code)[
partial interface Node {
  IndexedStringSegment manakaiGetSourceLocation;
  void manakaiSetSourceLocation (IndexedStringSegment? new);
};
partial interface Attr {
  IndexedStringSegment manakaiGetSourceLocation;
  void manakaiSetSourceLocation (IndexedStringSegment? new);
};
]PRE]
]FIG]

[FIG[
[PRE(IDL code)[
partial interface ParentNode {
  IndexedString manakaiGetIndexedString ();
  void manakaiAppendIndexedString (IndexedString s);
};
partial interface CharacterData {
  IndexedString manakaiGetIndexedString ();
  void manakaiAppendIndexedString (IndexedString s);
};
partial interface Attr {
  IndexedString manakaiGetIndexedString ();
  void manakaiAppendIndexedString (IndexedString s);
};
]PRE]
]FIG]