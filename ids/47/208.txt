[1] 
[[Unicode]] の[[符号空間]]の利用についてです。

* 符号位置

[SEE[ [[符号位置]] ]]

* Unicode 符号化文字集合

[46] [[Unicode]] には色々な[[文字]]が収録されています。


[FIG(short list)[
- [[ASCII]]
- [[ISO/IEC 8859]]
- [[ラテン文字]]
- [[ギリシャ文字]]
- [[キリル文字]]
- [[ビルマ文字]]
- [[Unicodeジョージア文字]]
- [[Unicodeエチオピア文字]]
- [[仮名]]
- [[CJK統合漢字]]
- [[CJK互換漢字]]
- [[絵文字]]
- [[IDC]]
- [[タグ文字]]
- [[全角文字]]
- [[半角文字]]
- [[私用域]]
]FIG]

[57] 
[[Unicode]]
は世界中の文字を収録しているとよくいわれますが、
含まれないものも多いです。
[SEE[ [[外字]] ]]

[84] 
[CITE[[[Roadmaps to Unicode®]]]]
に将来構想があります。

** 字形

[SEE[ [[代表字形]] ]]




* Unicode非互換割当







[66] 
[[相互運用性]]の問題は個々にいろいろありますが、
[DFN[文字の割当のレベル][Unicode非互換割当]]でもいろいろあります。

[FIG(list)[ [67] [[Unicode]] [[符号化文字集合]]の[[相互運用性]]

- [[Unicode]] の[[非互換変更]]
-- [[Unicode 1.0]]
-- [[Korean mess]] ([ [CODE[U+3400]], [CODE[U+4DFF]] ] / [ [CODE[U+AC00]], [CODE[U+D7A3]] ])
-- [[phi mess]]
-- [[Unicodeビルマ文字]]
- [[私用]]が認められた事例
-- [[私用域]]
-- [[国旗絵文字]]の[[私用]]の[[国符号]]
-- [[Unicode言語タグ]]の[[私用]]の[[言語タグ]]
-- [[制御文字集合]]
-- [[非文字]]
- 暫定的な (勝手な) 割当がそのまま使われる事例
-- [CODE[V+]]
--- [[TCVN 5773]] ([ [CODE[U+A000]], [CODE[U+A6EE]] ])
--- [[字喃]] ([ [CODE[U+60000]], [CODE[U+63FFF]] ])
-- [[JIS X 0213:2000]] [[カッコ付きUCS]] 
([[非漢字]],
[ [CODE[U+AA00]], [CODE[U+ABFF]] ],
[[CJK互換漢字]])
-- [[住基ネット統一文字]] [CODE[J+]]
([[カッコ付きUCS]], [ [CODE[U+AC00]], [CODE[U+D7A3]] ])
-- [[未成IVC]]
-- [[注音IVS字型規格]]
-- [[Unicodeエチオピア文字]]
- [[GB 18030-2022]] 改正案 (第10面)
- [[DVB-HTML]]
- [[GSCII zone]]
- [[Unicode zone]] 追加文字
- [[Unicodeギリシャ文字]]
- [[Unicodeジョージア文字]]
- [[Zawgyi]]
- [[ISO/IEC 646の版]]
- [[フォント依存符号化]]

]FIG]

[68] 
初期 [[Unicode]] では
[[O-zone]] [ [CODE[U+A000]], [CODE[U+DFFF]] ]
が未使用のまま空いていたので、
都合よく使えそうな領域として狙われていたのですね。

[69] [CITE[00162 | ⿰亻庚 | WS2021v5.0]], [TIME[2023-07-13T07:51:18.000Z]] <https://hc.jsecs.org/irg/ws2021/app/?id=00162>

>This character is also needed as the personal name character in ROK, which is included in one modern internal system in ROK as U+A0100.

[70] >>69 「one modern internal system in ROK」というのが何かわからないが
(名前を出していないのは非公開だから?)、
[[GB 18030]] 以外にも空き領域を勝手に使っているシステムが動いてるということか。
同じサイトでこの文言で検索するといくつか出てくるが、他の例は U+F[VAR[hhhh]]。


-[77] [CITE@zh[⿰壬奐: zi.tools]], [TIME[2024-09-18T02:43:36.000Z]] <https://zi.tools/zi/%E2%BF%B0%E5%A3%AC%E5%A5%90?secondary=character_set&set=K%E6%B3%95%E9%99%A2>
- [90] 
[CITE@ja[whj.pdf]], [TIME[2023-02-03T23:33:45.000Z]], [TIME[2025-08-05T05:16:21.028Z]] <https://babelstone.co.uk/CJK/whj.pdf#page=427>

[78] >>77 に示された

>Character code system used by the Supreme Court of South Korea (as of 2023-02-01) 韓國最高法院漢字系統用字

は A0000 - A02DA, F0000 - F34BD の文字を示しています。 [[Unicode符号位置]]だとすると後者は 
[[PUA]] ですが、前者は勝手割当でしょうか?

- [79] [CITE@zh[⿰亻庚: zi.tools]], [TIME[2024-09-18T03:28:40.000Z]] <https://zi.tools/zi/%E2%BF%B0%E4%BA%BB%E5%BA%9A?secondary=character_set&set=K%E6%B3%95%E9%99%A2>

[80] そしてその >>78 に含まれる文字の1つ、 A0100 [SRC[>>79]] がまさに >>69 ですね。



[71] GJKV 全部勝手に使ってて草、T もそういうのやってるんか?


* 制御文字

[11] 
[[Unicode]] はそれ自身が規定しない [[C0]] や [[C1]] の[[制御文字]]を使えると定めています。
[SEE[ [[制御文字]] ]]

[12] 
[[Unicode]] では [[ISO/IEC 2022]] [[エスケープシーケンス]]や
[[ISO/IEC 6429]] [[制御機能]]も使えます。
ただし [[Unicode]] ではこれらは[[符号]]構造に組み込まれたものではなく
[[Unicode文字]]の列に過ぎないという解釈を採用しています。
[SEE[ [[制御文字]] ]]

* サロゲート

[10] [[サロゲート符号位置]]は [[UTF-16]] の[[符号単位]]としてのみ使うことができ、
[[Unicode文字列]]には出現することはない、というのが原則ですが、実際にはしばしば紛れ込みます。
[SEE[ [[サロゲート]], [[WTF-16]], [[DOMString]] ]]


* [CC[U+10FFFF]] の先

[2] 
[ [CC[U-00110000]], [CC[U-7FFFFFF]] ]
はかつて [[ISO/IEC 10646]]
で普通に存在していましたが、
[[Unicode]] が [CC[U+10FFFF]] までとしたために、
[[ISO/IEC 10646]] からもこの領域は削除されてしまいました。

[4] 
[[UCS-4]], [[UTF-1]], [[UTF-8]] (当初仕様) などで[[符号化]]できます。

[3] 
削除以前からの実装などはこの領域に対応していることがあります。

[5] 
当時はこの領域の中に[[私用]]の領域がありました。それを使っていた実装もありました。
[SEE[ [[PUA]] ]]

[7] 
[CITE[Emacs]] は [CC[U-003FFFFF]] まで対応しています。 
[SEE[ [[utf-8-emacs]] ]]


[8] 
[[文字列]]の内部の処理の一時的な[[符号]]や[[文字列]]に混在する[[文字]]以外の[[オブジェクト]]の位置の表現などで、
[[Unicode文字列]]の入出力に絶対に出現することがないこの領域が使われる場合があります。

;; [9] [[非文字]]と似ていますが、[[非文字]]はこの用途には少なすぎることも多いです。

* [CC[U-7FFFFFFF]] の先

[15] 
[[UCS-4]] は32ビット符号ですが、最上位1ビットを内部処理等のために使用しないことにしています。
[SEE[ [[mohta bit]] ]]

[16] 
[[UTF-8]] は符号構造上 [CC[U-7FFFFFFF]] よりも大きな値を表せるように自然に拡張できます。

[6] 
[CITE[Perl]] の [CODE[utf8][use utf8]] は上限が[[アーキテクチャー]]依存で、
[CC[U-FFFFFFFF]] より大きな値も扱えます。
[SEE[ [[use utf8]] ]]


* 独自式サロゲート

[13] 
[[Shift-Mojikyo]] は [[PUA]] の[[符号位置]]を2つ組合せて文字の領域を創出しています。


* GB 18030

[14] 
[[GB 18030]] には符号構造上存在するものの [[Unicode符号位置]]との対応関係が定められていない領域があります。


* メモ
