[6] 
[[文字列]]をある[[文字コード]]から他の[[文字コード]]に[[変換]]することを、
一般には[DFN[文字コード変換]]といいます。

* 呼称

[16] 
[[文字コード]]を変更する操作 ([[演算]]) は一般に[[変換]], [[convert]] のような語で表すことが多いようです。

[17] 
[[関数名]]等としては from や to と[[文字コード]]の名称をつなげるなどして組み立てることが多く、
変換操作の動詞を含まないこともしばしばあります。

** 符号化と復号

[13] 
[[バイト列]]を[[文字列]]データ型の値に変換することを[[復号]]、
[[文字列]]データ型の値から[[バイト列]]に変換することを[[符号化]]といいます。

;;
[14] 
[[文字列]]に限らず、[[プログラミング言語]]等の処理用の内部データと保存用の外部データの変換を一般に[[符号化]]、[[復号]]のようにいいます。

[15] 
現代の[[プログラミング言語]]等では内部データを [[Unicode文字列]]とすることが多いので、
[[Unicode]] への変換を[[復号]]、[[Unicode]] からの変換を[[符号化]]のように言っているかのような使われ方をされがちですが、
厳密な語法ではありません。

** 転符号化

[4] [[文字列]]をある[[文字コード]]から他の[[文字コード]]に[[変換]]することを、
[DFN[[RUBYB[転符号化]@en[transcode]]]]といいます。
[[転符号化]]する[[ソフトウェア部品]]を、
[DFN[[RUBYB[転符号化器]@en[transcoder]]]]といいます。[SRC[>>1]]

[5] あまりメジャーな語ではありません。


[FIG(quote)[
[FIGCAPTION[
[1] 
[CITE@en[[[RFC 3536]] - Terminology Used in Internationalization in the IETF]] ([TIME[2011-01-29 02:14:52 +09:00]] 版) <http://tools.ietf.org/html/rfc3536#page-6>
]FIGCAPTION]

>       Transcoding is the process of converting text data from one
character encoding form to another.  Transcoders work only at the
level of character encoding and do not parse the text.  Note:
Transcoding may involve one-to-one, many-to-one, one-to-many or
many-to-many mappings.  Because some legacy mappings are glyphic,
they may not only be many-to-many, but also discontinuous: thus
XYZ may map to yxz.  <CHARMOD>
>      In this definition, "many-to-one" means a sequence of characters
mapped to a single character.  The "many" does not mean
alternative characters that map to the single character.
]FIG]



[2] [CITE@en[RFC 6365 - Terminology Used in Internationalization in the IETF]]
([TIME[2011-09-10 19:11:51 +09:00]] 版)
<http://tools.ietf.org/html/rfc6365#page-7>

[3] [CITE@en[Character Model for the World Wide Web 1.0: Fundamentals]]
( ([TIME[2005-02-15 14:24:00 +09:00]] 版))
<http://www.w3.org/TR/charmod/#sec-Transcoding>

* 変換のインターフェイス

[19] 
[[文字コードの変換]]の操作は次のような形態のいずれかで実装されていることが多いようです。

- [18] 
ある[[文字コード]]の[[バイト列]]から他の[[文字コード]]の[[バイト列]]への変換操作
- [22] 
ある[[文字コード]]の[[バイト列]]から内部処理用の[[文字列]]データ型の値への変換操作
- [23] 
内部処理用の[[文字列]]データ型の値からある[[文字コード]]の[[バイト列]]への変換操作
- [28] 
[[バイト列]]から [[Unicode文字列]]に変換された状態のある[[文字コード]]の[[文字列]]からある[[文字コード]]の[[文字列]]への変換操作
- [24] 
ある[[文書形式]]のある[[文字コード]]の[[文書]]からある[[文書形式]]のある[[文字コード]]の[[文書]]への変換操作
-- [25] [[HTML]], [[RTF]], [CITE[Microsoft Word]] など
- [26] 
ある[[データ構造]]の[[オブジェクト]]におけるある[[文字コード]]からある[[文字コード]]への変換操作
-- [27] [[HTML]] ([[DOM]]), [CITE[Microsoft Word]] (選択範囲), [CITE[LibreOffice]] 
(選択範囲) など

[29] 
>>18 >>22 >>23 は[[プラットフォーム]]の [[API]] として提供されていることもあれば、
[[アプリケーション]]等が独自に実装する場合も多いです。

[32] 
>>18 >>24 は独立した[[プログラム]]となっている場合が多いです。
>>18 はこの場合[[テキストファイル]]の変換操作と言えます。

[33] 
>>28 は [[Webページ]]で [CODE[textarea]] 
等を使った変換ツールとして提供されているものです。
それと同等の[[ライブラリー]]として提供されている場合もあります。

[34] 
>>24 >>26 は [[Webブラウザー]]や[[ワープロ]]等のソフトウェアの内部で動作する[[ブラウザー拡張]]や[[マクロ]]のような形になっているものです。


[41] 
入出力の[[文字コード]]は、多数に対応しているものもあれば、
特定のものに限られている実装も多いです。
ただし、
多数に対応しているものでも、古今東西の膨大な数の[[文字コード]]技術の中の限られた一部のものにしか対応できていません。

[43] 
多くの実装は対象となる地域や言語に関係する[[文字コード]]群にしか対応していません。
[[20世紀]]には当該システムで採用している[[文字コード]]を中心に、
それとその他の[[文字コード]]との変換という形態が多く見られました。
[[21世紀]]になると [[Unicode]] を中心に、
それとその他の[[文字コード]]との変換という形態が一般化しました。

[42] 
実変換処理の定義を外部ファイルに分離するなど拡張可能な設計になっているものもありますが、
そうでない固定のものもかなり多いです。

[46] 
狭義の[[文字コード]]の変換の他に、
入出力として
[[escape]]
や[[内容転送符号化]]や[[翻字]]・[[転写]]の手法などを選択できたり、
それらの混在に対応していたり、
破損したデータの[[発見的]]手法による修復に対応していたりするものもあります。

[45] 
変換不能な場合にエラーとするか、 [[escape]] 等に置き換えるか、
[[代替文字]]に置き換えるか、[[置換文字]]に置き換えるかなどを動作オプションとして指定できるものも多いです。

[44] 
[[GUI]] や[[ワープロ]]ソフトウェアの[[マクロ]]のような形態のものは、
動作オプションやエラーの処理などを通知したり、確認したり、選択させたりしているものもあります。


[47] 
入力となる[[文字コード]]の明示的な選択を省略し、
[[文字コードの判定]]に拠るものもあります。


[48] 
[[HTML]] や [[RTF]] や[[ワープロ]]ソフトウェアの独自形式のファイルなど、
単純[[バイト列]]や[[テキストファイル]]としての変換処理ができず、
[[ファイル形式]]と[[フォント名]]に応じた処理が必要となる場合があります。


* 変換の構成要素

** 1対1対応


[50] 
[[一対一対応]]が存在する場合、入力を機械的に変換して出力するだけですから、
変換器は非常に単純になります。

[51] 
すべての[[符号]]が[[一対一対応]]可能な[[文字コード]]体系間の変換は、
宣言的な変換表を用意して外部化することで、容易に対応体系を増やすことができます。

[49] 
[[平成時代]]初期くらいまでに欧米企業が進出していた地域の標準的な[[文字コード]]の[[文字]]のほとんどは、
[[Unicode]] と[[一対一対応]]が存在します。
また、同じ地域の同じ言語を対象とする他の[[文字コード]]とも[[1対1対応]]が存在する[[文字]]が多いです。


** 1文字対多文字対応

[52] 
ある[[文字コード]]で1文字として扱えるものが、他の文字コードでは複数の文字の列になることがあります。

[EG[

[53] 
例えば地域の[[文字コード]]ではアクセント付きで1つの[[文字]]で表せたものが、
[[Unicode]] では[[基底文字]]と[[結合文字]]の組合せとして表現するほかないことがあります。

]EG]

[54] 
[[一対一対応]]限定の実装より少し面倒になりますが、容易に実装できます。

[59] 
[[西暦1990年代]]初頭頃に欧米企業が実装していなかった[[文字コード]]にある[[文字]]は、
それが他の [[Unicode文字]]の組合せで表現できると判断された場合 [[Unicode]]
に追加されないことがほとんどなので、
それらから [[Unicode]] への変換でこのパターンとなります。


** 多文字対1文字対応 / 多文字対多文字対応

[55] 
ある[[文字コード]]で複数の文字の列で表されるものが、他の[[文字コード]]では1文字となることがあります。

[56] 
複数の文字のそれぞれが変換先の[[文字コード]]にも存在するなら、
[[1対1対応]]とみなして単純に変換することも可能です。

[57] 
複数の文字のいずれかが変換先の[[文字コード]]に存在しないなら、
文字列を1文字に変換する必要が出てきます。

[EG[

[58] 例えば[[基底文字]]と[[結合文字]]の組合せが入力されたとき、
[[結合文字]]に相当する[[文字]]が変換先にないなら、
組合せと同等の[[文字]]に置き換えないといけません。

]EG]

[61] 
入力があってもすぐに変換先を確定できず、数文字読み続けて適切な出力文字を選ぶ必要が出てきますから、
変換処理は複雑になってきます。


[60] 
1文字対多文字対応の変換の逆方向でこのパターンとなります。

-*-*-

[62] 
ある[[文字コード]]で複数の文字の列で表されるものが、
他の[[文字コード]]では複数の文字の列で表され、
両者の構成する文字それぞれに直接的な対応関係がないことがあります。

[63] 
[[インド系文字の文字コード]]などと [[Unicode]] との変換のように、
なにを[[符号化文字]]の単位とするかの考え方に大きな違いがある場合に、
この種の変換が頻出することになります。

[64] 
変換処理は相当に複雑になります。

-*-*-

[98] 
ある[[文字コード]]の文字(列)から他の[[文字コード]]の文字(列)への変換が、
入力[[文字コード]]の文字(列)とその前後の文字(列)の条件という形で記述・実装されることがあります。

[99] 
単純な多文字からの変換に置換できる場合も多いですが、
それでは変換表が膨大な大きさになってしまうとき、
[[先読み]]・[[後読み]]のような手法で実装されることになります。

[100] 
条件部は固定長ではない文字列になることもあります。

[101] 
条件部は文字列先頭、文字列末尾、[[語境界]]、[[空白]]といった形で記述・実装されることも多いです。
こうしたものは[[語頭形]]や[[語末形]]のような文字列中の文字の位置によって変換を制御する必要がある場合に使われがちです。

[102] 
いずれの場合も変換処理は相当に複雑になります。

[103] 
意図を正確に記述できているのか疑問が残る実装も散見されます。

[104] 
>>101 のように本来同等の条件を意図していたと思われるものが実装ごとに違った形で記述されていることもよくあります。
同じような条件を移植していても、[[プログラミング言語]]等で挙動が微妙に異なると思われるケースもあります。

[105] 
実装の正しさの評価や他の実装との比較が困難になりますから、
可能であれば避けるべきなのでしょうが、避けることが困難と思われるケースも多いです。

** 1対多対応

[65] 
入力[[文字コード]]の1つの[[文字]]に相当する出力[[文字コード]]の文字(列)に複数の候補がある場合があります。

[66] 
出力の文字(列)が互いに同等なら、どれを選ぶかは実装者の任意の選択となります。
[[ライブラリー]]の類なら[[応用]]に動作オプションとして指定させる場合もあります。
[[プラットフォーム]]等で慣習が成立している場合もあります。
慣習とならず[[相互運用性]]の問題が起こることもあります。

[EG[
[67] [[Unicode]] への変換で、
[[基底文字]]と[[結合文字]]の組合せを出力するか、
[[合成済み文字]]を出力するかの選択肢が存在することがあります。
一般的には[[合成済み文字]]が適切と考えられていますし、
1対1対応の変換にできるので実装も単純化できます。
]EG]

[EG[
[68] 
[[Unicode]] に似た字形の[[記号]]がいくつもあり、
いずれを選択するか実装によって違いがあって[[相互運用性]]の問題となっている場合があります。
]EG]

[70] 
出力の文字(列)が同等とはいえないなら、どれを選ぶかは文脈その他によって決めることになります。

[71] 
前後の文字列との組合せで決められるなら多文字対多文字対応のような形で変換できますが、
多くの場合は機械的に選択することが困難です。

[72] 
機械的に決定できなければ、不適切な場合があることを承知の上でどれかを選ぶか、
[[GUI]] による選択などの手段で個々に決めるなどの方法になります。


[73] 
多くの場合はデータの劣化を恐れずどれか1つを選んで機械的に対応付ける方法を採っているようです。

;; [74] 
そうした関係性によって旧来の[[文字コード]]における[[文字]]の弁別や選定の慣習が
[[Unicode]] にも持ち込まれている事例が多々あると思われます。
元々旧来の[[文字コード]]は当該地域や言語の[[文字]]の選択の慣習を反映して開発されているでしょうから、
[[Unicode]] がそれと異なる基準で[[文字]]を収録していたとしても、
[[Unicode]] の基準が現地の運用に耐えられるとは限らないわけです。


[69] 
実装ではなく [CITE[Wikipedia]] の記事の対応表などでは、
複数の対応先の候補を併記する形を採っていることがあります。

** 多対1対応

[75] 
入力[[文字コード]]の複数の[[文字]]に相当する出力[[文字コード]]の文字が1つとなる場合があります。
いくつかに分類できます。

- [76] 
入力の各[[文字]]が同等である、つまり[[重複符号化]]の場合
- [77] 
入力の各[[文字]]が似た意味を持ち、入力の[[文字コード]]では用法を細かく区別するが、
出力の[[文字コード]]では区別しない場合
- [78] 
入力の[[文字]]で出力の[[文字コード]]では表現できないものが、
表現できる似た[[文字]]に置き換えられる場合

[79] >>76 >>77 は実装上は大きな問題はなく、単純に変換すれば済みます。

;; [80] ただし、[[往復変換]]はできなくなることに注意が必要です。

[81] 
>>78 は [[Unicode]] から従来の[[文字コード]]への変換で実装されていることがあります。
[[best fit]] などと呼ばれることがあります。
変換で失われる情報をできるだけ少なくするための配慮として実装されたものでしょうが、
情報の損失がわかりにくくなるという問題があります。

[EG[

[84] 
例えば [[Unicode]] から[[シフトJIS]]に変換する [[Win32 API]] で [[best fit]]
を有効にすると、[[アクセント付きラテン文字]]がただの[[ラテン文字]]に変換されます。

]EG]

[82] 
また、 [[best fit]] 写像によって[[セキュリティー]]の問題が生じる事案も報告されています。
[SEE[ [[best fit]] ]]

[83] [[best fit]] は提供する場合でも動作オプションとするべきでしょう。


** 多段変換

[85] 
[[インド系文字の文字コード]]と [[Unicode]] との変換など[[符号化文字]]の考え方が大きく異なる[[文字コード]]間の変換は、
1パスの単純な変換ではなく、複数回の変形処理の組合せとして実装されていることがよくあります。


[86] 
多段変換とすることで記述や実装が単純化することも多いですが、
どんな入力がどんな出力になるかの見通しは悪いことが多いです。


** 正規化処理

[87] 
変換処理本体の単純化のために別段で[[正規化]]の処理が適用されることがあります。

[88] 
入力が [[Unicode]] のとき、 [[NFC]] や [[NFD]] を適用することで、
変換処理本体が[[基底文字]]と[[結合文字]]の組合せか[[合成済み文字]]の一方だけを記述することで済ませたり、
[[結合文字]]の順序が入れ替わっている場合への対処を省略したりすることができます。


[89] 
入力が[[翻字]]系の[[符号化]]のときで[[大文字・小文字不区別]]のとき、
一括してどちらかに統一してから変換処理本体を実行する場合があります。

[90] 
入力の[[文字コード]]の構造上の理由から変換処理本体が[[基底文字]]と[[結合文字]]の組合せを出力したり、
[[合成済み文字]]を出力したりすることがあり、これを好ましくないと考える場合、
変換処理本体の後に [[NFC]] や [[NFD]] を適用する場合があります。

[91] 
こうした処理は変換処理本体の実装コストを削減できますが、
思わぬ副作用を生むこともあり、注意が必要です。

[EG[
[92] 
[[大文字と小文字]]の変換は[[プログラミング言語]]によって実装が違いますし、
[[ロケール]]によって違った変換となる場合もあります。
変換器の実装者がそうした詳細まで細かく注意して設計していないと思われる事例が散見されます。
]EG]

** 順序入れ替え処理

[93] 
[[インド系文字の文字コード]]と [[Unicode]] の変換など、
[[符号化文字]]の考え方が大きく異なる[[文字コード]]の変換では、
入出力で[[文字]]の配列順序を変更しなければならないことがよくあります。

[94] 
入力または出力の数文字の部分文字列が特定のパターンに一致するかを判定し、
一致するなら順序を入れ替えるような処理を複数種類適用することになります。

[95] 
部分文字列の組み合わせ数が膨大過ぎて、
多文字対多文字対応に展開するのが事実上不可能な場合が多いです。

[96] 
実装によって、
出力[[文字コード]]への変換後に[[正規表現]]の置換を組合せたり、
[[正規表現]]の置換の組合せの後に出力[[文字コード]]へ変換したり、
出力[[文字コード]]へ変換しながら順序を入れ替える[[状態機械]]を実装したり、
内部処理用の中間表現を導入したりと、
様々な実装戦略が採られています。

[97] 
どの方法も相当複雑になりますし、概略同じ手法でも置換パターンの作り方次第で見かけ上の処理は大きく変わってしまいます。
従ってソースコードを読んで挙動を理解するのは至難の業ですし、
諸実装の特徴を比較することも困難です。


** アルゴリズム的変換

[109] 
[[文字コードの変換]]の処理で変換表の類によらない計算のみで実現できる操作はいろいろあります。
例えば、

- [110] [[ISO/IEC 2022]] における [[GL]] と [[GR]] の変換
- [115] [[ISO/IEC 2022]] における [[CR]] と [[[CN[ESC]] [VAR[Fe]]]] の変換
- [111] [[JIS X 0208]] に基づく[[シフトJIS]], [[日本語EUC]], いわゆる[[JISコード]]の変換
- [112] [[UTF-8]], [[UTF-16]], [[UTF-7]], [[SCSU]], [[BOCU]], [[UTF-1]] などの変換
- [116] 情報交換用符号を符号空間に配置した各種[[内部符号]]との変換
- [117] [[同型符号化]]・[[同型復号]]
- [113] [[Punycode]] などの変換
- [114] [[escape]] との変換

-*-*-

[106] 
[[平成時代]]初期ごろまでの[[日本]]の[[文字コードの変換]]は、
[[JIS X 0208]] に基づく[[シフトJIS]]と[[日本語EUC]]といわゆる[[JISコード]]の変換が中心で、
簡単な計算で相互に変換できました。

[107] 
その後 [[Unicode]] の普及期には、計算で変換できず数千行の変換表が必要となる
[[Unicode]] と従来[[文字コード]]との変換は敬遠されがちで、 [[Unicode]]
移行の障害となっていました。

[108] 
[[Unicode]] が一般化した現在では、計算機性能の向上もあってこうした問題が意識されることはなくなりました。
しかし[[シフトJIS]]と[[日本語EUC]]といわゆる[[JISコード]]の変換も [[Unicode]] を介して行われることが増え、
[[Unicode]] との対応関係がそれぞれ微妙に異なるために従来なら無劣化で行えた変換でデータ損失が生じるような事態も生じています。

** 不適切入力への対処

[118] 
入力となる[[文字コード]]の[[文字列]]であるはずのものには、
不適切なデータが含まれていることがあります。

[119] 
不適切なデータとは具体的には

- [120] 入力[[文字コード]]の仕様上出現しないはずの[[バイト列]]
- [121] 入力[[文字コード]]の構造上は存在するものの、[[符号化文字]]の割当がない空き領域に相当するもの
-- [122] そのうち、新しい版など関連する他の[[文字コード]]では割当があるもの

といったものが考えられます。

[123] 
[[文字コード]]関連規格は歴史的にこうした不正な入力への対処を明確に規定して来ませんでした。
こうしたものに遭遇したときの仕様上の「正しい」挙動が存在しないことが多いです。

[124] 
近年の [CITE[Encoding Standard]] はあらゆる入力に対する挙動を定めていますが、
例外的な存在です。

[125] 
不適切なデータに対する処理は実装によって様々です。

- [126] 動作オプションを指定できるもの
- [127] [[置換文字]]等に置き換えるもの
- [128] [[escape]] 類に置き換えるもの
- [134] 関連する他の[[文字コード]]とみなして処理するもの (>>122)
- [129] エラーとして停止するもの
- [130] 入力をそのまま出力するもの
- [131] 何も出力しないもの
- [132] 異常停止するもの、異常動作するもの

[133] 
このうち >>130 >>131 >>132 は[[セキュリティー]]上の問題を起こしかねないですし、
>>129 も[[ライブラリー]]等で[[応用]]の開発者が意図していない場合には好ましからざる挙動となることがあります。
不適切なデータに対する挙動はあまり意識されないことが多いようで、
このような問題を孕んだ実装は意外と多いです。

** 出力不可入力への対処

[135] 
入力[[文字コード]]の[[文字列]]には、出力[[文字コード]]で表せない[[文字]]を含むことがあります。
その場合の処理は実装によって様々です。

- [136] 動作オプションを指定できるもの
- [138] [[置換文字]]等に置き換えるもの
- [137] [[escape]] 類に置き換えるもの
- [143] 似た文字に置き換えるもの (>>81)
- [139] エラーとして停止するもの
- [140] 入力をそのまま出力するもの
- [141] 何も出力しないもの
- [142] 異常停止するもの、異常動作するもの

[144] >>140 >>141 >>142 には問題があり、 >>139 >>143 
も開発者が意図せぬ場合には問題となり得ます。
(>>133, >>81)


* 変換用の写像表


[35] 
[CITE@en[CodepageEncoder/data/encodings at main · NielsLeenheer/CodepageEncoder · GitHub]], [TIME[2025-05-23T15:52:48.000Z]] <https://github.com/NielsLeenheer/CodepageEncoder/tree/main/data/encodings>


-[36] [CITE@en[icu/icu4c/source/data/mappings at main · unicode-org/icu · GitHub]], [TIME[2025-05-29T12:29:56.000Z]] <https://github.com/unicode-org/icu/tree/main/icu4c/source/data/mappings>
-[37] [CITE@en[icu-data/charset at main · unicode-org/icu-data · GitHub]], [TIME[2025-05-31T11:52:53.000Z]] <https://github.com/unicode-org/icu-data/tree/main/charset>
- [38] [CITE@ja[ICU - International Components for Unicode - Character Set Mapping Tables]], [TIME[2025-05-31T11:53:44.000Z]] <https://icu.unicode.org/charts/charset>


[39] [CITE[Evertype: Unicode Mapping Tables]], [TIME[2006-01-01T14:10:51.000Z]], [TIME[2025-06-06T14:32:00.732Z]] <https://www.evertype.com/standards/mappings/>


[40] 
[CITE@en-US[sourceware.org Git - glibc.git/tree - iconvdata/]], [TIME[2025-06-25T13:02:45.000Z]] <https://sourceware.org/git/?p=glibc.git;a=tree;f=iconvdata;h=494f8c50b9c9662ae85bf56184db943b0526e12c;hb=b2a8d19f4adc8ca22394b02c144b4bc867adc804>


[10] [CITE@ja[xorg / font / encodings · GitLab]], [TIME[2025-09-12T10:22:04.000Z]] <https://gitlab.freedesktop.org/xorg/font/encodings>

-[11] [CITE@en[xterm-snapshots/charsets.dat at master · xterm-x11/xterm-snapshots · GitHub]], [TIME[2025-09-12T10:30:35.000Z]] <https://github.com/xterm-x11/xterm-snapshots/blob/master/charsets.dat>
--[12] [CITE@en[xterm-snapshots/charsets.h at master · xterm-x11/xterm-snapshots · GitHub]], [TIME[2025-09-12T10:31:19.000Z]] <https://github.com/xterm-x11/xterm-snapshots/blob/master/charsets.h>


** Unicode Consortium の変換表

[8] 当初は [[FTP]] 配布 [SEE[ [[Unicode Consortium]] ]]

[20] [CITE[General Questions about Chararcter Mappings]], [TIME[2025-06-30T04:33:44.000Z]], [TIME[1997-01-05T19:42:04.261Z]] <https://web.archive.org/web/19970105193228/http://stonehand.com:80/unicode/faq/mappings/general.html>

[21] 
[CITE[Questions about Mapping Tables]], [TIME[2025-06-30T04:34:20.000Z]], [TIME[1997-01-05T19:42:29.061Z]] <https://web.archive.org/web/19970105193219/http://stonehand.com:80/unicode/faq/mappings/tables.html>

** [CITE[Encoding Standard]] の変換表

[SEE[ [[Encoding Standard]] ]]

** [CITE[TECkit]] の [CODE[.map]] ファイル

[SEE[ [CODE[.map]] ]]

* 実装

[9] [CITE[[[TECkit]]]]

* 関連

[7] [[変形]], [[符号化]]、[[復号]], [[文字コード判定]],
[[文字コードの修復]]

* メモ



- [30] [CITE[telecode(5)]], [TIME[1998-10-14T23:29:58.000Z]], [TIME[2022-05-03T03:38:56.992Z]] <http://www2.phys.canterbury.ac.nz/dept/docs/manuals/unix/DEC_4.0e_Docs/HTML/MAN/MAN5/0330____.HTM>
- [31] [CITE[Microsoft Word - Chinawrd.doc - CHINPRN.PDF]], [TIME[1999-06-21T12:00:00.000Z]], [TIME[2022-05-03T06:55:10.367Z]] <http://www2.phys.canterbury.ac.nz/dept/docs/manuals/unix/DEC_5.0a_Docs/ACRO_SUP/CHINPRN.PDF#page=33>

