new SAMI.Parser.LR1.ParsingTable ([
  new SAMI.Parser.LR1.ParsingTableRow ({
    "content-start": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 3),
    "content": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 1)
  }).setIndex (0), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "$start", 1)
  }).setIndex (1), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    
  }).setIndex (2), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 4),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 5),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 6),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 7),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 8),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "content", 1)
  }).setIndex (3), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 36),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 37),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 7),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 8),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "content", 2)
  }).setIndex (4), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (5), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (6), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 38),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 39)
  }).setIndex (7), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1)
  }).setIndex (8), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 1)
  }).setIndex (9), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1)
  }).setIndex (10), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1)
  }).setIndex (11), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1)
  }).setIndex (12), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directive", 1)
  }).setIndex (13), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 40),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (14), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "get", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "get", 1)
  }).setIndex (15), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "filters": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 43),
    "conditions": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 44),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 45),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 46),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 1)
  }).setIndex (16), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 47),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 48),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 49)
  }).setIndex (17), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "set", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "set", 1)
  }).setIndex (18), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 50),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1)
  }).setIndex (19), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "block-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 51),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 52),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 53),
    "path": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 54)
  }).setIndex (20), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1)
  }).setIndex (21), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (22), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 55),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 59),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 60),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (23), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1)
  }).setIndex (24), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "if-unless", 1)
  }).setIndex (25), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 69),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 70),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 71),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 72),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 73),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 74),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1)
  }).setIndex (26), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1)
  }).setIndex (27), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 78),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 79),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 80),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 81),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1)
  }).setIndex (28), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1)
  }).setIndex (29), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 82),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (30), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1)
  }).setIndex (31), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1)
  }).setIndex (32), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 83),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 87),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 88),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (33), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ".": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 97),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (34), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (35), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (36), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (37), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "EOF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2)
  }).setIndex (38), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 98),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2)
  }).setIndex (39), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "get", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "get", 2)
  }).setIndex (40), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1)
  }).setIndex (41), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1)
  }).setIndex (42), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "conditions": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 99),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 2)
  }).setIndex (43), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 2)
  }).setIndex (44), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 100),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (45), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 101),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (46), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "set", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "set", 2)
  }).setIndex (47), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 50)
  }).setIndex (48), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1)
  }).setIndex (49), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 102),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (50), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 103)
  }).setIndex (51), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "block-name", 1)
  }).setIndex (52), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "block-name", 1)
  }).setIndex (53), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "block-name", 1)
  }).setIndex (54), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 104),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 105),
    "optional-content": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 106),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 107),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 108)
  }).setIndex (55), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1)
  }).setIndex (56), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1)
  }).setIndex (57), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (58), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 109),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 110),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 111),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 112),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 113),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 114),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1)
  }).setIndex (59), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1)
  }).setIndex (60), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 118),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 119),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 120),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 121),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1)
  }).setIndex (61), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1)
  }).setIndex (62), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 122),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (63), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1)
  }).setIndex (64), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1)
  }).setIndex (65), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 123),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 87),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 88),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (66), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ".": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 124),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (67), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (68), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 125),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (69), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 126),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (70), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 127),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (71), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 128),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (72), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 129),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (73), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 130),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (74), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 131),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (75), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 132),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (76), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 133),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (77), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 134),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (78), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 135),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (79), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 136),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (80), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 41),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 137),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (81), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2)
  }).setIndex (82), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 138),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 139),
    ")": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 140)
  }).setIndex (83), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 1)
  }).setIndex (84), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "variable-name", 1)
  }).setIndex (85), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (86), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 141),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 142),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 143),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 144),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 145),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 146),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 1)
  }).setIndex (87), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 1)
  }).setIndex (88), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 150),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 151),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 152),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 153),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 1)
  }).setIndex (89), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 1)
  }).setIndex (90), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 154),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (91), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 1)
  }).setIndex (92), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 1)
  }).setIndex (93), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 155),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 87),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 88),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (94), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ".": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 156),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (95), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "scalar-term", 1)
  }).setIndex (96), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 157),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 42)
  }).setIndex (97), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 3)
  }).setIndex (98), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "righthand", 3)
  }).setIndex (99), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 69),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 70),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 71),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 72),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 73),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 74),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (100), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 69),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 70),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 71),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 72),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 73),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 74),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (101), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "set-expression", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "set-expression", 3)
  }).setIndex (102), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 158),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 159),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 160),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "END": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 163),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (103), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 164),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 165),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 166),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 167),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 168),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1)
  }).setIndex (104), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 169),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1)
  }).setIndex (105), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 170),
    "else": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 171),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 172),
    "elsif": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 173),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 174)
  }).setIndex (106), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 175),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 60),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (107), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 176),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 60),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (108), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 177),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (109), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 178),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (110), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 179),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (111), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 180),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (112), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 181),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (113), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 182),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (114), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 183),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (115), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 184),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (116), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 185),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (117), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 186),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (118), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 187),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (119), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 188),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (120), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 189),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (121), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2)
  }).setIndex (122), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 138),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 139),
    ")": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 190)
  }).setIndex (123), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 191),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57)
  }).setIndex (124), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (125), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (126), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (127), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (128), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (129), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 75),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 76),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 77),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (130), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 78),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 79),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 80),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 81),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (131), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 78),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 79),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 80),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 81),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (132), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 78),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 79),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 80),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 81),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (133), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (134), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (135), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (136), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (137), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 192),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 88),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (138), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 193),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 88),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (139), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3)
  }).setIndex (140), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 194),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (141), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 195),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (142), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 196),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (143), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 197),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (144), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 198),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (145), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 199),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 89),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (146), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 200),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (147), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 201),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (148), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 202),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 90),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (149), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 203),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (150), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 204),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (151), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 205),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (152), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 84),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 86),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 206),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 91),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 92),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 93),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 94),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 95),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 96)
  }).setIndex (153), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression4", 2)
  }).setIndex (154), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 138),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 139),
    ")": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 207)
  }).setIndex (155), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 208),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 85)
  }).setIndex (156), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3)
  }).setIndex (157), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 209),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 210),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "END": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 211),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35)
  }).setIndex (158), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (159), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (160), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 212),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 39)
  }).setIndex (161), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1)
  }).setIndex (162), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "block", 4),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "block", 4)
  }).setIndex (163), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 213),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 214),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 167),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 168),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 2),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 2),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 2)
  }).setIndex (164), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (165), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 1)
  }).setIndex (166), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 215),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 39)
  }).setIndex (167), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 1)
  }).setIndex (168), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 216),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 217)
  }).setIndex (169), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "if", 4),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "if", 4)
  }).setIndex (170), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 218)
  }).setIndex (171), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 219),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 220),
    "optional-content": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 221)
  }).setIndex (172), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "else", 1)
  }).setIndex (173), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 222),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 56),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 57),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 58),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 59),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 60),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 61),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 62),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 63),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 64),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 65),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 66),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 67),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 68)
  }).setIndex (174), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 109),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 110),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 111),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 112),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 113),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 114),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (175), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 109),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 110),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 111),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 112),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 113),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 114),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (176), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (177), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (178), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (179), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (180), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (181), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 115),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 116),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 117),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (182), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 118),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 119),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 120),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 121),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (183), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 118),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 119),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 120),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 121),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (184), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 118),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 119),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 120),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 121),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (185), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (186), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (187), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (188), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (189), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3)
  }).setIndex (190), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3)
  }).setIndex (191), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 141),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 142),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 143),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 144),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 145),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 146),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (192), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "==": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 141),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 142),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 143),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 144),
    "<": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 145),
    ">": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 146),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression", 3)
  }).setIndex (193), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (194), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (195), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (196), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (197), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (198), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "+": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 147),
    "-": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 148),
    "_": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 149),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression1", 3)
  }).setIndex (199), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 150),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 151),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 152),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 153),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (200), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 150),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 151),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 152),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 153),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (201), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "*": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 150),
    "/": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 151),
    "div": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 152),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 153),
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression2", 3)
  }).setIndex (202), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (203), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (204), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (205), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "expression3", 3)
  }).setIndex (206), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "term", 3)
  }).setIndex (207), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    ")": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "||": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "==": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "!=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">=": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "<": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ">": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "+": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "-": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "_": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "*": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "/": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "div": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    "mod": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3),
    ".": new SAMI.Parser.LR1.ParsingTableCell (true, "lvalue", 3)
  }).setIndex (208), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (209), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (210), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "block", 5),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "block", 5)
  }).setIndex (211), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2)
  }).setIndex (212), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (213), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "template", 2)
  }).setIndex (214), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "not": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "(": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "string": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "number": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2),
    "text": new SAMI.Parser.LR1.ParsingTableCell (true, "tag", 2)
  }).setIndex (215), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 223),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 165),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 166),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 167),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 168),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3)
  }).setIndex (216), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 98),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2)
  }).setIndex (217), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "if", 5),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "if", 5)
  }).setIndex (218), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 224),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 159),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 160),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1)
  }).setIndex (219), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 225),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 1)
  }).setIndex (220), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "else", 2)
  }).setIndex (221), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 104),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 105),
    "optional-content": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 226),
    "&&": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 107),
    "||": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 108)
  }).setIndex (222), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 213),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 214),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 167),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 168),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 4),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 4),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 4)
  }).setIndex (223), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 209),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 210),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 2)
  }).setIndex (224), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 227),
    ";": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 228)
  }).setIndex (225), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "else": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 229),
    "ELSE": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 172),
    "elsif": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 173),
    "ELSIF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 174),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "elsif", 3)
  }).setIndex (226), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "template": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 230),
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 159),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 160),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3)
  }).setIndex (227), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 98),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 3),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2),
    ";": new SAMI.Parser.LR1.ParsingTableCell (true, "directives", 2)
  }).setIndex (228), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "elsif", 4)
  }).setIndex (229), 
  new SAMI.Parser.LR1.ParsingTableRow ({
    "tag": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 209),
    "text": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 210),
    "directives": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 161),
    "eod": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 162),
    "directive": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 9),
    "get": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 10),
    "set": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 11),
    "block": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 12),
    "if": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 13),
    "GET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 14),
    "righthand": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 15),
    "expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 16),
    "SET": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 17),
    "set-expression": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 18),
    "variable-name": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 19),
    "BLOCK": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 20),
    "identifier": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 21),
    "number": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 22),
    "if-unless": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 23),
    "IF": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 24),
    "UNLESS": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 25),
    "expression1": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 26),
    "expression2": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 27),
    "expression3": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 28),
    "expression4": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 29),
    "not": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 30),
    "term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 31),
    "scalar-term": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 32),
    "(": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 33),
    "lvalue": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 34),
    "string": new SAMI.Parser.LR1.ParsingTableCell (false, undefined, undefined, 35),
    "END": new SAMI.Parser.LR1.ParsingTableCell (true, "optional-content", 4)
  }).setIndex (230)
])