* 内部状態

[34] [[クライアント]]は、次の内部状態を持ちます。
[FIG(list members)[
:[VAR[種別]]:[[クライアント]]。
:[VAR[接続]]:[[下位層の接続]]の端点。
:[VAR[状態]]:後述の状態遷移における状態のいずれか。初期値は「初期」。
:[VAR[要求の送信状態]]: 未送信、送信中、送信済みのいずれか。初期値は未送信。
:[VAR[要求締め切り]]フラグ:初期値は未設定です。
:[VAR[要求]]:[[要求]]か null。初期値は null です。
:[VAR[応答]]:[[応答]]か null。初期値は null です。
:[VAR[一時バッファー]]:バイト列。初期値は空。
:[VAR[最後のヘッダー]]:ヘッダーか null
:[VAR[残り長さ]]:[[非負整数]]か null か「chunked」かエラー。
:[VAR[応答受信済み]]:[[boolean]]。初期値は[[偽]]。
:[VAR[要求の転送済]]:[[非負整数]]。初期値は 0。
:[VAR[要求の処理完了]]:[[Promise]] か null。初期値は null。
:[VAR[WebSocket接続の状態]]:[CODE[CONNECTING]]、[CODE[OPEN]]、
[CODE[CLOSING]]、[CODE[CLOSED]]、null のいずれか。初期値は null。
:[VAR[フレーム]]:[[WebSocketフレーム]]または null。初期値は null。
:[VAR[先頭フレーム]]:[[WebSocketフレーム]]または null。初期値は null。
:[VAR[終了]]:終了または null。初期値は null。
]FIG]

[62] [[要求]]は、次のようなデータ構造です。
[FIG(list members)[
[FIGCAPTION[
[[要求]]
]FIGCAPTION]
:[[要求メソッド]]:バイト列。
:[[要求対象]]:バイト列。
:[[プロトコルの版]]:[CODE[1.1]]。
:[[ヘッダーリスト]]:0個以上の[[ヘッダー]]のリスト。
:[[本体]]:バイト列。初期値は空t
]FIG]

[63] [[応答]]は、次のようなデータ構造です。
[FIG(list members)[
[FIGCAPTION[
[[応答]]
]FIGCAPTION]
:[[プロトコルの版]]:[CODE[0.9]], [CODE[1.0]], [CODE[1.1]] のいずれか。初期値は [CODE[0.9]]。
:[[状態符号]]:[[非負整数]]。初期値は [CODE[200]]。
:[[理由句]]:[[バイト列]]。初期値は [CODE[OK]]。
:[[ヘッダーリスト]]:0個以上の[[ヘッダー]]のリスト。初期値は空。
:[[本体]]:[[バイト列]]。初期値は空。
:[[不完全メッセージ]]フラグ:初期値は未設定。
:[CODE(HTTP)[[[1xx]]]] [[応答]]群:0個以上の[[応答]]のリスト。初期値は空。
]FIG]

[252] [[WebSocketフレーム]]は、次のようなデータ構造です。
[FIG(list members)[
[FIGCAPTION[
[[WebSocketフレーム]]
]FIGCAPTION]
:[[FIN]]:0 か 1。
:[[RSV1]]:0 か 1。
:[[RSV2]]:0 か 1。
:[[RSV3]]:0 か 1。
:[[opcode]]:0-15 の[[整数]]。
:[[mask]]:0 か 1。
:長さ:[[非負整数]]。
:マスクキー:4バイトの[[バイト列]]または null。
:データ:[[バイト列]]または[[文字列]]。
]FIG]

[38] 終了は、次のようなデータ構造です。
[FIG(list members)[
:リセット:[[真]]か[[偽]]。既定値は[[偽]]。
:失敗:[[真]]か[[偽]]。
:[[WebSocket]] cleanly:[[真]]か[[偽]]か null。既定値は null。
:[[WebSocket]] [[状態符号]]:[[整数]]か null。既定値は null。
:[[WebSocket]] 理由:[[文字列]]か null。既定値は null。
:[131] 再試行可能性:[[真]]か[[偽]]。既定値は[[偽]]。
]FIG]

;; [257] 再試行可能性が[[真]]であれば、何も考えずに同じ[[要求]]を他の[[接続]]で再送信して構いません。

* アプリケーションからの指示

[49] [[接続]]に対して[[アプリケーション]]は、
[FIG(list)[
- [[要求]]の送信 (>>42)
- [[WebSocket]] メッセージ送信 (>>259)
- ping 送信 (>>260)
- [[トンネル]]への[[バイト]]送信 (>>107)
- [[接続]]の正常終了 (>>50)
- 接続の中断 (>>52)
]FIG]
... を指示できます。

[42] 要求の送信は、次のようにします。この処理は、[[要求]]である[VAR[送信する要求]]と、
[VAR[WebSocket]] フラグを入力として受け取ります。
[FIG(steps)[
= [90] 前提条件として、[VAR[送信する要求]]は次の条件を満たす必要があります。
[FIG(list)[
- [93] [[要求メソッド]]が空ではない。
- [94] [[要求メソッド]]に 0x09, 0x0A, 0x0D, 0x20 が含まれない。
- [95] [[要求対象]]が空ではない。
- [96] [[要求対象]]に 0x0A, 0x0D が含まれない。
- [97] [[要求対象]]の先頭と末尾が 0x09, 0x20 でない。
- [99] すべての[[ヘッダー]]について、
-- [100] 名前に 0x3A が含まれない。
-- [101] 名前が空ではない。
-- [103] 名前に 0x0A, 0x0D が含まれない。
-- [102] 名前の先頭と末尾が 0x09, 0x20 でない。
-- [104] 値に 0x0A, 0x0D が含まれない。
-- [105] 値の先頭と末尾が 0x09, 0x20 でない。
- [91] [VAR[WebSocket]] フラグが設定されていれば、
-- [92] [[本体]]が空である
- [261] [[本体]]が空の場合、
-- [262] [CODE(HTTP)@en[[[Content-Length:]]]] [[ヘッダー]]がないか、値が [CODE[0]] である
- [267] [[本体]]が空でない場合、
-- [263] [CODE(HTTP)@en[[[Content-Length:]]]] [[ヘッダー]]があって、値が[[本体]]のバイト数である
]FIG]
= [74] [VAR[要求締め切り]]フラグが設定されているなら、
== [75] エラーを返し、ここで停止します。
= [58] [VAR[状態]]が「初期」か「要求待ち」でなければ、
== [35] エラーを返し、ここで停止します。
= [61] [VAR[要求]]を、[VAR[送信する要求]]に設定します。
= [64] [VAR[応答]]を、新しい[[応答]]に設定します。
= [60] [VAR[一時バッファー]]を、空バイト列に設定します。
= [59] [VAR[状態]]を、「応答前」に設定します。
= [77] [VAR[要求]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
== [78] [VAR[要求締め切り]]フラグを設定します。
= [98] [VAR[WebSocket]] フラグが設定されていれば、
== [258] [VAR[WebSocket接続の状態]]を、 [CODE[[[CONNECTING]]]] に設定します。
== [265] 16バイトの無作為に決定したバイト列を [[RFC 4648]] [[Base64]]
[[符号化]]したものを[VAR[要求]]の [CODE(HTTP)@en[[[Sec-WebSocket-Key:]]]]
[[ヘッダー]]として追加します。
== [266] [VAR[要求]]に [CODE(HTTP)@en[[[Sec-WebSocket-Version:]]]]
[[ヘッダー]]を値 [CODE[[[13]]]] で追加します。
== [264] 
@@ 拡張
= [57] [VAR[要求の送信状態]]を、送信中に設定します。
= [45] [VAR[要求の処理完了]]を、新しい [[Promise]] に設定します。
= [48] [VAR[要求の処理完了]]を返します。
= [46] [[並列に]]、[VAR[要求]]の送信を行います。
]FIG]

[25] [VAR[要求]]の送信は、次のようにします。
[FIG(steps)[
= [47] [[HTTP/1.1]] に従い[VAR[要求]]の[[ヘッダー部]] (空行の [CODE[CRLF]] まで)
を表す[[バイト列]]の各[[バイト]]を順に、
== [VAR[接続]]で[[バイト]]の送信を指示します。
== エラーが返されたら、ここで停止します。
= [1] [VAR[要求]]の[[メッセージ本体]]が存在する場合、各[[バイト]]を順に、
== [VAR[接続]]で[[バイト]]の送信を指示します。
== エラーが返されたら、ここで停止します。
== [VAR[要求の転送済]]を、1だけ大きな値に設定します。
== [VAR[要求]]について要求の本体の一部の送信を通知して構いません。
= [VAR[要求の送信状態]]を、送信済みに設定します。
= [VAR[要求]]について要求の送信完了を通知します。
= [VAR[状態]]が「要求送信中」なら、
== 次の要求に進みます。
]FIG]

[259] [[WebSocket]] メッセージ送信は、次のようにします。
この処理は、テキスト (文字列) またはバイナリー (バイト列) を引数として受け取ります。
[FIG(steps)[
= [271] [VAR[WebSocket接続の状態]]が [CODE[[[OPEN]]]] でなければ、
エラーを返して停止します。
= [268] [[WebSocketフレーム]]を作成します。
[FIG(list members)[
:[[FIN]]:1
:[[RSV1]]:0
:[[RSV2]]:0
:[[RSV3]]:0
:[[opcode]]:指定されたデータがテキストなら 1、バイナリーなら 2
:[[mask]]:1
:[[長さ]]:データのバイト数
:[[マスクキー]]:無作為に決定した4バイトのバイト列
:データ:指定されたデータがテキストなら [[utf-8符号化]]して得たバイト列、
バイナリーなら指定されたデータ
]FIG]
= [269] 作成した [[WebSocketフレーム]]のデータの各[[バイト]]について、
先頭から [VAR[i]] バイト目 (先頭が0バイト) であれば、
[[マスクキー]]の [VAR[i]] [[mod]] 4 バイト目 (先頭が0バイト)
と [[XOR]] した結果に差し替えます。
= [270] [VAR[接続]]で [[WebSocketフレーム]]のバイト列を送信することとします。
]FIG]

[260] ping 送信は、次のようにします。
この処理は、バイト列と、[VAR[応答]]フラグを受け取ります。
[FIG(steps)[
= [272] [VAR[WebSocket接続の状態]]が [CODE[[[OPEN]]]] でなければ、
エラーを返して停止します。
= [273] [[WebSocketフレーム]]を作成します。
[FIG(list members)[
:[[FIN]]:1
:[[RSV1]]:0
:[[RSV2]]:0
:[[RSV3]]:0
:[[opcode]]:[VAR[応答]]フラグが設定されていれば 10、されていなければ 9
:[[mask]]:1
:[[長さ]]:データのバイト数
:[[マスクキー]]:無作為に決定した4バイトのバイト列
:データ:指定されたバイト列
]FIG]
= [274] 作成した [[WebSocketフレーム]]のデータの各[[バイト]]について、
先頭から [VAR[i]] バイト目 (先頭が0バイト) であれば、
[[マスクキー]]の [VAR[i]] [[mod]] 4 バイト目 (先頭が0バイト)
と [[XOR]] した結果に差し替えます。
= [275] [VAR[接続]]で [[WebSocketフレーム]]のバイト列を送信することとします。
]FIG]

[107] [[トンネル]]への[[バイト]]の送信は、次のようにします。
[FIG(steps)[
= [108] [VAR[状態]]が「トンネル」以外なら、
== エラーを返し、ここで停止します。
= [109] [VAR[接続]]で指定された[[バイト]]の送信を指示します。
= [110] エラーが返されたら、ここで停止します。
]FIG]

[50] [[接続]]の正常終了は、次のようにします。
[FIG(steps)[
= [72] [VAR[要求締め切り]]フラグを設定します。
= [66] [VAR[状態]]が「初期」か「要求待ち」か「トンネル」なら、
== [55] [VAR[接続]]で正常終了の送信を指示します。
]FIG]

@@ WS Close

;; [73] これにより[[要求]]の送信側は閉じられますが、[[応答]]の受信はまだ続くかもしれません。

[52] [[接続]]の中断は、次のようにします。
[FIG(steps)[
= [44] [VAR[要求の締め切り]]フラグを設定します。
= [39] [VAR[要求の送信状態]]を送信済みに設定します。
= [65] 次の要求に進みます。
= [51] [VAR[接続]]を破棄します。
]FIG]

* アプリケーションへの通知

[11] [[状態機械]]は、[[要求]]について次の通知を行います。
それぞれ、次に示す[[引数]] (あれば) 付きで通知されます。
[FIG(list)[
- 要求の本体の一部の送信の通知
[FIG(list members)[
:[[転送済]]:[VAR[要求の転送済]]。
]FIG]
- 要求の送信完了の通知
- 応答のヘッダー受信完了の通知
[FIG(list members)[
:[[応答]]:[VAR[応答]]。
:[[WebSocket接続確立]]:[[真]]か[[偽]]。既定値は[[偽]]。
]FIG]
- 応答の本体の一部の受信の通知
[FIG(list members)[
:[[応答]]:[VAR[応答]]。
]FIG]
- 完了の通知
[FIG(list members)[
:[[応答]]:[VAR[応答]]。
:[[終了]]:終了。
]FIG]
- [249] WebSocketメッセージの受信の通知
[FIG(list members)[
:データ:[[文字列]]または[[バイト列]]。
]FIG]
- [250] ping の通知
[FIG(list members)[
:返答:[[真]]か[[偽]]。既定値は[[偽]]。
:データ:[[バイト列]]。既定値は空。
]FIG]
]FIG]

[15] 各[[要求]]について、2種類の送信の通知と3種類の受信の通知をそれぞれこの順序で行うか、
その途中で失敗の通知で中断するかのいずれかです。
送信の通知と受信の通知はどちらもそれぞれ進行し、相互の順序は不定です。
送信の完了は通知されないことがあります (失敗の場合)。
本体の一部の受信の通知は、0回以上の任意の回数行います。
本体の一部の受信の通知のかわりに 0回以上の
WebSocketメッセージの受信の通知や ping の通知がある場合があります。

[FIG(flow)[
:initial:要求の送信
:v:
:>>:3
:->:reqbody
:->:reqeof
:->:headers
:->:rerror
:->:reset

:reqbody:本体一部送信
:->:reqbody
:->:reqeof
:v:
:>>:2
:->:rerror
:->:reset

:reqeof:送信完了
:v:
:>>:1

:headers:ヘッダー受信
:v:
:>>:3
:->:body
:->:complete
:->:reset

:body:受信
:v:
:>>:4
:->:complete
:->:body
:->:reset

:complete:完了 (成功)
:v:
:>>:3

:reset:完了 (失敗)
:>>:5

]FIG]

;; [253] 図の「受信」は、本体の一部の受信、WebSocketメッセージの受信、
ping の受信を表します。

* 状態機械

[68] [[クライアント]]は[[状態機械]]を持ちます。

[53] [VAR[接続]]の[[バイト]]受信の通知があると、次のようにします。
ただし、[VAR[状態]]が「初期」なら、[VAR[状態]]が変化するまで待ってから実行します。
[FIG(steps)[
= [14] [[緊急データ]]フラグが設定されていなければ、
== [37] [VAR[状態]]により決まる処理を行います。
]FIG]

[40] 正常終了の受信の通知があると、次のようにします。
[FIG(steps)[
= [54] [VAR[状態]]により決まる正常終了処理を行います。
= [224] [VAR[接続]]を閉じることにします。
]FIG]

[13] 異常終了の通知があると、次のようにします。
[FIG(steps)[
= リセットフラグが設定されていれば、
== [VAR[要求]]が null でなければ、
=== [VAR[要求]]について完了を通知します。終了は、リセットと失敗を[[真]]に設定します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= [41] それ以外なら、
== [VAR[状態]]により決まる異常終了処理を行います。
= [225] [VAR[接続]]を破棄します。
]FIG]

** 「初期」状態

[69] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

** 「要求待ち」状態

[2] バイトを受信したら、何もせずに無視します。

[33] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

** 「要求送信中」状態

[56] バイトを受信したら、何もせずに無視します。

[67] 正常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= 次の要求に進みます。
]FIG]

[76] 異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

** 「応答前」状態

[24] バイトを受信したら、
[FIG(steps)[
= [130] [VAR[応答受信済み]]を、[[真]]に設定します。
= [26] 受信したバイトを、[VAR[一時バッファー]]の末尾に連結します。
= [27] [VAR[一時バッファー]]の末尾4バイトが [CODE(HTTP)[HTTP]]
([[ASCII大文字・小文字不区別]]) なら、
== [VAR[応答]]の[[プロトコルの版]]を 1.0 に設定します。
== [VAR[状態]]を、「応答ヘッダー」に設定します。
== [VAR[一時バッファー]]を、空に設定します。
= [28] それ以外で、[VAR[一時バッファー]]の長さが8バイトなら、
== [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[PUT]]]] なら、
=== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[要求の送信状態]]を送信済みに設定します。
=== 次の要求に進みます。
== それ以外なら、
=== [VAR[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
=== [VAR[残り長さ]]を、 null に設定します。
=== [VAR[状態]]を、「応答本体」に設定します。
]FIG]

[8] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [132] [VAR[一時バッファー]]が[[空文字列]]なら、
== [133] [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
[VAR[応答受信済み]]が[[真]]なら、再試行可能性を[[真]]とします。
== [134] [VAR[要求締め切り]]フラグを設定します。
== [135] [VAR[要求の送信状態]]を送信済みに設定します。
== [136] 次の要求に進みます。
= [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[PUT]]]] なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= それ以外なら、
== [VAR[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
== 異常終了なら、[VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求]]について[VAR[応答]]のヘッダー受信完了を通知します。
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
== [VAR[要求締め切り]]フラグを設定します。
== 異常終了なら、[VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
]FIG]

** 「応答ヘッダー」状態

[36] バイトを受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]の末尾に受信したバイトを追加します。
= [VAR[一時バッファー]]の末尾が 0x0A 0x0A または 0x0A 0x0D 0x0A なら、
== [137] ヘッダーの処理 (>>138) を行います。
= それ以外で、 [VAR[一時バッファー]]の長さが 2[SUP[18]]‐1 なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
]FIG]

[12] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [139] ヘッダーの処理 (>>138) を行います。
= [141] [VAR[残り長さ]]が[[正]]で[VAR[応答]]の[[プロトコルの版]]が [CODE[1.1]] なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
= [142] それ以外なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

[138] ヘッダーの処理は、次のようにします。
[FIG(steps)[
= [140] [VAR[一時バッファー]]をヘッダー群として構文解析します。
= [113] [VAR[応答]]の[[プロトコルの版]]が [CODE[1.1]] で、
[CODE(HTTP)@en[[[Transfer-Encoding:]]]] [[ヘッダー]]があって、
[CODE(HTTP)@en[[[chunked]]]] ([[ASCII大文字・小文字不区別]]) が[[転送符号化]]として指定されていれば、
== [114] [VAR[残り長さ]]を、「chunked」に設定します。
= [115] それ以外なら、
== [32] [VAR[残り長さ]]を、[VAR[応答]]の [CODE(HTTP)@en[[[Content-Length:]]]] [[ヘッダー]]の処理の結果とします。
= [VAR[残り長さ]]がエラーなら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= それ以外で、[VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)[[[CONNECT]]]] で、
[VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[200]]]] なら、
== [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[状態]]を、「トンネル」に設定します。
= [143] それ以外で、[VAR[WebSocket接続の状態]]が [CODE[CONNECTING]] で、
[VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[101]]]] なら、
== [144] 
[FIG(list)[
- [VAR[応答]]に [CODE(HTTP)@en[[[Upgrade:]]]] [[ヘッダー]]が無いか、 
[CODE(HTTP)@en[[[websocket]]]] ([[ASCII大文字・小文字不区別]]) が含まれていない
- [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]が無いか、 
[CODE(HTTP)@en[[[Upgrade]]]] ([[ASCII大文字・小文字不区別]]) が含まれていない
- [VAR[応答]]に [CODE(HTTP)@en[[[Sec-WebSocket-Accept:]]]] [[ヘッダー]]が無いか、 
値が[VAR[要求]]の [CODE(HTTP)@en[[[Sec-WebSocket-Key:]]]] の値に 
[CODE(HTTP)[[[258EAFA5-E914-47DA-95CA-C5AB0DC85B11]]]] を連結した値の 
[[SHA-1]] を [[Base64]] [[符号化]]したものでない
- [VAR[応答]]の [CODE(HTTP)@en[[[Sec-WebSocket-Extensions:]]]] 
[[ヘッダー]]が存在する
- [VAR[応答]]の [CODE(HTTP)@en[[[Sec-WebSocket-Protocol:]]]] [[ヘッダー]]が[VAR[要求]]の
[CODE(HTTP)@en[[[Sec-WebSocket-Protocol:]]]] [[ヘッダー]]の値と一致しない
(一方が存在しない場合は、他方が存在している)
]FIG]
... のいずれかであれば、
=== [145] [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
=== [248] [VAR[終了]]を、次の通り設定します。
[FIG(list members)[
:失敗:[[真]]。
:cleanly:[[偽]]。
:[[状態符号]]:[CODE[[[1006]]]]。
:理由:[[空文字列]]。
]FIG]
=== [244] [VAR[要求]]について[[応答]]の受信完了を通知します。[VAR[終了]]を引き渡します。
=== [245] [VAR[要求締め切り]]フラグを設定します。
=== [246] [VAR[要求の送信状態]]を送信済みに設定します。
=== [247] 次の要求に進みます。
== [146] それ以外なら、
=== [VAR[WebSocket接続の状態]]を、 [CODE[OPEN]] に設定します。
=== [256] [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
[[WebSocket接続確立]]を[[真]]にします。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[状態]]を、「WebSocketフレーム前」に設定します。
=== [147] [VAR[一時バッファー]]を、空に設定します。
= [106] それ以外で、 [VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[1xx]]]] なら、
== [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)[[[CONNECT]]]] か、
[VAR[WebSocket接続の状態]]が [CODE[CONNECTING]] なら、
=== [255] [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
=== [254] [VAR[要求]]について[[応答]]の受信完了を通知します。[VAR[終了]]が非 null
なら引き渡します。 null なら、終了の失敗は[[偽]]とします。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[要求の送信状態]]を送信済みに設定します。
=== 次の要求に進みます。
== それ以外なら、
=== [VAR[応答]]の [CODE(HTTP)[[[1xx]]]] [[応答]]群の末尾に新しい[[応答]]を追加します。
[FIG(list members)[
[FIGCAPTION[
[[応答]]
]FIGCAPTION]
:[[プロトコルの版]]:[VAR[応答]]の[[プロトコルの版]]
:[[状態符号]]:[VAR[応答]]の[[状態符号]]
:[[理由句]]:[VAR[応答]]の[[理由句]]
:[[ヘッダーリスト]]:[VAR[応答]]の[[ヘッダーリスト]]
]FIG]
=== [VAR[応答]]の[[プロトコルの版]]、[[状態符号]]、[[理由句]]、[[ヘッダーリスト]]を初期値に設定します。
=== [VAR[状態]]を、「応答前」に設定します。
=== [VAR[一時バッファー]]を、空バイト列に設定します。
= それ以外なら、
== [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
==
[FIG(list)[
- [VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[204]]]], [CODE(HTTP)[[[205]]]],
[CODE(HTTP)[[[304]]]] のいずれかの場合か、
- [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[HEAD]]]] の場合
]FIG]
... のいずれかの場合、
=== [VAR[残り長さ]]を、0に設定します。
== [87] [VAR[残り長さ]]が 0 なら、
=== [89] [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
=== [79] [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
==== [80] [VAR[要求締め切り]]フラグを設定します。
=== [81] それ以外で、[VAR[応答]]の[[プロトコルの版]]が [CODE[1.0]] で、
[CODE(HTTP)@en[[[keep-alive]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定された
[CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]がなければ、
==== [82] [VAR[要求締め切り]]フラグを設定します。
=== 次の要求に進みます。
== [116] それ以外で、 [VAR[残り長さ]]が「chunked」なら、
=== [117] [VAR[状態]]を、「塊前」に設定します。
== [88] それ以外なら、
=== [16] [VAR[状態]]を、「応答本体」に設定します。
]FIG]

** 「応答本体」状態

[6] バイトを受信したら、
[FIG(steps)[
= [VAR[応答]]の本体の末尾に、受信したバイトを追加します。
= 実装の判断で、[VAR[要求]]の[[本体]]の一部の受信を通知して構いません。
= [VAR[残り長さ]]が[[正]]なら、
== [VAR[残り長さ]]を1減らします。
== [VAR[残り長さ]]が0なら、
=== [251] [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
=== [83] [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
==== [84] [VAR[要求締め切り]]フラグを設定します。
=== [85] それ以外で、[VAR[応答]]の[[プロトコルの版]]が [CODE[1.0]] で、
[CODE(HTTP)@en[[[keep-alive]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定された
[CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]がなければ、
==== [86] [VAR[要求締め切り]]フラグを設定します。
=== 次の要求に進みます。
]FIG]

[7] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[残り長さ]]が[[正]]なら、
== [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== [VAR[応答]]の[[プロトコルの版]]が [CODE[1.1]] なら、
=== [VAR[要求]]について完了を通知します。終了の失敗は[[真]]とします。
== それ以外なら、
=== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= それ以外で、異常終了で[VAR[残り長さ]]が0なら、
== [VAR[要求の送信状態]]を送信済みに設定します。
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= それ以外なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= [VAR[要求締め切り]]フラグを設定します。
= 次の要求に進みます。
]FIG]

** 「塊前」状態

[118] バイトを受信したら、
[FIG(steps)[
= [[ASCII十六進数字]]なら、
== [VAR[一時バッファー]]を、指定されたバイトに設定します。
== [VAR[状態]]を、「塊サイズ」に設定します。
= それ以外なら、
== [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
== 次の要求に進みます。
]FIG]

[119] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「塊サイズ」状態

[120] バイトを受信したら、
[FIG(steps)[
= [[ASCII十六進数字]]なら、
== [VAR[一時バッファー]]に、指定されたバイトを追加します。
= それ以外なら、
== [VAR[一時バッファー]]を、[[十六進数]]として解釈します。
== [VAR[残り長さ]]を、得られた値に設定します。
== [VAR[残り長さ]]がエラー ([[桁溢れ]]) なら、
=== [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[要求の送信状態]]を送信済みに設定します。
=== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
=== 次の要求に進みます。
== それ以外で、[VAR[残り長さ]]が 0 なら、
=== [VAR[状態]]を、「trailer 前」に設定します。
=== [VAR[一時バッファー]]を、空に設定します。
== それ以外なら、
=== バイトが 0x0A なら、
==== [VAR[状態]]を、「塊」に設定します。
=== それ以外なら、
==== [VAR[状態]]を、「塊拡張」に設定します。
]FIG]

[122] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「塊拡張」状態

[121] バイトを受信したら、
[FIG(steps)[
= 0x0A なら、
== [VAR[状態]]を、「塊」に設定します。
]FIG]

[123] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「塊」状態

[124] バイトを受信したら、
[FIG(steps)[
= [VAR[応答]]の本体の末尾に、受信したバイトを追加します。
= 実装の判断で、[VAR[要求]]の[[本体]]の一部の受信を通知して構いません。
= [VAR[残り長さ]]を1減らします。
= [VAR[残り長さ]]が0なら、
== [VAR[状態]]を、「塊後」に設定します。
]FIG]

[125] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「塊後」状態

[126] バイトを受信したら、
[FIG(steps)[
= 0x0D なら、
== [VAR[状態]]を、「塊 CR 後」に設定します。
= 0x0A なら、
== [VAR[状態]]を、「塊前」に設定します。
= それ以外なら、
== [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
== 次の要求に進みます。
]FIG]

[127] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「trailer 前」状態

[128] バイトを受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]の末尾に受信したバイトを追加します。
= [VAR[一時バッファー]]の末尾が 0x0A 0x0A または 0x0A 0x0D 0x0A なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
== [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
=== [VAR[要求締め切り]]フラグを設定します。
== 次の要求に進みます。
= それ以外で、 [VAR[一時バッファー]]の長さが 2[SUP[18]]‐1 なら、
== [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
]FIG]

[129] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は[[偽]]とします。
= 次の要求に進みます。
]FIG]

** 「WebSocket フレーム前」状態

[148] バイトを受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]の末尾に、受信したバイトを追加します。
= [VAR[一時バッファー]]の長さが2未満なら、ここで停止します。
= [VAR[フレーム]]を、次のような新しい[[WebSocketフレーム]]に設定します。
[FIG(list members)[
:[[FIN]]:[VAR[一時バッファー]]の第1バイトの最上位ビット
:[[RSV1]]:[VAR[一時バッファー]]の第1バイトの上位から第2ビット目
:[[RSV2]]:[VAR[一時バッファー]]の第1バイトの上位から第3ビット目
:[[RSV3]]:[VAR[一時バッファー]]の第1バイトの上位から第4ビット目
:[[opcode]]:[VAR[一時バッファー]]の第1バイトの下位4ビットを[[整数]]としたもの
:[[mask]]:[VAR[一時バッファー]]の第2バイトの最上位ビット
:[[長さ]]:[VAR[一時バッファー]]の第2バイトの下位7ビットを[[整数]]としたもの
]FIG]
= [VAR[フレーム]]の[[長さ]]が126か127で、[[opcode]] が 8 [[以上]]なら、
== 失敗とします。ここで停止します。
= [VAR[フレーム]]の[[長さ]]が126なら、
== [VAR[一時バッファー]]の長さが4以上でなければ、ここで停止します。
== [VAR[フレーム]]の[[長さ]]を、[VAR[一時バッファー]]の第3、第4バイトを[[ネットワークバイト順]]の[[16ビット符号無し整数]]とした値に設定します。
== [VAR[フレーム]]の[[長さ]]が126未満なら、
=== 失敗とします。ここで停止します。
= [VAR[フレーム]]の[[長さ]]が127なら、
== [VAR[一時バッファー]]の長さが10以上でなければ、ここで停止します。
== [VAR[一時バッファー]]の第3バイトの最上位ビットが 1 なら、
=== 失敗とします。ここで停止します。
== [VAR[フレーム]]の[[長さ]]を、[VAR[一時バッファー]]の第3-8バイトを[[ネットワークバイト順]]の[[64ビット符号無し整数]]とした値に設定します。
== [VAR[フレーム]]の[[長さ]]が2[SUP[16]]未満なら、
=== 失敗とします。ここで停止します。
= [VAR[フレーム]]の[[長さ]]が実装の扱える範囲を超えていれば、
== 失敗とします。ここで停止します。
= [VAR[フレーム]]の[[mask]]が設定されていれば、
== [VAR[一時バッファー]]に次の4バイトがなければ、ここで停止します。
== [VAR[フレーム]]の[[マスクキー]]を、[VAR[一時バッファー]]のその4バイトに設定します。
= [150] [VAR[種別]]が[[サーバー]]であり、[VAR[フレーム]]の [[mask]] が 0 なら、
== [153] 理由 [CODE[WebSocket Protocol Error]] で失敗とします。ここで停止します。
= [151] [VAR[種別]]が[[クライアント]]であり、[VAR[フレーム]]の [[mask]] が 1 なら、
== [152] 理由 [CODE[Masked frame from server]] で失敗とします。ここで停止します。
= [154] [VAR[フレーム]]の FIN が 0 なら、
== [174] [[opcode]] が 8, 9, 10 なら、
=== [155] 失敗とします。ここで停止します。
== [175] [[opcode]] が 1, 2 なら、
=== [176] [VAR[先頭フレーム]]を、[VAR[フレーム]]に設定します。
= [156] [VAR[フレーム]]の RSV1, RSV2, RSV3 のいずれかでも 1 なら、
== [157] 理由 [CODE[Invalid reserved bit]] で失敗とします。ここで停止します。
= [158] [VAR[フレーム]]の [[opcode]] が 3-7, 11-15 なら、
== [159] 理由 [CODE[Unknown opcode]] で失敗とします。ここで停止します。
= [170] [VAR[先頭フレーム]]が null で、[VAR[フレーム]]の [[opcode]] が 0 なら、
== [171] 理由 [CODE[Unexpected continuation]] で失敗とします。ここで停止します。
= [172] [VAR[先頭フレーム]]が非 null で、[VAR[フレーム]]の [[opcode]] が 1 か 2 なら、
== [173] 理由 [CODE[Previous data frame unfinished]] で失敗とします。ここで停止します。
= [195] [VAR[一時バッファー]]を、空に設定します。
= [160] [VAR[フレーム]]の長さが0なら、
== [190] [[WebSocketフレーム]]の処理 (>>189) を行います。途中で停止したら、ここで停止します。
== [192] [VAR[フレーム]]を、 null に設定します。
== [191] [VAR[状態]]を、「WebSocket フレーム前」に設定します。
== [193] [VAR[一時バッファー]]を、空に設定します。
= [161] それ以外なら、
== [196] [VAR[状態]]を、「WebSocket データ」に設定します。
]FIG]

[149] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [226] [VAR[WebSocket接続の状態]]を、[CODE[CLOSED]] に設定します。
= [227] [VAR[終了]]を、次の通り設定します。
[FIG(list members)[
:失敗:[[真]]
:cleanly:[[偽]]
:状態符号:[CODE[[[1006]]]]
:理由:[[空文字列]]
]FIG]
]FIG]

** 「WebSocket データ」状態

[163] バイトを受信したら、
[FIG(steps)[
= [164] [VAR[一時バッファー]]の末尾に、受信したバイトを追加します。
= [165] [VAR[フレーム]]の [[mask]] が1なら、
== [166] [VAR[フレーム]]のマスクキーの先頭から第
(([VAR[一時バッファー]]の長さ - 1) mod 4) バイト (先頭が第0バイトとして数えた時。)
を使って[VAR[一時バッファー]]の末尾のバイトを [[XOR]] したものに置き換えます。
= [167] [VAR[一時バッファー]]の[[長さ]]が[VAR[フレーム]]の[[長さ]]と等しくなければ、
ここで停止します。
= [188] [[WebSocketフレーム]]の処理 (>>189) を行います。途中で停止したら、ここで停止します。
= [184] [VAR[フレーム]]を、 null に設定します。
= [185] [VAR[状態]]を、「WebSocket フレーム前」に設定します。
= [186] [VAR[一時バッファー]]を、空に設定します。
]FIG]

@@ permessage-deflate

[162] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [212] [VAR[WebSocket接続の状態]]を、[CODE[CLOSED]] に設定します。
= [215] [VAR[終了]]を、次の通り設定します。
[FIG(list members)[
:失敗:[[真]]
:cleanly:[[偽]]
:状態符号:[CODE[[[1006]]]]
:理由:[[空文字列]]
]FIG]
]FIG]

** 「WebSocket 切断待ち」状態

[217] 「WebSocket フレーム前」状態、「WebSocket データ」状態で失敗するという時、
次のようにします。
[FIG(steps)[
= [229] [VAR[WebSocket接続の状態]]を、[CODE[CLOSING]] に設定します。
= [230] [VAR[終了]]を、次の通り設定します。
[FIG(list members)[
:失敗:[[真]]
:cleanly:[[偽]]
:状態符号:[CODE[[[1002]]]]
:理由:指定された理由。指定がなければ [CODE[WebSocket Protocol Error]]。
]FIG]
= [231] [VAR[接続]]で[[Closeフレーム]]を送信することにします。
[VAR[終了]]の[[状態符号]]と理由を使います。
= [232] [VAR[状態]]を、「WebSocket切断待ち」に設定します。
= [233] [VAR[種別]]が[[サーバー]]なら、[VAR[接続]]を閉じることにします。
]FIG]

[214] バイトを受信したら、
[FIG(steps)[
= [234] [VAR[終了]]の[[失敗]]が[[偽]]なら、
== [235] [VAR[終了]]の[[失敗]]を[[真]]に設定します。
== [236] [VAR[終了]]の[[状態符号]]を [CODE[[[1006]]]] に設定します。
== [237] [VAR[終了]]の理由を[[空文字列]]に設定します。
]FIG]

[220] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [238] [VAR[WebSocket接続の状態]]を、[CODE[CLOSED]] に設定します。
= [239] 異常終了で[VAR[終了]]の[[失敗]]が[[偽]]なら、
== [240] [VAR[終了]]の[[失敗]]を[[真]]に設定します。
== [241] [VAR[終了]]の[[状態符号]]を [CODE[[[1006]]]] に設定します。
== [242] [VAR[終了]]の理由を[[空文字列]]に設定します。
= [243] [VAR[要求]]について[[応答]]の受信完了を通知します。[VAR[終了]]を引き渡します。
]FIG]

** 「トンネル」状態

[111] バイトを受信したら、
[FIG(steps)[
= [VAR[応答]]の本体の末尾に、受信したバイトを追加します。
= 実装の判断で、[VAR[要求]]の[[本体]]の一部の受信を通知して構いません。
]FIG]

[112] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について完了を通知します。終了の失敗は、異常終了なら[[真]]、そうでなければ[[偽]]とします。
= [VAR[要求締め切り]]フラグを設定します。
= 次の要求に進みます。
]FIG]

@@ 「トンネル切断待ち」?

** 「停止済み」状態

[43] 次の要求に進むとは、次のようにします。
[FIG(steps)[
= [VAR[状態]]が「停止済み」なら、ここで停止します。
= [VAR[要求締め切り]]フラグが未設定で、[VAR[要求の送信状態]]が送信中なら、
== [VAR[状態]]を、「要求送信中」に設定します。
= それ以外なら、
== [VAR[要求]]を、 null に設定します。
== [VAR[応答]]を、 null に設定します。
== [VAR[要求の送信状態]]を、未送信に設定します。
== [VAR[要求の処理完了]]が null でなければ、
=== [VAR[要求の処理完了]]を[[解決]]します。
=== [VAR[要求の処理完了]]を null に設定します。
== [VAR[要求締め切り]]フラグが設定されていれば、
=== [VAR[接続]]の正常終了の送信を指示します。
=== [VAR[状態]]を、「停止済み」に設定します。
== それ以外なら、
=== [VAR[状態]]を、「要求待ち」に設定します。
]FIG]

[70] バイトを受信したら、何もしません。

[71] 正常終了や異常終了を受信したら、何もしません。

* ヘッダー群として構文解析

[17] 入力を、 0x0D や 0x0A で区切られた[[行]]に分割します。
[[行]]には区切りの 0x0D, 0x0A は含めません。

[3] 最初の行を (あれば) 次のようにします。

[FIG(steps)[
= 先頭が [CODE[/]] なら、
== その次が[[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
ただし[[先導0]]があるときは、 0 とみなします。
== その次が [CODE[.]] なら、
=== その次が [[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
=== [19] 最初の[[整数]]が2[[以上]]か、
最初の[[整数]]が1と等しく次の[[整数]]が1[[以上]]なら、
==== [VAR[応答]]の[[プロトコルの版]]を、 1.1 に設定します。
== 次が1個以上の [CODE(charname)@en[[[SP]]]] であれば、すべて無視します。
== [21] 次に[[ASCII数字]]列があれば、[VAR[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [9] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [4] [VAR[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [5] それ以外なら、
=== [31] [VAR[応答]]の[[理由句]]を、[[空文字列]]に設定します。
= 先頭が1個[[以上]]の [CODE(charname)@en[[[SP]]]] 列なら、
== [20] 次に[[ASCII数字]]列があれば、[VAR[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [10] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [22] [VAR[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [29] それ以外なら、
=== [30] [VAR[応答]]の[[理由句]]を、[[空文字列]]に設定します。
]FIG]

[23] 更に、次のようにします。
[FIG(steps)[
= [VAR[最後のヘッダー]]を、 null に設定します。
= 残りの各行について順番に、
== 先頭の文字が 0x20 か 0x09 なら、
=== [VAR[最後のヘッダー]]が null 以外なら、
==== 行の先頭から 0x20 と 0x09 をすべて除去します。
==== [VAR[最後のヘッダー]]の値の末尾に、 0x20 と行の内容を追加します。
== 先頭の文字が 0x3A でなく、 0x3A が含まれるなら、
=== [VAR[最後のヘッダー]]を、 0x3A より前の部分を名前、 0x3A より後の部分を値とするヘッダーに設定します。
=== [VAR[応答]]の[[ヘッダーリスト]]の末尾に、[VAR[最後のヘッダー]]を追加します。
== それ以外なら、
=== [VAR[最後のヘッダー]]を、 null に設定します。
= [VAR[応答]]の[[ヘッダーリスト]]の各ヘッダーについて、
== 名前の末尾から 0x20 と 0x09 をすべて除去します。
== 値の先頭から 0x20 と 0x09 をすべて除去します。
== 値の末尾から 0x20 と 0x09 をすべて除去します。
]FIG]

* WebSocket フレームの処理

[189] [[WebSocketフレーム]]の処理は、次のようにします。
[FIG(steps)[
= [168] [VAR[フレーム]]の [[opcode]] が 8 なら、
== [199] [VAR[一時バッファー]]の長さが1なら、
=== [201] 理由[[空文字列]]で失敗とします。ここで停止します。
== [202] [VAR[一時バッファー]]が空でないなら、
=== [203] [VAR[フレーム]]の[[状態符号]]を、
[VAR[一時バッファー]]の先頭2バイトを[[ネットワークバイト順]]の[[符号無し16ビット整数]]として解釈した値とします。
=== [206] [VAR[フレーム]]の[[状態符号]]が [CODE[[[1005]]]] か [CODE[[[1006]]]] なら、
==== [207] 理由[[空文字列]]で失敗とします。ここで停止します。
=== [208] [VAR[フレーム]]の[[理由]]を、[VAR[一時バッファー]]から先頭2バイトを除いたものを入力として
[[utf-8復号器]]をエラーモード致死的で実行した出力とします。
=== [209] 失敗の場合は、理由 [CODE[Invalid UTF-8 in Close frame]] で失敗とします。ここで停止します。
== [213] [VAR[WebSocket接続の状態]]が [CODE[CLOSING]] でなければ、
=== [210] [VAR[WebSocket接続の状態]]を、 [CODE[CLOSING]] に設定します。
=== [211] [VAR[要求]]について、WebSocket終了開始を通知します。
=== [216] [VAR[接続]]で[[Closeフレーム]]を送信することにします。
あれば、[VAR[フレーム]]の[[状態符号]]と理由を使います。
== [218] [VAR[状態]]を、「WebSocket切断待ち」に設定します。
== [219] [VAR[種別]]が[[サーバー]]なら、[VAR[接続]]を閉じることにします。
== [228] [VAR[終了]]を、次の通り設定します。
[FIG(list members)[
:失敗:[[偽]]
:cleanly:[[真]]
:状態符号:[VAR[フレーム]]の[[状態符号]] (なければ [CODE[1005]])
:理由:[VAR[フレーム]]の理由 (なければ[[空文字列]])
]FIG]
= [168] [VAR[フレーム]]の [[opcode]] が 9 なら、
== [222] [VAR[要求]]について、 ping を通知します。[VAR[一時バッファー]]をデータとして引き渡します。
== [223] [VAR[接続]]で[[Pongフレーム]]を送信することにします。
[VAR[一時バッファー]]をデータとします。
= [168] [VAR[フレーム]]の [[opcode]] が 10 なら、
== [221] [VAR[要求]]について、 ping を通知します。返答フラグを設定し、
[VAR[一時バッファー]]をデータとして引き渡します。
= [168] [VAR[フレーム]]の [[opcode]] が 0, 1, 2 なら、
== [169] [VAR[フレーム]]の [[opcode]] が 0 なら、
=== [177] [VAR[先頭フレーム]]のデータの末尾に[VAR[一時バッファー]]を追加します。
=== [194] ただし実装の扱える長さを超える場合は、失敗とします。ここで停止します。
== [197] それ以外なら、
=== [198] [VAR[フレーム]]のデータを、[VAR[一時バッファー]]に設定します。
== [181] [VAR[フレーム]]の FIN が 1 なら、
=== [182] [VAR[フレーム]]の [[opcode]] が 0 なら[VAR[先頭フレーム]]の [[opcode]]、
それ以外なら[VAR[フレーム]]の [[opcode]] が 1 なら、
==== [180] [[utf8復号器]]を実行します。
入力を、[VAR[フレーム]]の [[opcode]] が 0 なら[VAR[先頭フレーム]]のデータ、
それ以外なら[VAR[フレーム]]のデータとします。
エラーモードを致死的に設定します。
==== [178] 失敗なら、理由 [CODE[Invalid UTF-8 in text frame]] で失敗とします。ここで停止します。
==== [183] [VAR[フレーム]]の [[opcode]] が 0 なら[VAR[先頭フレーム]]のデータ、
それ以外なら[VAR[フレーム]]のデータを、結果に設定します。
=== [179] [VAR[要求]]について、WebSocketメッセージの受信を通知します。
[VAR[フレーム]]の [[opcode]] が 0 なら[VAR[先頭フレーム]]のデータ、
それ以外なら[VAR[フレーム]]のデータを引き渡します。
=== [187] [VAR[先頭フレーム]]を、 null に設定します。
]FIG]