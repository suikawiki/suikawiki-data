* 処理

[34] 次の変数を使います。
[FIG(list members)[
:[VAR[状態]]:後述の状態遷移における状態のいずれか。初期値は「応答前」。
:[[応答]]: [[ネットワークエラー]]か次の[[データ構造]]のいずれか。初期値は[[データ構造]]。
[FIG(list members)[
[FIGCAPTION[
[[応答]]
]FIGCAPTION]
:[[プロトコルの版]]:[CODE[0.9]], [CODE[1.0]], [CODE[1.1]] のいずれか。初期値は [CODE[0.9]]。
:[[状態符号]]:[[非負整数]]。初期値は [CODE[200]]。
:[[理由句]]:[[バイト列]]。初期値は [CODE[OK]]。
:[[ヘッダーリスト]]:0個以上の[[ヘッダー]]のリスト。初期値は空。
:[[本体]]:[[バイト列]]。初期値は空。
:[[不完全メッセージ]]フラグ:初期値は未設定。
]FIG]
:[VAR[一時バッファー]]:バイト列
:[VAR[最後のヘッダー]]:ヘッダーか null
:[VAR[メッセージ本体長として指定された値]]:[[非負整数]]
]FIG]

[33] [CODE(HTTP)[[[1xx]]]] も参照。

** 状態遷移

@@
[13] [[TCP]] [CODE[[[RST]]]] を受信したら、[VAR[状態]]に関わらず、[[ネットワークエラー]]を返します。

[14] [[緊急ポインター]]が指す1バイトは、無視します。

*** 「応答前」状態

[25] この状態に遷移してきたら、[VAR[一時バッファー]]を、空バイト列に設定します。

[24] バイトを受信したら、
[FIG(steps)[
= [26] 受信したバイトを、[VAR[一時バッファー]]の末尾に連結します。
= [27] [VAR[一時バッファー]]の末尾4バイトが [CODE(HTTP)[HTTP]]
([[ASCII大文字・小文字不区別]]) なら、
== [[応答]]の[[プロトコルの版]]を 1.0 に設定します。
== [VAR[状態]]を、「応答1前」に設定します。
= [28] それ以外で、[VAR[一時バッファー]]が8バイトになったら、
== [[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
== [VAR[状態]]を、「応答本体」に設定します。
]FIG]

[8] [[EOF]] を受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]が[[空文字列]]なら、[[ネットワークエラー]]を返します。
= それ以外なら、
== [[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
== [VAR[状態]]を、「応答本体」に設定します。
]FIG]

*** 「応答1前」状態

[11] LF LF または LF CR LF が見つかるまで受信を続けます。

[12] 2[SUP[18]] [[バイト]]目を受信するよりも前に見つからなければ、
[[ネットワークエラー]]を返します。

[15] 見つかった場合、受信したデータをヘッダー群として構文解析します。「応答前」状態で受信した先頭8バイトも含めます。
末尾の LF と、あればその直前の CR は、無視します。その直前まで含めます。

[16] その後、状態を、「応答本体」に設定します。

*** 「応答本体」状態

[6] バイトを受信したら、応答の本体バイト列の末尾に、受信したバイトを追加します。

@@ [VAR[メッセージ本体長として指定された値]]が非 [[null]] で、
その長さに本体バイト列が達したら、...

[7] [[EOF]] を受信したら、
[FIG(steps)[
= [VAR[メッセージ本体長として指定された値]]が非 [[null]] で、
その長さに達していなければ、[[応答]]の[[不完全メッセージ]]フラグを設定します。
= 停止します。
]FIG]

@@ 定義上本体を持たない場合

** ヘッダー群として構文解析

[17] 入力を、 [[CR]] や [[LF]] で[[行]]に分割します。
[[行]]には区切りの [[CR]] と [[LF]] は含めません。

[3] 最初の行を (あれば) 次のようにします。

[FIG(steps)[
= 先頭が [CODE[/]] なら、
== その次が[[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
== その次が [CODE[.]] なら、
=== その次が [[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
=== [19] 最初の[[整数]]が2[[以上]]か、
最初の[[整数]]が1と等しく次の[[整数]]が1[[以上]]なら、
==== [[応答]]の[[プロトコルの版]]を、 1.1 に設定します。
== 次が1個以上の [CODE(charname)@en[[[SP]]]] であれば、すべて無視します。
== [21] 次に[[ASCII整数]]列があれば、[[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [9] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [4] [[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [5] それ以外なら、
=== [31] [[応答]]の[[理由句]]を、[[空文字列]]に設定します。
= 先頭が1個[[以上]]の [CODE(charname)@en[[[SP]]]] 列なら、
== [20] 次に[[ASCII整数]]列があれば、[[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [10] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [22] [[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [29] それ以外なら、
=== [30] [[応答]]の[[理由句]]を、[[空文字列]]に設定します。
]FIG]

[23] 更に、次のようにします。
[FIG(steps)[
= [VAR[最後のヘッダー]]を、 null に設定します。
= 残りの各行について順番に、
== 先頭の文字が 0x20 か 0x09 なら、
=== [VAR[最後のヘッダー]]が null 以外なら、
==== 行の先頭から 0x20 と 0x09 をすべて除去します。
==== [VAR[最後のヘッダー]]の値の末尾に、 0x20 と行の内容を追加します。
== 先頭の文字が 0x3A でなく、 0x3A が含まれるなら、
=== [VAR[最後のヘッダー]]を、 0x3A より前の部分を名前、 0x3A より後の部分を値とするヘッダーに設定します。
=== [[応答]]の[[ヘッダーリスト]]の末尾に、[VAR[最後のヘッダー]]を追加します。
== それ以外なら、
=== [VAR[最後のヘッダー]]を、 null に設定します。
= [[応答]]の[[ヘッダーリスト]]の各ヘッダーについて、
== 名前の末尾から 0x20 と 0x09 をすべて除去します。
== 値の先頭から 0x20 と 0x09 をすべて除去します。
== 値の末尾から 0x20 と 0x09 をすべて除去します。
]FIG]

[32] その後、 [CODE(HTTP)@en[[[Content-Length:]]]] [[ヘッダー]]の処理を行い、
[VAR[[[メッセージ本体]]長として指定された値]] ([[十進整数]]または [[null]]) を得ます。

;; この処理は[[ネットワークエラー]]を投げることがあります。

* 歴史

[1]
[CITE@en[Tolerant HTTP Parsing]] ([TIME[2007-09-05 04:32:55 +09:00]] 版) <http://geoffers.uni.cc/draft-sneddon-http-parsing-00.html>
([[名無しさん]])
