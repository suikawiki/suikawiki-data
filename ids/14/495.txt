* 処理

[34] [[クライアント]]は、次の内部状態を持ちます。
[FIG(list members)[
:[VAR[接続]]:[[下位層の接続]]の端点。
:[VAR[状態]]:後述の状態遷移における状態のいずれか。初期値は「初期」。
:[VAR[要求の送信状態]]: 未送信、送信中、送信済みのいずれか。初期値は未送信。
:[VAR[要求締め切り]]フラグ:初期値は未設定です。
:[VAR[要求]]:[[要求]]か null。初期値は null です。
:[VAR[応答]]:[[応答]]か null。初期値は null です。
:[VAR[一時バッファー]]:バイト列。初期値は空。
:[VAR[最後のヘッダー]]:ヘッダーか null
:[VAR[残り長さ]]:[[非負整数]]か null かエラー。
:[VAR[要求の処理完了]]:[[Promise]] か null。初期値は null。
]FIG]

[62] [[要求]]は、次のようなデータ構造です。
[FIG(list members)[
[FIGCAPTION[
[[要求]]
]FIGCAPTION]
:[[要求メソッド]]:バイト列。
:[[要求対象]]:バイト列。
:[[プロトコルの版]]:[CODE[1.1]]。
:[[ヘッダーリスト]]:0個以上の[[ヘッダー]]のリスト。
:[[本体]]:バイト列。
]FIG]

[63] [[応答]]は、次のようなデータ構造です。
[FIG(list members)[
[FIGCAPTION[
[[応答]]
]FIGCAPTION]
:[[プロトコルの版]]:[CODE[0.9]], [CODE[1.0]], [CODE[1.1]] のいずれか。初期値は [CODE[0.9]]。
:[[状態符号]]:[[非負整数]]。初期値は [CODE[200]]。
:[[理由句]]:[[バイト列]]。初期値は [CODE[OK]]。
:[[ヘッダーリスト]]:0個以上の[[ヘッダー]]のリスト。初期値は空。
:[[本体]]:[[バイト列]]。初期値は空。
:[[不完全メッセージ]]フラグ:初期値は未設定。
:[CODE(HTTP)[[[1xx]]]] [[応答]]群:0個以上の[[応答]]のリスト。初期値は空。
]FIG]

[11] [[状態機械]]は、[[要求]]について次の通知を行います。
[FIG(list)[
- 要求の本体の一部の送信の通知
- 要求の送信完了の通知
- 応答のヘッダー受信完了の通知
- 応答の本体の一部の受信の通知
- 応答の受信完了の通知
- 応答エラーの通知
- リセットの通知
]FIG]

[15] 各[[要求]]について、2種類の送信の通知と3種類の受信の通知をそれぞれこの順序で行うか、
その途中でリセットの通知で中断するか、または応答エラーの通知のみを行うかのいずれかです。
送信の通知と受信の通知はどちらもそれぞれ進行し、相互の順序は不定です。
送信の完了は通知されないことがあります (応答エラーかリセットの場合)。
本体の一部の受信の通知は、0回以上の任意の回数行います。

[FIG(flow)[
:initial:要求の送信
:v:
:>>:3
:->:reqbody
:->:reqeof
:->:headers
:->:rerror
:->:reset

:reqbody:本体一部送信
:->:reqbody
:->:reqeof
:v:
:>>:2
:->:rerror
:->:reset

:reqeof:送信完了
:v:
:>>:1

:headers:ヘッダー受信
:v:
:>>:3
:->:body
:->:complete
:->:reset

:rerror:応答エラー
:>>:4

:body:本体一部受信
:v:
:>>:4
:->:complete
:->:body
:->:reset

:complete:受信完了
:v:
:>>:3

:reset:リセット
:>>:5

]FIG]

[38] [VAR[応答]]は、3種類の受信の通知で[[アプリケーション]]に引き渡します。

** アプリケーションからの指示

[49] [[接続]]に対して[[アプリケーション]]は、
[[要求]]の送信 (>>42) や、[[接続]]の正常終了 (>>50)、
接続の中断 (>>52) を指示できます。

[42] [VAR[要求]]の送信は、次のようにします。
[FIG(steps)[
= [90] 前提条件として、[[要求]]は次の条件を満たす必要があります。
[FIG(list)[
- [93] [[要求メソッド]]が空ではない。
- [94] [[要求メソッド]]に 0x09, 0x0A, 0x0D, 0x20 が含まれない。
- [95] [[要求対象]]が空ではない。
- [96] [[要求対象]]に 0x0A, 0x0D が含まれない。
- [97] [[要求対象]]の先頭と末尾が 0x09, 0x20 でない。
- [91] [[本体]]が含まれる場合、 [CODE(HTTP)@en[[[Content-Length:]]]]
[[ヘッダー]]がちょうど1つだけあり、その値は[[本体]]のバイト数である。
- [92] [[本体]]が含まれない場合、 [CODE(HTTP)@en[[[Content-Length:]]]]
[[ヘッダー]]が含まれない。
]FIG]
= [74] [VAR[要求締め切り]]フラグが設定されているなら、
== [75] エラーを返し、ここで停止します。
= [58] [VAR[状態]]が「初期」か「要求待ち」でなければ、
== [35] エラーを返し、ここで停止します。
= [61] [VAR[要求]]を、指定された[[要求]]に設定します。
= [64] [VAR[応答]]を、新しい[[応答]]に設定します。
= [60] [VAR[一時バッファー]]を、空バイト列に設定します。
= [59] [VAR[状態]]を、「応答前」に設定します。
= [77] [VAR[要求]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
== [78] [VAR[要求締め切り]]フラグを設定します。
= [57] [VAR[要求の送信状態]]を、送信中に設定します。
= [45] [VAR[要求の処理完了]]を、新しい [[Promise]] に設定します。
= [48] [VAR[要求の処理完了]]を返します。
= [46] [[並列に]]、[VAR[要求]]の送信を行います。
]FIG]

[25] [VAR[要求]]の送信は、次のようにします。
[FIG(steps)[
= [47] [[HTTP/1.1]] に従い[VAR[要求]]の[[ヘッダー部]] (空行の [CODE[CRLF]] まで)
を表す[[バイト列]]の各[[バイト]]を順に、
== [VAR[接続]]で[[バイト]]の送信を指示します。
== エラーが返されたら、ここで停止します。
= [VAR[要求]]の[[メッセージ本体]]が存在する場合、各[[バイト]]を順に、
== [VAR[接続]]で[[バイト]]の送信を指示します。
== エラーが返されたら、ここで停止します。
== [VAR[要求]]について要求の本体の一部の送信を通知して構いません。
= [VAR[要求の送信状態]]を、送信済みに設定します。
= [VAR[要求]]について要求の送信完了を通知します。
= [VAR[状態]]が「要求送信中」なら、
== 次の要求に進みます。
]FIG]

[50] [[接続]]の正常終了は、次のようにします。
[FIG(steps)[
= [72] [VAR[要求締め切り]]フラグを設定します。
= [66] [VAR[状態]]が「初期」か「要求待ち」なら、
== [55] [VAR[接続]]で正常終了の送信を指示します。
]FIG]

;; [73] これにより[[要求]]の送信側は閉じられますが、[[応答]]の受信はまだ続くかもしれません。

[51] [[アプリケーション]]から明示的な指示がなくても、[[タイムアウト]]などにより[[接続]]の正常終了を実行できます。

[52] [[接続]]の中断は、次のようにします。
[FIG(steps)[
= [44] [VAR[要求の締め切り]]フラグを設定します。
= [39] [VAR[要求の送信状態]]を送信済みに設定します。
= [65] 次の要求に進みます。
]FIG]

** 状態機械

[68] [[クライアント]]は[[状態機械]]を持ちます。

[53] [VAR[接続]]の[[バイト]]受信の通知があると、次のようにします。
ただし、[VAR[状態]]が「初期」なら、[VAR[状態]]が変化するまで待ってから実行します。
[FIG(steps)[
= [14] [[緊急データ]]フラグが設定されていなければ、
== [37] [VAR[状態]]により決まる処理を行います。
]FIG]

[40] 正常終了の受信の通知があると、次のようにします。
[FIG(steps)[
= [54] [VAR[状態]]により決まる正常終了処理を行います。
]FIG]

[13] 異常終了の通知があると、次のようにします。
[FIG(steps)[
= リセットフラグが設定されていれば、
== [VAR[要求]]が null でなければ、
=== [VAR[要求]]についてリセットを通知します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= [41] それ以外なら、
== [VAR[状態]]により決まる異常終了処理を行います。
]FIG]

*** 「初期」状態

[69] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

*** 「要求待ち」状態

[2] バイトを受信したら、何もせずに無視します。

[33] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

*** 「要求送信中」状態

[56] バイトを受信したら、何もせずに無視します。

[67] 正常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= 次の要求に進みます。
]FIG]

[76] 異常終了を受信したら、
[FIG(steps)[
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

*** 「応答前」状態

[24] バイトを受信したら、
[FIG(steps)[
= [26] 受信したバイトを、[VAR[一時バッファー]]の末尾に連結します。
= [27] [VAR[一時バッファー]]の末尾4バイトが [CODE(HTTP)[HTTP]]
([[ASCII大文字・小文字不区別]]) なら、
== [VAR[応答]]の[[プロトコルの版]]を 1.0 に設定します。
== [VAR[状態]]を、「応答ヘッダー」に設定します。
== [VAR[一時バッファー]]を、空に設定します。
= [28] それ以外で、[VAR[一時バッファー]]の長さが8バイトなら、
== [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[PUT]]]] なら、
=== [VAR[要求]]について応答エラーを通知します。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[要求の送信状態]]を送信済みに設定します。
=== 次の要求に進みます。
== それ以外なら、
=== [VAR[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
=== [VAR[残り長さ]]を、 null に設定します。
=== [VAR[状態]]を、「応答本体」に設定します。
]FIG]

[8] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]が[[空文字列]]なら、
== [VAR[要求]]について応答エラーを通知します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[PUT]]]] なら、
== [VAR[要求]]について応答エラーを通知します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
= それ以外なら、
== [VAR[応答]]の[[本体]]を、[VAR[一時バッファー]]の値に設定します。
== 異常終了なら、[VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求]]について[VAR[応答]]のヘッダー受信完了を通知します。
== [VAR[要求]]について[VAR[応答]]の受信完了を通知します。
== [VAR[要求締め切り]]フラグを設定します。
== 異常終了なら、[VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
]FIG]

*** 「応答ヘッダー」状態

[36] バイトを受信したら、
[FIG(steps)[
= [VAR[一時バッファー]]の末尾に受信したバイトを追加します。
= [VAR[一時バッファー]]の末尾が 0x0A 0x0A または 0x0A 0x0D 0x0A なら、
== [VAR[一時バッファー]]をヘッダー群として構文解析します。
== [32] [VAR[残り長さ]]を、[VAR[応答]]の [CODE(HTTP)@en[[[Content-Length:]]]] [[ヘッダー]]の処理の結果とします。
== [VAR[残り長さ]]がエラーなら、
=== [VAR[要求]]について応答エラーを通知します。
=== [VAR[要求締め切り]]フラグを設定します。
=== [VAR[要求の送信状態]]を送信済みに設定します。
=== 次の要求に進みます。
== それ以外で、 [VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[1xx]]]] なら、
=== [VAR[応答]]の [CODE(HTTP)[[[1xx]]]] [[応答]]群の末尾に新しい[[応答]]を追加します。
[FIG(list members)[
[FIGCAPTION[
[[応答]]
]FIGCAPTION]
:[[プロトコルの版]]:[VAR[応答]]の[[プロトコルの版]]
:[[状態符号]]:[VAR[応答]]の[[状態符号]]
:[[理由句]]:[VAR[応答]]の[[理由句]]
:[[ヘッダーリスト]]:[VAR[応答]]の[[ヘッダーリスト]]
]FIG]
=== [VAR[応答]]の[[プロトコルの版]]、[[状態符号]]、[[理由句]]、[[ヘッダーリスト]]を初期値に設定します。
=== [VAR[状態]]を、「応答前」に設定します。
=== [VAR[一時バッファー]]を、空バイト列に設定します。
== それ以外なら、
=== [VAR[要求]]について[[応答]]のヘッダー受信完了を通知します。
===
[FIG(list)[
- [VAR[応答]]の[[状態符号]]が [CODE(HTTP)[[[204]]]], [CODE(HTTP)[[[205]]]],
[CODE(HTTP)[[[304]]]] のいずれかの場合か、
- [VAR[要求]]の[[要求メソッド]]が [CODE(HTTP)@en[[[HEAD]]]] の場合
]FIG]
... のいずれかの場合、
==== [VAR[残り長さ]]を、0に設定します。
=== [87] [VAR[残り長さ]]が 0 なら、
==== [89] [VAR[要求]]について[[応答]]の受信完了を通知します。
==== [79] [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
===== [80] [VAR[要求締め切り]]フラグを設定します。
==== [81] それ以外で、[VAR[応答]]の[[プロトコルの版]]が [CODE[1.0]] で、
[CODE(HTTP)@en[[[keep-alive]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定された
[CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]がなければ、
===== [82] [VAR[要求締め切り]]フラグを設定します。
==== 次の要求に進みます。
=== [88] それ以外なら、
==== [16] [VAR[状態]]を、「応答本体」に設定します。
= それ以外で、 [VAR[一時バッファー]]の長さが 2[SUP[18]]‐1 なら、
== [VAR[要求]]について応答エラーを通知します。
== [VAR[要求締め切り]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
== 次の要求に進みます。
]FIG]

@@ [CODE(HTTP)@en[[[CONNECT]]]]

[12] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[要求]]について応答エラーを通知します。
= [VAR[要求締め切り]]フラグを設定します。
= [VAR[要求の送信状態]]を送信済みに設定します。
= 次の要求に進みます。
]FIG]

*** 「応答本体」状態

@@ [[転送符号化]]

[6] バイトを受信したら、
[FIG(steps)[
= [VAR[応答]]の本体の末尾に、受信したバイトを追加します。
= 実装の判断で、[VAR[要求]]の[[本体]]の一部の受信を通知して構いません。
= [VAR[残り長さ]]が[[正]]なら、
== [VAR[残り長さ]]を1減らします。
== [VAR[残り長さ]]が0なら、
=== [VAR[要求]]について[[応答]]の受信完了を通知します。
=== [83] [VAR[応答]]に [CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]があって
[CODE(HTTP)@en[[[close]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定されていれば、
==== [84] [VAR[要求締め切り]]フラグを設定します。
=== [85] それ以外で、[VAR[応答]]の[[プロトコルの版]]が [CODE[1.0]] で、
[CODE(HTTP)@en[[[keep-alive]]]] ([[ASCII大文字・小文字不区別]]) [[接続オプション]]が指定された
[CODE(HTTP)@en[[[Connection:]]]] [[ヘッダー]]がなければ、
==== [86] [VAR[要求締め切り]]フラグを設定します。
=== 次の要求に進みます。
]FIG]

[7] 正常終了か異常終了を受信したら、
[FIG(steps)[
= [VAR[残り長さ]]が[[正]]か異常終了なら、
== [VAR[応答]]の[[不完全メッセージ]]フラグを設定します。
== [VAR[要求の送信状態]]を送信済みに設定します。
= [VAR[要求]]について[[応答]]の受信完了を通知します。
= [VAR[要求締め切り]]フラグを設定します。
= 次の要求に進みます。
]FIG]

*** 「停止済み」状態

[43] 次の要求に進むとは、次のようにします。
[FIG(steps)[
= [VAR[状態]]が「停止済み」なら、ここで停止します。
= [VAR[要求締め切り]]フラグが未設定で、[VAR[要求の送信状態]]が送信中なら、
== [VAR[状態]]を、「要求送信中」に設定します。
= それ以外なら、
== [VAR[要求]]を、 null に設定します。
== [VAR[応答]]を、 null に設定します。
== [VAR[要求の送信状態]]を、未送信に設定します。
== [VAR[要求の処理完了]]が null でなければ、
=== [VAR[要求の処理完了]]を[[解決]]します。
=== [VAR[要求の処理完了]]を null に設定します。
== [VAR[要求締め切り]]フラグが設定されていれば、
=== [VAR[接続]]の正常終了の送信を指示します。
=== [VAR[状態]]を、「停止済み」に設定します。
== それ以外なら、
=== [VAR[状態]]を、「要求待ち」に設定します。
]FIG]

[70] バイトを受信したら、何もせず無視します。

[71] 正常終了や異常終了を受信したら、何もせず無視します。

** ヘッダー群として構文解析

[17] 入力を、 0x0D や 0x0A で区切られた[[行]]に分割します。
[[行]]には区切りの 0x0D, 0x0A は含めません。

[3] 最初の行を (あれば) 次のようにします。

[FIG(steps)[
= 先頭が [CODE[/]] なら、
== その次が[[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
== その次が [CODE[.]] なら、
=== その次が [[ASCII数字]]列なら、これを[[十進整数]]として解釈します。
=== [19] 最初の[[整数]]が2[[以上]]か、
最初の[[整数]]が1と等しく次の[[整数]]が1[[以上]]なら、
==== [VAR[応答]]の[[プロトコルの版]]を、 1.1 に設定します。
== 次が1個以上の [CODE(charname)@en[[[SP]]]] であれば、すべて無視します。
== [21] 次に[[ASCII数字]]列があれば、[VAR[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [9] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [4] [VAR[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [5] それ以外なら、
=== [31] [VAR[応答]]の[[理由句]]を、[[空文字列]]に設定します。
= 先頭が1個[[以上]]の [CODE(charname)@en[[[SP]]]] 列なら、
== [20] 次に[[ASCII数字]]列があれば、[VAR[応答]]の[[状態符号]]をその[[十進整数]]値に設定します。
== [10] 次の1個以上の [CODE(charname)@en[[[SP]]]] があれば、
=== [22] [VAR[応答]]の[[理由句]]を、[[行]]のそれより後の部分に設定します。
== [29] それ以外なら、
=== [30] [VAR[応答]]の[[理由句]]を、[[空文字列]]に設定します。
]FIG]

[23] 更に、次のようにします。
[FIG(steps)[
= [VAR[最後のヘッダー]]を、 null に設定します。
= 残りの各行について順番に、
== 先頭の文字が 0x20 か 0x09 なら、
=== [VAR[最後のヘッダー]]が null 以外なら、
==== 行の先頭から 0x20 と 0x09 をすべて除去します。
==== [VAR[最後のヘッダー]]の値の末尾に、 0x20 と行の内容を追加します。
== 先頭の文字が 0x3A でなく、 0x3A が含まれるなら、
=== [VAR[最後のヘッダー]]を、 0x3A より前の部分を名前、 0x3A より後の部分を値とするヘッダーに設定します。
=== [VAR[応答]]の[[ヘッダーリスト]]の末尾に、[VAR[最後のヘッダー]]を追加します。
== それ以外なら、
=== [VAR[最後のヘッダー]]を、 null に設定します。
= [VAR[応答]]の[[ヘッダーリスト]]の各ヘッダーについて、
== 名前の末尾から 0x20 と 0x09 をすべて除去します。
== 値の先頭から 0x20 と 0x09 をすべて除去します。
== 値の末尾から 0x20 と 0x09 をすべて除去します。
]FIG]

* 歴史

[1]
[CITE@en[Tolerant HTTP Parsing]] ([TIME[2007-09-05 04:32:55 +09:00]] 版) <http://geoffers.uni.cc/draft-sneddon-http-parsing-00.html>
([[名無しさん]])