[2] [DFN[[RUBYB[タスクキュー]@en[task queue]]]]は、[[イベントループ]]における[[タスク]]の[[順序付き]]の[[リスト]]
([[キュー]]) です。
[[Webブラウザー]]内に常にいくつか存在します。

* 仕様書

[REFS[
- [1] '''[CITE@en-US-x-hixie[HTML Standard]] ([TIME[2012-03-28 21:58:58 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#task-queue>'''
- [19] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2012-03-28 21:58:58 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#the-event-loop>
- [10] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2016-12-06 07:17:59 +09:00]]) <https://html.spec.whatwg.org/#worker-event-loop>
- [44] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2012-03-28 21:58:58 +09:00]] 版) <https://www.whatwg.org/specs/web-apps/current-work/#task-source>
- [45] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2013-02-09 02:07:40 +09:00]] 版) <https://www.whatwg.org/specs/web-apps/current-work/#unshipped-port-message-queue>
]REFS]

* 意味

[4] [[タスクキュー]]は、[[タスク]]の[[キュー]]です [SRC[>>1]]。
0個以上の[[タスク]]を入れたり出したりできます。
[[キュー]]ですから原則として [[FIFO]] ですが、それ以外の特別な操作もあります。

[5] 一つの[[タスク]]が複数の[[タスクキュー]]に同時に含まれることはありません。

* 文脈

[18] [[イベントループ]]は、1つ[[以上]]の[[タスクキュー]]を持ちます [SRC[>>1]]。

[31] [[イベントループ]]がいくつ[[タスクキュー]]を持つかは、[[実装依存]]です。

[EG[
[12] 例えば、[[マウス操作]]その他の[[利用者]]の操作 ([[利用者対話タスク源]])
の[[タスクキュー]]と、それ以外の[[タスクキュー]]とで2つ用意し、
[[利用者]]の操作の[[タスクキュー]]を優先的に処理する、という戦略を採ることができます。
[SRC[>>1]]
]EG]

[32] ある[[イベントループ]]で、
ある[[タスク源]]から来た[[タスク]]をどの[[タスクキュー]]に追加するかは、
[[実装依存]]の方法で固定しなければ[MUST[なりません]] [SRC[>>1]] (>>3)。

;;
[7] 同じく[[タスク]]の[[キュー]]であっても、
[FIG(list middle)[
- [[セッション履歴探索キュー]]
- [[マイクロタスクキュー]]
- [[ポートメッセージキュー]]
- [[未出荷済みポートメッセージキュー]]
- [[pending application cache download process tasks]]
]FIG]
... は定義上[[タスクキュー]]とは異なるものです。
([[タスクキュー]]は[[データ型]]ではなく、[[イベントループ]]のフィールド名と捉えるべきもののようです。)

* 追加

[11] [[仕様書]]の[[アルゴリズム]]上で新たな[[タスク]]の実行を予約する操作を、
[DFN[[RUBYB[[[タスクをキューに追加]]]@en[queue a task]]]] [SRC[>>1]] といいます。

[43] [[タスク]]は、その処理に関係する[[イベントループ]]に追加されます。
[[Webブラウザー]]が複数の[[イベントループ]]を持つ場合、
処理対象の[[文書]]や[[ワーカー]]を担当している[[イベントループ]]の[[タスクキュー]]に追加されることになります。

[3] [[タスク]]は、その出自である[[タスク源]]によって決まる[[タスクキュー]]に追加されます。
[[イベントループ]]が複数の[[タスクキュー]]を持つ場合、
同じ[[タスク源]]からの[[タスク]]は必ず同じ[[タスクキュー]]に追加され、
相互の順序は保持されますが、
異なる[[タスク源]]からの[[タスク]]は異なる[[タスクキュー]]に追加されるかもしれないため、
順序は保証されません。


[37] [[タスクをキューに追加]]する処理は、次の引数を受け取ります。
[FIG(list members)[
: [VAR[イベントループ]] : 
[[タスクをキューに追加]]する処理を現に実行している[[イベントループ]]。
: [VAR[処理]] : [[アルゴリズム]]。
[[タスクをキューに追加]]する処理の呼び出し元の[[変数]]を参照する処理 ([[クロージャー]]的なもの)
かもしれません。
: [VAR[文脈]] : 
[[要素]]、[[閲覧文脈]]、[[スクリプト]]のいずれか。
: [VAR[タスク源]] :
[[タスク源]]。
]FIG]

[38] 次のようにしなければ[MUST[なりません]]。
[FIG(steps)[
= [14] [VAR[文脈]]の[F[設定群オブジェクト]]の[F[大域オブジェクト]]が
[CODE(DOMi)@en[WorkerGlobalScope]] で、
[VAR[文脈]]の[F[設定群オブジェクト]]の[F[大域オブジェクト]]の[F[閉じ中]]が[[真]]なら、
== [68] ここで停止します。 [SRC[>>10]]
= [42] [VAR[文書]]を、[VAR[文脈]]により、次の値に設定します [SRC[>>1]]。
[FIG(switch)[
: [[要素]] : [VAR[文脈]]の[F[節点文書]]
: [[閲覧文脈]] : [VAR[文脈]]の[F[活性文書]]
: [[スクリプト]] : [VAR[文脈]]の[F[設定群オブジェクト]]の[F[有責文書]]
]FIG]
= [39] [VAR[タスク]]を、[[タスク]]に設定します。
[FIG(list members)[ [40] [[タスク]]
: [F[処理]] : [VAR[処理]]
: [F[文書]] : [VAR[文書]]
: [F[[[triggered by user activation]] その他のフラグ群]] :
[VAR[イベントループ]]の[F[現在走っているタスク]]が [CODE[null]] でなければ、
[VAR[イベントループ]]の[F[現在走っているタスク]]の
[F[[[triggered by user activation]] その他のフラグ群]]
]FIG]
= [13] [VAR[タスクキュー]]を、[VAR[イベントループ]]の[VAR[タスク源]]の[[タスクキュー]]を選択
(>>34) した結果に設定します。
= [41] [VAR[タスク]]を[VAR[タスクキュー]]の末尾に追加します。
]FIG]

[34] [VAR[イベントループ]]の[VAR[タスク源]]の[[タスクキュー]]の選択は、
次のようにしなければ[MUST[なりません]]。
[FIG(steps)[
= [35] [VAR[タスクキュー]]を、
[VAR[イベントループ]]の[F[[[タスク源]]から[[タスクキュー]]への[[写像]]]]から、
[VAR[タスク源]]の[[項目の値を取得]]した結果に設定します。
= [36] [VAR[タスクキュー]]が [CODE[null]] なら、
== [47] [[実装依存]]の判断により新しい[[タスクキュー]]を使う場合、
=== [63] [VAR[タスクキュー]]を、新しい[[キュー]]に設定します。
=== [48] [VAR[イベントループ]]の[F[[[タスクキュー]]群]]に、[VAR[タスクキュー]]を追加します。
== [66] それ以外の場合、
=== [67] [VAR[タスクキュー]]を、[VAR[イベントループ]]の[F[[[タスクキュー]]群]]から[[実装依存]]の方法で選択した[[キュー]]に設定します。
=== [64] [VAR[イベントループ]]の[F[[[タスク源]]から[[タスクキュー]]への[[写像]]]]の[VAR[タスク源]]の[[項目の値を設定]]して[VAR[タスクキュー]]とします。
= [65] [VAR[タスクキュー]]を返します。
]FIG]

* 存在

[28] [CODE(DOMi)@en[[[EventSource]]]], [CODE(DOMi)@en[[[MessagePort]]]] の[[ごみ収集]]のタイミングは、
[[タスク]]が[[タスク・キュー]]に残っているかによって決まります。

;; [29] これは[[タスク]]から [CODE(DOMi)@en[[[EventSource]]]], 
[CODE(DOMi)@en[[[MessagePort]]]] へ[[強い参照]]があると解釈できるかもしれません。

;; [30] [[XHR]] は逆に[[ごみ収集]]によって[[タスク]]を破棄します。

[8] [[the [CODE(HTMLe)@en[embed]] element setup steps]] は、
同[[要素]]に関する[[タスク]]が他に追加されている場合、何も実行しません。
(実行中かどうかではなく追加されたかどうかの検査です。)
この検査は自[[タスク]]のみならず、そこから追加された他の[[タスクキュー]]からも行われます。

* 取得

[15] [[タスクキュー]]は [[FIFO]] っぽいもので、基本的には最古のものから取得 (実行)、
削除されます。しかし条件を満たさない[[タスク]]は[[イベントループ]]に無視されることになっていますから、
厳密には [[FIFO]] とは言えません。

;; [[イベントループ]]参照。

* 削除

[22] [[タスク]]は実行される際に[[キュー]]から削除されますが、それ以外にも削除されることがあります。
[FIG(list)[
- [23] 特定の [CODE(DOMi)@en[[[Document]]]] に関連付けられた[[タスク]]がすべて削除されることがあります。
-- [CODE(JS)@en[[[window.open]]]]
-- [[discard a [CODE(DOMi)@en[Document]]]]
- [24] 特定の[[タスク源]]の[[タスク]]がすべて削除されることがあります。
-- [[media element load algorithm]]
- [27] 特定の[[文書族]]・[[タスク源]]の[[タスク]]がすべて削除されることがあります。
-- [CODE(JS)@en[[[window.open]]]]
-- [[セッション履歴エントリーの挿入]]
- [26] 特定のものに関する [[fetch]] [[算法]]が生成した[[タスク]]がすべて削除されることがあります。
-- [[update the image data]]
-- [[媒体要素]]
-- [[text track]]
-- [[abort a document]]
-- [[XHR]] の[[ごみ収集]]
- [25] すべての[[タスク]]が削除されることがあります。
-- [CODE(DOMi)@en[[[WorkerGlobalScope]]]] の [CODE(DOMm)@en[[[close]]]]
-- [[kill a worker]]
-- [[XHR]]
-- [CODE(DOMi)@en[[[FileReader]]]] の [CODE(DOMm)@en[[[abort]]]]
-- [CODE(DOMi)@en[[[FileSaver]]]] の [CODE(DOMm)@en[[[abort]]]]
- [33] 特定の[[タスク]]が削除されることがあります。
-- [[planned navigation]]
]FIG]

[17] [[ポートメッセージキュー]]においては、[[タスク]]が (関連付けられた[F[文書]]を書き換えつつ)
他の[[ポートメッセージキュー]]へと移動されることがあります。

;; [[ポートメッセージキュー]]、[CODE(DOMi)@en[MessagePort]] 参照。

* タスク源

[46] 各[[タスク]]は、何らかの[DFN[[RUBYB[タスク源]@en[task source]]]]から[RUBYB[来る]@en[come]]ものと定義されます
[SRC[>>44]]。

[61] [[タスクキュー]]は[[タスク源]]によって分けられており、
同じ[[タスク源]]の[[タスク]]同士の実行順序は[[タスクキュー]]への追加順序となることが保証されます。

[62] [[タスク源]]は、追加時に[[タスクキュー]]の決定に使われる他、
何らかの理由で[[タスクキュー]]から[[タスク]]を削除する条件として使われることもあります。

[49] [[タスク源]]としては次のものがあります。
[FIG(list middle)[
- [[DOM操作タスク源]]
- [[利用者対話タスク源]]
- [[ネットワーク処理タスク源]]
- [[履歴探索タスク源]]
- [[媒体要素イベントタスク源]]
- [[画布blob直列化タスク源]]
- [[画布更新タスク源]]
- [[タイマー・タスク源]]
- [[遠隔イベント・タスク源]]
- [[WebSocketタスク源]]
- [[投稿済みメッセージタスク源]]
- [[ポート・メッセージ・キュー]]
- [[未出荷ポート・メッセージ・キュー]]
- [[[CODE(DOMi)@en[XMLHttpRequest]]タスク源]]
- [[[CODE(DOMi)@en[FileReader]]タスク源]]
- [[データベース・アクセス・タスク源]]
- [[埋め込みタスク源]]
- [[WebGLタスク源]]
- [[マイクロタスクタスク源]]
- [[フォント読み込みタスク源]]
- [[application life-cycle task source]]

[HISTORY[
- [[雛形タスク源]]
- [[[CODE(DOMi)@en[FileSaver]]タスク源]]
- [[装置タスク源]]
- [[[CODE(DOMi)@en[PendingOp]]タスク源]]
]HISTORY]
]FIG]

[50] ほとんどの[[タスク源]]は[[イベントループ]]に1つずつ存在していますが、
[[ポートメッセージキュー]]は[[著者]]が [CODE(DOMi)@en[[[MessagePort]]]]
[[オブジェクト]]を作成することによって任意個作成されます。
[[媒体要素イベントタスク源]]と
[[[CODE(DOMi)@en[XMLHttpRequest]]タスク源]] もオブジェクトごとに存在します。
[[[CODE(DOMi)@en[FileReader]]タスク源]]、[[[CODE(DOMi)@en[FileSaver]]タスク源]]もオブジェクトごとに存在するようです。

[51] [[ポートメッセージキュー]]と[[未出荷ポートメッセージキュー]]は特別な関係にあります。
[CODE(DOMi)@en[[[MessagePort]]]] は他の[[閲覧文脈]]に転送することができますが、
それまでは[[未出荷ポートメッセージキュー]]にも属します。また[[タスク]]の削除は、どちらからも削除します。
なお[[未出荷ポートメッセージキュー]]は[[イベントループ]]ごとに1つだけあります。
[SRC[>>45]]
[[仕様書]]ではこれらは[[タスク源]]である[[キュー]]とされていますが、
実質的に[[タスクキュー]]の特殊形というべきものです。[[タスクキュー]]も参照。

;; [52] 転送していない [CODE(DOMi)@en[[[MessagePort]]]] では必ず同じ順序で[[タスク]]が実行されることを保証し、
転送してしまった [CODE(DOMi)@en[[[MessagePort]]]] では任意の実行順序となることを認めるためにこのような複雑な構造になっています。

[53] [[タスク源]]の一覧は >>54 にあります。

[REFS[
- [54] [CITE[data-web-defs/data/browsers.json at master · manakai/data-web-defs]] ([TIME[2014-04-09 13:08:57 +09:00]] 版) <https://github.com/manakai/data-web-defs/blob/master/data/browsers.json>
]REFS]

** マイクロタスクとの関係

[58] [[マイクロタスク]]の[[タスク源]]はすべて[[マイクロタスクタスク源]]と定義されています。

[59] [[マイクロタスク]]には[[タスクキュー]]とは別の[[マイクロタスクキュー]]が存在しています。
これは[[マイクロタスク源]]の[[タスク]] ([[マイクロタスク]]) を実行する[[タスクキュー]]とは別のものです。

* イベント順との関係

[55] [[DOM3イベント]]は[[イベント]]同士の関係を[[イベント順]]により規定しています。
[[DOM3イベント]]は[[イベント・ループ]]や[[タスク]]という概念を使っておらず、
この[[イベント順]]は適宜[[タスク源]]として使うことによって[[イベント・ループ]]と互換性がある形で実装できる、
としています。

[REFS[
- [56] [CITE@en-US[Document Object Model (DOM) Level 3 Events Specification]] ([TIME[2012-03-21 00:00:37 +09:00]] 版) <http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html#event-order-and-loops>
]REFS]

;; [57] 具体的にどう対応付けるのかは説明を読んでもあんまりよくわかりません。 [[HTML]]
は[[マウス]]も[[鍵盤]]も同じ[[利用者対話タスク源]]で扱っていますが、
[[DOM3イベント]]は独立してるからそれぞれ別の[[タスク源]]だ、とか言っていますし、
[[焦点]]の変更など独立した操作がそれぞれ[[タスク源]]だ、とか訳のわからないことも言ってます。

* 歴史

[REFS[
- [6] [CITE@en[Web Applications 1.0 r2074 Define event loops, task queues, etc; Make 'fetching' use this mechanism (everything will in due course); Fix some cross-references around 'interactive content'.]]
([TIME[2008-08-16 09:52:00 +09:00]] 版)
<https://html5.org/r/2074>
- [60] [CITE[IRC logs: freenode / #whatwg / 20100824]]
([TIME[2010-09-02 21:15:06 +09:00]] 版)
<http://krijnhoetmer.nl/irc-logs/whatwg/20100824>
- [16] [CITE@en[Web Applications 1.0 r7992     Make <form> submission more like reality.]] ([TIME[2013-06-20 06:37:00 +09:00]] 版) <http://html5.org/tools/web-apps-tracker?from=7991&to=7992>
- [19] [CITE@en[Fix #19: Remove majority of "DOM Event Architecture" section · w3c/uievents@6cb42db]]
([TIME[2016-03-08 18:11:43 +09:00]] 版)
<https://github.com/w3c/uievents/commit/6cb42db4054c5502d28c3f53c6ae64da5e475747>
]REFS]

