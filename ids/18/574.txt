[2] [DFN[[RUBYB[タスクキュー]@en[task queue]]]]は、[[イベントループ]]における[[タスク]]の[[順序付き]]の[[リスト]]
([[キュー]]) です。
[[Webブラウザー]]内に常にいくつか存在します。

* 仕様書

[REFS[
- [1] '''[CITE@en-US-x-hixie[HTML Standard]] ([TIME[2012-03-28 21:58:58 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#task-queue>'''
- [19] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2012-03-28 21:58:58 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#the-event-loop>
- [10] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#worker-event-loop>
]REFS]

* 意味

[4] [[タスクキュー]]は、[[タスク]]の[[キュー]]です [SRC[>>1]]。
0個以上の[[タスク]]を入れたり出したりできます。
[[キュー]]ですから原則として [[FIFO]] ですが、それ以外の特別な操作もあります。

[5] 一つの[[タスク]]が複数の[[タスクキュー]]に同時に含まれることはありません。

* 文脈

[18] [[イベントループ]]は、1つ[[以上]]の[[タスクキュー]]を持ちます [SRC[>>1]]。

;;
[7] 同じく[[タスク]]の[[キュー]]であっても、
[[セッション履歴探索キュー]]、
[[マイクロタスクキュー]]、
[[ポートメッセージキュー]]、
[[未出荷済みポートメッセージキュー]]は定義上[[タスクキュー]]とは異なるものです。
([[タスクキュー]]は[[データ型]]ではなく、[[イベントループ]]のフィールド名と捉えるべきもののようです。)

* 追加

[11] [[仕様書]]の[[アルゴリズム]]上で新たな[[タスク]]の実行を予約する操作を、
[DFN[[RUBYB[[[タスクをキューに追加]]]@en[queue a task]]]] [SRC[>>1]] といいます。

[43] [[タスク]]は、その処理に関係する[[イベントループ]]に追加されます。
[[Webブラウザー]]が複数の[[イベントループ]]を持つ場合、
処理対象の[[文書]]や[[ワーカー]]を担当している[[イベントループ]]の[[タスクキュー]]に追加されることになります。

同じ[[タスク源]]からの[[タスク]]は常に同じ[[タスクキュー]]に追加しなければ[['''なりません''']]。
違う[[タスク源]]からの[[タスク]]は別の[[タスクキュー]]に追加して[['''構いません''']]。
[SRC[>>1]]

[EG[
[12] 例えば、[[マウス]]や[[鍵盤]]の[[イベント]]のための[[タスク・キュー]]
([[利用者対話タスク源]]用[[タスク・キュー]]) とそれ以外用の[[タスク・キュー]]の2つを用意し、
[[マウス]]や[[鍵盤]]の方の[[タスク・キュー]]を優先的に処理することにすれば、
[[利用者]]の操作には反応を返すようにしつつ、それが無い時に他の処理を実行する、
というようにできます。 [SRC[>>1]]
]EG]

[14] [CODE(DOMi)@en[[[WorkerGlobalScope]]]] は [DFN[[[closing]]]]
フラグを持ちます [SRC[>>10]]。

;; [[閲覧文脈]]にはありません。

[20] [[closing]] [[フラグ]]が[[真]]に設定されている時は、
[[タスク]]が追加されようとしても捨てなければ[['''なりません''']]。 [SRC[>>19, >>10]]

;; [21] [[ワーカー]]が終了しようとしている時に発生した[[タイマー]]その他の[[タスク]]が捨てられることになります。

[9] [[タスクキュー]]に[[タスク]]に追加するときは、呼び出し元の[[タスク]]の
[[allowed to show a popup]] に関するフラグを新しい[[タスク]]にも伝播させる必要があるかもしれません。

;; [[trusted]] 参照。

[37] [[タスクをキューに追加]]する処理は、次の引数を受け取ります。
[FIG(list members)[
: [VAR[イベントループ]] : 
[[タスクをキューに追加]]する処理を現に実行している[[イベントループ]]。
: [VAR[処理]] : [[アルゴリズム]]。
[[タスクをキューに追加]]する処理の呼び出し元の[[変数]]を参照する処理 ([[クロージャー]]的なもの)
かもしれません。
: [VAR[文脈]] : 
[[要素]]、[[閲覧文脈]]、[[スクリプト]]のいずれか。
]FIG]

[38] 次のようにしなければ[MUST[なりません]]。
[FIG(steps)[
= [42] [VAR[文書]]を、[VAR[文脈]]により、次の値に設定します [SRC[>>1]]。
[FIG(switch)[
: [[要素]] : [VAR[文脈]]の[F[節点文書]]
: [[閲覧文脈]] : [VAR[文脈]]の[F[活性文書]]
: [[スクリプト]] : [VAR[文脈]]の[F[設定群オブジェクト]]の[F[有責文書]]
]FIG]
= [39] [VAR[タスク]]を、[[タスク]]に設定します。
[FIG(list members)[ [40] [[タスク]]
: [F[処理]] : [VAR[処理]]
: [F[文書]] : [VAR[文書]]
]FIG]
= [13] [VAR[タスクキュー]]を、[VAR[イベントループ]]の[[タスクキュー]]のいずれかに設定します [SRC[>>1]]。
= [41] [VAR[タスク]]を[VAR[タスクキュー]]の末尾に追加します。
]FIG]

* 存在

[28] [CODE(DOMi)@en[[[EventSource]]]], [CODE(DOMi)@en[[[MessagePort]]]] の[[ごみ収集]]のタイミングは、
[[タスク]]が[[タスク・キュー]]に残っているかによって決まります。

;; [29] これは[[タスク]]から [CODE(DOMi)@en[[[EventSource]]]], 
[CODE(DOMi)@en[[[MessagePort]]]] へ[[強い参照]]があると解釈できるかもしれません。

;; [30] [[XHR]] は逆に[[ごみ収集]]によって[[タスク]]を破棄します。

[8] [[the [CODE(HTMLe)@en[embed]] element setup steps]] は、
同[[要素]]に関する[[タスク]]が他に追加されている場合、何も実行しません。
(実行中かどうかではなく追加されたかどうかの検査です。)
この検査は自[[タスク]]のみならず、そこから追加された他の[[タスクキュー]]からも行われます。

* 取得

[15] [[タスクキュー]]は [[FIFO]] っぽいもので、基本的には最古のものから取得 (実行)、
削除されます。しかし条件を満たさない[[タスク]]は[[イベントループ]]に無視されることになっていますから、
厳密には [[FIFO]] とは言えません。

;; [[イベントループ]]参照。

* 削除

[22] [[タスク]]は実行される際に[[キュー]]から削除されますが、それ以外にも削除されることがあります。
[FIG(list)[
- [23] 特定の [CODE(DOMi)@en[[[Document]]]] に関連付けられた[[タスク]]がすべて削除されることがあります。
-- [CODE(JS)@en[[[window.open]]]]
-- [[discard a [CODE(DOMi)@en[Document]]]]
- [24] 特定の[[タスク源]]の[[タスク]]がすべて削除されることがあります。
-- [[media element load algorithm]]
- [27] 特定の[[文書族]]・[[タスク源]]の[[タスク]]がすべて削除されることがあります。
-- [CODE(JS)@en[[[window.open]]]]
-- [[セッション履歴エントリーの挿入]]
- [26] 特定のものに関する [[fetch]] [[算法]]が生成した[[タスク]]がすべて削除されることがあります。
-- [[update the image data]]
-- [[媒体要素]]
-- [[text track]]
-- [[abort a document]]
-- [[XHR]] の[[ごみ収集]]
- [25] すべての[[タスク]]が削除されることがあります。
-- [CODE(DOMi)@en[[[WorkerGlobalScope]]]] の [CODE(DOMm)@en[[[close]]]]
-- [[kill a worker]]
-- [[XHR]]
-- [CODE(DOMi)@en[[[FileReader]]]] の [CODE(DOMm)@en[[[abort]]]]
-- [CODE(DOMi)@en[[[FileSaver]]]] の [CODE(DOMm)@en[[[abort]]]]
- [33] 特定の[[タスク]]が削除されることがあります。
-- [[planned navigation]]
]FIG]

[17] [[ポートメッセージキュー]]においては、[[タスク]]が (関連付けられた[F[文書]]を書き換えつつ)
他の[[ポートメッセージキュー]]へと移動されることがあります。

;; [[ポートメッセージキュー]]、[CODE(DOMi)@en[MessagePort]] 参照。

* 関連

[3] [[イベントループ]]は、1つ以上の[[タスクキュー]]を持ちます [SRC[>>1]]。

[31] [[イベントループ]]が複数存在する場合には、それぞれがそれぞれの[[タスクキュー]]を持ちます。

[32] [[タスク]]は原則として追加された順番に実行されていきますが、
未実行の[[タスク]]が入っていて実行待ちをしているのがこの[[タスクキュー]]です。
[[タスクキュー]]の個数は実装依存で、 [[Webブラウザー]]によって単一だったり、複数だったりします。
[[タスクキュー]]が複数あっても、同じ[[タスク源]]の[[タスク]]は同じ[[タスクキュー]]に入るので、
順序が保存されます。異なる[[タスク源]]の[[タスク]]の順序が保存されるかは実装依存です。

[34] [[セッション探索履歴キュー]]は[[タスクキュー]]のように機能しますが、
[[イベントループ]]ではなく[[最上位閲覧文脈]]に属しています。

[35] [[port message queue]] と [[unshipped port message queue]] は、
特殊な[[タスク源]]でもある[[タスク]]の[[キュー]]です。

[36] [[pending application cache download process tasks]] は[[タスクキュー]]のように[[タスク]]が追加されますが、
実行はされません。[[タスク]]の実行タイミングを遅延させるために使われます。

* 歴史

[6] [CITE@en[Web Applications 1.0 r2074 Define event loops, task queues, etc; Make 'fetching' use this mechanism (everything will in due course); Fix some cross-references around 'interactive content'.]]
([TIME[2008-08-16 09:52:00 +09:00]] 版)
<https://html5.org/r/2074>

[16] [CITE@en[Web Applications 1.0 r7992     Make <form> submission more like reality.]] ([TIME[2013-06-20 06:37:00 +09:00]] 版) <http://html5.org/tools/web-apps-tracker?from=7991&to=7992>
