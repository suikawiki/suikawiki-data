[1] [[HTTP]] の[DFN[基本 ([CODE(HTTP)[[[Basic]]]]) 認証]]は、[[利用者名]]と[[合言葉]]を使った、
とても基本的な[[認証]]方式です。

* 仕様書

[REFS[
- [26] '''[CITE@en[RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication]] ([TIME[2012-01-09 21:04:30 +09:00]] 版) <http://tools.ietf.org/html/rfc2617#section-2>'''
- [4] [CITE@en[RFC 3261 - SIP: Session Initiation Protocol]] ([TIME[2014-08-15 14:48:03 +09:00]] 版) <http://tools.ietf.org/html/rfc3261#section-22>
- [39] [CITE@en[RFC 4918 - HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)]] ([TIME[2014-09-21 17:04:59 +09:00]] 版) <http://tools.ietf.org/html/rfc4918#section-20.1>
- [55] [CITE@en[RFC 2910 - Internet Printing Protocol/1.1: Encoding and Transport]] ([TIME[2015-02-15 15:24:06 +09:00]] 版) <https://tools.ietf.org/html/rfc2910#section-8.1.2>
]REFS]

* 意味

[58] [[基本認証]]は、[[クライアント]]から[[鯖]]に[[利用者]]の有する[[利用者名]]と[[合言葉]]の組を送信し、[[鯖]]がこれを受け入れるかどうか判断する共有鍵による認証方式です。

[59] 本方式では、[[利用者名]]と[[合言葉]]の組が[[基本認証]]を使用するすべての
[[HTTP要求]]において転送されることになります。[[クライアント]] (または[[利用者]]) は、
[[利用者名]]と[[合言葉]]を[[平文]]または[[復号]]可能な形で保持している必要があります。
[[鯖]]は、[[利用者名]]と[[合言葉]]を保持する必要がありますが、こちらは[[ハッシュ化]]などを行って保存していても構いません。

;; [61] このため、 [[HTTPS]] でない素の [[HTTP]] で[[基本認証]]を用いるのは安全ではありません。

[60] 古くから広く行われている利用形態では、[[利用者]]本人 (または[[管理者]]等、いずれにせよ人間)
が事前に登録した[[利用者名]] (当該システム等の[[アカウント]]名などの記号列) と[[合言葉]]
([[パスワード]]) を用います。この形態は [[HTTP]] 以外の多くのシステムでも基本的な認証方式としてよく用いられていますが、
[[合言葉]]の強度や[[ソーシャルハッキング]]などに関する運用上の脆弱性が指摘されています。

[62] 近年では [[Web API]] 等における認証方式として、機械的に生成された[[利用者名]]と[[合言葉]]の組を用いる場合も増えています。この場合は人間が利用することは想定されていないのが普通です。

* [CODE(HTTP)@en[auth-scheme]]

[2] [[基本認証]]を表す [CODE(HTTP)@en[[[auth-scheme]]]] は [DFN[[CODE(HTTP)[[[Basic]]]]]] です。

* 誰何

[8] [[基本認証]]では [CODE(HTTP)@en[[[realm]]]] 以外の [CODE(ABNF)@en[[[auth-param]]]]
は使いません。 [SRC[>>3, >>18]]

** [CODE(HTTP)@en[realm]]

[6] [[基本認証]]における [CODE(HTTP)@en[[[realm]]]] は、[[不透明]]な文字列として扱うべきものであり、
同じ[[鯖]]の別の [CODE(HTTP)@en[[[realm]]]] と[RUBYB[等しさ]@en[equality]]の比較のみができます。
[SRC[>>3, >>18]]

* credentials

[15] [[基本認証]]の [[credentials]] は[[歴史的経緯]]により他の [[auth-scheme]] とは違う独自の構文になっています。

[16] [[利用者]]IDと[[合言葉]]を [CODE(char)[[[:]]]]
で連結し、それを [[Base64]] した文字列を [[credentials]] として使います。

[FIG[
[FIGCAPTION[
[19] [[RFC 2068]] における [CODE(HTTP)@en[[[Basic]]]] 認証の [[credentials]] の構文
]FIGCAPTION]

[PRE(ABNF code)[
          basic-credentials = "Basic" SP basic-cookie
          basic-cookie   = <base64 [7] encoding of user-pass,
                           except not limited to 76 char/line>
          user-pass   = userid ":" password
          userid      = *<TEXT excluding ":">
          password    = *TEXT
]PRE]

;; [28] [[RFC 2617]] の定義もこれと等価です。
]FIG]

[FIG[
[FIGCAPTION[
[11] [[RFC 1945]] における [CODE(HTTP)@en[[[Basic]]]] 認証の [[credentials]] の構文
]FIGCAPTION]

[PRE(ABNF code)[
       basic-credentials = "Basic" SP basic-cookie
       basic-cookie      = <base64 [5] encoding of userid-password,
                            except not limited to 76 char/line>
       userid-password   = [ token ] ":" *TEXT
]PRE]
]FIG]

[17] [[ABNF]] 構文上[[利用者]]IDと[[合言葉]]は [[HTTP]] の
[[TEXT]] に制限されていますが、実際には[[鯖]]の既存のシステムの認証システムが流用されていることもしばしばあり、
[[非ASCII文字]]が含まれることもあります。

;; [20] [[RFC 1945]] の定義では[[利用者]]IDは [[HTTP]] の [[token]] で、更に制限されていました。

[21] [[利用者]]ID は[[大文字・小文字不区別]]かもしれません。[SRC[>>18]]

[22] [[合言葉]]は[[大文字・小文字不区別]]かもしれません。

;; [23] [[大文字]]・[[小文字]]その他の値の[[正規化]]の有無は[[起源鯖]]の実装や設定に依存します。

[41] [[OAuth 2.0]] [[クライアント認証]]としての[[基本認証]]では、
[[利用者名]]と[[合言葉]]は [CODE(MIME)@en[[[application/x-www-form-urlencoded]]]]
版[[パーセント符号化]]したものを使います。

;; [[クライアント認証]]を参照。

[44] いくつかの[[Webアプリケーション]]の提供する [[Web API]] では、
[[利用者名]]を [[OAuth]] の[[アクセストークン]]やそれに相当する何らかの [[APIキー]]、
[[合言葉]]を空欄または何らかの固定の値として[[基本認証]]を使う[[認証]]方式を採用しています。

[FIG(quote)[
[FIGCAPTION[
[42] [CITE@en[Other Authentication Methods | GitHub API]]
([TIME[2015-02-05 07:24:20 +09:00]] 版)
<https://developer.github.com/v3/auth/>
]FIGCAPTION]

> you can authenticate using personal access tokens or OAuth tokens. To do so, provide the token as the username and provide a blank password or a password of x-oauth-basic. 

]FIG]

;; [45] [[OAuth 2.0]] [CODE(HTTP)@en[[[Bearer]]]] 認証と実質的に等価ですが、
[[基本認証]]は [[Webブラウザー]]が対応しているという利点 (場合によっては欠点) があります。

* 鯖の処理モデル

[7] [[鯖]]は、指定された[[利用者]] ID と[[合言葉]]が当該 [[Request-URI]]
の保護空間において妥当であると確認できる場合のみ、[[要求]]を[[認証]]します。

[EG[
[9] [[認証]]できない[[要求]]に対して[[鯖]]は
[PRE(HTTP code)[
WWW-Authenticate: Basic realm="WallyWorld"
]PRE]
... のように [CODE(HTTP)@en[[[realm]]]] を指定した [CODE(HTTP)@en[[[WWW-Authenticate:]]]]
欄を送ります。この [CODE(HTTP)@en[[[realm]]]] が当該 [[Request-URI]]
に対応する保護空間を表します。
]EG]

[65] [[Chrome]] や [[IE]] は、[[サーバー]]が複数の[[認証方式]]を示している場合、
[[基本認証]]は使用しません [SRC[>>64]]。

[REFS[
- [64] [CITE[HTTP authentication - The Chromium Projects]] ([TIME[2015-03-21 10:14:33 +09:00]] 版) <https://www.chromium.org/developers/design-documents/http-authentication>
]REFS]

* 利用者エージェントの処理モデル

[10] [[利用者エージェント]]は[[利用者]]IDと[[合言葉]]を [[credentials]]
に含めて、 [CODE(HTTP)@en[[[Authorization:]]]] 欄として送信します。

[EG[
[12] [[利用者]]ID が [CODE[Aladdin]] で[[合言葉]]が [CODE[open sesame]]
であるとすると、 [CODE(HTTP)@en[[[Authorization:]]]] 欄は
[PRE(HTTP code)[
Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
]PRE]
... となります [SRC[>>3]]。
]EG]

[29] [[利用者エージェント]]は、 [[Request-URI]] の [[path]] の最後の symbolic element
と同じ、またはそれ以深の [[path]] はすべて同じ保護空間内にあるものと仮定する[['''べきです''']]。
[[誰何]]を明示的に確認することなく [CODE(HTTP)@en[[[Authorization:]]]] を送って[['''構いません''']]。
[SRC[>>26]]

;; [30] 「symbolic element」とは何か説明がありませんが、[[ディレクトリー]]階層のことを言っているのでしょう。

[31] 同様に[[串]]の認証については、[[誰何]]を明示的に確認することなく
[CODE(HTTP)@en[[[Proxy-Authorization:]]]] を送って構いません。 [SRC[>>26]]

[63] [[Webブラウザー]]のような[[対話的]]な[[利用者エージェント]]では、
[CODE(HTTP)[[[401]]]] [[応答]]を受けて[[認証]]情報の入力を[[利用者]]に求める[[ダイアログ]]を表示し、
改めて[[要求]]を送信することができる実装形態になっているのが普通です。

;; [[HTTP認証]]も参照。

* 二段階認証

[47] [[GitHub]] は[[二段階認証]]のために追加の[[ヘッダー]]を導入しています。

[FIG(quote)[
[FIGCAPTION[
[43] [CITE@en[Other Authentication Methods | GitHub API]]
([TIME[2015-02-05 07:24:20 +09:00]] 版)
<https://developer.github.com/v3/auth/>
]FIGCAPTION]

> For users with two-factor authentication enabled, Basic Authentication requires an extra step. When you attempt to authenticate with Basic Authentication, the server will respond with a 401 and an X-GitHub-OTP: required; :2fa-type header. This indicates that a two-factor authentication code is needed (in addition to the username and password). The :2fa-type in this header indicates whether the account receives its two-factor authentication codes via SMS or via an application.
> In addition to the Basic Authentication credentials, you must send the user’s authentication code (i.e., one-time password) in the X-GitHub-OTP header. Because these authentication codes expire quickly, we recommend using the Authorizations API to create an access token and using that token to authenticate via OAuth for most API access.

]FIG]

* セキュリティー

[13] [[基本認証]]は[[利用者]]のIDと[[合言葉]]を[[平文]]で送信するので、
安全でない[[通信路]]でやり取りする[['''べきではありません''']] [SRC[>>24, >>32]]。 [[Base64]]
によって事故により[[合言葉]]を人間に傍受されることは防げますが、
悪意を持って[[合言葉]]や [[credentials]] を盗もうとするものには対抗できません。

[14] 実装によっては [[HTTPS]] でない [[HTTP]] で[[基本認証]]に対応していません。

[25] しかし非常に手軽な認証方式であることから、現在でもよく用いられています。
一般に[[平文]] [[HTTP]] での[[基本認証]]に対応しない[[クライアント]]は
[[Web互換]]ではありません。

[40] [[WebDAV]] の[[鯖]]と[[クライアント]]は、[[保安接続]]を除き、
[[基本認証]]を使っては[['''なりません''']] [SRC[>>39]]。

[56] [[IPP/1.1]] [[印刷機]]は[[保安通信路]]において[[基本認証]]に対応できます [SRC[>>55]]。

;; [57] それ以外での[[基本認証]]の利用は明示的には禁止されていませんが...

[46] [[基本認証]]は [[Webブラウザー]]が標準で対応しており、
また一度[[認証]]すると自動的に同じ [[credentials]] が送信されるので、
[[CSRF]] に関しては[[認証]]がない [[Webページ]]と同じ状態です。
[[基本認証]]があることを理由に [[CSRF]] 対策を省略することはできません。

* 歴史

** RFC

[REFS[
- [3] [CITE@en[RFC 1945 - Hypertext Transfer Protocol -- HTTP/1.0]] ([TIME[2012-02-18 23:25:56 +09:00]] 版) <http://tools.ietf.org/html/rfc1945#section-11.1>
- [18] [CITE@en[RFC 2068 - Hypertext Transfer Protocol -- HTTP/1.1]] ([TIME[2012-02-18 23:30:14 +09:00]] 版) <http://tools.ietf.org/html/rfc2068#section-11.1>
- [24] [CITE@en[RFC 2068 - Hypertext Transfer Protocol -- HTTP/1.1]] ([TIME[2012-02-18 23:30:14 +09:00]] 版) <http://tools.ietf.org/html/rfc2068#section-15.1>
- [27] [CITE@en[RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication]] ([TIME[2012-01-09 21:04:30 +09:00]] 版) <http://tools.ietf.org/html/rfc2617#section-2>
- [32] [CITE@en[RFC 2617 - HTTP Authentication: Basic and Digest Access Authentication]] ([TIME[2012-01-09 21:04:30 +09:00]] 版) <http://tools.ietf.org/html/rfc2617#section-4.1>
]REFS]

[33] [CITE[Git over HTTPS using OAuth token · GitHub Help]]
( ([TIME[2013-04-25 05:34:46 +09:00]] 版))
<https://help.github.com/articles/git-over-https-using-oauth-token>

[34] [CITE@en[HTTP Authentication encoding test results]]
( ([[Bjoern Hoehrmann]] 著, [TIME[2014-02-15 00:18:19 +09:00]] 版))
<http://lists.w3.org/Archives/Public/www-archive/2014Feb/0014.html>

[35] [CITE@en[RFC 7236 - Initial Hypertext Transfer Protocol (HTTP) Authentication Scheme Registrations]]
( ([TIME[2014-09-10 00:40:16 +09:00]] 版))
<https://tools.ietf.org/html/rfc7236#section-3>

[36] [CITE@en[draft-ietf-httpauth-basicauth-enc-03 - An Encoding Parameter for HTTP Basic Authentication]]
( ([TIME[2014-10-16 11:44:39 +09:00]] 版))
<https://tools.ietf.org/html/draft-ietf-httpauth-basicauth-enc-03>

[37] [CITE@en[draft-ietf-httpauth-basicauth-update-01 - The \x27Basic\x27 HTTP Authentication Scheme]]
( ([TIME[2014-10-16 11:44:39 +09:00]] 版))
<https://tools.ietf.org/html/draft-ietf-httpauth-basicauth-update-01>

[38] [CITE[Request Headers in the HTTP protocol]]
( ([TIME[2001-11-29 20:01:38 +09:00]] 版))
<http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z9>

[49] [[Twitter]] の [[API]] も当初は[[基本認証]]を使っていましたが、敗死されました。

[FIG(quote)[
[FIGCAPTION[
[48] [CITE[Use the Bitbucket REST APIs - Bitbucket - Atlassian Documentation]]
([TIME[2015-03-05 18:49:57 +09:00]] 版)
<https://confluence.atlassian.com/display/BITBUCKET/Use+the+Bitbucket+REST+APIs#UsetheBitbucketRESTAPIs-Authentication>
]FIGCAPTION]

>  If you are testing an application, you can use a client such as cURL together with basic authentication (username/password). 

]FIG]


[FIG(quote)[
[FIGCAPTION[
[50] [CITE[はてなハイク REST API - Hatena Developer Center]]
([TIME[2015-03-05 18:51:22 +09:00]] 版)
<http://developer.hatena.ne.jp/ja/documents/haiku/apis/rest#auth-basic>
]FIGCAPTION]

> HTTP で定められている基本 (basic) 認証も利用できます。ユーザ名にはてなIDを、パスワードには投稿用アドレス (...@h.hatena.ne.jp のもの) を指定します。安全性考慮のため通常のはてなのパスワードではないのでご注意ください。
> 基本 (basic) 認証の利用は非推奨となっております。

]FIG]


[FIG(quote)[
[FIGCAPTION[
[51] [CITE@en[Heroku API]]
([TIME[2015-03-06 08:12:19 +09:00]] 版)
<https://legacy-api-docs.herokuapp.com/>
]FIGCAPTION]

> Authentication to the Heroku API is accomplished using an API key, available on the My Account page.
> Once you have an API key, use HTTP Basic Authentication with a blank username and the API key as a password. 

]FIG]


[FIG(quote)[
[FIGCAPTION[
[52] [CITE[API | Snap CI | Hosted Continuous Integration]]
([TIME[2015-03-04 01:09:13 +09:00]] 版)
<https://docs.snap-ci.com/api/>
]FIGCAPTION]

> Snap uses basic authentication. To authenticate you need to provide your username and API key.

]FIG]


[FIG(quote)[
[FIGCAPTION[
[53] [CITE[WooCommerce REST API Documentation v2]]
([TIME[2015-03-11 03:10:19 +09:00]] 版)
<http://woothemes.github.io/woocommerce-rest-api-docs/#authentication>
]FIGCAPTION]

> You may use HTTP Basic Auth by providing the API Consumer Key as the username and the API Consumer Secret as the password.

]FIG]


[FIG(quote)[
[FIGCAPTION[
[54] [CITE[API Basics — Scrapinghub documentation]]
([TIME[2015-03-05 23:55:58 +09:00]] 版)
<http://doc.scrapinghub.com/api.html>
]FIGCAPTION]

> using HTTP basic auth:
> $ curl -u APIKEY: https://storage.scrapinghub.com/foo

]FIG]