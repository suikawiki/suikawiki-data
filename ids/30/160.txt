[4] 
[[文字コード]]を[[識別]]する[[名前]]の体系には色々なものがあります。

* 識別子の体系

[FIG(short list)[ [1] [[文字コード名]]の体系
- [[符号化名]]
- [[符号化ラベル]]
- [[UTR #22]]
-- [CITE@en-us[UTS #22: CharMapML]] ([TIME[2017-06-01 07:35:01 +09:00]]) <https://www.unicode.org/reports/tr22/tr22-8.html#Charset_Alias_Matching>
- [[IANA charset]]
-[[エチオピア文字符号化系引数値]]
- [CODE[Encode.pm]] の名前
- [CITE[ICU]] の名前
- [CODE[encoding=""]]

]FIG]

[5] 
多くの[[文字コード]]は正式な唯一の名前が無かったり、
機械的な[[識別子]]としての利用に適した名前では無かったり、
人間向けと機械向けで違う名前を用意していたり、
識別子の体系によって違う名前を与えられていたりします。

[7] 
また、識別子の体系の管理が破綻していて、
正式な定義と実際に使われるものと違いが生じていたり、
正式な定義がないまま[[事実上の標準]]となるものが使われていたりすることもままあります。

[8] 
他の識別子の体系の識別子が移入されて使われることも多いのですが、
丸々同じものを採用せずにつまみ食い + 独自分、というパターンが非常に多いので、
[[利用者]]の正確な理解を妨げています。

[6] 
たまに識別子に含まれる些細な[[記号]]や[[空白]]の違いで「この文字コードをこれこれというのは誤りで、
これこれというのが正しい」と主張する人が出現しますが、
そのような主張は正しくないことが多いです。
「これこれの場面ではこれこれの名前が正しい」
のような限定的な条件でしか成立しないことを、勝手に拡大解釈するタイプです。

[10] 
より深刻な問題として、識別子が[[文字コード]]体系の細かなバリエーションのどれを指しているのか明らかでない場合や、
正式な定義と世間の実態が乖離している場合が多くあります。
識別子の体系が細かなバリエーションを区別しているのに、
実態としては混用されているような場合もあります。


[9] 
こうした問題は解決しないまま [[UTF-8]] への移行が進み、表立ってトラブルにつながることが少なくなったのはいいことですが、
一方で問題の発生数が減って見えにくくなったり、
古いデータやプログラムの理解に問題があるのを修正されないままとなっていたり、
トラブル解決のための情報が減少していたりと、
狭く深い問題に変化しつつあります。

* 識別される「文字コード」

[11] 
狭義の[[文字コード]]の体系の他に、[[改行文字]]の種別や [[Unicode正規化]]の適用などの動作オプション
[SEE[ [[文字コードの変換]] ]] が[[文字コード名]]に取り込まれていることがあります。

* メモ


[2] [CITE@en-US[GNU gettext - Bugs: bug #50357, xgettext doesn't recognise... '''['''Savannah''']''']]
([[Copyright 2016 Free Software Foundation, Inc. Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved.]]著, [TIME[2017-02-22 15:05:12 +09:00]])
<https://savannah.gnu.org/bugs/?50357>

[3] [CITE@en[PEP 263 -- Defining Python Source Code Encodings | Python.org]]
([TIME[2017-02-22 15:05:56 +09:00]])
<https://www.python.org/dev/peps/pep-0263/>