[53] データの[[バイト列]]を検査してその[[MIME型]]などを決定することを、[DFN[[[sniffing]]]] といいます。

* MIME sniffing (Web)

[1] [[Web]] では、 [[MIME sniffing]] によって [[MIME型]]が決定されます。

;; [[MIME sniffing]] 参照。

* 符号化 sniffing (Web)

[69] [DFN[encoding sniffing]] ([DFN[charset sniffing]]) は、
[[バイト列]]からその[[符号化][文字符号化]]を推定する[[アルゴリズム]]です。

[FIG(short list)[ [4] [[Web]] の [[charset sniffing]] [[アルゴリズム]]
- [[BOM sniffing]]
- [[HTML encoding sniffing]]
- [[XML encoding sniffing]]
- [[CSS encoding sniffing]]

]FIG]

;; [2] まとめと比較は[[復号器]]を参照。

* 特別な記述を検出する手法

[FIG(list short)[ [3] 
- [[shebang]]
- [[魔法行]]
- [[codec]]
- [CODE[-*-]]
-- [CODE[-*- coding -*-]]
- [CODE[vim:]]
- [CODE[SPDX-License-Identifier:]]
- [CN[BOM]]

]FIG]

[13] 関連: [[コメントの中身が意味を持ってしまう]]

* [CODE[file(1)]]

[5] [CODE[file(1)]] 参照。

* MIME magic

[97] 多くの[[プラットフォーム]]に [[MIME magic]] などと称するツールがあります。
これは、[[ファイル]]の先頭の[[バイト]]列から [[MIME型]]を推定するものです。

;; [[MIME magic]] 参照。

* JSON の BOM sniffing

[25] [[RFC 4627]] が [[JSON]] の [[charset sniffing]] について言及しています。

;; [[JSON]] 参照。

* RDFa 処理器の Sniffing

[50] [[RDFa 1.1]] に基づく [[RDFa処理器]]は、 [[MIME型]]によって[[ホスト言語]]を決定しなければ[['''なりません''']]。
[[MIME型]]を決定できないか未対応の時は、 [CODE(MIME)@en[[[application/xml]]]] としなければ[['''なりません''']]。 
[SRC[>>49]]

[51] >>50 の直後にこれと矛盾する次のような「NOTE」があります。 [[MIME型]]が無い時、
[[DOCTYPE]]、[[根要素]]、[[拡張子]]、[[利用者]]定義の引数など追加の仕組みを用いても[['''構いません''']] [SRC[>>49]]。

[REFS[
- [49] [CITE@en[RDFa Core 1.1 - Second Edition]] ([TIME[2013-08-15 17:12:47 +09:00]] 版) <http://www.w3.org/TR/rdfa-core/#h3_processorconf>
]REFS]

* IPP の Sniffing

[FIG(quote)[
[FIGCAPTION[
[82] [CITE@en[RFC 2911 - Internet Printing Protocol/1.1: Model and Semantics]]
([TIME[2015-02-15 17:22:27 +09:00]] 版)
<https://tools.ietf.org/html/rfc2911#section-4.1.9.1>
]FIGCAPTION]

> One special type is 'application/octet-stream'.  If the Printer
object supports this value, the Printer object MUST be capable of
auto-sensing the format of the document data using an
implementation-dependent method that examines some number of octets
of the document data, either as part of the create operation and/or
at document processing time.

]FIG]

* バイト数

[10] 
[[HTML]] の [[encoding sniffing algorithm]]
は先頭1024バイトを1つの基準としています。

[12] 
[[CSS encoding sniffing]] は先頭1024バイトを検査します。

[11] 
[[MIME sniffing]] は先頭1445バイトを検査します。

* 相互運用性

[14] 
[[sniffing]] は[[発見的]]方法によることが多く、[[相互運用性]]に乏しいのが問題です。

[15] 
[[Webプラットフォーム]]は [[sniffing]] の方法も[[標準化]]していますが、 
各実装は完全にそれに従っているわけではなく、
[[相互運用性]]の問題は皆無ではありません。

* セキュリティー

[16] 
[[sniffing]] の[[相互運用性]]の問題は、そのまま[[セキュリティー]]の問題となります。

[17] 
とりわけ、安全と考えられている[[ファイル形式]]が危険な[[ファイル形式]]と(誤)判定され得る状況は、
しばしば悪用されます。

[18] 
故に、

- [19] 可能なら [[sniffing]] は避けること
- [20] [[sniffing]] が不可避なら、[[仕様書]]で明確に挙動を規定すること
- [22] [[sniffing]] 結果次第で安全性に違いが生じ得るときは、
その危険の程度を把握して当事者 (標準化の担当者、実装者および通信の当事者)
で認識を共有すること
- [21] 実装は[[仕様書]]が定めた挙動に厳密に従うこと

は[[セキュリティー]]のために極めて重要と考えられています。



* 関連

[6] [[ファイル形式]]も参照。

[7] [[browser sniffing]] も参照。

* メモ

[8] [CITE@en[Editorial: further cleanup "abort these steps"]]
([[shreyateeza]]著, [TIME[2018-01-09 20:22:36 +09:00]])
<https://github.com/whatwg/html/commit/99e2cdfc484c2ff14cbf5c38b859f4d6da17e64c>

[9] [CITE@en[rouge/lib/rouge/guessers at master · jneen/rouge]]
([TIME[2018-02-22 14:43:00 +09:00]])
<https://github.com/jneen/rouge/tree/master/lib/rouge/guessers>


[23] [CITE[TOPICS - VC]], [TIME[2024-08-19T09:02:08.000Z]], [TIME[1998-01-31T16:05:42.656Z]] <https://web.archive.org/web/19980131160510fw_/http://www.villagecenter.co.jp/cgi-bin/contents.cgi?0=TOPICS>

>
[PRE[
<body bgcolor="black" text="white" link="yellow" vlink="#FF8080">
<!--
あいうえおかきくけこさしすせそたちつてと
IEが EUC を認識しないので、その対策です。(^_^;
-->
]PRE]



[24] 
[CITE[Word で「打」で始まるテキスト ファイルを開くとコンバーターを要求される | Japan Office Client Support Blog]], [TIME[2024-09-17T04:45:18.000Z]], [TIME[2024-09-18T02:25:46.578Z]] <https://officesupportjp.github.io/blog/cm15ufuis0000f0seec0i7yev/>
