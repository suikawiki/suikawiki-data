* JSON を称する非 JSON

[258] 
かつて [[JSON]] を規定していた [[RFC]] が拡張された [[JSON]] に対応することを認めていたこともあり
[SEE[ [[JSON]] ]]、また [[JSON]]
が広い分野で用いられていることもあり、いろいろな [DFN[JSONの変種]]が「[[JSON]]」
と呼ばれていることがあります。


- [22] [[JSONP]] が [[JSON]] として扱われることがあります。
- [295] [[改行区切りJSON列]]その他の [[JSON]] ストリームが [[JSON]] として扱われることがあります。
- [23] [[オブジェクト]]の[[特性名]]を表す[[文字列リテラル]]が [CODE(char)[[["]]]] で括られないことがあります。
- [24] [[JSON]] の前に「[CODE(JS)[[[var]] name = ]]」のような[[文字列]]がつくことがあります。
- [25] [[YAML]] の [[serializer]] によって実際には [[JSON]] ではない [[YAML]] が [[JSON]] であるとして出力されることがあります [SEE[ [[JSON]] ]]。
- [87] [[JavaScript]] の[[注釈]]が含まれることがあります。
-- /* ... */
-- // ...
- [88] [[配列]]や[[オブジェクト]]の最後の[[メンバー]]の後に [CODE(char)[[[,]]]] が余分に挿入されることがあります。
- [110] 果ては[[関数リテラル]]が含まれることすらあります。
- [112] # ... のような注釈が使われることがあります。
- [117] 0x0000 のような数値の16進数表記が用いられることがあります。
- [158] [[XSSI]] 防止のために本来の [[JSON]] データの前に「[CODE[)]}]]」のようなごみを挿入することがあります。
[[Source Map]] はこれを明示的に認めています。
- [165] [[Perl]] モジュールである [CODE(perl)@en[[[JSON::XS]]]] は、[[符号化]]時に数値としての [[inf]] や [[nan]] が与えられると[[引用符]]のない
[CODE[inf]] や [CODE[nan]] を出力します。 ([[復号]]はできず構文エラーになります。) [TIME[2014-01-09T11:35:59.600Z]]
- [290] [[Perlモジュール]]である [CODE(perl)@en[[[JSON::XS]]]] は [[tagged value]]
と称して [[Perlモジュール]]との対応付け情報が含まれた値を記述する構文を導入しています。
(ただし標準では無効になっています。)
-- [CITE[JSON::XS]] ([TIME[2015-02-21 19:32:42 +09:00]] 版) <http://pod.tst.eu/http://cvs.schmorp.de/JSON-XS/XS.pm#OBJECT_SERIALISATION>
-- [CITE[JSON::XS]] ([TIME[2015-02-21 19:33:08 +09:00]] 版) <http://pod.tst.eu/http://cvs.schmorp.de/JSON-XS/XS.pm#TAGGED_VALUE_SYNTAX_AND_STANDARD_JSO>
- [16] [[文字列リテラル]]に生の[[改行]]が含まれることがあります。
-- [CITE@ja[golang で Invalid な Json をパースした話 - ちなみに]] ([TIME[2016-08-24 16:30:03 +09:00]] 版) <http://sixeight.hatenablog.com/entry/2014/04/16/213243>


[457] 
現在の仕様書である [[ECMA-404]] は、このような拡張の存在を認めていません。
適合する処理器は非標準の構文を受理するべきではないとしています。
従って、こうした[[JSONの変種]]は、かつて [[JSON]]
と呼ばれ使われることが少なかったとはいえ、今後は使うべきではなく、
[[JSON]] と呼ぶべきでもありません。


[440] 
[[JSON]]
の[[応用]]の1つである
[[JWS]] 
を規定する
[[RFC 7515]]
は、[[構文解析器]]が [[RFC 7159]] の構文に反するものを拒絶しなければ[MUST[ならない]]としています。
[SRC[>>439]]

[441] [CODE[{"a":"b"}c]] のように余分なデータが含まれるものも不正な入力としなければならないことが特に注意されています。
[SRC[>>439]]

[458] 
「[[JSON]] と呼ばれるものが [[ECMA-404]] の定める [[JSON]] であること」
「[[JSON]] を解釈する実装が [[ECMA-404]] の定める [[JSON]] だけを受理すること」
「[[JSON]] を生成する実装が [[ECMA-404]] の定める [[JSON]] だけを生成すること」
は、
[[相互運用性]]はもちろん、[[セキュリティー]]のためにも重要です。


[REFS[
- [439] [CITE@en[[[RFC 7515]] - JSON Web Signature (JWS)]], [TIME[2020-03-29 16:13:43 +09:00]] <https://tools.ietf.org/html/rfc7515#section-10.12>
]REFS]

* JSON に影響されたデータ形式


[267] 
[[JSON]] と互換性のあるもの、ないもの、 [[JSON]] 自体で表現できない[[データモデル]]を
[[JSON]] として表現する方法を定義するもの、 [[JSON]] に触発されただけで実際には [[JSON]]
と関係性が薄いもの、[[JSON]] の[[プロファイル]]も含め、次のような名前がついた [[JSON]] の派生仕様が存在しています。

[FIG(short list)[ [454] [[JSON]] からの派生
- [[BSON]]
- [[B-JSON]]
- [[I-JSON]]
- [[JSON-B]]
- [[JSON-C]]
- [[JSON+C]]
- [[JSON-D]]
- [[JSON-L]]
- [[JSON5]]
- [[JSON6]]
- [[Smile]]
- [[Universal Binary JSON]] ([[UBJSON]])
- [[JSYNC]]
- [[MongoDB Extended JSON]]
- [[JSONx]]
- [[XJSON]]
- [[PSON]]
- [[Jsonnet]]
- [[hjson]]
- [[EXI for JSON]]
- [[JCR]]
- [[MSON]]
- [[NSON]]
- [[HOCON]]
- [[CSON]]
- [[EXI for JSON]]
- [[TJSON]]
- [[Oracle JSON lax syntax]]
- [[EJSON]]
- [[JSCN]]
- [[JSON Canonical Form]]
- [[JSON Canonicalization Scheme]]
- [[Canonical JSON (NPM)]]
- [[Canonical JSON (OLPC)]]
- [[jsonc]]
]FIG]

[286] [[CBOR]] は [[JSON]] データモデルとの互換性を大きな特徴として挙げています。

;; [268] いずれも [[JSON]] ほどの支持は集められておらず、提案段階にとどまっているか、
特定の実装にだけ採用されているものです。

[21] [[MessagePack]] は [[JSON]] の派生仕様ではなく互換性はありませんが、
「It's like JSON. but fast and small.」と謳っています。各言語のライブラリーが存在し、
それなりに広く利用されているようですが、 [[JSON]] ほどとは言えなそうですし、
対象分野も必ずしも近いとは言えなそうです。少なくても [[Web API]] 等の[[疎結合]]な [[API]]
を通じた情報交換目的で [[MessagePack]] が [[JSON]] と競合しているようには見えません。

[460] 
[[YAML]]
は歴史的には [[JSON]] より古いですが、 [[JSON]] との「互換性」
が特徴に謳われたり、
それを理由に推したりする人がいます
[SEE[ [[JSON]] ]]。


[459] 
これらの [[JSON]] の変種の中には、 [[JSON]] データが与えられた時にそれを処理できることをメリットの1つとして謳っているものもあります
(がそうではないものもあります)。



[455] 
[CITE@en[Should we consolidate the human-readable JSON efforts? · Issue #190 · json5/json5 · [[GitHub]]]], [TIME[2021-09-21T05:50:49.000Z]] <https://github.com/json5/json5/issues/190>

[456] 
[[JSON]] がいかに画期的で1度限りの成功だったかがわかるなあ。

* 関連

[SEE[ JSON を使ったプロトコルやアプリケーションは [[JSONの応用]] ]]

[SEE[ JSON を使ったデータストリーミングや改行区切りJSONは [[JSONストリーム]] ]]

* メモ