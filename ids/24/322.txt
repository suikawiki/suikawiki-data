* 仕様書

[REFS[
- [1] [CITE@en[RFC 6455 - The WebSocket Protocol]] ([TIME[2015-03-11 20:42:50 +09:00]] 版) <http://tools.ietf.org/html/rfc6455#section-5.5.1>
- [12] [CITE@en[RFC 6455 - The WebSocket Protocol]] ([TIME[2015-03-11 20:42:50 +09:00]] 版) <http://tools.ietf.org/html/rfc6455#section-7>
- [49] [CITE@en[RFC 6455 - The WebSocket Protocol]] ([TIME[2015-03-11 20:42:50 +09:00]] 版) <http://tools.ietf.org/html/rfc6455#section-8>
- [42] [CITE@en[RFC 6455 - The WebSocket Protocol]] ([TIME[2015-03-11 20:42:50 +09:00]] 版) <http://tools.ietf.org/html/rfc6455#section-10.7>
- [54] [CITE[RFC Errata Report]] ([TIME[2015-05-16 22:26:12 +09:00]] 版) <http://www.rfc-editor.org/errata_search.php?rfc=6455>
- [58] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#dom-websocket-close>
- [62] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#feedback-from-the-protocol>
- [77] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#closeevent>
- [84] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#garbage-collection-3>
]REFS]

* 接続の終了

[44] [[WebSocket接続]]の終了は、次のような動作により開始されます。
[FIG(list)[
- [45] [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]の [CODE(DOMm)@en[[[close]]]] 
メソッド (>>59) や、それに相当する操作
- [47] [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]の [[make disappear]] (>>90)
- [48] [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]の[[ごみ収集]] (>>89)
- [46] [[WebSocket handshake]] や [[WebSocketメッセージ受信]]による[[WebSocket接続失敗]]
- [55] [[WebSocket handshake]] による [[Abort the WebSocket Connection]] (>>38)
- [56] 下位層の接続が切断されることによる[[WebSocket接続失敗]] (>>37)
]FIG]

[37] [[クライアント]]は、[[トランスポート層]]の[[接続]]が失われたら、
[[WebSocket接続失敗]]を実行しなければ[['''なりません''']] [SRC[>>12]]。

;; [57] なぜか[[サーバー]]に関する規定はありません。

* [CODE(DOMi)@en[WebSocket]] インターフェイス [CODE(DOMm)@en[close]] メソッド

[59] [CODE(DOMi)@en[[[WebSocket]]]] [[インターフェイス]]の
[DFN[[CODE(DOMm)@en[[[close]]]]]] [[メソッド]]は、
次のようにしなければ[['''なりません''']] [SRC[>>58]]。

[FIG(steps)[
= 第1引数があれば、 [CODE(IDL)@en[[[unsigned short]]]] として解釈します。
[CODE(IDL)@en[[[Clamp]]]] [[拡張属性]]を適用します。
= 第2引数があれば、 [CODE(IDL)@en[[[USVString]]]] として解釈します。
= 第1引数が [CODE[[[1000]]]] か [CODE[[[3000]]]]-[CODE[[[4999]]]] の範囲になければ、
[CODE(DOMe)@en[[[InvalidAccessError]]]] [[例外]]を投げ、停止します。
= 第2引数があれば、
== [[UTF-8]] で[[符号化]]します。
== 124バイト[[以上]]なら、 [CODE(DOMe)@en[[[SyntaxError]]]] [[例外]]を投げ、停止します。
= [CODE(DOMa)@en[[[readyState]]]] が [CODE(DOMc)@en[[[CLOSING]]]] ([CODE[[[2]]]]) か
[CODE(DOMc)@en[[[CLOSED]]]] ([CODE[[[3]]]]) なら、何もしません。
= それ以外で、まだ[[WebSocket接続確立]]に達していなければ (= 接続の状態が
[CODE(DOMc)@en[[[CONNECTING]]]] なら)、
== [[WebSocket接続失敗]]を実行します。
== [CODE(DOMa)@en[[[readyState]]]] を、 [CODE(DOMc)@en[[[CLOSING]]]] ([CODE[[[2]]]]) に設定します。
= それ以外で、まだ [[The WebSocket Closing Handshake is Started]] に達していなければ
(= 接続の状態が [CODE(DOMc)@en[[[OPEN]]]] なら)、
== [[Start the WebSocket closing handshake]] を実行します。
第1引数があれば[[状態符号]]、第2引数があれば理由として引き渡します。
== [CODE(DOMa)@en[[[readyState]]]] を、 [CODE(DOMc)@en[[[CLOSING]]]] ([CODE[[[2]]]]) に設定します。
= それ以外なら、
== [CODE(DOMa)@en[[[readyState]]]] を、 [CODE(DOMc)@en[[[CLOSING]]]] ([CODE[[[2]]]]) に設定します。
]FIG]

;; [60] 接続の状態と [CODE(DOMa)@en[[[readyState]]]] は異なることがあります。
[[WebSocket接続]]を参照。

* 閉じ handshake

[20] [DFN[[[Start the WebSocket Closing Handshake]]]] とは、
次のようにしなければ[['''なりません''']] [SRC[>>12]]。
[FIG(steps)[
= [21] [[フレーム]]を送信します。
[FIG(list members)[
[FIGCAPTION[
[[フレーム]]
]FIGCAPTION]
:[CODE[[[opcode]]]]:[CODE[[[Close]]]]
:[[状態符号]]:あれば、指定された値
:[[close reason]]:あれば、指定された値
]FIG]
= [24] [[WebSocket接続]]の状態を [CODE[[[CLOSING]]]] とします。
= [23] [[[CODE[Close]]フレーム]]を受信し(てい)たら、
[[WebSocket接続を閉じる]][['''べき''']]です。
]FIG]

[25] [[[CODE[Close]]フレーム]]を受信したら、
[[WebSocket接続]]の状態を [CODE[[[CLOSING]]]] とします [SRC[>>12]]。

[26] [[WebSocket接続]]の状態が [CODE[[[CLOSING]]]] となる時、
[DFN[[[The WebSocket Closing Handshake is Started]]]] といいます [SRC[>>12]]。

[61] [[the WebSocket closing handshake is started]] の際、
次の[[タスク]]を[[タスクキュー]]に追加しなければ[['''なりません''']] [SRC[>>62]]。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[WebSocketタスク源]]
:処理:
[FIG(steps)[
= [CODE(DOMa)@en[[[readyState]]]] を、 [DFN[[CODE(DOM)@en[[[CLOSING]]]]]] ([CODE[[[2]]]])
に設定します。
]FIG]
]FIG]

;; [63] 既に [CODE(DOM)@en[[[CLOSING]]]] になっている場合もあります。

[36] [[クライアント]]は、[[応用]]から指示された場合や[[プロトコル]]で規定されている場合を除き、
[[接続]]を閉じる[['''べきではありません''']] [SRC[>>12]]。
閉じる場合は、 [[Start the WebSocket Closing Handshake]] を実行します [SRC[>>12]]。

[40] [[サーバー]]は、適宜接続を閉じて構いません [SRC[>>12]]。
閉じる場合は、 [[Start the WebSocket Closing Handshake]] を実行します [SRC[>>12]]。

* 接続失敗

[7] [[WebSocket接続の確立]]や[[WebSocketメッセージ受信]]により、
[DFN[[RUBYB[WebSocket接続失敗]@en[Fail the WebSocket Connection]]]]となることがあります。

[33] 次のようにしなければ[['''なりません''']]。
[FIG(steps)[
= [34] [[WebSocket接続失敗]]フラグを[[真]]に設定します。
= [80] 接続の状態が [CODE[[[OPEN]]]] なら、
== [81] 適切な[[状態符号]]の [[[CODE[Close]]フレーム]]を送信する[['''べきです''']]。
ただしエラーの性質上相手が受信して処理しないだろうと思われるなら、省略して構いません。 [SRC[>>12]]
= [93] [[WebSocket接続を閉じる]]処理を実行します。 [SRC[>>12]]
= [94] [[クライアント]]なら[[利用者]]に問題を報告しても構いません。 [SRC[>>12]]
= [95] [[サーバー]]なら問題を記録する[['''べきです''']]。 [SRC[>>12]]
]FIG]

;; [76] [[RFC]] は「[[WebSocket接続確立]]を過ぎていれば」 [SRC[>>12]] との条件で
[[[CODE[Close]]フレーム]]を送ることを求めていますが、
[[サーバー]]には[[WebSocket接続確立]]が無く、また [CODE[[[CLOSING]]]]
になった後で再度 [[[CODE[Close]]フレーム]]を送るのは不適切と思われます。

[35] [[WebSocket接続失敗]]以後、受信したデータを処理し続けようとしては[['''なりません''']]。
これには、 [[[CODE[Close]]フレーム]]への返信も含まれます。 [SRC[>>12]]

[38] [[サーバー]]が [DFN[[[Abort the WebSocket Connection]]]] したら、
[[WebSocket接続を閉じる]]処理を実行しなければ[['''なりません''']] [SRC[>>12]]。

* 接続を閉じる

[13] [DFN[[RUBYB[WebSocket接続を閉じる]@en[Close the WebSocket Connection]]]]時には、
下位[[TCP接続]]を閉じます [SRC[>>12]]。[[サーバー]]は、直ちに [[TCP]]
を閉じる[['''べきです''']] [SRC[>>12]]。[[クライアント]]は、
[[サーバー]]から [[TCP]] が閉じられるのを待つ[['''べきです''']] [SRC[>>12]]。

[14] [[TCP接続]]と[[TLSセッション]]を綺麗に閉じる方法を使い、
受信したかもしれない[[バイト]]は捨てる[['''べきです''']] [SRC[>>12]]。

[16] 最も通常な場合には、まず ([[クライアント]]からではなく)
[[サーバー]]から [[TCP接続]]を閉じる[['''べきです''']] [SRC[>>12]]。

;; [17] そうすることで、[[クライアント]]ではなく[[サーバー]]の [[TCP]]
が [CODE[[[TIME_WAIT]]]] 状態となります。 [CODE[[[TIME_WAIT]]]] 状態である
[[最大セグメント寿命]]の2倍 (2[[MSL]]) の間は改めて[[接続]]を開くことができませんが、
[[サーバー]]側ならより大きな[[シーケンス番号]]の [CODE[[[SYN]]]] を送信すれば直ちに[[接続]]を開けるので問題となりません。 [SRC[>>12]]

[EG[
[19] 例えば [[socket]] API では、
まず [CODE[[[SHUT_WR]]]] を指定して [CODE[[[shutdown]]]] を呼び出し、
[CODE[[[0]]]] が返されるまで [CODE[[[recv]]]] を呼び出し、
最後に [CODE[[[close]]]] を呼ぶことでこれを実装できます [SRC[>>12]]。
]EG]

[15] 攻撃されている時など、必要に応じて他の方法で閉じても構いません [SRC[>>12]]。

[18] 十分な時間[[サーバー]]から [[TCP]] Close を受信しない場合などには[[クライアント]]から
[[TCP]] を閉じて構いません [SRC[>>12]]。

[27] [[TCP接続]]が閉じられた時、
[DFN[[[The WebSocket Connection is Closed]]]] といいます [SRC[>>12]]。
この時、 [[WebSocket接続]]の状態は [DFN[[CODE[[[CLOSED]]]]]]
([CODE[[[3]]]]) となります [SRC[>>12]]。

;; [29] [[WebSocket接続]]が確立できなかった時も、
[[The WebSocket Connection is Closed]] といいます。 [[cleanly]] ではありません。 [SRC[>>12]]

[28] [[WebSocket接続]]の閉じ handshake が完了してから [[TCP接続]]が閉じられたなら、
「[DFN[[[cleanly]]]]」に閉じられたといいます [SRC[>>12]]。
そうでなければ [[cleanly]] ではありません。

[64] [[the WebSocket connection is closed]] なら、次の[[タスク]]を[[タスクキュー]]に追加しなければ[['''なりません''']] [SRC[>>62]]。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[WebSocketタスク源]]
:処理:
[FIG(steps)[
= [CODE(DOMa)@en[[[readyState]]]] を、 [CODE(DOM)@en[[[CLOSED]]]] ([CODE[[[3]]]])
に設定します。
= [[WebSocket接続失敗]]の場合や、 [[flagged as full]] が設定されてから
[[the WebSocket connection is closed]] となったなら、
[[単純イベントを発火]]します。
[FIG(list members short)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[error]]]]
:[[対象オブジェクト]]:[CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]
]FIG]
= [[イベント]]を[[発火]]します。
[FIG(list members short)[
[FIGCAPTION[
[[イベント]]
]FIGCAPTION]
:[[インターフェイス]]:[CODE(DOMi)@en[[[CloseEvent]]]]
:[[イベント型]]:[CODE(DOMe)@en[[[close]]]]
:[[対象オブジェクト]]:[CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]
:[[bubbles]]:[[偽]]
:[[取り消し可能]]:[[偽]]
:[[既定動作]]:なし
:[CODE(DOMa)@en[[[wasClean]]]]:[VAR[cleanly]]
:[CODE(DOMa)@en[[[code]]]]:[[WebSocket接続閉じ符号]]
:[CODE(DOMa)@en[[[reason]]]]:[[WebSocket接続閉じ理由]]
]FIG]
]FIG]
]FIG]

[78] [CODE(DOMi)@en[[[CloseEvent]]]] [[インターフェイス]]の
[DFN[[CODE(DOMa)@en[[[wasClean]]]]]] [[属性]]は、 [VAR[cleanly]]
に閉じられたかどうかを表します。

[79] この[[属性]]は、その[[属性値]]として設定された値を返さなければ[['''なりません''']] [SRC[>>77]]。[[データ型]]は [CODE(IDL)@en[[[boolean]]]] で、初期値は[[偽]]です [SRC[>>77]]。

[66] [[利用者エージェント]]は、[[スクリプト]]に次の状況を区別できる情報を提供しては[['''なりません''']] [SRC[>>62]]。
[FIG(list)[
- [67] [[ホスト名]]が[[名前解決]]できなかった場合
- [68] [[サーバー]]に[[パケット]]を配送する[[経路]]を見つけられなかった場合
- [69] [[ポート]]への[[接続]]が拒まれた場合
- [70] [[TLS handshake]] に失敗した場合 (例えば[[証明書]]を検証できなかった場合)
- [71] [[WebSocket handshake]] を完了できなかった場合
- [72] [[WebSocket handshake]] は完了したものの、[[クライアント]]が[[接続]]を閉じる状況となった場合 (例えば[[クライアント]]が想定しない[[部分プロトコル]]を[[サーバー]]が指定した場合)
- [73] [[WebSocket handshake]] は成功したものの[[接続]]が予期せず閉じられた場合
]FIG]

[74] このような場合の[[WebSocket接続閉じ符号]]はいずれも [CODE[[[1006]]]] となります [SRC[>>62]]。

;; [75] こうした状況を区別できるとすると、[[スクリプト]]が[[利用者]]の属するネットワークの状態を調べるために使えてしまいます [SRC[>>62]]。

* 文書の破棄

[90] [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]の [DFN[[[make disappear]]]]
は、次のようにしなければ[['''なりません''']] [SRC[>>84]]。

[FIG(steps)[
= 接続の状態が [CODE[[[CONNECTING]]]] なら、
== [[WebSocket接続失敗]]を実行します。
= 接続の状態が [CODE[[[OPEN]]]] なら、
== [[Start the WebSocket Closing Handshake]] を実行します。
[[状態符号]]は [CODE[[[1001]]]] とします。
]FIG]

;; [91] これは [[unloading document cleanup steps]] から呼び出されます。

* ごみ収集

[87] [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]の[[ごみ収集]]は、
次のように規定されています。

[85] [[event loop step 1]] 時点での [CODE(DOMa)@en[[[readyState]]]] が、
[FIG(list)[
- [CODE(DOM)[[[CONNECTING]]]] なら、
[CODE(DOMe)@en[[[open]]]], [CODE(DOMe)@en[[[message]]]], [CODE(DOMe)@en[[[error]]]],
[CODE(DOMe)@en[[[close]]]] のいずれかの[[イベントリスナー]]が登録されているなら、
[[ごみ収集]]しては[['''なりません''']]。 [SRC[>>84]]
- [CODE(DOM)[[[OPEN]]]] なら、
[CODE(DOMe)@en[[[message]]]], [CODE(DOMe)@en[[[error]]]],
[CODE(DOMe)@en[[[close]]]] のいずれかの[[イベントリスナー]]が登録されているなら、
[[ごみ収集]]しては[['''なりません''']]。 [SRC[>>84]]
- [CODE(DOM)[[[CLOSING]]]] なら、
[CODE(DOMe)@en[[[error]]]], [CODE(DOMe)@en[[[close]]]] 
のいずれかの[[イベントリスナー]]が登録されているなら、
[[ごみ収集]]しては[['''なりません''']]。 [SRC[>>84]]
]FIG]

[86] 送信[[バッファー]]が空でないなら、[[ごみ収集]]しては[['''なりません''']] [SRC[>>84]]。

;; [88] この[[バッファー]]は [CODE(DOMi)@en[[[WebSocket]]]] [[オブジェクト]]に関連付けられた[[アプリケーション]]層のものであり、[[OS]] ([[ソケット]]) 側の[[バッファー]]とは異なります。

[89] [[ごみ収集]]により破棄する直前に、次の処理を実行しなければ[['''なりません''']]。
[FIG(steps)[
= [52] 接続の状態が [CODE[[[OPEN]]]] なら、
== [53] [[Start the WebSocket Closing Handshake]] を[[状態符号]]なしで実行します [SRC[>>84]]。
]FIG]

* 再接続待ち

[39] [[クライアント]]が異常終了の後再接続を試みる際は、
何らかの [[backoff]] を行う[['''べきです''']]。
最初の再接続は、[[無作為]]に決めた時間だけ遅延させる[['''べきです''']]。
0s-5s の間から[[無作為]]に決めるのが妥当でしょうが、
実装経験や[[応用]]に基づき任意の方法で決めて構いません。
それ以後の再接続は、[RUBYB[[[冪乗打ち切り待機法]]]@en[truncated binary exponential backoff]]などにより徐々に時間を長くしていく[['''べきです''']]。 [SRC[>>12]]

;; [65] これを誰が実装するべきなのかは不明です。 [CODE(DOMi)@en[[[WebSocket]]]]
[[API]] の内部で実装するべきなのでしょうか? 
それとも[[スクリプト]]が個別に実装するべきなのでしょうか?

* [CODE[Close]] フレーム

[96] [DFN[[CODE[Close]]フレーム]]は、 [[WebSocket接続]]を閉じる際に用いられます。

;; [97] 正常終了にも異常終了にも用いられます。もっとも、異常終了時は
[[[CODE[Close]]フレーム]]なしで切断される場合もあります。

** 構文

[2] [[opcode]] は、 [CODE[0x8]] です [SRC[>>1]]。
[CODE[[[Close]]]] [[フレーム]]は、[[制御フレーム]]です。

[3] 閉じる理由を示す[RUBYB[[[本体]]]@en[body]] ([[応用データ]]) を含んで構いません [SRC[>>1]]。

[4] 本体がある場合、最初の2バイトは[[ネットワークバイト順]]の2バイト[[符号無し整数]]でなければ[['''なりません''']]。
この[[整数]]は、[[状態符号]]でなければ[['''なりません''']]。 [SRC[>>1]]

[5] 本体は更に [[UTF-8]] 符号化されたデータを含めることができます。
その解釈は [[WebSocket]] 仕様書では規定されておらず、[[人間可読]]である必要もありませんが、
[[デバッグ]]などに有用かもしれません。[[クライアント]]はこれを[[末端利用者]]に示しては[['''なりません''']]。
[SRC[>>1]]

;; [22] この部分は「[DFN[[[close reason]]]]」[SRC[>>12]] と呼ばれています。

[FIG(railroad)[
= ?
== [[状態符号]]
== *
=== [[Unicode文字]]
]FIG]

** 処理

[6] [[応用]]は、 [CODE[[[Close]]]] [[フレーム]]より後に[[データフレーム]]を送っては[['''なりません''']]
[SRC[>>1]]。

[7] [[応用]]は、 [CODE[[[Close]]]] [[フレーム]]を受信した場合で、自身が前に送っていない場合は、
[CODE[[[Close]]]] [[フレーム]]を返送しなければ[['''なりません''']] [SRC[>>1]]。
これはできるだけすぐに行う[['''べきです''']]が、
現在のメッセージをすべて送り終えるまで遅延させても構いません [SRC[>>1]]。
返送する場合は、受信した[[状態符号]]をそのまま返すのが普通です [SRC[>>1]]。
ただし[[WebSocket接続失敗]]後は送信しては[['''なりません''']] [SRC[>>12]]。

;; [8] もっとも、 [CODE[[[Close]]]] が送られたということは、
その相手がそれ以後受信したデータを処理する保証はありません [SRC[>>1]]。

[9] [CODE[[[Close]]]] の送受信の後、[[WebSocket接続]]は閉じられたものとし、
[[TCP接続]]も閉じなければ[['''なりません''']]。[[サーバー]]は、
直ちに閉じなければ[['''なりません''']]。[[クライアント]]は、
[[サーバー]]が閉じるのを待つ[['''べき''']]ですが、いつでも (適当な[[タイムアウト]]時間後などに)
閉じて構いません。 [SRC[>>1]]

[31] [[応用データ]]が1バイトのみしかない場合にどう解釈するべきかは不明です。
非妥当なデータを受信した場合は[[WebSocket接続を閉じる]]ことが認められており [SRC[>>42]]、
それに従う (というより問題を無視して閉じる処理を続ける) のが適切かもしれません。

;; [43] 規定が曖昧だと[[相互運用性]]に問題は無いのでしょうかね?

[50] 理由が [[UTF-8]] として[[妥当]]でなければ、[[WebSocket接続失敗]]しなければ[['''なりません''']] [SRC[>>49]]。

;; [51] が、無視して閉じる処理を続ける方が適切かもしれません。

* 状態符号と理由

[41] [[[CODE[Close]]フレーム]]には、閉じる理由を記述できます。
数値の[[状態符号]]と、任意の文字列を記述できます。
受信者による理由の解釈や処理方法は、 [[WebSocket Protocol]]
としては規定されていません [SRC[>>12]]。

;; [30] [[WebSocket状態符号]]も参照。

[32] [DFN[[RUBYB[WebSocket接続閉じ理由]@en[The WebSocket Connection Close Reason]]]]は、
[[応用]]が最初に受信した [[[CODE[Close]]フレーム]]に含まれていた閉じる理由
([[UTF-8]] として[[復号]]した[[文字列]]) です。そのようなものが無ければ、
[[空文字列]]です。 [SRC[>>12]]

[82] [CODE(DOMi)@en[[[CloseEvent]]]] [[インターフェイス]]の
[DFN[[CODE(DOMa)@en[[[reason]]]]]] [[属性]]は、[[WebSocket接続閉じ理由]]を表します。

[83] この[[属性]]は、その[[属性値]]として設定された値を返さなければ[['''なりません''']] [SRC[>>77]]。[[データ型]]は [CODE(IDL)@en[[[DOMString]]]] で、初期値は[[空文字列]]です [SRC[>>77]]。

* 歴史

[REFS[
- [92] [CITE@en[Web Applications 1.0 r2870 Drop <eventsource>. Replace the API with an EventSource object. Rename onclosed to onclose on WebSocket. Remove the mostly worthless event definitions. I'll add more useful intro text to replace them later. Defined garbage collection specialness for WebSocket and EventSource.]] ([TIME[2009-02-26 17:33:00 +09:00]] 版) <http://html5.org/tools/web-apps-tracker?from=2869&to=2870>
]REFS]