* 仕様書

[REFS[
- [11] [CITE@en[RFC 6455 - The WebSocket Protocol]] ([TIME[2015-03-11 20:42:50 +09:00]] 版) <http://tools.ietf.org/html/rfc6455#section-6>
- [1] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#dom-websocket-send>
]REFS]

* [CODE(DOMi)@en[WebSocket]] インターフェイス [CODE(DOMm)@en[send]] メソッド

[2] [CODE(DOMi)@en[[[WebSocket]]]] [[インターフェイス]]の
[DFN[[CODE(DOMm)@en[[[send]]]]]] [[メソッド]]は、次のようにしなければ[['''なりません''']]
[SRC[>>1]]。

[FIG(steps)[
= 第1引数を [CODE(DOMi)@en[[[USVString]]]], [CODE(DOMi)@en[[[Blob]]]],
[CODE(DOMi)@en[[[ArrayBuffer]]]], [CODE(DOMi)@en[[[ArrayBufferView]]]]
のいずれかとして解釈します。
= [CODE(DOMa)@en[[[readyState]]]] が [CODE(DOM)@en[[[CONNECTING]]]] なら、
[CODE(DOMe)@en[[[InvalidStateError]]]] [[例外]]を投げ、停止します。
= 第1引数が[[文字列]]なら、
== [VAR[データ]]を、[[文字列]]を [[UTF-8]] [[符号化]]したものに設定します。
== [VAR[[[opcode]]]] を、[[テキストフレーム]] ([CODE[[[1]]]]) に設定します。
= 第1引数が [CODE(DOMi)@en[[[Blob]]]] なら、
== [VAR[データ]]を、 [CODE(DOMi)@en[[[Blob]]]] が表現する生データに設定します。
== [VAR[[[opcode]]]] を、[[バイナリーフレーム]] ([CODE[[[2]]]]) に設定します。
= 第1引数が [CODE(DOMi)@en[[[ArrayBuffer]]]] なら、
== [VAR[データ]]を、 [CODE(DOMi)@en[[[ArrayBuffer]]]] のバッファーに蓄積されたデータに設定します。
== [VAR[[[opcode]]]] を、[[バイナリーフレーム]] ([CODE[[[2]]]]) に設定します。
= 第1引数が [CODE(DOMi)@en[[[ArrayBufferView]]]] なら、
== [VAR[データ]]を、参照されている [CODE(DOMi)@en[[[ArrayBuffer]]]] のバッファーに蓄積されたデータに設定します。
== [VAR[[[opcode]]]] を、[[バイナリーフレーム]] ([CODE[[[2]]]]) に設定します。
= 接続の状態が [CODE[[[OPEN]]]] なら、
== [VAR[データ]]、[VAR[[[opcode]]]] について[[WebSocketメッセージ送信]]を行います。
== 失敗したら (例えば[[バッファー]]が満杯なら)、
=== [[flagged as full]] フラグを設定します。
=== [[WebSocket接続を閉じる]]処理を実行します。
= [CODE(DOMa)@en[[[bufferedAmount]]]] に、[VAR[データ]]のバイト数を[[加算]]します。
]FIG]

;; [3] [CODE(DOMa)@en[[[bufferedAmount]]]] は、送信されない場合でも増えていきます。

* 処理

[12] [[WebSocket接続]]において[DFN[[RUBYB[WebSocketメッセージ送信]@en[Send a WebSocket Message]]]]するには、
次のようにしなければ[['''なりません''']] [SRC[>>11]]。
[FIG(steps)[
= 送信するデータを含む単一の[[フレーム]]または[[断片化]]された[[フレーム]]群を作成します
([[WebSocketフレーム]]参照)。最初の[[フレーム]]の [CODE[[[opcode]]]] は、
データの種別により、[[テキストフレーム]]または[[バイナリーフレーム]]とします。
= 送信元が[[クライアント]]であれば、[[マスク]]します ([[WebSocketフレーム]]参照)。
= [[WebSocket拡張]]を用いる場合は、その規定に従い適宜処理します。
= [[フレーム]](群)を転送します。
]FIG]

[13] [[WebSocket接続]]の状態が [CODE[[[OPEN]]]] でなければ (なくなれば)、
この手順は停止しなければ[['''なりません''']] [SRC[>>11]]。

[4] 実装時は、[[バッファー]]に一時的に[[フレーム]]を書き込み、
適当な時機に [[OS]] ([[ソケット層]]) に引き渡すこととなります。
素朴な実装は、[[WebSocketメッセージ送信]]時に即座に[[ソケット]]に送信する
(= [[バッファリング]]しない) こととなります。より高度な実装は、その時機を調整できます。

[5] [[アプリケーション]]内での[[バッファリング]]は、
[CODE(DOMa)@en[[[bufferedAmount]]]] [[属性]]によって[[著者]]が観測できます。
この[[属性]]の値は、 [[event loop step 1]] で更新されます。

[6] [[TCP]] の[[フロー制御]]などを含む [[OS]] 側での[[バッファリング]]は、
[[アプリケーション]]からは検知できません。