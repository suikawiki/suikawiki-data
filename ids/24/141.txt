[21] [[TLS Handshake Protocol]] の [DFN[[CODE[[[Certificate]]]]]]
[[メッセージ]]は[[証明書]]を表します。[[サーバー]]から[[クライアント]]へは[[サーバー証明書]]、
[[サーバー]]から[[クライアント]]へは[[クライアント証明書]]となります。

* 仕様書

[REFS[
- [1] '''[CITE@en[RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2]] ([TIME[2015-03-25 03:49:56 +09:00]] 版) <https://tools.ietf.org/html/rfc5246#section-7.4.2>'''
- [18] '''[CITE@en[RFC 5246 - The Transport Layer Security (TLS) Protocol Version 1.2]] ([TIME[2015-03-25 03:49:56 +09:00]] 版) <https://tools.ietf.org/html/rfc5246#section-7.4.6>'''
- [16] [CITE[RFC Errata Report]] ([TIME[2015-04-18 16:11:16 +09:00]] 版) <http://www.rfc-editor.org/errata_search.php?rfc=5246>
]REFS]

* 意味

[4] [CODE[[[Certificate]]]] [[メッセージ]]は、[[クライアント]]に対して[[サーバー]]の[[証明書鎖]]を伝えるものです [SRC[>>1]]。

* 構文

[6] [CODE[[[Certificate]]]] [[メッセージ]]は、0[[バイト]][[以上]]2[SUP[24]]-1[[バイト]][[以下]]の[[証明書]]の列 ([RUBYB[[[鎖]]]@en[chain]]) です [SRC[>>1]]。

[17] [[証明書]]は、1[[バイト]][[以上]]2[SUP[24]]-1[[バイト]][[以下]]の列です [SRC[>>1, >>16]]。

[7] [[送信者]]の[[証明書]]が最初に来なければ[['''なりません''']] [SRC[>>1]]。
後の[[証明書]]は前の[[証明書]]を直接[[証明]]するものでなければ[['''なりません''']] [SRC[>>1]]。

[8] [[ルートCA]]を表す[[自己署名証明書]]は、[[鎖]]から省略して構いません [SRC[>>1]]。

;; [9] [[検証]]のためには[[ルート証明書]]は予め持っておく必要があるからです。
しかしこの規定をそのまま解釈すると、[[中間証明書]]のみならず[[ルート証明書]]も含めていても問題は無いようです。

* 文脈

[2] [[サーバー]]は、合意した[[鍵交換方式]]が[[認証]]に[[証明書]]を使う場合には、
[CODE[[[Certificate]]]] [[メッセージ]]を送信しなければ[['''なりません''']] [SRC[>>1]]。

[3] [[サーバー]]は、 [CODE[[[ServerHello]]]]
[[メッセージ]]の直後に [CODE[[[Certificate]]]] [[メッセージ]]を送信します [SRC[>>1]]。

[19] [[クライアント]]は、 [CODE[[[ServerHelloDone]]]] [[メッセージ]]を受信した直後に、
([[サーバー]]が [CODE[[[CertificateRequest]]]] [[メッセージ]]で要求していれば)
[CODE[[[Certificate]]]] [[メッセージ]]を送信できます。 [SRC[>>18]]

[20] [[クライアント]]は、適切な[[証明書]]が存在しない時は、
[[証明書]]を含まない ([CODE[[[certificate_list]]]] が長さ0の)
[CODE[[[Certificate]]]] [[メッセージ]]を送信しなければ[['''なりません''']]
[SRC[>>18]]。

[10] [[クライアント]]は、送るべき[[証明書]]がなければ [CODE[[[Certificate]]]]
[[メッセージ]]を送らなくて構いません [SRC[>>1]]。

* 処理

[25] [[クライアント]]は、 [[service identity]] その他[[アプリケーション]]依存の[[証明書]]の検証を行います。

[22] [[サーバー]]は、[[クライアント]]が[[証明書]]を送らなかった場合には、
[[クライアント認証]]なしで[[handshake]]を継続しても構いませんし、
[CODE[[[handshake_failure]]]] [[fatal alert]] で応答しても構いません。 [SRC[>>18]]

[23] [[サーバー]]は、[[クライアント]]の[[証明書鎖]]の一部が受け入れられない
(例えば既知の信頼した [[CA]] が署名していない) 場合、
[[クライアント認証]]なしとみなして[[handshake]]を継続しても構いませんし、
[[fatal alert]] で応答しても構いません。 [SRC[>>18]]

* 証明書の選択

[5] [[証明書]]は、両者間で折衝した [[cipher suite]] の[[鍵交換アルゴリズム]]や
[[TLS拡張]]において適当なものでなければ[['''なりません''']] [SRC[>>1]]。

[11] [[証明書]]は [[PGP]] などで予め明示的に折衝した場合を除き、 
[[X.509]] の v3 [[証明書]]でなければ[['''なりません''']] [SRC[>>1]]。

[12] [[末端実体証明書]]の[[公開鍵]] (と関係する制約) は、
選択した[[鍵交換アルゴリズム]]と互換性があるものでなければ[['''なりません''']] [SRC[>>1]]。

[13] 適切な[[証明書]]の選択には、 [[SNI]] や [CODE[[[trusted_ca_keys]]]] の指定があればそれを使います [SRC[>>1]]。

;; 各項も参照。

[14] [CODE[[[signature_algorithms]]]] の指定があれば、その[[署名アルゴリズム]]を使った[[証明書]]でなければ[['''なりません''']] [SRC[>>1]]。

[15] [[サーバー]]は複数の[[証明書]]候補がある時にこうした基準の他、設定や[[ポート番号]]など諸々の基準でいずれかを選択できます。
1つ[[証明書]]がある時もそれらの基準に合致するか検査する[['''べきです''']]。 [SRC[>>1]]