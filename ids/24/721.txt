[2] [DFN[[[stops parsing]]]] は、[[構文解析]]が完了して[[文書]]の準備が完了した際に実行される操作
([[仕様書]]上の[[アルゴリズム]]) です。
[[文書]]を構文解析モードから通常モードへと切り替える働きがあります。

* 仕様書

[REFS[
- [69] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#current-document-readiness>
- [1] '''[CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#stop-parsing>'''
- [66] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#delaying-load-events-mode>
]REFS]

* 文脈

[43] 次の場面で呼び出されます。
[FIG(middle list)[
- [[HTML構文解析器]]
- [[XML構文解析器]]
- [[XSLT]] による変換完了(成功)時
- [[媒体文書]]の読み込み
- [[プラグイン文書]]の読み込み
- [[非文書表示]]
]FIG]

;; [46] つまり [[navigate]] の結果[[閲覧文脈]]の[[文書]]が更新された時には必ず実行されます。

[45] [[navigate]] は、
[FIG(list)[
- [[セッション履歴を新しいページで更新]]
- [[素片識別子へのスクロール]]
]FIG]
... を (必要なら) [[stops parsing]] より前に行っておく必要があります ([[navigate]] 参照)。
これらはどちらも[[ネットワーク処理タスク源]]の[[タスク]]なので、
[[fetch]] が [[process response end-of-file]] で [[stops parsing]]
を呼び出すことになる[[タスク]]を[[タスクキューに追加]]するよりも前の段階でこれらの[[タスク]]を追加しておく必要があることになります。

;; 通常はそれよりもかなり前の段階で行われます。[[レンダリングの開始]]も参照。

* 処理

[4] [[stops parsing]] は、まず次のようにしなければ[['''なりません''']] [SRC[>>1]]。
[FIG(steps)[
= [5] [[現在文書準備度]]を、 [CODE[[[interactive]]]] に設定します。
= [72] [[単純イベントを発火]]します。 [SRC[>>69]]
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[readystatechange]]]]
:[[対象]]:[[文書]]
]FIG]
= [6] [[挿入点]]を、[[未定義]]に設定します。
= [7] [[開いている要素のスタック]]の[[節点]]をすべて [[pop]] します。
]FIG]

[10] 次に、 [[list of scripts that will execute when the document has finished parsing]]
の処理を行います。

;; これは、 [CODE(HTMLa)@en[[[defer]]]] [[属性]]が適用される [CODE(HTMLe)@en[[[script]]]] 
[[要素]]の実行です。

[12] リストが空なら、ただちに次 (>>15) に進まなければ[['''なりません''']] [SRC[>>1]]。

[13] そうでなければ、リストの最初の[[スクリプト]]について、
現在の[[タスク]]と同じ[[タスク源]]の新しい[[タスク]]を追加して、
現在の[[タスク]]は終了しなければ[['''なりません''']] [SRC[>>1]]。
ただし[[タスク]]の追加は、
[FIG(list)[
- [[スクリプト]]の [["ready to be parser-executed" flag]] が設定され、
- [[文書]]が [[has no style sheet that is blocking scripts]] 状態となった
]FIG]
... 時に行わなければ[['''なりません''']] [SRC[>>1]]。

;; これは、 [CODE(HTMLa)@en[[[src]]]] [[属性]]で指定された[[スクリプト]]の取得が終わり、
[[外部スタイルシート]]の読み込みも終わった時を意味しています。

;; 現在の[[タスク]]の[[タスク源]]は、おそらく[[ネットワーク処理タスク源]]です。

[14] 追加された[[タスク]]は、当該[[スクリプトブロックの実行]]を行ってから、
[[スクリプト]]をリストから削除し、 >>10 に戻るというものです [SRC[>>1]]。

[15] その後、次の[[タスク]]を[[タスクキューに追加]]しなければ[['''なりません''']] [SRC[>>1]]。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [16] [[単純イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[DOMContentLoaded]]]]
:[[対象]]:[[文書]]
]FIG]
]FIG]
]FIG]

[17] 現在の[[タスク]]はこれで終了します。更に、
[FIG(list)[
- [18] [[set of scripts that will execute as soon as possible]] が空になる
- [19] [[the list of scripts that will execute in order as soon as possible]] が空になる
- [20] [[delay the load event]] するものがなくなる
]FIG]
... の''すべて''の条件が満たされたら、現在の[[タスク]]と同じ[[タスク源]]の新たな[[タスク]]を[[タスクキューに追加]]しなければ[['''なりません''']] [SRC[>>1]]。

;; [34] つまり、残りの[[スクリプト]]の実行完了と埋め込まれた[[資源]]の読み込み完了を待ちます。

[21] 新たな[[タスク]]は、次のようにしなければ[['''なりません''']] [SRC[>>1]]。
[FIG(steps)[
= [22] [[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [23] [[現在文書準備度]]を、 [CODE[[[complete]]]] に設定します。
= [71] [[単純イベントを発火]]します。 [SRC[>>69]]
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[readystatechange]]]]
:[[対象]]:[[文書]]
]FIG]
]FIG]
]FIG]
= [24] [[文書]]が[[閲覧文脈]]中にあるなら、[[単純イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[load]]]]
:[[対象]]:[[文書]]の [CODE(DOMi)@en[[[Window]]]]
:[[対象上書き]]:[[文書]]
]FIG]
= [25] [[文書]]が[[閲覧文脈]]中にあるなら、[[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [26] [[文書]]の [[page showing flag]] が[[偽]]なら、
== [27] [[文書]]の [[page showing flag]] を、[[真]]に設定します。
== [28] [[イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[イベント]]
]FIGCAPTION]
:[[イベントインターフェイス]]:[CODE(DOMi)@en[[[PageTransitionEvent]]]]
:[[イベント型]]:[CODE(DOMe)@en[[[pageshow]]]]
:[[対象]]:[[文書]]の [CODE(DOMi)@en[[[Window]]]]
:[[対象上書き]]:[[文書]]
:[[trusted]]:[[真]]
:[[bubbles]]:[[偽]]
:[[取消可能]]:[[偽]]
:[CODE(DOMa)@en[[[persisted]]]]:[[偽]]
:[[既定動作]]:なし
]FIG]
]FIG]
]FIG]
= [29] [[文書]]の [[pending application cache download process tasks]] に[[タスク]]があれば、
そのままの順序で、[[ネットワーク処理タスク源]]で[[タスクキューに追加]]します。リストは空にします。
= [30] [[文書]]の [[print when loaded flag]] が設定されていれば、
[[printing steps]] を実行します。
= [31] [[文書]]を、 [[ready for post-load tasks]] とします。
= [25] [[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [32] [[文書]]の [[completely loaded]] を設定します。
]FIG]
]FIG]
]FIG]

;; [60] [[page showing flag]] が[[真]]の状態でここに到達することがあるのかどうか謎です。

;; [42] [[printing steps]] は[[イベントループ]]の[[一時停止]]を呼び出すことがあります。
[[イベント]]を同期的に[[発火]]することもあります。

;; [11] [[HTML Standard]] は [[stops parsing]] を[[イベントループのスピン]]を使って記述していますが、
次の性質から、ここで示したように[[スピン]]を使わないで説明できます。
[FIG(list)[
- [[スピン]]を使った場合と使わないここで示した説明の違いは、
[[大域スクリプト片付けジョブ]]と[[マイクロタスク]]の実行のタイミングと、
[[ストレージミューテックスの解放]]のタイミングです。
- [[構文解析器]]以外の[[タスク]]等がこれらを追加していた場合には、
[[イベントループ]]等により [[stops parsing]] の[[タスク]]より前に実行されているはずです。
- [[スクリプト]]がこれらを追加していた場合には、
[[コールバックを走らせた後の片付け]]により[[スクリプト]]実行直後に実行されているはずです。
[[イベントループ]]が[[ストレージミューテックス]]を取得していた場合も、
ここで解放されているはずです。
- [[構文解析器]]が [CODE(HTML)@en[<[[meta]] [[http-equiv]]=[[Set-Cookie]]>]]
を処理する場合、[[ストレージミューテックス]]を取得した状態になります。
[[スピン]]の場合と[[スピン]]を使わない説明とでは、解放のタイミングが変わってきます。
ただし実際の [[Webブラウザー]]は[[ストレージミューテックス]]を使っていません。
使っていたとしても、[[ストレージミューテックス]]を[[イベントループ]]が所有していることにより動作が違うことを観測するのは[[著者]]にとっても[[利用者]]にとっても困難と思われます。
- 残るのは、[[構文解析器]]の [[DOM]] 操作により[[マイクロタスク]]が追加されていた場合のみです。
- [[スピン]]を使わない説明の場合、現在の[[タスク]]が停止され[[イベントループ]]に戻ると、
次に[[イベントループ]]によって[[マイクロタスク]]が実行されることになります。
これは結局[[スピン]]の場合と同じです。
]FIG]

[35] [[閲覧文脈]]外にある[[文書]] ([[XHR]] などの[[文書]]や、 [[Webブラウザー]]以外の[[構文解析器]]の[[文書]]) の場合は、
[[スクリプト]]や埋め込み資源がなく、 [[stop parsing]] の完了後まで[[イベントリスナー]]を登録することもできませんから、次の通り簡略化できます。
[FIG(steps)[
= [36] [[開いている要素のスタック]]を空にします。
= [37] (本[[タスク]]を終えて新しい[[タスク]]で続きを実行します。)
= [38] [[現在文書準備度]]を [CODE[[[complete]]]] に設定します。
]FIG]

;; [39] 仕様通り解釈すると >>37 の[[スピン]]は必ず発生することになりますが、
実際には必要ないはずです。

* 副作用

[48] [[stops parsing]] は[[構文解析器]]の処理を終える作業であり、
[[構文解析器]]の動作中と動作後で異なる動きをする処理の分岐フラグが立てられるタイミングです。

[47] [[stops parsing]] 開始段階:
[FIG(list)[
- [49] [CODE(JS)@en[[[document.write]]]]/[CODE(JS)@en[[[document.writeln]]]] 
は以後 [CODE(JS)@en[[[document.open]]]] を伴うようになります。
- [9] [[開いている要素のスタック]]から[[節点]]を [[pop]] すると、
副作用で何らかの動作が行われることがあります。[[開いている要素のスタック]]を参照。
]FIG]

[8] [CODE(DOMe)@en[[[DOMContentLoaded]]]] 段階:
[FIG(list)[
- [33] [[Webブラウザー]]によっては、 [CODE(DOMe)@en[[[DOMContentLoaded]]]]
の時点で[[ブラウザー拡張]]の[[内容スクリプト]]を実行することがあります。
([CODE(DOMe)@en[[[DOMContentLoaded]]]] も参照。)
- [70] [[Webブラウザー]]によっては、 [CODE(DOMe)@en[[[DOMContentLoaded]]]]
より後の都合の良い時点で[[ブラウザー拡張]]の[[内容スクリプト]]を実行することがあります。
]FIG]

[57] [CODE(DOMe)@en[[[load]]]] 段階:
[FIG(list)[
- [58] [[Webブラウザー]]によっては、 [CODE(DOMe)@en[[[load]]]]
の時点で[[ブラウザー拡張]]の[[内容スクリプト]]を実行することがあります。
]FIG]

[50] [DFN[[[ready for post-load tasks]]]] ([[stops parsing]] 自体の実行完了):
[FIG(list)[
- [52] [[閲覧文脈包含子]]たる [CODE(HTMLe)@en[[[iframe]]]]/[CODE(HTMLe)@en[[[object]]]]/[CODE(HTMLe)@en[[[embed]]]]/[CODE(HTMLe)@en[[[frame]]]] の [[delay the load event]] が終わります。
- [40] [[queue a post-load task]] ([[AppCache]] の処理の実行) が遅延されていたのが解除されます。
- [53] [CODE(JS)@en[[[window.print]]]] が遅延されていたのが解除されます。
- [41] 以後の [CODE(JS)@en[[[document.open]]]] が新しいソースコードを使うものだとみなされるようになります。
]FIG]

[51] [DFN[[[completely loaded]]]] ([[stops parsing]] により追加された[[DOM操作タスク源]]の[[タスク]]の実行完了):
[FIG(list)[
- [54] [CODE(HTTP)@en[[[Refresh]]]] の計測開始が遅延されていたのが解除されます。
- [55] 以後 [CODE(HTMLe)@en[[[iframe]]]]/[CODE(HTMLe)@en[[[frame]]]]、[[フォームの提出]]、[CODE(DOMi)@en[[[Location]]]]
の [[navigate]] で暗黙裡に[[置換有効]]とされなくなります。
- [56] [[閲覧文脈包含子]]たる [CODE(HTMLe)@en[[[iframe]]]]/[CODE(HTMLe)@en[[[frame]]]] [[要素]]で
[CODE(DOMe)@en[[[load]]]] [[イベント]]が[[発火]]されることがあります。
- [73] [[共有ワーカー]]を [[permissible worker]] とみなすかどうかの条件に影響します。
]FIG]

[44] 更に[[活性構文解析器]]が [[stops parsing]] されていないこと(など)を定義としています。
[[stops parsing]] のどの段階まで完了したことを指すのかは不明瞭です。
[[活性構文解析器]]が参照されるのは [CODE(JS)@en[[[document.open]]]]
と [[abort a document]] で、前者はどの段階と解釈しても結果は変わりません。
後者は [[bfcache]] に影響します。 [[completely loaded]] と解釈するのが自然でしょうか。

;; [74] [[permissible worker]] の条件は「complete loaded」となっており、
[[completely loaded]] と同じなのかは謎です。

[75] [[busy indicator]] も参照。

* [CODE(DOMe)@en[load]] イベントの遅延

[61] [CODE(DOMe)@en[[[load]]]] [[イベント]]は、埋め込み[[資源]]などの読み込みが終わってから[[発火]]されます。

[62] 仕様書上はこれは [DFN[[[delays the load event]]]] [SRC[>>1]] として記述されています。
各操作がいつからいつまで [[delay the load event]] するかが規定されており、
[[delay the load event]] するものがなくなった時、 [CODE(DOMe)@en[[[load]]]]
が[[発火]]できるようになります。 [[delay the load event]] は[[文書]]ごとの状態です。

[63] 次のものがあります。
[FIG(table)[
:element:[[要素]]
:start:遅延開始
:end:遅延終了

:element:[CODE(HTMLe)@en[[[link]]]] [SRC[[[HTML Standard]]]]
:start:[[obtain the resource]] の開始
:end:当該[[資源]]とその [[critical subresource]] の処理の完了

:element:[CODE(XML)@en[[[xml-stylesheet]]]]
:start:処理開始
:end:処理完了

:element:[CODE(HTMLe)@en[[[style]]]] [SRC[[[HTML Standard]]]],
[[SVG]] [CODE(XMLe)@en[[[style]]]]
:start:[[critical subresource]] の処理の開始
:end:[[critical subresource]] の処理の完了

:element:[CODE(HTMLe)@en[[[script]]]] [SRC[[[HTML Standard]]]],
[[SVG]] [CODE(XMLe)@en[[[script]]]]
:start:[[fetch]] 開始
:end:[[process response end-of-file]] [[タスク]]実行

:element:[CODE(HTMLe)@en[[[img]]]] [SRC[[[HTML Standard]]]]
:start:[[fetch]] 開始
:end:[[process response end-of-file]] [[タスク]]実行

:element:[CODE(HTML)@en[[[<input type=image>]]]] [SRC[[[HTML Standard]]]]
:start:[[fetch]] 開始
:end:[[process response end-of-file]] [[タスク]]実行

:element:[CODE(HTMLe)@en[[[iframe]]]] [SRC[[[HTML Standard]]]],
[CODE(HTMLe)@en[[[frame]]]] [SRC[[[HTML Standard]]]],
[CODE(HTMLe)@en[[[embed]]]] [SRC[[[HTML Standard]]]],
[CODE(HTMLe)@en[[[object]]]] [SRC[[[HTML Standard]]]]
:start: >>64 のいずれかが発生した時:
:end: >>64 を''すべて''満たさなくなった時

:element:[CODE(HTMLe)@en[[[embed]]]] [SRC[[[HTML Standard]]]]
:start:[[fetch]] 開始
:end:完了

:element:[CODE(HTMLe)@en[[[object]]]] [SRC[[[HTML Standard]]]]
:start:[[fetch]] 開始
:end:処理[[タスク]]完了

:element:[CODE(HTMLe)@en[[[object]]]] [SRC[[[HTML Standard]]]]
:start:処理[[タスク]]を追加
:end:[[process response end-of-file]] [[タスク]]実行

:element:[CODE(HTMLe)@en[[[video]]]] [CODE(HTMLa)@en[[[poster]]]] [SRC[[[HTML Standard]]]]
:start:[[fetch]] 開始
:end:処理[[タスク]]完了

:element:[[媒体要素]] [SRC[[[HTML Standard]]]]
:start:[[delaying-the-load-event flag]] が[[真]]に
:end:[[delaying-the-load-event flag]] が[[偽]]に
]FIG]

[64] [[入れ子閲覧文脈]]は、次の条件が満たされるとき、 [[delay the load event]]
します。
[FIG(list)[
- [[入れ子閲覧文脈]]の[[活性文書]]が [[ready for post-load tasks]] で''ない''
- [[入れ子閲覧文脈]]の[[活性文書]]が [[delay the load event]] 中
- [[入れ子閲覧文脈]]が [[delaying [CODE(DOMe)@en[load]] events mode]]
]FIG]

[65] [[閲覧文脈]]の [DFN[[[delaying [CODE(DOMe)@en[load]] events mode]]]] [SRC[>>66]]
は、 [[navigate]] 中に設定され、 [[navigate]] が終わるときに除去されるフラグです。

;; [67] [[文書]]の [[delay the load event]] フラグに対して、 [[navigate]]
では[[文書]]が変化するため、こちらのフラグが使われるようです。

[68] [[入れ子閲覧文脈]]内の[[文書]]の場合、自身の [CODE(DOMe)@en[[[load]]]]
[[イベント]]が[[発火]]された後でも、[[親閲覧文脈]]側の[[文書]]の
[CODE(DOMe)@en[[[load]]]] [[イベント]]を遅延させる可能性がなお残ります。

* 歴史

[59] [CODE(DOMe)@en[[[load]]]]、[CODE(DOMe)@en[[[DOMContentLoaded]]]]、
[CODE(DOMe)@en[[[pageshow]]]] も参照。

* 関連

[3] [[stops parsing]] のかわりに [[abort a parser]] が実行される場合もあります。