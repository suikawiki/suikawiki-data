[2] [DFN[[[stops parsing]]]] は、[[構文解析]]が完了して[[文書]]の準備が完了した際の操作です。

* 仕様書

[REFS[
- [1] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2015-05-06 10:42:35 +09:00]] 版) <https://html.spec.whatwg.org/#stop-parsing>
]REFS]

* 文脈

[43] 次の場面で呼び出されます。
[FIG(short list)[
- [[HTML構文解析器]]
- [[XML構文解析器]]
- [[XSLT]] による変換完了(成功)時
- [[媒体文書]]の読み込み
- [[プラグイン文書]]の読み込み
- [[非文書表示]]
]FIG]

;; [46] つまり [[navigate]] の結果[[閲覧文脈]]の[[文書]]が更新された時には必ず実行されます。

[45] [[navigate]] における[[セッション履歴]]の更新は、 [[stops parsing]] 
より前に行っていなければなりません。

* 処理

[4] [[stops parsing]] は、まず次のようにしなければ[['''なりません''']] [SRC[>>1]]。
[FIG(steps)[
= [5] [[現在文書準備度]]を、 [CODE[[[interactive]]]] に設定します。
= [6] [[挿入点]]を、[[未定義]]に設定します。
= [7] [[開いている要素のスタック]]の[[節点]]をすべて [[pop]] します。
]FIG]

;; [8] [[挿入点]]が未定義になると、以後の [CODE(JS)@en[[[document.write]]]]
は [CODE(JS)@en[[[document.open]]]] を伴うようになります。

;; [9] [[開いている要素のスタック]]から[[節点]]を [[pop]] すると、
副作用で何らかの動作が行われることがあります。[[開いている要素のスタック]]を参照。

[10] 次に、 [[list of scripts that will execute when the document has finished parsing]]
の処理を行います。

;; これは、 [CODE(HTMLa)@en[[[defer]]]] [[属性]]が適用される [CODE(HTMLe)@en[[[script]]]] 
[[要素]]の実行です。

[12] リストが空なら、ただちに次 (>>15) に進まなければ[['''なりません''']] [SRC[>>1]]。

[13] そうでなければ、リストの最初の[[スクリプト]]について、
現在の[[タスク]]と同じ[[タスク源]]の新しい[[タスク]]を追加して、
現在の[[タスク]]は終了しなければ[['''なりません''']] [SRC[>>1]]。
ただし[[タスク]]の追加は、
[FIG(list)[
- [[スクリプト]]の [["ready to be parser-executed" flag]] が設定され、
- [[文書]]が [[has no style sheet that is blocking scripts]] 状態となった
]FIG]
... 時に行わなければ[['''なりません''']] [SRC[>>1]]。

;; これは、 [CODE(HTMLa)@en[[[src]]]] [[属性]]で指定された[[スクリプト]]の取得が終わり、
[[外部スタイルシート]]の読み込みも終わった時を意味しています。

;; 現在の[[タスク]]の[[タスク源]]は、おそらく[[ネットワーク処理タスク源]]です。

[14] 追加された[[タスク]]は、当該[[スクリプトブロックの実行]]を行ってから、
[[スクリプト]]をリストから削除し、 >>10 に戻るというものです [SRC[>>1]]。

[15] その後、次の[[タスク]]を[[タスクキューに追加]]しなければ[['''なりません''']] [SRC[>>1]]。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [16] [[単純イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[DOMContentLoaded]]]]
:[[対象]]:[[文書]]
]FIG]
]FIG]
]FIG]

[33] [[Webブラウザー]]によっては、 [CODE(DOMe)@en[[[DOMContentLoaded]]]]
の時点で[[ブラウザー拡張]]の[[内容スクリプト]]を実行することがあります。

;; [40] [CODE(DOMe)@en[[[DOMContentLoaded]]]] も参照。

[17] 現在の[[タスク]]はこれで終了します。更に、
[FIG(list)[
- [18] [[set of scripts that will execute as soon as possible]] が空になる
- [19] [[the list of scripts that will execute in order as soon as possible]] が空になる
- [20] [[delay the load event]] するものがなくなる
]FIG]
... の''すべて''の条件が満たされたら、現在の[[タスク]]と同じ[[タスク源]]の新たな[[タスク]]を[[タスクキューに追加]]しなければ[['''なりません''']] [SRC[>>1]]。

;; [34] つまり、残りの[[スクリプト]]の実行完了と埋め込まれた[[資源]]の読み込み完了を待ちます。

[21] 新たな[[タスク]]は、次のようにしなければ[['''なりません''']] [SRC[>>1]]。
[FIG(steps)[
= [22] [[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [23] [[現在文書準備度]]を、 [CODE[[[complete]]]] に設定します。
= [24] [[文書]]が[[閲覧文脈]]中にあるなら、[[単純イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[単純イベント]]
]FIGCAPTION]
:[[イベント型]]:[CODE(DOMe)@en[[[load]]]]
:[[対象]]:[[文書]]の [CODE(DOMi)@en[[[Window]]]]
:[[対象上書き]]:[[文書]]
]FIG]
]FIG]
]FIG]
= [25] [[文書]]が[[閲覧文脈]]中にあるなら、[[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [26] [[文書]]の [[page showing flag]] が[[偽]]なら、
== [27] [[文書]]の [[page showing flag]] を、[[真]]に設定します。
== [28] [[イベントを発火]]します。
[FIG(list members)[
[FIGCAPTION[
[[イベント]]
]FIGCAPTION]
:[[イベントインターフェイス]]:[CODE(DOMi)@en[[[PageTransitionEvent]]]]
:[[イベント型]]:[CODE(DOMe)@en[[[pageshow]]]]
:[[対象]]:[[文書]]の [CODE(DOMi)@en[[[Window]]]]
:[[対象上書き]]:[[文書]]
:[[trusted]]:[[真]]
:[[bubbles]]:[[偽]]
:[[取消可能]]:[[偽]]
:[CODE(DOMa)@en[[[persisted]]]]:[[偽]]
:[[既定動作]]:なし
]FIG]
]FIG]
]FIG]
= [29] [[文書]]の [[pending application cache download process tasks]] に[[タスク]]があれば、
そのままの順序で、[[ネットワーク処理タスク源]]で[[タスクキューに追加]]します。リストは空にします。
= [30] [[文書]]の [[print when loaded flag]] が設定されていれば、
[[printing steps]] を実行します。
= [31] [[文書]]を、 [[ready for post-load tasks]] とします。
= [25] [[タスク]]を[[タスクキューに追加]]します。
[FIG(list members)[
[FIGCAPTION[
[[タスク]]
]FIGCAPTION]
:[[タスク源]]:[[DOM操作タスク源]]
:処理:
[FIG(steps)[
= [32] [[文書]]の [[completely loaded]] を設定します。
]FIG]
]FIG]
]FIG]

;; [42] [[printing steps]] は[[イベントループ]]の[[一時停止]]を呼び出すことがあります。

;; [41] [[ready for post-load tasks]] や [[completely loaded]] は、
[[構文解析]]中と後で動作が異なるものの判断や、[[閲覧文脈包含子]]の [CODE(DOMe)@en[[[load]]]]
の遅延に使われます。 [CODE(DOMe)@en[[[load]]]] の項を参照。

[44] [[stops parsing]] は、更に次のものに影響します。
[FIG(list)[
- [[活性構文解析器]]であるか否か
- [[素片識別子へのスクロール]]
]FIG]

;; [11] [[HTML Standard]] は [[stops parsing]] を[[イベントループのスピン]]を使って記述していますが、
次の性質から、ここで示したように[[スピン]]を使わないで説明できます。
[FIG(list)[
- [[スピン]]を使った場合と使わないここで示した説明の違いは、
[[大域スクリプト片付けジョブ]]と[[マイクロタスク]]の実行のタイミングと、
[[ストレージミューテックスの解放]]のタイミングです。
- [[構文解析器]]以外の[[タスク]]等がこれらを追加していた場合には、
[[イベントループ]]等により [[stops parsing]] の[[タスク]]より前に実行されているはずです。
- [[スクリプト]]がこれらを追加していた場合には、
[[コールバックを走らせた後の片付け]]により[[スクリプト]]実行直後に実行されているはずです。
[[イベントループ]]が[[ストレージミューテックス]]を取得していた場合も、
ここで解放されているはずです。
- [[構文解析器]]が [CODE(HTML)@en[<[[meta]] [[http-equiv]]=[[Set-Cookie]]>]]
を処理する場合、[[ストレージミューテックス]]を取得した状態になります。
[[スピン]]の場合と[[スピン]]を使わない説明とでは、解放のタイミングが変わってきます。
ただし実際の [[Webブラウザー]]は[[ストレージミューテックス]]を使っていません。
使っていたとしても、[[ストレージミューテックス]]を[[イベントループ]]が所有していることにより動作が違うことを観測するのは[[著者]]にとっても[[利用者]]にとっても困難と思われます。
- 残るのは、[[構文解析器]]の [[DOM]] 操作により[[マイクロタスク]]が追加されていた場合のみです。
- [[スピン]]を使わない説明の場合、現在の[[タスク]]が停止され[[イベントループ]]に戻ると、
次に[[イベントループ]]によって[[マイクロタスク]]が実行されることになります。
これは結局[[スピン]]の場合と同じです。
]FIG]

[35] [[閲覧文脈]]外にある[[文書]] ([[XHR]] などの[[文書]]や、 [[Webブラウザー]]以外の[[構文解析器]]の[[文書]]) の場合は、
[[スクリプト]]や埋め込み資源がありませんから、次の通り簡略化できます。
[FIG(steps)[
= [36] [[開いている要素のスタック]]を空にします。
= [37] (本[[タスク]]を終えて新しい[[タスク]]で続きを実行します。)
= [38] [[現在文書準備度]]を [CODE[[[complete]]]] に設定します。
]FIG]

;; [39] 仕様通り解釈すると >>37 の[[スピン]]は必ず発生することになりますが、
実際には必要ないはずです。

* 関連

[3] [[stops parsing]] のかわりに [[abort a parser]] が実行される場合もあります。