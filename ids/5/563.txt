[34] [[DOM]] の[DFN[[RUBYB[[[イベントハンドラー]]]@en[event handler]]]]は、
[[オブジェクト]]や[[要素]]の[[属性]]として1つ指定できる簡易版の[[イベントリスナー]]です。

[39] [[オブジェクト]]にあるものを[DFN[[RUBYB[イベントハンドラーIDL属性]@en[event handler IDL attribute]]]]
[WEAK[(旧・[DFN[[RUBYB[イベントハンドラーDOM属性]@en[event handler DOM attribute]]]])]]、
[[要素]]にあるものを[DFN[[RUBYB[イベントハンドラー内容属性]@en[event handler content attribute]]]]といいます
[SRC[>>35]]。

* 仕様書

[REFS[
- [35] [CITE@en-US-x-hixie[HTML Standard]] ([TIME[2013-05-05 06:42:10 +09:00]] 版) <http://www.whatwg.org/specs/web-apps/current-work/#event-handler-attributes>
]REFS]

* イベントハンドラー

[97] [[イベントハンドラー]]は、[[イベントリスナー]]の特殊形です。
[[イベントハンドラー]]は特定の[[対象]]となる[[オブジェクト]]について、
特定の[[イベント型]]について、
[[捕獲]]でないフェーズ ([[bubbling]] フェーズまたは[[対象]]フェーズ)
の[[イベントリスナー]]として働きます。

[36] [[イベントハンドラー]]の[[イベント型]]を[DFN[[RUBYB[[[イベントハンドラーイベント型]]]@en[event handler event type]]]]
[SRC[>>35]] といいます。[[イベントハンドラー]]の名前は、[[イベントハンドラーイベント型]]の前に
[CODE[[[on]]]] をつけたものです [SRC[>>35]]。[[イベントハンドラー]]の名前は[[属性名]]として使われます。

[EG[
[98] 例えば [CODE(DOMe)@en[[[click]]]] [[イベント]]に対応する[[イベントハンドラー]]の名前は
[CODE(DOMa)@en[[[onclick]]]] となります。 [CODE(DOMi)@en[[[Window]]]] [[オブジェクト]]には
[CODE(DOMa)@en[[[onclick]]]] [[属性]]があります。また [CODE(HTMLe)@en[[[a]]]]
[[要素]]にも [CODE(HTMLa)@en[[[onclick]]]] [[属性]]があります。
]EG]

[37] とはいえ任意の[[イベント型]]の名前に [CODE[[[on]]]] をつければ良いものではなく、
仕様で定義され、[[利用者エージェント]]が実装している[[イベントハンドラー]]のみ機能します。

[EG[
[99] 例えば [CODE[foobar]] という[[イベント型]]はどの仕様でも定義されていないので、 [CODE[onfoobar]]
[[属性]]を設定しても、 ([[著者]]が特定の [[Webページ]]のみで使われる独自の[[イベント型]]として使うのは自由ですが、)
[CODE[foobar]] [[イベント]]が [[dispatch]] されたときに呼び出されるわけではありません。

[100] 更に、 [CODE(DOMe)@en[[[DOMContentLoaded]]]] は [[HTML Standard]] で定義されている[[イベント型]]ではありますが、
[CODE[onDOMContentLoaded]] という[[イベントハンドラー]]はどこでも定義されていないので、
そのような[[属性]]を設定しても、 [[dispatch]] されたときに呼び出されるわけではありません。
]EG]

[38] [[イベントハンドラー]]の値は、
[FIG[
- [[null]]
- [[コールバック]]
- [[内部未コンパイル生ハンドラー]]
]FIG]
... の3つのいずれかです。初期値は [[null]] です。 [SRC[>>35]] [[イベントハンドラーIDL属性]]により、
または[[イベントハンドラー内容属性]]により、[[null]] 以外の値に設定することができます。

[64] [[イベントハンドラー]]がはじめて [[null]] 以外の値に設定された時に、
次のような[[イベントリスナー]]が対応するオブジェクト [WEAK[([[文脈オブジェクト]]とは限らないことに注意 (>>106)。)]]
の[[イベントリスナー]]のリストの末尾に追加されます [SRC[>>35]]。
[FIG[
- [114] [[イベント型]]は、[[イベントハンドラーイベント型]]
- [115] [[捕獲]]は、[[偽]]
- [116] [[リスナー]]は、[[イベントハンドラー処理アルゴリズム]]
]FIG]

;; [65] [[null]] に設定されている間は[[イベントリスナー]]は追加されません。また
[[null]] に変更されたり、別の非 [[null]] 値に変更されたりしても[[イベントリスナー]]は登録されたままになります。

;; [66] [[イベントハンドラー]]と[[イベントリスナー]]や[[イベントハンドラー処理算法]]は別のものとなります。
[[イベントハンドラー]]から [CODE(JS)@en[[[arguments]].[[callee]]]]
でアクセスできるのは[[イベントハンドラー]]です。[[イベントリスナー]]や[[イベントハンドラー処理算法]]に [[JavaScript]]
からアクセスする方法はありません。[[イベントハンドラー]]を [CODE(DOMm)@en[[[removeEventListener]]]]
しても、それ自体は[[イベントリスナー]]として登録されていないので、削除できません。

[131] [DFN[[RUBYB[[[内部生未コンパイルハンドラー]]]@en[internal raw uncompiled handler]]]]は、
コンパイル前のスクリプト本体と、エラー報告の際に用いられるスクリプトの位置情報の組です。 [SRC[>>35]]
これは実質的には[[イベントハンドラー内容属性]]の[[属性値]]のことを言っています。
後述の通り[[イベントハンドラー内容属性]]は設定されただけではコンパイルされず、
実行時にコンパイルされることになります。 (コンパイル結果である [CODE(JS)@en[[[Function]]]]
とは異なります。)

* イベントハンドラー IDL 属性

[40] [[イベントハンドラーIDL属性]]は、[[イベントハンドラー]]に対応すると定義されている [[IDL属性]]で、
名前は[[イベントハンドラー]]の名前と同じであり、
[[型]]は原則として [CODE(DOMi)@en[[[EventHandler]]]] です。

;; [76] [CODE(DOMa)@en[[[onerror]]]] の[[型]]は [CODE(DOMi)@en[[[OnErrorEventHandler]]]],
[CODE(DOMa)@en[[[onbeforeunload]]]] の[[型]]は [CODE(DOMi)@en[[[OnBeforeUnloadEventHandler]]]] です。

[75] [[WebIDL]] の[[型]] [DFN[[CODE(DOMi)@en[[[EventHandler]]]]]] は、[[コールバック]]または
[[null]] です。[[コールバック]]以外が指定された時は、 [[null]] とみなされます
([CODE(IDL)[[[TreatNonCallableAsNull]]]])。[[コールバック]]は、 [CODE(DOMi)@en[[[Event]]]]
1つを[[引数]]とし、任意 ([CODE(IDL)@en[[[any]]]]) の返り値となっています。 [SRC[>>35]]

;; [83] [CODE(DOMi)@en[[[OnErrorEventHandler]]]] は[[エラーの報告]]用の[[引数]]を取ることもできます。
[CODE(DOMi)@en[[[OnBeforeUnloadEventHandler]]]] は [CODE(DOMi)@en[[[DOMString]]]] または [[null]]
を返り値とします。 [SRC[>>35]]

;; [105] [[JavaScript]] では、 [CODE(JS)@en[[[Function]]]] を [CODE(DOMi)@en[[[ErrorHandler]]]]
として使うことができます。

[41] ほとんどの場合、[[イベントハンドラーIDL属性]]はその[[文脈オブジェクト]]の[[イベントハンドラー]]に対応します。

[106] 例外的に [CODE(HTMLe)@en[[[body]]]] [[要素]]や [CODE(HTMLe)@en[[[frameset]]]]
[[要素]]の[[イベントハンドラーIDL属性]]の一部は、 [CODE(DOMi)@en[[[Window]]]]
[[オブジェクト]]の[[イベントハンドラー]]に対応します。
[CODE(DOMi)@en[[[Window]]]] に属さない [CODE(HTMLe)@en[[[body]]]] [[要素]]のように、
対応する[[オブジェクト]]が存在していない[[イベントハンドラーIDL属性]]も存在します [SRC[>>35]]。

[42] [[取得時]]には、[[イベントハンドラーの現在値を取得]]して得られた値を返さなければ[['''なりません''']]
([[例外]]が投げられる場合もあります)。ただし対応する[[オブジェクト]]が存在しないなら、
[[null]] を返さなければ[['''なりません''']]。 [SRC[>>35]]

[46] [[設定時]]には、指定された値を[[イベントハンドラー]]としなければ[['''なりません''']]。
ただし対応する[[オブジェクト]]が存在しないなら、何もしては[['''なりません''']]。 [SRC[>>35]]

[88] [CODE(DOMi)@en[[[MessagePort]]]] の [CODE(DOMa)@en[[[onmessage]]]] 
は最初に設定された時に[[ポート・メッセージ・キュー]]が有効になる
([CODE(DOMm)@en[[[start]]]] [[メソッド]]が呼ばれたかのように振る舞う) という副作用があります。

;; [107] [CODE(DOMm)@en[[[addEventListener]]]] によって [CODE(DOMe)@en[[[message]]]] に登録してもこのような副作用はありません。

[129] 現在すべての[[イベントハンドラー]]に[[イベントハンドラーIDL属性]]があります。

* イベントハンドラー内容属性

[47] [[イベントハンドラー内容属性]]は、[[イベントハンドラー]]に対応すると定義されている[[内容属性]]で、
[[名前空間]]は[[null名前空間]]で、[[局所名]]は[[イベントハンドラー]]の名前です [SRC[>>35]]。

[48] [[イベントハンドラー内容属性]]の[[属性値]]は、 [[JavaScript]] のコードであって、
[[自動セミコロン挿入]]を経て [CODE(JS)@en[[[FunctionBody]]]] [[生成規則]]に一致するようなものでなければ[['''なりません''']]
[SRC[>>35]]。

;; [49] すなわち、 [[JavaScript]] の[[関数]]の括弧の中身でなければなりません。

[112] [[イベントハンドラー内容属性]]が設定されると、[[イベントハンドラー]]はその[[属性値]]による[[内部生未コンパイルハンドラー]]に設定されます
[SRC[>>35]]。[[イベントハンドラー内容属性]]が削除されると、[[イベントハンドラー]]は [[null]]
に設定されます [SRC[>>35]]。

[128] ほとんどの[[イベントハンドラー内容属性]]は、その[[要素]]の[[イベントハンドラー]]に対応しています。
例外的に [CODE(HTMLe)@en[[[body]]]] [[要素]]と [CODE(HTMLe)@en[[[frameset]]]] 
[[要素]]の[[イベントハンドラー内容属性]]の一部は、 [CODE(DOMi)@en[[[Window]]]]
[[オブジェクト]]に対応しています。

[130] [[イベントハンドラー内容属性]]は [[HTML]]、[[SVG]]、[[XUL]] の[[要素]]で定義されています。
[[イベントハンドラー内容属性]]があって[[イベントハンドラーIDL属性]]がないケースは今のところありません。
[[要素]]の[[イベントハンドラー]]で[[イベントハンドラー内容属性]]がないケースもありません。

* イベントハンドラーの現在値

[132] [DFN[[RUBYB[[[イベントハンドラーの現在値を取得]]]@en[getting the current value of the event handler]]]]とは、
[[イベントハンドラー]]の[[コールバック]]を取得する操作です。この操作は、[[イベントハンドラー]]が[[コールバック]]か
[[null]] であれば、それをそのまま返します [SRC[>>35]]。[[イベントハンドラー]]が[[内部生未コンパイルハンドラー]]なら、
これをコンパイルして得られる[[関数]]を[[イベントハンドラー]]に設定した上で、その[[イベントハンドラー]]を返します。

[139] [[内部生未コンパイルハンドラー]]は、[[イベントハンドラー]]が属する 
[CODE(DOMi)@en[[[Window]]]]/[[閲覧文脈]]/[[スクリプト設定群オブジェクト]]の下で評価されることになります。
[[イベントハンドラー]]の対象となるのが[[要素]]なら、その[[文書]]が関連付けられている [CODE(DOMi)@en[[[Window]]]]
が用いられ、そうでないならその対象となる[[オブジェクト]]自体が [CODE(DOMi)@en[[[Window]]]] です。

;; [134] [[イベントハンドラーの現在値を取得]]する操作は、
[[イベントハンドラー]]の対応する[[オブジェクト]]が存在しない場合には、呼ばれません。

[133] >>139 のような [CODE(DOMi)@en[[[Window]]]] が存在しない ([[文書]]が[[閲覧文脈]]中にない) 場合や、
その[[閲覧文脈]]で[[スクリプトが無効]]な場合には、
[[null]] を返します。この場合[[イベントハンドラー]]は[[内部生未コンパイルハンドラー]]のままとなります。 [SRC[>>35]]

[140] [[内部生未コンパイルハンドラー]]のスクリプト本体を [[JavaScript]] の [CODE(JS)@en[[[FunctionBody]]]]
として構文解析できないか、 [[early error]] となるなら、[[エラーを報告]]した上で [[null]] を返し、
[[イベントハンドラー]]も [[null]] に設定されます。なお[[エラーを報告]]した時[[取り扱われなかった]]なら、
[[利用者]]に報告して[['''構わない''']]とされています。 [SRC[>>35]]

;; [141] [[エラーの報告]]の項も参照してください。

[135] 構文解析できて [[early error]] にもならなかった場合には、
次のような[[スクリプト]]を得ます [SRC[>>35]]。
[FIG[
- [136] [[コード入口点]]は、 >>139  の[[スクリプト設定群オブジェクト]]の[[スクリプト実行環境]]に含まれる 
[[JavaScript]] の実行環境を用いて得た次のような [CODE(JS)@en[[[Function]]]]
-- [142] [CODE[[[FormatParameterList]]]]: [DFN[[CODE[[[event]]]]]]
-- [144] [CODE[[[FunctionBody]]]]: [[内部生未コンパイルハンドラー]]のスクリプト本体の構文解析結果
-- [145] [CODE[[[Scope]]]]: [[大域環境]] → >>139 の [CODE(DOMi)@en[[[Window]]]] の[[文書]] → [[要素]]の[[フォーム所有子]] → [[要素]]の順に [CODE[[[NewObjectEnvironment]]]] して得られる字句スコープ
--- [146] ここでいう[[要素]]は対象となる[[オブジェクト]]が[[要素]]でないときは省略
--- [147] [[フォーム所有子]]も該当なしのときは省略
--- [152] [[文書]]も[[対象]]となる[[オブジェクト]]が[[要素]]でないときは省略
-- [148] [CODE[[[Strict]]]]: [[内部生未コンパイルハンドラー]]の最初が [[Use Strict Directive]]
を含む [[Directive Prologue]] であるか否か
- [137] [[スクリプト設定群オブジェクト]]は、 >>139 の[[スクリプト設定群オブジェクト]]
- [138] [[エラーミュートフラグ]]は設定しない
]FIG]
このうちの >>136 の[[関数]]が返り値であり、新しい[[イベントハンドラー]]の値とするものです。

;; [143] [CODE(DOMa)@en[[[onerror]]]] のときは、 >>142 は
[CODE[[[event]]]], [CODE[[[source]]]], [CODE[[[lineno]]]], [CODE[[[[[colno]]]], [CODE[[[error]]]]
の5引数となります [SRC[>>35]]。

* イベントハンドラー処理アルゴリズム

[117] [DFN[[RUBYB[[[イベントハンドラー処理アルゴリズム]]]@en[the event handler processing algorithm]]]]は、
[[イベントハンドラー]]を呼び出す[[イベントリスナー]]です。このアルゴリズムは、次のような処理で構成されています
[SRC[>>35]]。
[FIG[
- [118] [[イベントハンドラーの現在値を取得]]します。
- [119] >>118 の結果が [[null]] なら、何もしません。
- [120] そうでないなら、 >>118 の結果を実行します。
-- [121] [[コード入口点に飛ぶ]]手順を実行します。
-- [122] [[引数]]は与えられた[[イベント]]オブジェクトとします。
-- [70] [[callback this value]] は与えられた[[イベント]]の [CODE(DOMa)@en[[[currentTarget]]]] とします。
- [124] >>120 の[[返り値]]が [[WebIDL]] [[boolean]] の[[偽]]の値なら、[[イベント]]を[[キャンセル]]します。
]FIG]

;; [125] [CODE(DOMi)@en[[[ErrorEvent]]]] と [CODE(DOMi)@en[[[OnErrorEventHandler]]]] の組み合わせの時に限り、
>>122 の[[引数]]は[[エラーの報告]]用の特別なものとなります [SRC[>>35]]。 ([[エラーの報告]]の項を参照してください)。

;; [126] [[イベント型]]が [CODE(DOMe)@en[[[mouseover]]]] の時と、[[イベント型]]が
[CODE(DOMe)@en[[[error]]]] で[[イベント]]が [CODE(DOMi)@en[[[ErrorEvent]]]] の時は、
>>124 が[[偽]]の時ではなく、[[真]]の時となります。 [SRC[>>35]]

;; [127] [[イベント型]]が [CODE(DOMe)@en[[[beforeunload]]]] の時は、
>>124 が[[偽]]の時ではなく、 [[null]] の時となります。 [[null]] 以外の値の時は、
[[イベント]]の [CODE(DOMa)@en[[[returnValue]]]] [[属性]]にその値が設定されます。 [SRC[>>35]]

[82] [[例外]]は特に[[捕捉]]されていないので、呼び出し元の方へ伝播していくことになります
([[イベントリスナー]]の項を参照)。

[EG[
[74] >>70 の [[callback this value]] の規定と、 [CODE(HTMLe)@en[[[body]]]]
の [CODE(HTMLa)@en[[[onload]]]] が [CODE(DOMi)@en[[[Window]]]] [[オブジェクト]]の[[イベントハンドラー]]であることから、
[PRE(HTML example code)[
<body onload="alert(this)" onclick="alert(this)">
]PRE]
... は文書の読み込み時に [CODE["[object Window]"]] が、[[クリック]]時に
[CODE["[object HTMLBodyElement]"]] が [SRC[>>35]] [CODE(JS)@en[[[alert]]]] されることとなります。
]EG]

* 特別なイベントハンドラーの一覧

[FIG[
- [43] [CODE(HTMLe)@en[[[body]]]] や [CODE(HTMLe)@en[[[frameset]]]] の[[イベントハンドラーIDL属性]]、[[イベントハンドラー内容属性]]の一部
-- 当該[[オブジェクト]]ではなく [CODE(DOMi)@en[[[Window]]]] に対応する[[イベントハンドラー]]です。
- [44] [CODE(DOMi)@en[[[MessagePort]]]] の [CODE(DOMa)@en[[[onmessage]]]]
-- 副作用を持ちます (>>88)。
- [45] [CODE(DOMi)@en[[[Window]]]]/[CODE(DOMi)@en[[[WorkerGlobalScope]]]] の [CODE(DOMa)@en[[[onerror]]]]
-- [DEL[[[DOMイベント]]以外でも使われます。]]
-- [[エラーの報告]]を参照。
- [108] [CODE(DOMe)@en[[[onbeforeunload]]]]
-- 返り値が異なります (>>127)。
- [109] [CODE(DOMe)@en[[[onmouseover]]]]
-- 返り値の解釈が異なります (>>126)。
]FIG]

* イベント・ハンドラーの一覧

[8] この種の[[属性]]のリストは[[事象取扱器属性の一覧]]を参照してください。

* 歴史

** スクリプト言語の指定

- [1] [[HTML]] の on[VAR[*]] 属性 (非推奨。) で [[JavaScript]] を使う時に、先頭に [[javascript:]] って書く DQN がなぜか多いな。
- [2] >>1 まあ [[Content-Script-Type:]] 問題についての[[不思議マーク付け]]的解法なのかもしれんが。。。(w
- [3] >>1-2 にしても、文法エラーにならずに動く (こともある。) なんて、一体どうなっているんだ? JavaScript 的にはどういう扱いになってるんだろう? それとも [[UA]] の補正なのかな?
- [4] >>3 [[ラベル]]。

[5]
>>1-4 [[WinIE]] だとそれが“ちゃんと”はたらいて、 [CODE[vbscript:]] と書くと [[VBScript]] になったりしちゃいます。

[10] 
>748 名前:Name_Not_Found[sage] 投稿日:2005/10/08(土) 04:12:41 ID:???
>
 HTML のイベント属性に javascript: を書くことについて。
 - 文法的には、ただのラベルである。
 - そこそこ誰でも知っていて、なんとなく使ったり読んだりしている。
 - WinIE が、javascript, jscript, vbscript, vbs, perlscript に反応する。
 &#160;&#160;(プラットフォームも含め、過不足あれば指摘してくれ。)
 - しかし、きちんとした仕様説明が見当たらない (探せなかっただけかもしれないが)。

 ラベル
 ttp://www2u.biglobe.ne.jp/~oz-07ams/prog/ecma262r3/12_Statements.html#LabelledStatement
 &#160;&#160;FOO: for ( .. ) for ( .. ) if ( .. ) continue FOO;
 におけるラベル FOO と同じ。
 ラベルの例をもう一つ。
 &#160;&#160;<p onclick="rubyscript:while (true)
 &#160;&#160;&#160;&#160;for (var i = 0; i < 10; i++)
 &#160;&#160;&#160;&#160;if (i == 6) break rubyscript;
 &#160;&#160;&#160;&#160;alert(i);">alert(6)</p>

 どうやら、良く練られた拡張ではなく、姑息な特例だと言わざるを得ない。
 
;;
[CITE@ja[+ JavaScript の質問用スレッド vol.41 +]]
<http://pc8.2ch.net/test/read.cgi/hp/1127133050/>

** 内部での表現

[9] [CITE[Hawk's W3 Laboratory : DHTML Tips : イベントハンドラに関する考察]] [DEL[<http://www.hawk.34sp.com/stdpls/dhtml/event-handler.html>]]
<http://web.archive.org/web/20061021223123/www.hawk.34sp.com/stdpls/dhtml/event-handler.html>

>
:更新日時:    2004年09月22日
>
結論から言うと、この「属性の中身のコード」は、対象となる要素に対応するHTMLElementオブジェクトのプロパティに、関数の形で格納されています。イベント発生時にはそのオブジェクトのメソッドとして実行されるわけです。
>
実体が関数であることは、イベント内でargumentsを参照できることから分かります。更に一歩進んでarguments.calleeにアクセスすれば実体の関数そのものにアクセスできます。
>
以下の例では関数の内容を表示しています。alert(arguments.callee);という記述が "そのまま"表示されるのが確認できるでしょう。
>
[PRE(HTML example code)[
<a href="http://hawk.34sp.com/" onmouseover="alert(arguments.callee);">リンク</a>
]PRE]
ただし、実際に試してみれば分かりますが、表示内容(すなわち実装方法)はブラウザによって大きく2系統に分かれます。上記の例はIEでは以下のように表示されるはずです。
>
[PRE[
function anonymous()
{
alert(arguments.callee);
}
]PRE]
>
anonymous(匿名)とは無名のFunctionオブジェクトに仮に付けられた名です。つまりIEでは、単に属性値のスクリプトコードを実行するだけの関数が生成され、対象となるオブジェクトのプロパティに格納されることになります。
>
一方で、NN4.XおよびGeckoベースのブラウザでは以下のようになります。
>
[PRE[
function onmouseover(event)
{
alert(arguments.callee);
}
]PRE]
>
Operaではこうです。
>
[PRE[
function anonymous(event)
{
alert(arguments.callee);
}
]PRE]
>
KHTMLベースのブラウザではこうなります。
[PRE[
function (event)
{
alert(arguments.callee);
}
]PRE]
>
名前の有無や名前が無い場合の表現など、瑣末な違いはありますが、いずれもeventという仮引数が存在していることが大きな特徴です。この仮引数はイベントオブジェクト(NN4.Xにおいてはevent object、その他の場合はDOM2 EventsにおけるEventインターフェイスを実装したオブジェクト)を表しています。
>
NN4.Xのイベントモデルでも、DOM2 Eventsでも、イベントに関する情報はイベントオブジェクトの形で、イベントハンドラとして登録された関数の第一引数に渡されます。だからこのような形の関数になるのは理にかなっているのですが、そのとき仮引数の名前が”event”になることなどは特に標準化されていないので注意が必要です。
>
またこのeventという名前は、偶然にも?IEのwindow.eventと同じなので、
>
[PRE(HTML example code)[
<a href="http://hawk.34sp.com/" onmouseover="foo(event);">リンク</a>
]PRE]
このように記述すれば、関数fooにはブラウザを問わず第一引数にeventオブジェクトが渡されます(もっともfoo内での条件分岐は必要になりますが)。 

;; [11] [[関数]]内で[[関数]]名を使って再起呼び出しできるのかな?

** [CODE(JS)@en[window.event]]

[6] [[WinIE7]], [[Opera]], [[WebKit]] は対応しているみたいです。

[7] 
[[Firefox3]] は対応していないみたいです。

;; [12] [[事象取扱器属性]]の時だけでなく、 [CODE(DOMm)@en[[[attachEvent]]]]
した[[事象取扱器]]の時にも設定されているの?

** HTML4

[151] [[XHTML m12n]] では [DFN[[[XHTML Events Module]]]] が定義されており、
現在の[[イベントハンドラー内容属性]]が含まれていました。

** HTML Standard

[13] [CITE@en[(X)HTML5 Tracking]]
([TIME[2009-09-30 00:13:50 +09:00]] 版)
<http://html5.org/tools/web-apps-tracker?from=4049&to=4050>

[14] [CITE['''['''whatwg''']''' Additional onxxxx event attributes for DOM Level3 Events]]
([TIME[2010-12-01 08:26:00 +09:00]] 版)
<http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2010-November/029252.html>

[15] [CITE@en[Web Applications 1.0 r5933 Be better about how we define the creation of scripts for event handler attributes (specifically, how we interact with the JS spec).]]
( ([TIME[2011-03-04 09:52:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=5932&to=5933>

[16] [CITE[''''''[''''''whatwg'''''']'''''' on* attributes on DOM elements]]
( ([TIME[2011-06-18 08:37:31 +09:00]] 版))
<http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-June/032146.html>

[17] [CITE[IRC logs: freenode / #whatwg / 20110728]]
( ([TIME[2011-08-07 22:56:46 +09:00]] 版))
<http://krijnhoetmer.nl/irc-logs/whatwg/20110728#l-242>

[18] [CITE[IRC logs: freenode / #whatwg / 20111117]]
( ([TIME[2011-11-19 14:21:09 +09:00]] 版))
<http://krijnhoetmer.nl/irc-logs/whatwg/20111117>

[19] [CITE[''''''[''''''whatwg'''''']'''''' API design restrictions due to barewords in onxxx="" attributes]]
( ([TIME[2011-12-03 12:41:47 +09:00]] 版))
<http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2011-November/033959.html>

[20] [CITE@en[Writing forward-compatible websites - MDN]]
( ([TIME[2011-12-03 12:41:52 +09:00]] 版))
<https://developer.mozilla.org/Writing_Forward_Compatible_Websites>

[21] [CITE[IRC logs: freenode / #whatwg / 20120427]]
( ([TIME[2012-05-06 12:41:01 +09:00]] 版))
<http://krijnhoetmer.nl/irc-logs/whatwg/20120427#l-633>

[22] [CITE[IRC logs: freenode / #whatwg / 20120518]]
( ([TIME[2012-05-31 20:23:25 +09:00]] 版))
<http://krijnhoetmer.nl/irc-logs/whatwg/20120518>

[23] [CITE@en[''''''[''''''proximity'''''']'''''' HTML's WebIDL Function]]
( ([[Marcos Caceres]] 著, [TIME[2012-05-28 20:25:42 +09:00]] 版))
<http://lists.w3.org/Archives/Public/public-device-apis/2012May/0283.html>

[24] [CITE[IRC logs: freenode / #whatwg / 20120620]]
( ([TIME[2012-07-04 21:39:52 +09:00]] 版))
<http://krijnhoetmer.nl/irc-logs/whatwg/20120620#l-321>

[25] [CITE@en[Web Applications 1.0 r7235     Improve compatibiliy for legacy features.]]
( ([TIME[2012-08-10 03:02:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7234&to=7235>

[26] [CITE[''''''[''''''whatwg'''''']'''''' Specification unclear about how HTMLElement.prototype.onscroll's getter/setter should behave for "body" elements]]
( ([TIME[2012-12-04 06:17:20 +09:00]] 版))
<http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2012-December/038221.html>

[27] [CITE@en[Web Applications 1.0 r7560     Remove some IDL shadowing. See also bug 20225.]]
( ([TIME[2012-12-04 09:43:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7559&to=7560>

[28] [CITE@en[Web Applications 1.0 r7561     Recent changes to body also apply to frameset.]]
( ([TIME[2012-12-05 03:47:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7560&to=7561>

[29] [CITE@en[WICD Mobile 1.0]]
( ([TIME[2010-08-17 16:50:39 +09:00]] 版))
<http://www.w3.org/TR/WICDMobile/#XHTML-event-attributes>

[30] [CITE[''''''[''''''whatwg'''''']'''''' Specification unclear about how HTMLElement.prototype.onscroll's getter/setter should behave for "body" elements]]
( ([TIME[2013-01-08 08:36:05 +09:00]] 版))
<http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2013-January/038528.html>

[31] [CITE@en[Web Applications 1.0 r7638 Factor out some common event handler declarations in IDL.]]
( ([TIME[2013-01-08 08:45:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7637&to=7638>

[32] [CITE@en[Web Applications 1.0 r7667 Clean up how we define event handlers that are shadowed for Window on <body>.]]
( ([TIME[2013-01-30 04:18:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7666&to=7667>

[33] [CITE@en[Web Applications 1.0 r7668     Fix bug 18626 and actually do what the previous checkin was trying to do.]]
( ([TIME[2013-01-30 05:12:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=7667&to=7668>

[86] [CITE@en[Web Applications 1.0 r7933     Bring onbeforeunload handling closer to compatibility with the Web]] ([TIME[2013-06-08 06:01:00 +09:00]] 版) <http://html5.org/tools/web-apps-tracker?from=7932&to=7933>

[87] [CITE@en[Bug 20637 – Remove onfullscreen* from HTML]]
( ([TIME[2013-06-08 22:18:21 +09:00]] 版))
<https://www.w3.org/Bugs/Public/show_bug.cgi?id=20637>

[89] [CITE@en[Web Applications 1.0 r8097 Add more cross references to the new 'concept-window-document' thing, and clean up <frameset>'s event definitions (I always forget to update that when I'm updating <body>'s...).]]
( ([TIME[2013-07-28 00:48:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=8096&to=8097>

[90] [CITE@en[Web Applications 1.0 r2529        MAJOR CHANGES: Revamp the way scripts are specified, along with their interaction with resolving relative URLs, etc. Give enough detail to justify objects in the DOM not being garbage collected randomly when still in use. Define script groups, to handle scripts going away during document.open() and session history navigation. Define why and how setTimeout(), database transactions, etc, handle page transitions. Drop the terms 'with' and 'without' script, use script is 'enabled'/'disabled' instead. Define 'unload' and 'beforeunload'. Rework how onfoo='' and .onfoo event handler attributes are defined. Rework how the content model of <noscript> is defined. Reword the way javascript: is defined to use the new terminology. Add a few notes of things that came up while I was doing all that.]]
( ([TIME[2008-12-12 17:46:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=2528&to=2529>

[91] [CITE[''''''[''''''whatwg'''''']'''''' Should onfoo event handler properties be on Element or HTMLElement?]]
( ([TIME[2013-10-09 08:53:50 +09:00]] 版))
<http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2013-October/040992.html>

[92] [CITE@en[Web Applications 1.0 r8303     Move the event handler content attribute compiling logic to later in the pipeline, for better consistency with Firefox/Safari (and other browsers, though to a lesser extent).]]
( ([TIME[2013-11-21 06:09:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=8302&to=8303>

[93] [CITE@en[Web Applications 1.0 r8282     OnBeforeUnloadEventHandler is supposed to allow null return values (and some markup error fixes, oops)]]
( ([TIME[2013-11-14 07:45:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=8281&to=8282>

[94] [CITE@en-US[XML Binding Language (XBL) 2.0]]
( ([TIME[2007-03-16 22:20:16 +09:00]] 版))
<http://www.w3.org/TR/2007/CR-xbl-20070316/#event0>

[95] [CITE@en[Web Applications 1.0 r8375 Rearrange requirements for handling internal raw uncompiled handlers]]
( ([TIME[2014-01-07 06:35:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=8374&to=8375>

[149] >>96 によって改訂されるまでは、[[イベントハンドラー内容属性]]は設定時にコンパイルが行われるようになっていました。

[50] [[スクリプトが有効]]な[[閲覧文脈]]にある [CODE(DOMi)@en[[[Document]]]]
が所有する[[要素]]の[[イベント・ハンドラー内容属性]]が設定された時、次のように処理しなければ[['''なりません'''
[SRC[>>35]]。

;; [51] そのような[[文書]]に [[adopt]] された時も同様と思われます。

[FIG[
= [52] 対応する[[イベント・ハンドラー]]を [[null]] に設定します。
= [53] [[JavaScript]] の[[スクリプト実行環境]]を準備します。
= [54] [VAR@en[body]] を[[イベント・ハンドラー内容属性]]の新しい値とします。
= [55] [VAR@en[body]] が [CODE@en[[[FunctionBody]]]] として構文解析可能でないか、
構文解析によって [[early error]] を検出した場合は、[[イベント・ハンドラー内容属性を誤りに設定]]し、
停止します。
= [56] [VAR@en[body]] が [[Use Strict Directive]] を含む [[Directive Prologue]] 
([CODE(JS)[[["use strict"]]]]) から始まるかどうかを [VAR@en[strict]] とします。
= [57] >>53 の[[スクリプト実行環境]]を使って次のような[[関数]]オブジェクトを作り、
[[スクリプト]]の [[list of code entry-points]] に入れます。
=- [77] 引数リスト [VAR[FormalParameterList]]: [CODE(DOMi)@en[[[Window]]]] の [CODE(DOMa)@en[[[onerror]]]]
[[属性]]なら [VAR[event]], [VAR[source]], [VAR[lineno]], [VAR[colno]], [VAR@en[error]] の5つ、それ以外なら
[VAR[event]] の1つ
=- [78] 関数本体 [VAR@en[FunctionBody]]: >>55 の構文解析結果
=- [79] 字句環境 [VAR@en[Scope]]: 
=-= [CODE[[VAR@en[Scope]] := [[NewObjectEnvironment]]([[要素]]の [CODE(DOMi)@en[[[Document]]]], [[大域環境]])]]
=-= [[要素]]が[[フォーム所有子]]を持つなら、 [CODE[[VAR@en[Scope]] := [[NewObjectEnvironment]]([[要素]]の[[フォーム所有子]], [VAR@en[Scope]])]]
=-= [CODE[[VAR@en[Scope]] := [[NewObjectEnvironment]]([[要素]], [VAR@en[Scope]])]]
=- [80] [VAR@en[Strict]]: >>56 の [VAR@en[strict]]
= [58] [[スクリプトの大域オブジェクト]]、[[スクリプトの閲覧文脈]]、
[[スクリプトの文書]]、[[スクリプトの参照元情報源]]、[[スクリプトのURL文字符号化]]、
[[スクリプトの基底URL]]を当該[[要素]]による[[節点からスクリプト設定の決定]]により設定します。
= [59] 対応する[[イベント・ハンドラー]]を >>57 の[[関数]]とします。
]FIG]

[60] [DFN[[RUBYB[[[イベント・ハンドラー内容属性を誤りに設定]]]@en[set the event handler content attribute to an error]]]]するとは、対応する[[イベント・ハンドラー]]を[DFN[[RUBYB[[[内部誤り値]]]@en[internal error value]]]]に設定することをいいます。
[[内部誤り値]]は[RUBYB[誤り条件]@en[error condition]]を表現するもので、
[[イベント・ハンドラー内容属性]]が設定された[[資源]]の [[URL]] や[[行番号]]を記録するものです。 [SRC[>>35]]

** 再定義

[REFS[
- [96] [CITE@en[Web Applications 1.0 r8376     Make content attribute event handlers work slightly more like in more browsers.]]
( ([TIME[2014-01-07 07:10:00 +09:00]] 版))
<http://html5.org/tools/web-apps-tracker?from=8375&to=8376>
]REFS]

[150] >>96 によって[[イベントハンドラー内容属性]]のコンパイルは初めて呼び出された時まで遅延されるようになりました。

[REFS[
- [153] [CITE@en[Web Applications 1.0 r8595     Try to make event handler scope chains more accurate.]] ([TIME[2014-05-02 05:24:00 +09:00]] 版) <http://html5.org/tools/web-apps-tracker?from=8594&to=8595>
]REFS]

[154] [CITE@en[Re: Spec for ''''''[''''''Global'''''']'''''' does not seem to be quite web-compatible, and  none of the UAs are really compatible with each other]]
( ([[Boris Zbarsky]] 著, [TIME[2013-12-27 23:49:53 +09:00]] 版))
<http://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0416.html>