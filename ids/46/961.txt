[1] [[TECkit]]

[8] 
[CITE@en[GitHub - silnrsi/wsresources: A catch bag of writing system resource files organised by writing system tag]], [TIME[2025-06-28T01:16:23.000Z]] <https://github.com/silnrsi/wsresources>

[11] 
[CITE@ja[The TECkit Language - TECkit_Language.pdf]], [TIME[2021-11-12T17:48:17.000Z]], [TIME[2025-06-28T01:26:36.997Z]] <https://software.sil.org/downloads/r/teckit/TECkit_Language.pdf>


[10] 
[CITE@ja[Microsoft Word - Beyond UTR22.doc - BeyondUTR22_pdf.pdf]], [TIME[2021-07-14T15:18:35.000Z]], [TIME[2025-06-28T01:25:02.710Z]] <https://software.sil.org/downloads/r/teckit/BeyondUTR22_pdf.pdf>


[14] [CITE@en[teckit/test at master · silnrsi/teckit · GitHub]], [TIME[2025-06-28T15:25:19.000Z]] <https://github.com/silnrsi/teckit/tree/master/test>

[15] >>14 申し訳程度のテスト

-*-*-


[2] >>8 から

- [3] [CODE[regions/Asia/PH/legacy/sil-phil-ansi/mappings/PhilAnsiSIL.map]]
- [6] [CODE[scripts/Grek/legacy/sil-galatia/mappings/SILGreek.map]]
- [9] [CODE[scripts/Ethi/legacy/geez/mappings/Geez to Unicode.map]]
- [13] [CODE[scripts/Arab/SenAjami/mappings/SenAjami.map]]
- [19] [CODE[scripts/Ethi/legacy/sil-eth-m/mappings/SIL Eth M.map]]
- [21] [CODE[scripts/Plrd/legacy/lipo3/mappings/lipo3.map]]
- [22] [CODE[scripts/Latn/legacy/windows-symbol-cp1252/mappings/Windows-SymbolEncodedFont.map]]
- [25] [CODE[regions/Americas/MX/legacy/sil-mexico/mappings/CHNCCR1.map]]
- [27] [CODE[langs/r/rap/legacy/sil-rap/mappings/SIL_RAP.map]]


[4] >>3 注釈に [[ISO/IEC 8859-1]] と思われる文字

[16] >>13 [CODE[Copyright]] の値 (文字列リテラル) に [[UTF-8]] 文字[CH[©]]を含む事例

[18] >>8 に含まれる [CODE[.map]] ファイルの限りにおいては考慮するべき[[非ASCII文字]]は
>>16 のような[CH[©]] ([[UTF-8]]) のみ。それ以外は[[注釈]]に[[非ASCII文字]]が含まれることも少なくありませんが、
[[UTF-8]] のものだけでなく >>4 のような事例も紛れ込んでいるので注意が必要です。

[20] >>19 [[改行]]が [N[0x0D]] のみの事例

[23] >>21 [CH["]], >>22 [CH[']] で始まる[[文字列リテラル]]が[[改行]]まで閉じられていない事例

[24] [CITE[TECkit]] のソースコードを見ると[[改行]]も[[リテラル]]の終わりと明示的に作られていて、
エラーメッセージも特に出していません。

[7] >>6 [CODE[ByteDefault]] に [N[0x3F]] 以外を指定した事例

[17] >>13 入出力両方とも [[Unicode]] の事例

[5] >>3 [[バイトクラス]]・[[Unicodeクラス]]で定義されている対応と直接記述されている対応で重複がある
(どちらの定義も同等)。 [CC[U+00D1]], [CC[U+00D2]], [CC[U+00D3]], [CC[U+00D4]]
この他にも何らかの理由重複される変換式があって一方が常に無視されるものが含まれるファイルはかなりある。
(双方向の変換式でうち一方向が無視されるものもある。)


[26] 
>>25 [CODE[PUA]] という謎の値が出現する事例。ドキュメントにある[[字句]]の中だと定義 (マクロ) か、
そうでなければ[[文字の名前]]扱いになるはずだが、
そのような定義は無いし、
[[文字の名前]]が [CN[PUA]] であるものは存在しない。また、
[CODE[PUA]] という[[クラス]]が定義されているわけでもないし、
[[クラス]]は構文も違う。
このような [CODE[PUA]] が変換式に含まれるファイルは他にもいくつかある。

[12] >>9 変換先が [CC[U+FFFD]] を含む文字列の事例 (人間向けに注釈あり)

[28] 
>>27 [CODE['id ']] から始まるおもしろい変換式。 [CODE[\id ]]
から始まる行は通常の変換ではなくそのまま [[ASCII]] から [[Unicode]]
に写像する意図らしい。 [CODE[.map]] の表現力で無理矢理記述した結果と思われる。
言語仕様ドキュメントではクラスはその位置で対応付けるとしか説明がなく、
クラス以外の字句の扱いが不明瞭だし、 [CODE[.map]] の字句の位置なのか一致した文字列の数(?)なのかよくわからない。ソースコードを読んだ感じだと、
[CODE[.map]] 上の字句の数で対応付けているように見える。
が、そうだとするとこの変換は正しく処理されないような気もするが...
なお同じ変換式があるファイルが他にもいくつかある。






