
[15] A [DFN[feed]] has
[DFN[entries][feed's entries]], which is a list of [[entries][entry]], and
[DFN[authors][feed's authors]], which is a list of [[persons][person]].
They are initially empty.

[39] A [[feed]] has 
[DFN[icon][feed's icon]],
[DFN[logo][feed's logo]],
[DFN[title][feed's title]],
[DFN[subtitle][feed's subtitle]], and
[DFN[updated][feed's updated]].
They are initially [[null]].

[28] An [DFN[entry]] has
[DFN[authors][entry's authors]], which is a list of [[persons][person]], and
[DFN[categories][feed's categories]], which is a list of [[categories][category]].
They are initially empty.

[88] An [[entry]] has
[DFN[feed][entry's feed]],
[DFN[title][entry's title]],
[DFN[summary][entry's summary]],
[DFN[content][entry's content]],
[DFN[published][entry's published]], and
[DFN[updated][entry's updated]].
They are initially [[null]].

[81] To get the [DFN[computed authors]] of an [[entry]] [VAR[entry]], run these steps:
[FIG(steps)[
= [82] If [VAR[entry]]'s [F[authors][entry's authors]] is not empty,
return [VAR[entry]]'s [F[authors][entry's authors]].
= [83] Otherwise, if [VAR[entry]]'s [F[feed][entry's feed]] is not null,
return [VAR[entry]]'s [F[feed][entry's feed]]'s [F[authors][feed's author]].
= [84] Otherwise, return an empty list.
]FIG]

[93] To get the [DFN[computed updated]] of an [[entry]] [VAR[entry]], run these steps:
[FIG(steps)[
= [94] If [VAR[entry]]'s [F[updated][entry's updated]] is not [[null]],
return [VAR[entry]]'s [F[updated][entry's updated]].
= [97] Otherwise, if [VAR[entry]]'s [F[published][entry's published]] is not [[null]],
return [VAR[entry]]'s [F[published][entry's published]].
= [95] Otherwise, if [VAR[entry]]'s [F[feed][feed's entry]] is not null,
return [VAR[entry]]'s [F[feed][entry's feed]]'s [F[updated][feed's updated]].
= [96] Otherwise, return
@@ the current timestamp.
]FIG]

[29] A [DFN[person]] is a tuple of 
[DFN[name][person's name]],
[DFN[email][person's email]], and
[DFN[url][person's url]].
They are initially [[null]].

[30] A [DFN[category]] is a pair of [DFN[term][category's term]] and [DFN[label][category's label]].

[1] To [DFN[process a feed response]] [VAR[res]], run these steps:
[FIG(steps)[
= [9] If [VAR[res]] is a [[network error]] or
[VAR[res]]'s [F[status][status code]] is not [CODE(HTTP)[200]],
return [[null]] and abort these steps.
= [2] Let [VAR[type]] be [VAR[res]]'s [F[computed MIME type]].
= [3] If [VAR[type]] is an [[XML MIME type]]:
== [7] Let [VAR[doc]] be a [CODE(DOMi)@en[Document]].
== [6] Let [VAR[parser]] be an [[XML parser]] associated with [VAR[doc]].
The [[XML parser]] [MUST[MUST]] implement [[XML5]].
It [MUST[MUST NOT]] [[fetch]] and process [[external entities][external entity]].
== [8] Run [VAR[parser]], using [VAR[res]]'s [F[body]] as its [F[input byte stream]].
The [CODE(MIME)@en[charset]] parameter value in the 
[CODE(HTTP)@en[Content-Type]] [[header value]] of [VAR[res]], if any, is used as
the [[encoding label]] provided by the underlying transport.
== [11] Set [VAR[doc]]'s [F[address][document's address]] to
[VAR[res]]'s [F[url][response's URL]].
== [27] Set [VAR[doc]]'s [F[character encoding][document's character encoding]]
to the [[character encoding]] used by [VAR[parser]].
== [5] Return the result of [[processing a feed document][process a feed document]] [VAR[doc]].
= [4] Otherwise, return [[null]].
]FIG]

[10] To [DFN[process a feed document]] [VAR[doc]], run these steps:
[FIG(steps)[
= [12] Let [VAR[root]] be [VAR[doc]]'s [F[root element]].
= [17] Switch by [VAR[root]]:
[FIG(switch)[
: [16] If it is a [CODE(XMLe)@en[feed]] element in the [[Atom namespace]] :
Return the result of [[processing an Atom feed element][process a Atom feed element]] [VAR[root]].
: [23] If it is a [CODE(XMLe)@en[feed]] element in the [[Atom 0.3 namespace]] :
Return the result of [[processing an Atom 0.3 feed element][process a Atom 0.3 feed element]] [VAR[root]].
: [19] If it is an [CODE(XMLe)@en[rss]] element in the [[null namespace]] :
@@
: [18] If it is an [CODE(XMLe)@en[RDF]] element in the [[RDF namespace]] :
@@
: [13] Otherwise : Return [[null]].
]FIG]
]FIG]

[20] To [DFN[process an Atom feed element]] [VAR[element]], run these steps:
[FIG(steps)[
= [14] Let [VAR[feed]] be a [[feed]].
= [21] For each [[element]] [VAR[child]] in [VAR[element]]'s [F[children]], in order,
run these substeps:
== [22] Switch by [VAR[child]]'s [F[namespace]] and [F[local name]]:
[FIG(switch)[
: [CODE(XMLe)@en[icon]] element in the [[Atom namespace]] :
[FIG(steps)[
= [37] If [VAR[feed]]'s [F[icon][feed's icon]] is [[null]]:
== [35] Let [VAR[text]] be the [CODE(DOMa)@en[textContent]] of [VAR[child]].
== [36] [[Parse][parse a URL]] [VAR[text]] relative to [VAR[child]]'s [F[node document]].
== [38] If not failed, set [VAR[feed]]'s [F[icon][feed's icon]] to the [[resulting URL string]].
]FIG]
: [CODE(XMLe)@en[logo]] element in the [[Atom namespace]] :
[FIG(steps)[
= [40] If [VAR[feed]]'s [F[logo][feed's logo]] is [[null]]:
== [41] Let [VAR[text]] be the [CODE(DOMa)@en[textContent]] of [VAR[child]].
== [42] [[Parse][parse a URL]] [VAR[text]] relative to [VAR[child]]'s [F[node document]].
== [43] If not failed, set [VAR[feed]]'s [F[logo][feed's logo]] to the [[resulting URL string]].
]FIG]
: [CODE(XMLe)@en[title]] element in the [[Atom namespace]] :
[FIG(steps)[
= [44] If [VAR[feed]]'s [F[title][feed's title]] is [[null]]:
== [45] Set [VAR[feed]]'s [F[title][feed's title]] to the result of
[[processing an Atom text][process an Atom text]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[subtitle]] element in the [[Atom namespace]] :
[FIG(steps)[
= [46] If [VAR[feed]]'s [F[subtitle][feed's subtitle]] is [[null]]:
== [47] Set [VAR[feed]]'s [F[subtitle][feed's subtitle]] to the result of
[[processing an Atom text][process an Atom text]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[updated]] element in the [[Atom namespace]] :
[FIG(steps)[
= [48] If [VAR[feed]]'s [F[updated][feed's updated]] is [[null]]:
== [49] Set [VAR[feed]]'s [F[updated][feed's updated]] to the result of
[[processing an Atom date][process an Atom date]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[author]] element in the [[Atom namespace]] :
Append the result of [[processing an Atom person][process an Atom person]] [VAR[child]]
to [VAR[feed]]'s [F[authors][feed's author]].
: [CODE(XMLe)@en[entry]] element in the [[Atom namespace]] :
[FIG(steps)[
= [86] Let [VAR[entry]] be the result of [[processing an Atom entry][process an Atom entry]]
[VAR[child]].
= [85] Set [VAR[entry]]'s [F[feed][entry's feed]] to [VAR[feed]].
= [87] Append [VAR[entry]] to [VAR[feed]]'s [F[entries][feed's entry]].
]FIG]
: [CODE(XMLe)@en[link]] element in the [[Atom namespace]] :
@@
]FIG]
= [25] Return [VAR[feed]].
]FIG]

[24] To [DFN[process an Atom person]] [VAR[element]], run these steps:
[FIG(steps)[
= [54] Let [VAR[person]] be a [[person]].
= [55] For each [[element]] [VAR[child]] in [VAR[element]]'s [F[children]], in order,
run these substeps:
== [56] Switch by [VAR[child]]'s [F[namespace]] and [F[local name]]:
[FIG(switch)[
: [CODE(XMLe)@en[name]] element in the [[Atom namespace]] :
If [VAR[person]]'s [F[name][person's name]] is [[null]],
set [VAR[person]]'s [F[name][person's name]] to the [CODE(DOMa)@en[textContent]]
of [VAR[child]].
: [CODE(XMLe)@en[email]] element in the [[Atom namespace]] :
If [VAR[person]]'s [F[email][person's email]] is [[null]],
set [VAR[person]]'s [F[email][person's email]] to the [CODE(DOMa)@en[textContent]]
of [VAR[child]].
: [CODE(XMLe)@en[uri]] element in the [[Atom namespace]] :
[FIG(steps)[
= [57] If [VAR[person]]'s [F[url][person's url]] is [[null]]:
== [58] Let [VAR[text]] be the [CODE(DOMa)@en[textContent]] of [VAR[child]].
== [59] [[Parse][parse a URL]] [VAR[text]] relative to [VAR[child]]'s [F[node document]].
== [60] If not failed, set [VAR[person]]'s [F[url][person's url]] to the [[resulting URL string]].
]FIG]
]FIG]
= [53] Return [VAR[person]]
]FIG]

[50] To [DFN[process an Atom text]] [VAR[element]], run these steps:
[FIG(steps)[
= [61] Let [VAR[type]] be the [CODE(XMLa)@en[type]] attribute value
of [VAR[element]], if any, or [[null]].
= [62] If [VAR[type]] is [CODE[html]]:
== [73] Let [VAR[div]] be a [CODE(HTMLe)@en[div]] element
whose [F[node document]] is [VAR[element]]'s [F[node document]].
== [74] Let [VAR[fragment]] be a [CODE(DOMi)@en[DocumentFragment]]
whose [F[node document]] is [VAR[element]]'s [F[node document]].
== [70] Let [VAR[nodes]] be the result of running the [[HTML fragment parsing algorithm]]
with [VAR[context]] element [VAR[div]] and
[VAR[input]] the [CODE(DOMa)@en[textContent]] of [VAR[element]].
== [71] For each item [VAR[node]] in [VAR[nodes]], in order,
[[insert]] [VAR[node]] into [VAR[fragment]].
== [72] Return [VAR[fragment]].
= [63] Otherwise, if [VAR[type]] is [CODE[xhtml]] and
[VAR[element]]'s [F[children]] contains a [CODE(HTMLe)@en[div]] element:
== [66] Let [VAR[div]] be a [[clone]] of [VAR[element]]'s
first [CODE(HTMLe)@en[div]] element child, with [VAR[clone children flag]] set.
== [67] Let [VAR[fragment]] be a [CODE(DOMi)@en[DocumentFragment]]
whose [F[node document]] is [VAR[element]]'s [F[node document]].
== [68] For each child [VAR[node]] in [VAR[div]]'s [F[children]], in order,
[[insert]] [VAR[node]] into [VAR[fragment]].
== [69] Return [VAR[fragment]].
= [64] Otherwise:
== [65] Return a [CODE(DOMi)@en[Text]] whose [F[data]] is the
[CODE(DOMa)@en[textContent]] of [VAR[element]] and
whose [F[node document]] is [VAR[element]]'s [F[node document]].
]FIG]

[51] To [DFN[process an Atom date]] [VAR[element]], run these steps:
[FIG(steps)[
= [75] Let [VAR[text]] be the [CODE(DOMa)@en[textContent]] of [VAR[element]].
= [76] Return the result of [[parsing an RFC 3339 [CODE[xs:dateTime]] string][parse an RFC 3339 [CODE[xs:dateTime]] string]] [VAR[text]].
]FIG]

@@ [77] Need to define [DFN[parse an RFC 3339 [CODE[xs:dateTime]] string]].
It returns a number (JS timestamp) or [[null]].

[52] To [DFN[process an Atom entry]] [VAR[element]], run these steps:
[FIG(steps)[
= [78] Let [VAR[entry]] be an [[entry]].
= [79] For each [[element]] [VAR[child]] in [VAR[element]]'s [F[children]], in order,
run these substeps:
== [80] Switch by [VAR[child]]'s [F[namespace]] and [F[local name]]:
[FIG(switch)[
: [CODE(XMLe)@en[author]] element in the [[Atom namespace]] :
Append the result of [[processing an Atom person][process an Atom person]] [VAR[child]]
to [VAR[entry]]'s [F[authors][entry's author]].
: [CODE(XMLe)@en[category]] element in the [[Atom namespace]] :
[FIG(steps)[
= [89] Let [VAR[category]] a [[category]].
= [90] Set [VAR[category]]'s [F[term][category's term]] to the
[CODE(XMLa)@en[term]] attribute value of [VAR[child]], if any, or the empty string.
= [91] Set [VAR[category]]'s [F[label][category's label]] to the
[CODE(XMLa)@en[label]] attribute value of [VAR[child]], if any, or [VAR[category]]'s 
[F[term][category's term]].
= [92] Append [VAR[category]] to [VAR[entry]]'s [F[categories][entry's categories]].
]FIG]
: [CODE(XMLe)@en[published]] element in the [[Atom namespace]] :
[FIG(steps)[
= [33] If [VAR[entry]]'s [F[published][entry's published]] is [[null]]:
== [34] Set [VAR[entry]]'s [F[published][entry's published]] to the result of
[[processing an Atom date][process an Atom date]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[updated]] element in the [[Atom namespace]] :
[FIG(steps)[
= [31] If [VAR[entry]]'s [F[updated][entry's updated]] is [[null]]:
== [32] Set [VAR[entry]]'s [F[updated][entry's updated]] to the result of
[[processing an Atom date][process an Atom date]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[title]] element in the [[Atom namespace]] :
[FIG(steps)[
= [98] If [VAR[entry]]'s [F[title][entry's title]] is [[null]]:
== [99] Set [VAR[entry]]'s [F[title][entry's title]] to the result of
[[processing an Atom text][process an Atom text]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[summary]] element in the [[Atom namespace]] :
[FIG(steps)[
= [100] If [VAR[entry]]'s [F[summary][entry's summary]] is [[null]]:
== [101] Set [VAR[entry]]'s [F[summary][entry's summary]] to the result of
[[processing an Atom text][process an Atom text]] [VAR[child]].
]FIG]
: [CODE(XMLe)@en[content]] element in the [[Atom namespace]] :
@@
: [CODE(XMLe)@en[link]] element in the [[Atom namespace]] :
@@
]FIG]
]FIG]

@@
[26] To [DFN[process an Atom 0.3 feed element]] [VAR[element]], run these steps: