[4] [[スクリプト]]は、[[利用者]]または[[利用者エージェント]]により、
実行途中で中断されることがあります。

* 仕様書

[REFS[
- [49] '''[CITE@en-US-x-hixie[HTML Standard]] ([TIME[2014-04-03 03:44:44 +09:00]] 版) <https://www.whatwg.org/specs/web-apps/current-work/#killing-scripts>'''
- [14] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2016-02-24 02:49:49 +09:00]] 版) <https://html.spec.whatwg.org/#kill-a-worker>
]REFS]

* 中断

[51] [[閲覧文脈]]は[[スクリプトが有効]]、[[スクリプトが無効]]の状態を有しており、
[[利用者エージェント]]の対応状況、[[利用者]]の設定、[[著者]]の指定によってどちらであるかが決定します。
[[スクリプトが無効]]の場合、[[スクリプト]]が作成されなかったり、[[スクリプト]]の実行が実際の内容に関わらず
「何もしない」となったり (>>28) します。詳しくは[[スクリプトが無効]]の項をご覧ください。

[54] [[スクリプト]]の実行中に[[スクリプト]]が無効になったときは、ただちに[[スクリプト]]を終端する[['''べきです''']]
[SRC[>>49]]。

[68] [[ワーカー]]では、[[ワーカーを殺す]]操作や[[ワーカーの停止]]操作により、
[[スクリプト]]の実行が中断されることがあります。

* 資源制限

[52] [[利用者エージェント]]は、[[スクリプト]]に対して[[資源]]の制限を課して[['''構いません''']]。
例えば、[[CPU]] [[quota]]、[[メモリー]]の制限、合計実行時間の制限、[[帯域]]の制限などを課すことができます。 [SRC[>>49]]

[53] [[スクリプト]]が制限を超えた時は、 [CODE(DOMc)@en[[[QuotaExceededError]]]] [[例外]]を[[投げる]]か、
[[走っているスクリプトを中断]]するか、[[利用者]]に確認するか、[[スクリプト]]の実行に[RUBYB[[[絞り弁]]]@en[throttele]]を適用するかして[['''構いません''']]。
[SRC[>>49]]

[13] [[ワーカー]]は、そもそも時間がかかったり高い負荷が予想されたりする処理のためのものなので、
より緩い制約とするべきかもしれません。

[15] [[利用者エージェント]]は、[[ワーカー]]が制限に達したら、
[[ワーカーを殺す]]処理を実行して構いません [SRC[>>14]]。

;; [63] [[ハードウェア等の制約に関する条項]]も参照。

* スクリプト中断ダイアログ

[9] 多くの [[Webブラウザー]]は、資源制限に達した (あるいは達しそうな) ときに、
[[利用者]]にそのまま処理を継続するか、
[[走っているスクリプトの中断]]をするかの判断を求める
([[モーダル]]でない) [[ダイアログ]]を表示します。

[10] この[[ダイアログ]]は、[[利用者]]が指示を出すか、状況が解消したら、閉じられます。

[11] 処理に時間がかかったり、 [[CPU]] 資源を多く消費したりすることが予測される[[スクリプト]]の[[著者]]は、
[CODE[[[setTimeout]]]] などを使って処理を分割するのが普通です。
([[タスク]]ごとに実行される[[スクリプト]]の実行時間から[[ダイアログ]]を出すか判断しているので、
複数の[[タスク]]に分割できれば回避できます。)

[12] [[ダイアログ]]が出るほど長い時間を費やすような[[スクリプト]]は、
[[Web互換]]でないというほどではありませんが、 ([[ダイアログ]]で[[利用者]]を煩わせるという意味で、
あるいはそもそも負荷により[[利用者]]の操作を妨害するという意味で)
[[利用者]]に良い経験を提供できないものといえます。

[16] [[利用者エージェント]]は、[[利用者]]が[[ワーカーを殺す]]よう指示する手段を提供できます
[SRC[>>14]]。

* ワーカーを殺す

[17] [[ワーカー]]については、[[ワーカーを殺す]]手順が規定されています。

;; [[ワーカーを殺す]]参照。

* 走っているスクリプトの実行中断

[5] [[JavaScript]] の [CODE[[[ScriptEvaluation]]]] 
([[古典スクリプトの実行]]から呼び出されます。) や
[CODE[[[ModuleEvaluation]]]]
([[モジュールスクリプトの実行]]から呼び出されます。)
は、[DFN[[RUBYB[[[走っているスクリプトの実行中断]]]@en[abort a running script]]]]
[SRC[>>49]] により、結果を返さずに途中で中断されることがあります。

[7] 中断された場合、[[JavaScript実行文脈スタック]]を空にします。
[CODE[[[finally]]]] があっても実行しません。 [SRC[>>49]]

[6] これは [[HTML Standard]] では規定されていますが、
[[JavaScript]] の仕様書では明文化されていません [SRC[>>49]]。

[8] [[Gecko]] ではこれは [CODE[[[catch]]]] できない
([CODE[[[finally]]]] も実行されない) 特別な[[例外]]として実装されているようです。

* 歴史

[3] [[ブラクラ]]のような悪意ある[[スクリプト]]の濫用や、
悪意がなくても [[Webブラウザー]]や[[OS]]の動作を不安定にする
[[JavaScript]] [[アプリケーション]]から[[利用者]]を守るため、
00年代半ば頃から徐々に[[スクリプト]]の実行中断機能が [[Webブラウザー]]に実装されるようになってきました。

** HTML5

[58] [[スクリプト]]を実行途中で実行時間の長さなどを根拠に中断しても良いことは [[HTML5]]
で明文化されました。

** 2016年改訂

[2] 2016年2月には、更に明確化が行われました。

[1] [CITE@en[Fix #715: clarify how aborting a running script works · whatwg/html@6a48bfb]] ([TIME[2016-02-24 14:40:25 +09:00]] 版) <https://github.com/whatwg/html/commit/6a48bfbf1066034eab4786d62ba4017593c48430>