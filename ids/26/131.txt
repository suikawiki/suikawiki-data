[121] [CODE(HTMLe)@en[script]] [[要素]]や[[ワーカー]]の処理では、
[[外部スクリプト]]の [[fetch]] を行うことがあります。

[122] [[スクリプト]]の種類によって処理はかなり違っています。

* 仕様書

[REFS[
- [164] [CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2016-08-08 13:14:17 +09:00]]) <https://html.spec.whatwg.org/#module-script>
- [4] '''[CITE@en-GB-x-hixie[HTML Standard]] ([TIME[2016-02-16 01:30:20 +09:00]] 版) <https://html.spec.whatwg.org/#fetching-scripts>'''
- [119] [CITE@en[Service Workers Nightly]] ([TIME[2016-03-02 17:37:28 +09:00]] 版) <https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#update-algorithm>
]REFS]

* 古典スクリプト

** 古典 [CODE(HTMLe)@en[script]] 要素

[12] [DFN[[RUBYB[古典スクリプトのfetch]@en[fetch a classic script]]]] [SRC[>>4]] は、
次の[[引数]]を受け取ります。

[FIG(list members middle)[
: [VAR[URL]] : [[URL]]。
: [VAR[CORS設定]] : [[CORS設定群属性]]の指示。
: [VAR[設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[文字符号化]] : [[文字符号化]]。
: [VAR[暗号学的nonce]] : [[文字列]]。
: [VAR[構文解析器状態]] : [F[構文解析器メタデータ]]の値。
: [VAR[一貫性メタデータ]] : [[文字列]]。
: [VAR[fetchの実行]] : [[fetchの実行]]。
: [VAR[続きの処理]] : 処理。
]FIG]

[124] [[古典スクリプト]]の場合、歴史的理由により、[[文字コード]]を指定できます
([CODE(HTML)@en[<script charset>]])。 (他の種類の[[スクリプト]]では [[UTF-8]]
に固定されています。)

[13] 次のようにします [SRC[>>4]]。

[FIG(steps)[
= [14] [VAR[要求]]を、 [VAR[URL]] と [VAR[CORS設定]]に関する[[潜在的CORS要求の作成]]の結果に設定します。
[VAR[終点]]は、 [CODE[script]] とします。
= [15] [VAR[要求]]に次の通り設定します。
[FIG(list members middle)[
: [F[クライアント]] : [VAR[設定群オブジェクト]]
: [F[型]] : [CODE[script]]
: [F[暗号学的nonceメタデータ]] : [VAR[暗号学的nonce]]
: [F[構文解析器メタデータ]] : [VAR[構文解析器状態]]
: [VAR[一貫性メタデータ]] : [VAR[一貫性メタデータ]]
]FIG]
= [17] [VAR[要求]]について[VAR[fetchの実行]]をします。
[FIG(list members middle)[
: [VAR[最上位]] : [[真]]
: [VAR[続きの処理]] : >>18
]FIG]
]FIG]

[18] [[fetchの実行]]の結果を受けて、[VAR[fetchの応答]]を次のようにします [SRC[>>4]]。
[FIG(steps)[
= [102] [VAR[応答]]を、[VAR[fetchの応答]]の[F[非安全応答]]に設定します。
= [19] [VAR[応答]]の[F[[[型]]]]が [CODE[[[error]]]] か、
[VAR[応答]]の[F[[[状態]]]]が [[OK状態]]''以外''なら、
== [21] [VAR[スクリプト]]を、 null に設定します。
= [22] それ以外の場合、
== [23] 
[FIG(list)[
- [24] [VAR[応答]]に[F[[[内容型メタデータ]]]]があり、
- [25] [VAR[応答]]の[F[[[内容型メタデータ]]]]に[F[[[文字符号化]]]]が指定されており、
- [26] [[利用者エージェント]]が[VAR[応答]]の[F[[[内容型メタデータ]]]]の[F[[[文字符号化]]]]に対応している
]FIG]
... なら、
=== [27] [VAR[文字符号化]]を、[VAR[応答]]の[F[[[内容型メタデータ]]]]の[F[[[文字符号化]]]]に設定します。
== [28] [VAR[ソーステキスト]]を、[VAR[[[フォールバック符号化]]]]を[VAR[文字符号化]]として[VAR[応答]]の[F[[[本体]]]]を[[復号]]した結果に設定します。
== [31] [VAR[エラーミュートフラグ]]を、[VAR[応答]]が[[CORS交差起源]]かどうかに設定します。
== [29] [VAR[スクリプト]]を、[VAR[ソーステキスト]]と[VAR[設定群オブジェクト]]、
[VAR[エラーミュートフラグ]]について[[古典スクリプトを作成]]した結果に設定します。
= [20] [VAR[スクリプト]]について[VAR[続きの処理]]を実行します。
]FIG]

;; [34] [[復号]]は[VAR[[[フォールバック符号化]]]]よりも [[BOM]] を優先します。

[94] この[[手続き]]は、旧来の [CODE(HTMLe)@en[[[script]]]] [[要素]]の処理から呼び出されます。

** 古典ワーカースクリプト

[6] [DFN[[RUBYB[古典ワーカースクリプトのfetch]@en[fetch a classic worker script]]]]
[SRC[>>4]] は、次の[[引数]]を受け取ります。

[FIG(list members middle)[
: [VAR[URL]] : [[URL]]。
: [VAR[fetchクライアント設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[スクリプト設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[終点]] : [[要求終点]]。[[ワーカー]]の種別を表します。
: [VAR[fetchの実行]] : [[fetchの実行]]。
: [VAR[続きの処理]] : 処理。
]FIG]

[7] 次のようにします。

[FIG(steps)[
= [54] [VAR[要求]]を、新しい[[要求]]に設定します。
[FIG(list members middle)[
[FIGCAPTION[
[[要求]]
]FIGCAPTION]
:[F[[[URL]]]]: [VAR[URL]]
:[F[[[クライアント]]]]: [VAR[fetchクライアント設定群オブジェクト]]
:[F[[[型]]]]: [CODE[[[script]]]]
:[F[[[終点]]]]: [VAR[終点]]
:[F[[[同期フラグ]]]]: 設定する
:[F[[[モード]]]]: [CODE[[[same-origin]]]]
:[F[[[credentialsモード]]]]: [CODE[[[same-origin]]]]
:[F[[[URL credentials利用フラグ]]]]: 設定する
: [F[構文解析器メタデータ]] : [CODE[not-parser-inserted]]
]FIG]
= [107] [VAR[要求]]について[VAR[fetchの実行]]をします。
[FIG(list members middle)[
: [VAR[最上位]] : [[真]]
: [VAR[続きの処理]] : >>56
]FIG]
]FIG]

[56] [[fetch]] の結果を受けて、[VAR[fetchの応答]]を次のように処理します。
[FIG(steps)[
= [103] [VAR[応答]]を、[VAR[fetchの応答]]の[F[非安全応答]]に設定します。
= [5] [VAR[応答]]の[F[[[型]]]]が [CODE[[[error]]]] であるか、
[VAR[応答]]の[F[[[状態]]]]が[[OK状態]]''以外''なら、
== [8] [VAR[スクリプト]]を、 null に設定します。
= [9] それ以外なら、
== [63] [VAR[スクリプト]]を、 [VAR[応答]]の[F[[[本体]]]]を 
[[UTF-8復号]]した結果と[VAR[スクリプト設定群オブジェクト]]について[[古典スクリプトを作成]]した結果に設定します。
= [10] [VAR[スクリプト]]について[VAR[続きの処理]]を実行します。
]FIG]

;; [35] 通常の[[スクリプト]]の場合 (>>18) と違って、[[文字符号化]]は [[UTF-8]]
に固定されています。

[95] この[[手続き]]は、[[ワーカーを走らせる]]処理
([[専用ワーカー]]、[[共有ワーカー]]) と[[更新][更新ジョブ]]
([[サービスワーカー]]) から呼び出されます。

** 古典ワーカー輸入スクリプト

[115] [DFN[[RUBYB[古典ワーカーで輸入されたスクリプトをfetch]@en[fetch a classic worker-imported script]]]]
[SRC[>>4]] は、次の引数を受け取ります。
[FIG(list members middle)[
: [VAR[URL]] : [[URK記録]]
: [VAR[設定群オブジェクト]] : [[環境設定群オブジェクト]]
]FIG]

[118] 次のようにします [SRC[>>4]]。
[FIG(steps)[
= [123] [VAR[要求]]を、[[要求]]に設定します。
[FIG(list members middle)[
[FIGCAPTION[
[[要求]]
]FIGCAPTION]
:[F[[[URL]]]]: [VAR[URL]]
:[F[[[クライアント]]]]: [VAR[設定群オブジェクト]]
:[F[[[型]]]]: [CODE[[[script]]]]
:[F[[[終点]]]]: [CODE[[[script]]]]
: [F[構文解析器メタデータ]] : [CODE[not parser-inserted]]
:[F[[[同期フラグ]]]]: 設定する
:[F[[[credentials mode]]]]: [CODE[[[include]]]]
:[F[[[URL credentials利用フラグ]]]]: 設定する
]FIG]
= [130] [VAR[要求]]について[VAR[fetchの実行]]をします。
[VAR[最上位]]フラグを設定します。[VAR[続きの処理]]は、 >>135 とします。
= [147] >>135 の処理の完了を待ちます。完了したら、その結果に従い、
値を返すか[[例外]]を[[投げ]]ます。
]FIG]

[135] [[fetchの実行]]の結果を踏まえて、[VAR[fetchの応答]]について次のようにします。
[FIG(steps)[
= [139] [VAR[応答]]を、[VAR[fetchの応答]]の[F[非安全応答]]に設定します。
= [144] [VAR[応答]]の[F[型][応答の型]]が [CODE[error][ネットワークエラー]]か、
[VAR[応答]]の[F[状態][状態符号]]が[[OK状態]]以外なら、
== [143] [CODE(DOMe)@en[[[NetworkError]]]] [[例外]]を[[投げ]]、ここで停止します。
= [145] [VAR[スクリプト]]を、[[古典スクリプトを作成]]した結果に設定します。
[FIG(list members)[
: [VAR[ソーステキスト]] : [VAR[応答]]の[F[本体][応答本体]]を[[UTF-8復号]]した結果。
: [VAR[設定群オブジェクト]] : [VAR[設定群オブジェクト]]
: [VAR[エラーミュート]]フラグ: [VAR[応答]]が [F[[[CORS-cross-origin]]]] なら[[真]]
]FIG]
= [146] [VAR[スクリプト]]を返します。
]FIG]

;; [114] [CODE(DOMm)@en[importScripts]] から呼び出されます。
この場合のみ、他の [[fetch]] とは異なり、[[同期的]]に [[fetch]] を待ちます。

* モジュールスクリプト

[151] [[モジュールスクリプト]]の場合、直接指定された[[モジュールスクリプト]]に加えて、
[CODE(JS)@en[import]] で直接または間接に参照されている[[モジュールスクリプト]]も
[[fetch]] します。ただし、重複読み込みは実行環境ごとに記録されていて、
(今回の[[スクリプトのfetch]]に限らず) [[fetch]] 済みなら、飛ばされます。
他で既に [[fetch]] 中なら、それが完了するのを待ちます。
すべての [[fetch]] が完了したら、次の処理へと進めます。

[162] この状態管理を行うため、また [[Webブラウザー]]の処理と [[JavaScriptエンジン]]の処理が絡み合うため、
更には [CODE(DOMi)@en[ServiceWorker]] で特殊な処理を挟むため、
[[モジュールスクリプト]]の読み込み処理はかなり複雑になっています。

[165] [[モジュールスクリプト]]は、[DFN[[F[[RUBYB[[[実現値化状態]]]@en[instantiation state]]]]]]を持ちます。
その値は、 [DFN[[CODE[uninstantiated]]][実現値化状態]], [DFN[[CODE[errored]]][実現値化状態]],
[DFN[[CODE[instantiated]]][実現値化状態]] のいずれかです。この状態は、[[実現値化]]に失敗した[[モジュールスクリプト]]の再実行を回避するために使われています。
[SRC[>>164]]

[166] [[モジュールスクリプト]]は、[DFN[[F[[RUBYB[[[実現値化エラー]]]@en[instantiation error]]]]]]を持ちます。
[F[実現値化状態]]が [CODE[errored][実現値化状態]] の時に、 [[JavaScript値]]が設定されます。
[SRC[>>164]]

** モジュール [CODE(HTMLe)@en[script]] 要素

[36] [DFN[[RUBYB[モジュールスクリプトグラフのfetch]@en[fetch a module script graph]]]] [SRC[>>4]]
は、次の[[引数]]を受け取ります。

[FIG(list members middle)[
: [VAR[URL]] : [[URL]]。
: [VAR[credentialsモード]] : [[credentialsモード]]の値。
: [VAR[終点]] : [[要求終点]]。
: [VAR[設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[暗号学的nonce]] : [[文字列]]。
: [VAR[構文解析器状態]] : [F[構文解析器メタデータ]]の値。
: [VAR[fetchの実行]] : [[fetchの実行]]。
: [VAR[続きの処理]] : 処理。
]FIG]

[104] 次のようにします [SRC[>>4]]。

[FIG(steps)[
= [30] [[内部モジュールスクリプトグラフfetch手続き]]を実行します。
[FIG(list members middle)[
: [VAR[URL]] : [VAR[URL]]
: [VAR[終点]] : [VAR[終点]]
: [VAR[暗号学的nonce]] : [VAR[暗号学的nonce]]
: [VAR[構文解析器状態]] : [VAR[構文解析器状態]]
: [VAR[credentialsモード]] : [VAR[credentialsモード]]
: [VAR[fetchクライアント設定群オブジェクト]] : [VAR[設定群オブジェクト]]
: [VAR[モジュール写像クライアント設定群オブジェクト]] : [VAR[設定群オブジェクト]]
: [VAR[祖先リスト]] : 空の[[リスト]]
: [VAR[参照元]] : [CODE[client]]
: [VAR[最上位モジュールfetchフラグ]] : [[真]]
: [VAR[fetchの実行]] : [VAR[fetchの実行]]
: [VAR[続きの処理]] : [VAR[続きの処理]]
]FIG]
]FIG]

;; [96] [[prepare a script]] ([CODE(HTMLe)@en[[[script]]]] [[要素]]) から呼び出されます。

** モジュールワーカースクリプト

[33] [DFN[[RUBYB[モジュールワーカースクリプトグラフのfetch]@en[fetch a module worker script graph]]]] [SRC[>>4]]
は、次の[[引数]]を受け取ります。

[FIG(list members middle)[
: [VAR[URL]] : [[URL]]。
: [VAR[credentialsモード]] : [[credentialsモード]]の値。
: [VAR[終点]] : [[要求終点]]。
: [VAR[fetchクライアント設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[モジュール写像設定群オブジェクト]] : [[環境設定群オブジェクト]]。
: [VAR[暗号学的nonce]] : [[文字列]]。
: [VAR[fetchの実行]] : [[fetchの実行]]。
: [VAR[続きの処理]] : 処理。
]FIG]

[105] 次のようにします [SRC[>>4]]。

[FIG(steps)[
= [108] [[内部モジュールスクリプトグラフfetch手続き]]を実行します。
[FIG(list members middle)[
: [VAR[URL]] : [VAR[URL]]
: [VAR[終点]] : [VAR[終点]]
: [VAR[暗号学的nonce]] : [[空文字列]]
: [VAR[構文解析器状態]] : [CODE[not parser-inserted]]
: [VAR[credentialsモード]] : [VAR[credentialsモード]]
: [VAR[fetchクライアント設定群オブジェクト]] : [VAR[fetchクライアント設定群オブジェクト]]
: [VAR[モジュール写像クライアント設定群オブジェクト]] : [VAR[モジュール写像設定群オブジェクト]]
: [VAR[祖先リスト]] : 空の[[リスト]]
: [VAR[参照元]] : [CODE[client]]
: [VAR[最上位モジュールfetchフラグ]] : [[真]]
: [VAR[fetchの実行]] : [VAR[fetchの実行]]
: [VAR[続きの処理]] : [VAR[続きの処理]]
]FIG]
]FIG]

;; [32] [[run a worker]] から呼び出されます。

** 輸入モジュールスクリプト

[148] [[モジュールスクリプト]]内の [CODE[import]] は、
[[モジュールスクリプトの子孫のfetch]]により処理されます。

** モジュールスクリプト共通処理

[37] [DFN[[RUBYB[内部モジュールスクリプトグラフfetch手続き]@en[internal module script graph fetching  procedure]]]]は、
[VAR[URL]]、[VAR[fetchクライアント設定群オブジェクト]]、
[VAR[終点]]、[VAR[暗号学的nonce]]、[VAR[構文解析器状態]]、
[VAR[credentialsモード]]、[VAR[モジュール写像設定群オブジェクト]]、
[VAR[祖先リスト]]、[VAR[参照元]]、[VAR[最上位モジュールfetch]]フラグ、
[VAR[fetchの実行]]、[VAR[続きの処理]]について、次のようにします [SRC[>>4]]。

[FIG(steps)[
= [38] [VAR[URL]]、[VAR[credentialsモード]]、[VAR[暗号学的nonce]]、[VAR[構文解析器状態]]、[VAR[終点]]、
[VAR[fetchクライアント設定群オブジェクト]]、
[VAR[モジュール写像クライアント設定群オブジェクト]]、
[VAR[参照元]]、
[VAR[fetchの実行]]について[[単一モジュールスクリプトのfetch]]を実行します。
[VAR[続きの処理]]は、 >>39 とします。
]FIG]

[39] その続きの処理は、[VAR[結果]]について次のようにします [SRC[>>4]]。
[FIG(steps)[
= [40] [VAR[結果]]が null なら、
== [41] null について[VAR[続きの処理]]を実行します。
= [42] それ以外なら、
== [43] [[モジュールスクリプトの子孫をfetch]]します。
[FIG(list members)[
: [VAR[祖先リスト]] : [VAR[祖先リスト]]の末尾に [VAR[URL]] を追加した[[リスト]]
: [VAR[終点]] : [VAR[終点]]
: [VAR[fetchの実行]] : [VAR[fetchの実行]]
: [VAR[最上位モジュールfetch]]フラグ : [[真]]
: [VAR[続きの処理]] : >>160 ([VAR[結果]]と[VAR[続きの処理]]を使います。)
]FIG]
]FIG]

[160] その続きの処理は、[VAR[子孫の結果]]について次のようにします [SRC[>>4]]。
[FIG(steps)[
= [152] [VAR[実現値化状態]]を、[VAR[結果]]の[F[モジュール記録]]の [CODE[ModuleDeclarationInstantiation]]
を実行した結果に設定します。
= [153] [VAR[結果]]の[[未実現値化包括的子孫モジュールスクリプト群]]の各[[モジュールスクリプト]][VAR[スクリプト]]について、
== [154] [VAR[実現値化状態]]が [[abrupt completion]] なら、
=== [155] [VAR[スクリプト]]の[F[実現値化状態]]を、 [CODE[errored][実現値化状態]]
に設定します。
=== [156] [VAR[スクリプト]]の[F[実現値化エラー]]を、
[VAR[実現値化状態]]の[F(ss)[値]]に設定します。
=== [157] [VAR[スクリプト]]の[F[モジュール記録]]を、 [CODE[null]] に設定します。
== [158] それ以外なら、
=== [159] [VAR[スクリプト]]の[F[実現値化状態]]を、 [CODE[instantiated][実現値化状態]]
に設定します。
= [161] [VAR[子孫の結果]]について[VAR[続きの処理]]を実行します。
]FIG]

[167] [VAR[スクリプト]]の[DFN[[RUBYB[[[未実現値化包括的子孫モジュールスクリプト群]]]@en[uninstantiated inclusive descendant module scripts]]]]は、
次のようにして得ます [SRC[>>4]]。
[FIG(steps)[
= [168] [VAR[モジュール写像]]を、[VAR[スクリプト]]の[F[設定群オブジェクト]]の[F[モジュール写像]]に設定します。
= [170] [VAR[包括的子孫]]を、[[空集合]]に設定します。
= [169] [VAR[スタック]]を、[VAR[スクリプト]]を含んだ[[リスト]]に設定します。
= [171] [VAR[スタック]]が[[空]]でない間、繰り返し、
== [172] [VAR[現在]]を、[VAR[スタック]]の最後の項目に設定し、[VAR[スタック]]からこれを削除します。
== [173] [VAR[現在]]が[VAR[包括的子孫]]にも[VAR[スタック]]にも含まれないなら、
=== [174] [VAR[現在]]を、[VAR[包括的子孫]]に追加します。
=== [175] [VAR[子供指定子群]]を、[VAR[現在]]の[F[モジュール記録]]の[F(ss)[RequestedModules]]に設定します。
=== [176] [VAR[子供URL群]]を、[VAR[子供指定子群]]の各項目に[[モジュール指定子の解決]]を適用したものの[[集合]]から[[失敗]]を除去したものに設定します。
=== [177] [VAR[子供モジュール群]]を、[VAR[モジュール写像]]において[F[キー]]が[VAR[子供URL群]]に含まれる[F[値]]の[[集合]]に設定します。
=== [178] [VAR[子供モジュール群]]の項目のうち、[VAR[包括的子孫群]]に含まれないものを、
[VAR[スタック]]に追加します。
= [179] [VAR[包括的子孫]]の項目のうち、[F[実現値化状態]]が [CODE[uninstantiated][実現値化状態]]
のものの[[集合]]を返します。
]FIG]

[44] [DFN[[RUBYB[モジュールスクリプトの子孫のfetch]@en[fetch the descendants of a module script]]]]は、
[VAR[スクリプト]]と[VAR[終点]]と[VAR[祖先リスト]]と[VAR[fetchの実行]]と[VAR[続きの処理]]を受け取り、次のようにします [SRC[>>4]]。

[FIG(steps)[
= [46] [VAR[記録]]を、[VAR[スクリプト]]の[F[[[モジュール記録]]]]に設定します。
= [47] [CODE[[VAR[記録]].[F(ss)[RequestedModules]]]] が空なら、
== [48] [VAR[スクリプト]]に関して[VAR[続きの処理]]を実行し、ここで停止します。
= [49] [VAR[URL群]]を、空のリストに設定します。
= [50] [CODE[[VAR[記録]].[F(ss)[RequestedModules]]]] の各文字列[VAR[披要求]]について順に、
== [51] [VAR[URL]] を、[VAR[スクリプト]]と[VAR[被要求]]について[[モジュール指定子を解決]]した結果に設定します。
== [52] [VAR[URL]] が[[誤り]]なら、
=== [53] [VAR[スクリプト]]についての新しい [CODE(JS)@en[TypeError]] を[[例外を報告]]します。
=== [55] [VAR[スクリプト]]について[VAR[続きの処理]]を実行し、ここで停止します。
== [98] [VAR[URL]] が[VAR[祖先リスト]]に含まれなければ、
=== [57] [VAR[URL]] を [VAR[URL群]]に追加します。
= [58] [VAR[URL群]]の各値 [VAR[URL]] について順に、
== [62] [VAR[結果群]]を、[[空]]の[[写像]]に設定します。
== [59] [[内部モジュールスクリプトグラフfetch手続き]]を実行します。
[FIG(list members)[
: [VAR[URL]] : [VAR[URL]]
: [VAR[credentialsモード]] : [VAR[スクリプト]]の[F[credentialsモード]]
: [VAR[終点]] : [VAR[終点]]
: [VAR[設定群オブジェクト]] : [VAR[スクリプト]]の[F[設定群オブジェクト]]
: [VAR[暗号学的nonce]] : [VAR[スクリプト]]の[F[暗号学的nonce]]
: [VAR[構文解析器状態]] : [VAR[スクリプト]]の[F[構文解析器状態]]
: [VAR[祖先リスト]] : [VAR[祖先リスト]]
: [VAR[参照元]] : [VAR[スクリプト]]の[F[基底URL]]
: [VAR[最上位モジュールfetch]]フラグ : [[偽]]
: [VAR[fetchの実行]] : [VAR[fetchの実行]]
: [VAR[続きの処理]] : >>60 ([VAR[URL]]、[VAR[URL群]]、[VAR[結果群]]、[VAR[続きの処理]]を使います。)
]FIG]
]FIG]

;; [45] [[モジュールスクリプトグラフのfetch]]の他、 [CODE(HTMLe)@en[[[script]]]]
[[要素]]の処理から呼び出されることもあります。

[60] [[モジュールスクリプトグラフのfetch]]の処理の続きは、
[VAR[結果]]について次のようにします [SRC[>>4]]。
[FIG(steps)[
= [67] [VAR[結果群]]に[F[キー]]が [VAR[URL]] で[F[値]]が[VAR[結果]]の項目を追加します。
= [61] [VAR[結果群]]の項目数と [VAR[URL群]]の項目数が等しければ、
== [66] [VAR[結果群]]に[F[値]]が [CODE[null]] の項目があれば、
=== [64] [CODE[null]] について[VAR[続きの処理]]を実行します。
== [65] それ以外なら、
=== [68] [VAR[スクリプト]]について[VAR[続きの処理]]を実行します。
]FIG]

[69] [DFN[[RUBYB[単一モジュールスクリプトのfetch]@en[fetch a single module script]]]]は、
[VAR[URL]]、[VAR[credentialsモード]]、[VAR[暗号学的nonce]]、[VAR[構文解析器状態]]、
[VAR[終点]]、[VAR[fetchクライアント設定群オブジェクト]]、
[VAR[モジュール写像設定群オブジェクト]]、
[VAR[参照元]]、[VAR[最上位モジュールfetch]]、
[VAR[fetchの実行]]、[VAR[続きの処理]]について次のようにします [SRC[>>4]]。

[FIG(steps)[
= [70] [VAR[モジュール写像]]を、[VAR[モジュール写像設定群オブジェクト]]の[F[モジュール写像]]に設定します。
= [71] [VAR[モジュール写像]]に[F[キー]]が [VAR[URL]]、[F[値]]が [CODE[fetching]]
のエントリーが含まれていれば、
== [72] [[並列に]]値が変化するのを待ちます。変化したら >>73 を実行します。
= [74] それ以外なら、
== [75] >>73 を実行します。
]FIG]

[73] [CODE[[[fetching]]]] でなくなった時、次のようにします [SRC[>>4]]。

[FIG(steps)[
= [187] [[タスクをキューに追加]]します。
[FIG(list members)[
: [VAR[処理]] :
[FIG(steps)[
= [76] [VAR[モジュール写像]]に[F[キー]]が [VAR[URL]] のエントリーが含まれていれば、
== [77] 当該エントリーの[F[値]]について[VAR[続きの処理]]を実行し、ここで停止します。
= [78] [VAR[モジュール写像]]に[F[キー]]が [VAR[URL]] で値が [CODE[[[fetching]]]]
のエントリーを追加します。
= [79] [VAR[要求]]を、新しい[[要求]]に設定します。
[FIG(list members middle)[
[FIGCAPTION[
[163] [[要求]]
]FIGCAPTION]
: [F[[[URL]]]] : [VAR[URL]]
: [F[[[終点]]]] : [VAR[終点]]
: [F[[[型]]]] : [CODE[[[script]]]]
: [F[[[モード]]]] : [CODE[[[cors]]]]
: [F[[[credentialsモード]]]] : [VAR[credentialsモード]]
: [F[構文解析器メタデータ]] : [VAR[構文解析器状態]]
: [F[暗号学的nonceメタデータ]] : [VAR[暗号学的nonce]]
: [F[クライアント]] : [VAR[fetchクライアント設定群オブジェクト]]
: [F[参照元]] : [VAR[参照元]]
]FIG]
= [113] [VAR[要求]]について[VAR[fetchの実行]]をします。
[VAR[最上位]]フラグは、[VAR[最上位モジュールfetch]]フラグとします。
[VAR[続きの処理]]は >>80 とします。
]FIG]
: [VAR[タスク源]] : [[ネットワーク処理タスク源]]
]FIG]
]FIG]

[80] [[fetch]] の結果の処理は、[VAR[[[応答]]]]について次のようにします [SRC[>>4]]。

[FIG(steps)[
= [81] 
[FIG(list)[
- [85] [VAR[応答]]の[F[[[型]]]]が [CODE[[[error]]]]
- [86] [VAR[応答]]の[F[[[状態]]]]が [[OK状態]]で''ない''
- [87] [VAR[応答]]の[F[[[ヘッダーリスト]]]]から[[MIME型を取り出す]]と、
([[引数]]を無視すると) [[JavaScript MIME型]]で''ない''
]FIG]
... のいずれかの条件を満たしたら、
== [82] [VAR[モジュール写像]]の[F[キー]]が [VAR[URL]] 
のエントリーの[F[値]]を null に設定します。
==- [92] これにより他の fetch の処理 (>>72) が呼び出されることがあります。
== [84] null について[VAR[続きの処理]]を実行します。
== [83] ここで停止します。
= [88] [VAR[ソーステキスト]]を、[VAR[応答]]の[F[[[本体]]]]を [[UTF-8復号]]した結果に設定します。
= [89] [VAR[スクリプト]]を、[VAR[ソーステキスト]]、
[VAR[モジュール写像設定群オブジェクト]]、[VAR[応答]]の[F[[[URL]]]]、
[VAR[credentialsモード]]、
[VAR[暗号学的nonce]]について[[モジュールスクリプトの作成]]を実行した結果に設定します。
@@ [VAR[構文解析器状態]]
= [90] [VAR[モジュール写像]]の[F[キー]]が [VAR[URL]] のエントリーの[F[値]]を、
[VAR[スクリプト]]に設定します。
=- [93] これにより他の fetch の処理 (>>72) が呼び出されることがあります。
= [91] [VAR[スクリプト]]について[VAR[続きの処理]]を実行します。
]FIG]

* fetchの実行

[117] [[スクリプトのfetch]] の各手順の呼び出し元は、
[DFN[[RUBYB[fetchの実行]@en[perform the fetch]]]]の手続きを定義できます [SRC[>>4]]。
これは[VAR[要求]]、[VAR[最上位]]フラグ、[VAR[続きの処理]]についての処理です。

[111] [CODE(HTMLe)@en[script]] [[要素]]と [CODE(DOMm)@en[importScripts]]
の場合、次のようにします [SRC[>>4]]。
[FIG(steps)[
= [112] [VAR[要求]]について [[fetch]] します。[VAR[[[process response]]]] は、
[VAR[続きの処理]]とします。
]FIG]

[109] [CODE(DOMi)@en[Worker]] と [CODE(DOMi)@en[SharedWorker]] の場合、
呼び出し元である[[ワーカーを走らせる手順]]の[VAR[内側設定群]]と[VAR[ワーカー大域適用範囲]]を使って、
次のようにします [SRC[>>4]]。

[FIG(steps)[
= [181] [VAR[要求]]の[F[予約クライアント]]を、[VAR[内側設定群]]に設定します。
= [140] [VAR[要求]]について [[fetch]] を実行します。
[VAR[process response]] は、 >>110 とします。
]FIG]

[110] [[fetch]] の結果を受けて、[VAR[応答]]を次のようにします [SRC[>>4]]。

[FIG(steps)[
= [131] [VAR[ワーカー大域適用範囲]]の[F[URL][ワーカーのURL]]を、
[VAR[応答]]の[F[URL][応答のURL]]に設定します。
= [132] [VAR[ワーカー大域適用範囲]]の[F[HTTPS状態]]を、
[VAR[応答]]の[F[HTTPS状態]]に設定します。
= [128] [VAR[ワーカー大域適用範囲]]の[F[参照元ポリシー]]を、
[VAR[応答]]について [CODE(HTTP)@en[Referrer-Policy:]] [[ヘッダー]]を[[構文解析]]して得た[[参照元ポリシー]]に設定します。
= [133] [VAR[ワーカー大域適用範囲]]と[VAR[応答]]について、
[[大域オブジェクトのCSPリストの初期化]]を実行します。
= [134] [VAR[応答]]について[VAR[続きの処理]]を実行します。
]FIG]

[120] [[Service Worker]] では別途処理が規定されています [SRC[>>119]]。

[HISTORY[
[106] かつては他に[DFN[[RUBYB[要求の準備]@en[set up the request]]]]と[DFN[[RUBYB[応答の処理]@en[process the response]]]]も定義されていましたが、
[[fetchの実行]]に統合されました。
]HISTORY]

* 歴史

** スクリプト

[11] [CODE(HTMLe)@en[[[script]]]] [[要素]]に関する処理は、 [[HTML5]]
が [CODE(HTMLe)@en[[[script]]]] [[要素]]の処理を明文化した際に初めて規定されました。

;; [CODE(HTMLe)@en[[[script]]]] 参照。

** ワーカー

[1] [[ワーカー]]に関する処理は、[[ワーカー]]導入時に [[run a worker]] 処理の一部として規定されました。

;; [[run a worker]] を参照。

** モジュール

[3] [[モジュール]]の導入により、[[古典スクリプト]]を参照する [CODE(HTMLe)@en[[[script]]]]
[[要素]]の [[fetch]] 部分の処理はや[[古典スクリプト]]を使った[[ワーカー]]の [[fetch]]
部分の処理はそれぞれ単独の[[手続き]]に ([[仕様書]]上) 分離されました。

[REFS[
- [2] [CITE@en[Add module workers · whatwg/html@e3a5bb7]] ([TIME[2016-02-16 00:03:29 +09:00]] 版) <https://github.com/whatwg/html/commit/e3a5bb757f64374c37d8c4528c01298463ef0b2a>
]REFS]

[97] [CITE@en[Fix fetching module scripts with circular imports · whatwg/html@3c047b5]]
([TIME[2016-02-21 12:43:19 +09:00]] 版)
<https://github.com/whatwg/html/commit/3c047b5a35da7af9cffef2a654a944e33be256cc>

[99] [CITE@en[Make script fetching more correct with regard to request destinations · whatwg/html@6dc9c9e]]
([TIME[2016-02-29 17:59:23 +09:00]] 版)
<https://github.com/whatwg/html/commit/6dc9c9e1efcc3122294fb015e4a4eea66456a611>

[101] [CITE@en[Add set up the request/validate the response hooks to script fetching · whatwg/html@33ef23a]]
([TIME[2016-03-03 21:21:10 +09:00]] 版)
<https://github.com/whatwg/html/commit/33ef23a6a046db6469a1eb1a6a76f0fdedba8d55>

[125] [CITE@en[27852 – Consider rejecting script responses whose MIME type isn't sufficiently scripty.]]
([TIME[2016-03-25 11:24:36 +09:00]] 版)
<https://www.w3.org/Bugs/Public/show_bug.cgi?id=27852>

[126] [CITE@en[Block `image/*` resources loaded as script · whatwg/fetch@b561a73]]
([TIME[2016-03-25 13:44:03 +09:00]] 版)
<https://github.com/whatwg/fetch/commit/b561a73f23b7139d5f4bb0de322dc37e74af0091>

[127] [CITE@en[Pass cryptographic nonce metadata to Fetch · whatwg/html@5479e07]]
([TIME[2016-04-07 16:09:50 +09:00]] 版)
<https://github.com/whatwg/html/commit/5479e07a6f6e01062b85b5fe6799752b0370336c>

[129] [CITE@en[Get a reference to the response correctly in worker initialization · whatwg/html@536a962]]
([TIME[2016-04-14 13:09:06 +09:00]] 版)
<https://github.com/whatwg/html/commit/536a96229ced274b80f78ad791c34ecfe11b289b>

[136] [CITE@en[Pass parser metadata to Fetch · whatwg/html@e6500b9]]
([TIME[2016-04-16 22:47:15 +09:00]] 版)
<https://github.com/whatwg/html/commit/e6500b90244376c023e7b78642dbc7b86829233f>

[16] [CITE@en[Refactor cryptographic nonce ductwork by mikewest · Pull Request #1032 · whatwg/html]]
([TIME[2016-04-16 23:21:49 +09:00]] 版)
<https://github.com/whatwg/html/pull/1032>

[100] [CITE@en[Use outside settings object to fetch workers]]
( ([[domenic]]著, [TIME[2016-05-11 19:57:24 +09:00]]))
<https://github.com/whatwg/html/commit/4e2b0066cb88fdc7ac65cc6e6a7eb40ac39418bd>

[116] [CITE@en[Make import statements set the importing script as the referrer]]
( ([[@import]]著, [TIME[2016-05-19 16:36:44 +09:00]]))
<https://github.com/whatwg/html/commit/a6c11714b5e64479e945b36f76817c4ed96f3218>

[137] [CITE@en[Integrate with the Referrer Policy spec, part 2 of n]]
( ([[domenic]]著, [TIME[2016-05-18 01:52:35 +09:00]]))
<https://github.com/whatwg/html/commit/176e74243c649b709b9959b7d08b327290c2f403>

[138] [CITE@en[Add a custom "perform the fetch" hook for modules]]
([[domenic]]著, [TIME[2016-07-02 04:07:36 +09:00]])
<https://github.com/whatwg/html/commit/8c43afcbedf0506ac9d62d85a72f1a23fd9f520c>

[141] [CITE@en[Align Fetch's destination concept with changes in Fetch]]
([[sideshowbarker]]著, [TIME[2016-07-05 02:46:14 +09:00]])
<https://github.com/whatwg/html/commit/5e8f96a85d182d36c177db0d6fdde58b4ded86d4>

[142] [CITE@en[Improve all the script-fetching algorithms]]
([[domenic]]著, [TIME[2016-07-08 01:25:53 +09:00]])
<https://github.com/whatwg/html/commit/b4f40e72fcca8a13eefa8a2dd06258378e76fcb7>

[149] [CITE@en[1048535 – Cross-origin info leak: '''[''''''['''get''']'''''']''' calls on global expose text (or CSV) sniffed as JS]]
([TIME[2016-07-26 21:12:08 +09:00]])
<https://bugzilla.mozilla.org/show_bug.cgi?id=1048535>

[150] [CITE@en[Handle error cases during module script tree fetching/running better]]
([[domenic]]著, [TIME[2016-08-09 12:06:32 +09:00]])
<https://github.com/whatwg/html/commit/e1af86747f591e33fd0f3f21f301dc866868c9d4>

[180] [CITE@en[Block additional "script" MIME types]]
([[evilpie]]著, [TIME[2016-08-30 02:51:43 +09:00]])
<https://github.com/whatwg/fetch/commit/2e85ceffe027fe97d56184c8a4fe6f11b5780193>

[182] [CITE@en[Improve navigate for service worker hooks]]
([[jungkees]]著, [TIME[2016-10-24 20:32:35 +09:00]])
<https://github.com/whatwg/html/commit/2b93f9ec35b152e58d3e181bea8c45d789bac949>

[183] [CITE@en[Upstream SRI's 'integrity' attribute]]
([[mikewest]]著, [TIME[2016-11-03 22:33:16 +09:00]])
<https://github.com/whatwg/html/commit/4c5066c171610e0c8300a58baf4f94816044cedc>

[184] [CITE@en[Talk about module script graphs, not trees]]
([[domenic]]著, [TIME[2016-11-19 09:00:00 +09:00]])
<https://github.com/whatwg/html/commit/57775269ed9681cd07f7b4bb33b998b26f48e4eb>

[185] [CITE@en[Fix classic worker scripts to be created in the correct realm]]
([[domenic]]著, [TIME[2016-11-23 01:50:08 +09:00]])
<https://github.com/whatwg/html/commit/11b6a37f934b528d4e5799b1cd9485e1850e3cf2>

[186] [CITE@en[Properly queue a task when waiting for a module fetch]]
([[domenic]]著, [TIME[2016-12-22 07:06:44 +09:00]])
<https://github.com/whatwg/html/commit/6e055a81c573330a48c3e71121cffee5654aa119>