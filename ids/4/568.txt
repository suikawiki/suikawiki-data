[11] 「大きいもの順」と「小さいもの順」の違いを、[DFN[[RUBYB[エンディアン]@en[endian]]]]といいます。

* 文脈

[12] [[エンディアン]]は、次のようなものに存在します。

[FIG(list short)[
- [[地名]]
- [[人名]]
- [[ビット順]]
- [[バイト順]]
- [[位取り記数法]]
- [[ドメイン名]]
- [CODE(HTMLe)@en[title]] [[要素]]の[[内容]]
- [[日付]]
]FIG]

[13] 大きいもの順を[[[RUBY[大][ビッグ]]エンディアン][大エンディアン]]、
小さいもの順を[[[RUBY[小][リトル]]エンディアン][リトルエンディアン]]といいます。

;; 「[[ネットワークバイト順]]」のような専用の呼び名がある場合もあります。

* ビット順

[REFS[
[FIG(quote)[
[FIGCAPTION[
[1] [CITE@en[RFC 1951 - DEFLATE Compressed Data Format Specification version 1.3]]
([TIME[2016-07-03 09:57:20 +09:00]])
<https://tools.ietf.org/html/rfc1951#section-3>
]FIGCAPTION]

>       Bytes stored within a computer do not have a "bit order", since
>       they are always treated as a unit.  However, a byte considered as
>       an integer between 0 and 255 does have a most- and least-
>       significant bit, and since we write numbers with the most-
>       significant digit on the left, we also write bytes with the most-
>       significant bit on the left.  In the diagrams below, we number the
>       bits of a byte so that bit 0 is the least-significant bit, i.e.,
>       the bits are numbered:
>          +--------+
>          |76543210|
>          +--------+

]FIG]

- [15] [CITE@en[RFC 1950 - ZLIB Compressed Data Format Specification version 3.3]] ([TIME[2017-09-17 17:15:13 +09:00]]) <https://tools.ietf.org/html/rfc1950#section-2>
- [16] [CITE@en[RFC 1952 - GZIP file format specification version 4.3]] ([TIME[2017-09-17 16:34:04 +09:00]]) <https://tools.ietf.org/html/rfc1952#section-2>
]REFS]

* メモ

[10] 卵は丸い方ととがった方と、どっちが上だと思いますか。

- [1] あるいは、どちらで殻を割りますか。どちらを先に食べますか。
- [2] [[ガリバー旅行記]]で[[ガリバー]]が漂流した小人国では、太い (丸い) 方だという意見と細い (とがった) 方だという意見が対立しており、[[戦争]]まで勃発してしまいますた。
- [3] さて、大きい方と答えたあなたは[[大エンディアン]], 小さい方と答えたあなたは[[小エンディアン]]がお好きなようです。
- [4] ちなみに、ガリバー旅行記では ''endian'' は ''end-ian'' と書かれていたそうです。すなわち語源は ''end'' (端) ''-ian'' (な人) だったわけです。
- [5] ここから転じて、[[重み]]がある方が先なのが[[大エンディアン]], 重みの小さい方が先なのが[[小エンディアン]]と呼ばれるようになりました。
- [6] 特に[[計算機]]の世界では、複数[[バイト]]のデータを扱う時の方法をエンディアンと呼ぶことが多いです。
- [7] この他例えば、[[住所]]を''国名''から''[[番地]]''に向かって書くのを大エンディアン, ''番地''から''国名''に向かって書くのを小エンディアンと言ったりもするみたいです。
- [8] >>6 両エンディアン対応を ''[RUBY[bi-endian] [バイ・エンディアン]]'' と呼ぶそうです。例えば [[MIPS]] [[マイクロプロセッサ]]はバイト順について bi-endian です。
- [9] バイト順問題は[[プログラマ]]を悩ませてきましたが、 [[UCS]] や [[TRONコード]]で問題が[[文字コード]]層に波及するに至って悲劇的なことになってます。 [[BOM]] の登場でバイト順非依存の[[文字コード]]なども被害を受けています。

[14] [[エンディアン]]と呼ばれる対象をみると、
一連なりのものをそれより大きな単位に詰め込むときにどちら向きに並べるか、という問題と、
階層的な分類を使って識別するときに大分類と小分類のどちらから並べるか、という問題の2種類に大別できそうですね。