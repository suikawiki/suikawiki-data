-
-- han (ja,cn,tw) 乙; name
-- yomi (on) おつ, otsu
-- yomi (on) いつ, itsu
-- zh yǐ, ㄧˇ
-- ko 을, eul; name
-- vi ất; name
-
-- han (ja) 乙 "" ""; duplicate
-- yomi (kun) き の と, ki no to; name
-- ja 木 の 弟
-
-- desc (ja) 陽気のまだ伸びない、かがまっているところ 

-
-- han (ja,tw) 宣統, (cn) 宣统; name
-
-- man ᡤᡝᡥᡠᠩᡤᡝ ᠶᠣᠰᠣ, gehungge yoso, gehungge yoso; name
-- mon ᠬᠡᠪᠲᠦ ᠶᠣᠰᠣ, Хэвт Ёс; name

-
-- han (ja) 朱鳥; name
-- yomi (on) しゅ ちょう, shu chou
-
-- han (ja) 朱鳥; duplicate
-- yomi (kun) あかみ どり, akami dori
-- yomi (kun) あかみ とり, akami tori

-
-- han (ja) 令和; name
-- yomi (on) れい わ, rei wa
-- emoji REI WA
-- gouji U+32FF, ㋿
-
-- abbr (han 1) 令, expanded (han) 令和
-- yomi (on) れい, rei
-
-- abbr (latin 1) R, expanded (latin) reiwa
-
-- shuwa (ja) REIWA
-
-- desc (en) beautiful harmony

-
-- abbr (latin acronym) A.D., AD, expanded anno Domini




[1] 
- 大宝, 大寶, 大寳
- 太寶
- たい ほう, たい はう, tai hō, tai hou
- だい ほう, dai hō, dai hou

[2] 
- (abbr latn) 
-- T
- (abbr)
-- 大
- 
-- ㍽
-- 大正
-- たい しょう, たい しやう, たい しよう, たい しゃう, tai sho, tai shō

[3] 
- (short)
-- 垂仁
- 
-- 垂仁天皇
-- すいにんてんのう

[4] 
- 創業命知
- (short)
-- 命知
-- めい ち, mei chi

[5] 
- 中華民國, 中華民国
- 中華民国暦
- 中華民国紀年
- 国历, 国暦"
- (abbr)
-- 民
- (short)
-- 民国
- 民国紀元
- 民国纪年

[6] 
- 開国年号
- 開国紀元
- 
-- 開國
-- 개국
-- かい こく, kai koku

[7] 
-
-- 立教
-- りっ きょう, rik kyou
-- Rikkyo
- (abbr)
-- R
- Tenrikyo
-
-- Revelação Divina
-
-- R.D., RD

[8] 
-
-- 芦原太陽暦, 葦原太陽暦
-
-- 即位



*



- 日本 (統合漢字・互換漢字 > IVS)
- 日本IVS (IVS > 統合漢字)
- 日本新字体 (IVS新字体 > 統合漢字・互換漢字 > IVS)
- 日本旧字体 (IVS旧字体 > 統合漢字・互換漢字 > IVS)
- 台湾 (統合漢字・互換漢字)
- 大陸簡体字
- 大陸繁体字


* Strings

[15] 
For the purpose of this specification,
a [DFN[character]]
is anything that is considered as one of "characters",
including but not limited to:
letters,
digits,
symbols,
[[bytes][byte]],
[[code points][code point]],
[[grapheme clusters][grapheme cluster]],
glyphs,
and as such.

[19] 
A
[DFN[character escape]]
is a
[[string]] whose first [[character]] is a
[CODE[U+003A]] [CODE(charname)@en[COLON]] character ([CODE[:]]).
It represents a [[character]] identified
by applying the application-specific mapping rule to the [[string]].

[EG[
[23] 
An application might define that [[character escape]]
":nga"
represents a sequence of two 
[[code points][code point]]
[CODE[<[[U+304B]] [[U+309A]]>]]
[CODE(charname)@en[HIRAGANA LETTER KA WITH SEMI-VOICED SOUND MARK]]
and
[[character escape]]
":wikipedia"
represents the [[favicon]] of [CITE[Wikipedia]].

]EG]

-*-*-

[17] 
A [DFN[character sequence]] 
is a sequence of zero or more [[characters][character]].
[[Character sequence][character sequence]]
can be represented in two ways:
[[simple character sequence]] 
and
[[list character sequence]].

[18] 
A [DFN[simple character sequence]]
is a [[string]]
of 
zero or more
[[scalar values][scalar value]]
whose first [[character]], if any, is not a
[CODE[U+003A]] [CODE(charname)@en[COLON]] character ([CODE[:]])
or a
[CODE[U+002E]] [CODE(charname)@en[FULL STOP]] character ([CODE[.][FULL STOP]]).
It represents the sequence of the [[scalar values][scalar value]]
in the [[string]], in order.
It cannot be used to represent a [[character sequence]]
which contains a [[character]] that is not a [[scalar value]]
or starts with a 
[CODE[U+003A]] [CODE(charname)@en[COLON]] character ([CODE[:]]) 
or a
[CODE[U+002E]] [CODE(charname)@en[FULL STOP]] character ([CODE[.][FULL STOP]]).

[20] 
A [DFN[list character sequence]]
is a [[list]] of
zero or more of
[[simple character sequences][simple character sequence]]
and
[[character escapes][character escape]].
It represents the sequence of the [[characters][character]]
represented by the [[items]] of the [[list]], in order.

[EG[
[21] 
In the aforementioned application (>>23),
a [[list]]:

« "ふじわら", "の", "み", "ちな", ":nga" »

.. represents a [[character sequence]] of ten (10) characters:
"ふじわらのみちな" followed by [CODE[<[[U+304B]] [[U+309A]]>]].

]EG]

;;
[22] 
Item boundaries in a [[list character sequence]] has no semantics.

* Segmented texts

[29] 
A text might consist of one or more parts, separated by implicit or
explicit boundaries.  It can be described as [[segmented texts][segmented text]].

[24] 
A [DFN[segmented text]]
is a [[list]]
of zero or more of
[[character sequences][character sequence]]
and
[[segment separators][segment separator]].

[25] 
The [VAR[n]]th [[character sequence]] in a [[segmented text]] is referred to as
the [VAR[n]]th [DFN[segment]] of the [[segmented text]].
A [[segment]] represents an [[ordered set]] of [[strings][string]],
identified by applying the [[segment mapping rule]] to the [[character sequence]].

[28] 
A [DFN[segment separator]] is a [[string]] whose first character is a 
[CODE[U+002E]] [CODE(charname)@en[FULL STOP]] character ([CODE[.][FULL STOP]]).
It represents an [[ordered set]] of [[strings][string]],
identified by applying the [[segment separator mapping rule]] to the [[string]].
They describe orthographical or stylistic options.

[32] 
Any usage of [[segmented text]] is associated with two mapping rules:
[DFN[segment mapping rule]] (from [[segment]] to an [[ordered set]] of [[strings][string]]), and
[DFN[segment separator mapping rule]] (from [[segment separator]] to an [[ordered set]] of [[strings][string]]).
The [[strings][string]] obtained by these rules are referred to as
[DFN[text representations][text representation]] of its input.

[33] 
Unless otherwise specified, the [[segment mapping rule]]
returns an [[ordered set]] that only contains the input as is.

[34] 
The [[segment separator mapping rule]] for input [VAR[input]] is as follows:

[FIG(steps)[
= [35] 
If [[allowed segment separators]] [ [VAR[input]] ] [[exists]],
== [36] 
Return [[allowed segment separators]] [ [VAR[input]] ].
= [37] Otherwise, return failure.
]FIG]

[38] 
Any usage of [[segmented text]] is associated with an [[ordered map]]:
[DFN[allowed segment separators]].  
Unless otherwise specified, it [[is empty]].



[27] 
A [[segmented text]] as a whole represents a set of texts which
can be obtained by concatenating the [[segments][segment]] and
the text representations of the [[segment separators][segment separator]]
in the [[segmented text]], in order.
As a [[segment]] or [[segment separator]] can have multiple 
[[text representations][text representation]],
a [[segment text]] represents a set of the texts with every
possible combinations of them.  Any item of the set
is referred to as the [[text representations][text representation]].

[EG[
[14] A [[segmented text]]:

« "チンギス", "..", "ハーン" »

... is a [[string]] "チンギス" followed by a [[segment separator]] 
[CODE[..]]
followed by a [[string]] "ハーン".  
The [[allowed segment separator]] could be
an [[ordered map]]:

«[ [CODE[..]] → « "" (the empty string), "・", "=" » ]»

..., i.e. [[segment separator]] [CODE[..]] represents
different conventions of Japanese foreign word
boundary indicators.
In this case the [[segmented text]] represents:
"チンギスハーン",
"チンギス・ハーン", and
"チンギス=ハーン".

]EG]

[26] 
The [DFN[segment length]] of the [[segmented text]] is the number of the
[[character sequences][character sequence]] in the [[segmented text]].

** Alphabetical segmented text

[30] 
An [DFN[alphabetical segmented text]] is a [[segmented text]]
used to describe alphabetical words.
For the purpose of this specification, the term "alphabetical" 
includes Latin, Greek, and similar scripts.



[39] 
The [[segment mapping rule]] of an [[alphabetical segmented text]]
returns an [[ordered set]]
that consists of all the possible [[strings][string]] that are
[[caselessly equal]] to the input.
That is,
any alphabetical [[character]] 
in [[segments][segment]] of an [[alphabetical segmented text]]
represents lowercase and uppercase variants of
the letter.

[40] 
Unless otherwise specified,
a [[string]] is 
[DFN[caselessly equal]]
to another [[string]]
in the context of an [[alphabetical segmented text]]
if they are equivalent in [[default caseless matching]].

@@
[41] Ligatures and styled letters

[43] 
Use of cases in a [[segment]] of an [[alphabetical segmented text]] 
represents the most popular casing of the word.
If case is not important for the word, it should be represented 
in lowercase letters.
If the word is typically capitalized (e.g. proper noun in English), 
it should be represented
in lowercase letters except for the first uppercase letter.
If the word has irregular casing convention, it should be represented with it.


[42] 
The [[allowed segment separators]] for [[alphabetical segmented text]]
contain the following [[entries][entry]]:

- [51] 
[CODE[.-]] → « [CODE[-]], [CODE(charname)@en[HYPHEN]], [CODE(charname)@en[SPACE]] », which represents
hyphens between words.
- [52] 
[CODE[._]] → « [CODE(charname)@en[SPACE]] », which represents spaces
between words.
- [53] 
[CODE[..]] → « "" (the empty string), [CODE[.][FULL STOP]], [CODE[.][FULL STOP]] followed by [CODE(charname)@en[SPACE]] », which represents periods used in abbreviations.

[EG[
[44] 
An [[alphabetical segmented text]]:

« "TeX", "._", "by", "._", "Donald", "._", "E", "..", "._", "Knuth" »

has five [[segments][segment]].  The [[segment]] "by" has no special
casing convention.  The [[segments][segment]] "Donald", "E", and "Knuth"
are normally capitalized.  The [[segment]] "TeX" has irregular
mixture of uppercase and lowercase letters.
[[Segments][segment]] are separated by spaces and the [[segment]]
"E" is followed by a period.


]EG]

-*-*-

[45] 
A [DFN[Japanese Romaji segmented text]] is an [[alphabetical segmented text]] 
used to describe Japanese words
written in Romeji (ローマ字, Latin letters).

[46] 
There is an additional 
[[allowed segmented separators]] [[entry]]
for [[Japanese Romaji segmented texts][Japanese Romaji segmented text]]:
".'" → « "'", "-", [CODE(charname)@en[HYPHEN]] »,
representing the syllable separator.

[EG[
[47] 
A
[[Japanese Romaji segmented texts]]:

« "kan", ".'", "ei" »

... represents "kan'ei", "kan-ei", "KAN'EI", and so on.
]EG]

[EG[
[48] 
A
[[Japanese Romaji segmented texts]]:

« "ten", "pyou", ".-", "jin", "go" »

... represents "tenpyou-jingo", "tenpyoujingo", and so on.

]EG]

** Kana segmented texts

[49] 
A [DFN[Kana segmented text]] is a [[segmented text]]
used to describe Japanese words
written in Kana (仮名).

[60] 
The [[segment mapping rule]] of a [[Kana segmented text]]
returns an [[ordered set]]
that consists of all the possible [[strings][string]] that are
equal to the input.
For the purpose of [[Kana segmented texts][Kana segmented text]],
Hiragana (平仮名) and Katakana (片仮名) letters with same phonetic 
value are equal.
In addition, any Kana variant is equal to its modern variant.
That is,
any Kana [[character]] 
in [[segments][segment]] of a [[Kana segmented text]]
represents Hiragana, Katakana, and other variants of
the letter.

@@ Formal definition

@@ Digraphs and styled versions

[50] 
The [[allowed segment separators]] for 
[[Kana segmented text]] contain the following [[entries][entry]]:

- [54] 
[CODE[.・]] → « "" (the empty string), "・", [CODE(charname)@en[SPACE]], [CODE[=]], [CODE(charname)@en[KATAKANA-HIRAGANA DOUBLE HYPHEN]] »
- [55] 
[CODE[.=]] → « "" (the empty string), [CODE[=]], [CODE(charname)@en[KATAKANA-HIRAGANA DOUBLE HYPHEN]], "・" »
- [56] 
[CODE[.の]] → « "の", "ノ" »

[EG[
[57] 
A [[Kana segmented text]]:

« "ふじ", "わら", ".の", "みち", "なが" »

... represents "ふじわらのみちなが", "フジワラノミチナガ",
and other variants.
The [[character]] "の" or "ノ" is not part of [[segments][segment]]
around them.
]EG]

** Han segmented texts

[58] 
A [DFN[Han segmented text]] is a [[segmented text]]
used to describe Chinese words (漢語)
written in Han characters (漢字).

;; [61] 
Chinese words are not only used in Chinese language,
but also in Japanese, Vietnamese, and other languages.
A number of Chinese words have been created outside of China.
[[Han segmented text]] can be used to represent any of them.


[59] 
The [[segment mapping rule]] of a [[Han segmented text]]
returns an [[ordered set]]
that consists of all the possible [[strings][string]] that are
equal to the input.
For the purpose of [[Han segmented texts][Han segmented text]],
Han characters with equivalent semantics are equal.
That is,
any Han [[character]] 
in [[segments][segment]] of a [[Han segmented text]]
represents it and its equivalent variants (異体字).

@@ formal definition

[EG[
[31] 
A [[Han segmented text]]:

« "高", "山" »

... represents "高山", "髙山", and other variants.
]EG]

* Text sets

[62] 
A [DFN[text set]] is an [[ordered map]].
It can be used to describe a set of texts.

[63] 
A [[text set]] has a [DFN[type][text set's type]].
If [[text set]] [VAR[ts]] has a [[string]]
[VAR[ts]] ["type"] which is one of known [[text set]] type, 
it is [VAR[ts]]'s [[type][text set's type]].
Otherwise, [VAR[ts]] is [[in error]].

[64] 
A [[text set]] has [DFN[texts][text set's texts]].
The [[text set]] [VAR[ts]]'s [[texts][text set's texts]]
is the [[ordered map]] of zero or more [[segmented texts][segmented text]], 
returned by the following steps:

[FIG(steps)[
= [65] 
Let [VAR[set]] be an [[empty][is empty]] [[ordered map]].
= [66] 
[[For each]] [VAR[item]] in [[language-specific fields]] of [VAR[ts]],
in order of their [VAR[field name]]s:
== [71] 
Let [VAR[field name]] be [VAR[item]]'s [VAR[field name]].
== [90] 
If [VAR[ts]] [ [VAR[field name]] ] [[exists]]:
=== [87] 
Let [VAR[value]] be [VAR[ts]] [ [VAR[field name]] ].
=== [88] 
If [VAR[value]] is not [[null]]:
==== [89] 
[[Append][append]] [VAR[value]] to [VAR[set]].
= [68] 
Set [VAR[set]] to the [[union]] of [VAR[set]] and [VAR[subset]].
= [69] 
If [VAR[ts]] ["values"] is a [[list]],
== [67] 
Set [VAR[set]] to the [[union]] of [VAR[set]] and [VAR[ts]] ["values"].
= [70] 
Return [VAR[set]].

]FIG]


[72] 
A [[text set]] has [[type][text set's type]]-dependent set of 
zero or more [DFN[language-specific fields]].
Given that there is a [[language-specific field][language-specific fields]]
with name [VAR[field name]] ([[string]]) for language [VAR[language]],
[[text set]] [VAR[ts]] has the following semantics:

[FIG(steps)[
= [81] 
If [VAR[ts]] [ [VAR[field name]] ] [[exists]] and
is a [[segmented text]]:
== [82] 
The [VAR[ts]]'s preferred form for [VAR[language]] is known to
[VAR[ts]] [ [VAR[field name]] ].
= [83] 
Otherwise, if [VAR[ts]] [ [VAR[field name]] ] is not [[null]]:
== [84] 
[VAR[ts]] is [[in error]].
= [85] 
Otherwise:
== [86] 
The [VAR[ts]]'s preferred form for [VAR[language]] is not known.

]FIG]

[91] Additional semantics might be specified for each [[language-specific field][language-specific fields]].

[73] 
Any other texts of a [[text set]] [VAR[ts]] can be put into 
[VAR[ts]] ["values"] [[list]].
If [VAR[ts]] ["values"] [[exists]] and is not a [[list]] or [[null]],
[VAR[ts]] is [[in error]].

[74] 
If [[text set]] [VAR[ts]]'s [[texts][text set's texts]]
[[contains]]
anything other than a
[[segmented text]],
[VAR[ts]] is [[in error]].

** Alphabetical text set

[75] 
An [DFN[alphabetical text set]]
is a [[text set]]
whose [[type][text set's type]]
is
[CODE[alphabetical]].
It represents a set of texts that are primarily presented in
alphabetical letters.

[77] 
An [[alphabetical text set]]'s [[texts][text set's texts]]
are spelling variations of the text represented by the
[[text set]].

[76] 
Unless otherwise specified,
any [[segmented text]] in an [[alphabetical text set]]'s [[texts][text set's text]]
is interpreted as [[alphabetical segmented texts][alphabetical segmented text]].

[78] There are following [[language-specific fields]] for 
an [[alphabetical text set]]:

- [CODE[en]] for English.
- [CODE[en_us]] for English as used in U.S.
- [CODE[en_gb]] for English as used in U.K.


[EG[
[79] 
An [[alphabetical text set]]:

[PRE[
« 
  "type" → "alphabetical",
  "values" → «
    « "color" »,
    « "colour" »
  »
»
]PRE]

... represents a word that can be spelled as "color" or "colour".

[80] 
Likweise, an [[alphabetical text set]]:

[PRE[
« 
  "type" → "alphabetical",
  "en_us" → « "color" »,
  "en_gb" → « "colour" »
»
]PRE]

... represents a word that can be spelled as "color" or "colour".
It also describes that U.S. English style is "color"
and U.K. English style is "colour".

]EG]



*


[9] 
A Chinese word (漢語) is represented by a Han word object.

For a [[Han word object]] [VAR[object]],
[VAR[object]] [ "[CODE[char_list]]" ]
[MUST[MUST]] be an [[array]] of the characters in the word,
represented as [[JSON strings][string]], in order.

[PRE(code)[
{
  "han": true,
  "char_list": ["万", "延"]
}
]PRE]

A [[Han word object]] can contain alternative representations using
variant characters (異体字).

[PRE(code)[
{
  "han": true,
  "char_list": ["宝", "历"],
  "reps": [
    {
      "cn": ["宝", "历"]
    },
    {
      "ja": ["宝", "暦"],
      "ja_old": ["寶", "曆"]
      "tw": ["寶", "暦"],
      "others": [
        ["寳", "暦"]
      ]
    },
    {
      "yomi": true,
      "kana": ["ほう", "れき"],
      "latin": ["hou", "reki"]
    }
  ]
}
]PRE]


*

[11] 
This specification depends on the [CITE[Infra Standard]].

[13] 
The terms
[[null]],
[[true]],
[[byte]],
[[list]],
[[is empty]],
[[contains]],
[[append]],
[[ordered set]],
[[items]],
[[for each][For each]],
[[ordered map]],
[[entry]],
[[exists]],
[[union]],
[[code point]],
[[scalar value]],
[[string]],
and
[[parse a JSON string to an Infra value]]
are defined by the [CITE[Infra Standard]].

[16] 
The terms
[[grapheme cluster]]
and
[[default caseless matching]]
are defined by [CITE[The Unicode Standard]].

[10] 
The terms 
[[array]],
and
[[object]]
are defined by the JSON specification [SRC[[[ECMA-404]]]].

[12] 
In this specification,
requirements on the JSON string data is phrased as requirements
on the Infra values, which are obtained by applying the
[[parse a JSON string to an Infra value]]
steps to the JSON string.


@@ [DFN[in error]]