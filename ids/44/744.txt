[4] 
[[標準時]]や[[夏時刻]]の取り扱いは、ナイーブに実装すると著しいパフォーマンス劣化をもたらすおそれがあります。

[5] 
設計の根幹に関わる部分なので、後から問題に気づいても修正するのは容易でないようです。

[8] 
[[Perlモジュール]]
[CODE[DateTime.pm]]
では、
[[あまりに大きな年][将来の日時]]を与えると、[[夏時刻]]の計算に異常な時間がかかる問題が知られています。
内部で [CODE[DateTime]] を使っている[[Webアプリケーション]]に大きな[[年]]の[[日時]]を与えるような攻撃が可能なので、[[要注意][日時のセキュリティー]]です。

[3] 
複数の
[[JavaScript]]
用[[日時処理]]ライブラリーで、
[[時間帯]]の処理が著しいパフォーマンス劣化をもたらすことが知られています。
[SRC[>>1, >>2]]


- [1] [CITE@ja[moment.js・day.js よりも速くて軽い cdate ライブラリ #moment.js - Qiita]], [TIME[2023-11-13T06:37:02.000Z]] <https://qiita.com/kawanet/items/7ce867f5b1ad187c2111>
- [2] [CITE@ja[XユーザーのTorishima / INTPさん: 「マジであまりに信じられない事実に涙を流してる、フロントエンド内で使う day.js をこういうラップする関数でやってたんだけど .tz() を消しただけで requestAnimationFrame() で計測した FPS が低スペ Android で今まで 1〜5fps だったのが 45fps くらいにまで回復した パフォーマンス問題お前かよ… https://t.co/F3ASAt7LBm」 / X]], [TIME[午前2:36 · 2023年11月13日][2023-11-12T17:36:21.000Z]], [TIME[2023-11-13T06:17:52.000Z]] <https://twitter.com/izutorishima/status/1723756632256209346>

