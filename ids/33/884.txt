[1] [[計算機システム]]などの[[日時の処理]]では、
[[日時]]の構成要素が扱える (当初設計時に想定した)
[[値域]]を超えることがあり、問題となります。

[18] 設計時の想定では遠い[[将来の日時]]だったとしても、
思いの外そのシステムが長生きするのはよくあることです。

[19] 逆パターンはそれほど多くありませんが、
想定よりも応用が広がり、[[過去の日時]]の記述の必要が生じるという可能性もなくはありません。

-*-*-

[38] 
情報交換用[[日時形式]]にせよ、情報処理用内部形式にせよ、
実用上は[[日時]]の記述に使うデータサイズに制限を設けざるを得ません。
制限を取り払ってどれだけでも[[過去の日時]]や[[将来の日時]]を表現可能にすると、
[[RFC 2550の日時形式]]のような扱いづらい形式になってしまいます。

[EG[
[39] [[CPU]] や[[プログラミング言語]]の[[整数型]]が64ビットの場合、
それより大きな[[整数]]を扱うには特別な処理が必要となります。
[[日時]]を大きな[[整数]]で扱うと、
近い日時の計算も含めてすべての[[日時]]計算が煩雑で低速になってしまいます。
]EG]

[22] 
[[2000年問題]]への対処も、よくて9999年まで問題を先送りできたに過ぎませんでした。
実際には数十年程度の先送りで延命させたシステムも少なくありませんでした。
桁溢れ問題への本質的な対処は困難です。

* 年の桁溢れ

[5] 発症パターンとして、

- [13] [[値域]]の[[上限]]を超えて問題が起きる
- [6] 下2桁で扱っていたので、100年目に問題が起きる
- [7] [VAR[n]]年から99年を前世紀、0年から[VAR[n]]-1年を新世紀として扱っていたので、
二度目の[VAR[n]]年付近で問題が起きる
- [9] 0年や99年を特別な意味で使っていて問題が起きる
- [20] [[整列]]の順序がおかしくなる

... というのがあります。

[8] [[西暦年]]その他各[[紀年法]]の項を参照。

[FIG(short list)[ [10] [[年号]]の[[桁溢れ]]の問題
- [[2000年問題]]
- [[10000年問題]]
- [[昭和100年問題]]
- [[民国100年問題]]
- [[2700年問題]]
]FIG]

[12] [[日本語]]では検索しても情報が出てこないけど、
[[タイ暦]]2600年問題もありそう?

[16] [[日本]]で[[元号]]を使った[[日時形式]]を採用した[[計算機システム]]は、
[[年]]を2桁で保持していることが多いようです。これまでの[[日本の元号]]はすべて
2桁[[年]]以内で[[改元]]を迎えていますが、
[[将来の日時]]を扱う場合に問題になる可能性があります。
(予期できない将来に100年以上[[改元]]されない可能性や、
最新の[[元号]]によって[[将来の日時]]を扱う場合に、問題となります。)

[REFS[
- [11] [CITE@ja[年問題 - Wikipedia]] ([TIME[2018-04-19 01:05:26 +09:00]]) <https://ja.wikipedia.org/wiki/%E5%B9%B4%E5%95%8F%E9%A1%8C>
]REFS]

** 複数紀元詰め込み

[23] 
古いシステムで、特定値以下なら[[平成]]、
以上なら[[昭和]]のように異なる[[元号]]の[[年]]を数値のみで区別する事例があったようです
[SRC[>>4, >>5]]。

[REFS[


[FIG(quote)[
[FIGCAPTION[
[4] ([TIME[2017-08-07 16:39:05 +09:00]])
<https://www.taisyokukin.go.jp/supply/PDF/shingigaiyou_h29_1.pdf>
]FIGCAPTION]

> ①例えば今後元号が変わるようなことがあ
った場合にも対応しているのか?
> ②随意契約とした理由に短時間に遂行する
ためとあるが、元号の変更については事前
から予想のできることであるが、短時間に
やらなければならない理由とは何か。

> ①この日付対応の改修に元号変更対応につ
いても含めてある。
> ②本件については併せて元号の変更への対
応も行ったが、本来的には元号とは関係無
く、業務システムにおいて元号無しの日付
について、29年までを平成、30年以降
について昭和と判断しているものを改修す
る必要があったものである。本改修は影響
するシステム資産全てを凍結した上で行う
必要があるため、これまで行っていた法改
正に伴う改修と並行して改修することはで
きず、法改正関連の改修を優先し本改修に
着手したものである。

]FIG]


[FIG(quote)[
[FIGCAPTION[
[5] ([TIME[2016-10-05 08:46:04 +09:00]])
<http://www.mhlw.go.jp/sinsei/chotatu/chotatu/shiyousho-an/dl/130227-05.pdf>
]FIGCAPTION]

> 労災システムにおいては、傷病年月日等の入力項
目の一部に元号のない和暦日付があり、年が「27」以
下であれば元号を「平成」と、また、それ以外は「昭和」
と判定する仕様となっており、平成28年度以降の傷
病年月日等を入力した場合は元号を「昭和」と判定さ
れる。また、「昭和」、「平成」以外の元号には対応でき
ない。
>  このため、すべての入力帳票について、傷病年月日
等に元号を付加し、和暦から西暦への変換処理を正
しく行えるよう改修を行う。
>  なお、平成元年以降に開発した介護、アフターケア
については、日付項目に元号が付加されており、改修
は発生しない。

]FIG]

]REFS]

* 元号コードの桁溢れ

[2] [SEE[ [[元号コード]] ]]

* 整数時刻系の桁溢れ

[FIG(short list)[ [3] [[整数時刻系]]および[[時間]]変数の[[桁溢れ]]
- [[2038年問題]]
- [[49.7日問題]]
- [[497日問題]]
- [[24.9日問題]]
- [[248日問題]]
]FIG]

* 循環型日時系

[14] [[干支]]、[[GPS時]]など同じ名前の[[日時]]が一定期間経過後に繰り返される[[日時形式]]では、
当然ながら一周する期間を超えた範囲を扱うと[[日時]]を一意に識別できなくなります。

[EG[
[17] [[昭和]]は64年まであったため、
[[元号]]と[[干支]]だけでは[[年]]を一意に特定できません。
]EG]

[15] [[2000年問題]]や100年問題もこの一種とも言えます。

* 整列

[4] 狭義の[[桁溢れ]]以外に、同じ[[桁]]数と仮定して[[文字列]]として[[整列][日時の整列]]させていたとき、
前提が崩れて順序がおかしくなるという問題が生じる場合もあります。

* 関連

[21] [[旧暦2033年問題]]は性質が異なります。

* メモ
