[1] [[計算機システム]]などの[[日時]]の処理では、
[[日時]]の構成要素が扱える (当初設計時に想定した)
[[値域]]を超えることがあり、問題となります。

[18] 設計時の想定では遠い[[将来の日時]]だったとしても、
思いの外そのシステムが長生きするのはよくあることです。

[19] 逆パターンはそれほど多くありませんが、
想定よりも応用が広がり、[[過去の日時]]の記述の必要が生じるという可能性もなくはありません。

* 年の桁溢れ

[5] 発症パターンとして、

- [13] [[値域]]の[[上限]]を超えて問題が起きる
- [6] 下2桁で扱っていたので、100年目に問題が起きる
- [7] [VAR[n]]年から99年を前世紀、0年から[VAR[n]]-1年を新世紀として扱っていたので、
二度目の[VAR[n]]年付近で問題が起きる
- [9] 0年や99年を特別な意味で使っていて問題が起きる
- [20] [[整列]]の順序がおかしくなる

... というのがあります。

[8] [[西暦年]]その他各[[紀年法]]の項を参照。

[10] [SEE[ 具体例は: [[2000年問題]]、[[10000年問題]]、[[昭和100年問題]]、 [[民国100年問題]]、[[2700年問題]] ]]

[12] [[日本語]]では検索しても情報が出てこないけど、
[[タイ暦]]2600年問題もありそう?

[16] [[日本]]で[[元号]]を使った[[日時形式]]を採用した[[計算機システム]]は、
[[年]]を2桁で保持していることが多いようです。これまでの[[日本の元号]]はすべて
2桁[[年]]以内で[[改元]]を迎えていますが、
[[将来の日時]]を扱う場合に問題になる可能性があります。
(予期できない将来に100年以上[[改元]]されない可能性や、
最新の[[元号]]によって[[将来の日時]]を扱う場合に、問題となります。)

[REFS[
- [11] [CITE@ja[年問題 - Wikipedia]] ([TIME[2018-04-19 01:05:26 +09:00]]) <https://ja.wikipedia.org/wiki/%E5%B9%B4%E5%95%8F%E9%A1%8C>
]REFS]

* 元号コードの桁溢れ

[2] [[元号コード]]参照。

* 整数時刻系の桁溢れ

[3] [SEE[ [[2038年問題]] ]]

* 循環型日時系

[14] [[干支]]、[[GPS時]]など同じ名前の[[日時]]が一定期間経過後に繰り返される[[日時形式]]では、
当然ながら一周する期間を超えた範囲を扱うと[[日時]]を一意に識別できなくなります。

[EG[
[17] [[昭和]]は64年まであったため、
[[元号]]と[[干支]]だけでは[[年]]を一意に特定できません。
]EG]

[15] [[2000年問題]]や100年問題もこの一種とも言えます。

* 整列

[4] 狭義の[[桁溢れ]]以外に、同じ[[桁]]数と仮定して[[文字列]]として[[整列][日時の整列]]させていたとき、
前提が崩れて順序がおかしくなるという問題が生じる場合もあります。

* 関連

[21] [[旧暦2033年問題]]は性質が異なります。

* メモ
