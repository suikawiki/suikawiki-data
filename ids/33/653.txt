[13] 
[[文字]]なんてただ並んでいるだけのようにも思えますが、
[[セキュリティー]]上のリスクがあちこちに潜んでいます。

* 識別子における文字

[1] [[URL]] を構成する[[文字]]は、[[セキュリティー]]問題につながる場合があります。
[SEE[ [[URLのレンダリング]] ]]

[117] '''似た形の文字''':
[[Unicode]] には[[図形記号]]が似た[[文字]](列)が極めて多く含まれています。
紛らわしくて困るというだけなら [WEAK[(それだけでも大問題ですが)]]
まだしも、[[なりすまし]]などの安全上の問題にもなります。

[186] かつての [[RFC 3987]] の仕様ではできるだけ [[NFC]] や [[NFKC]]
を使うことを勧めていましたが、従来の[[文字符号化方式]]との関係
[WEAK[(RFC 3987 は従来の文字符号化方式で IRI が記述されていたら [[NFC]] に変換することを求めていますが、 RFC 3987 の対象外の世界で従来の文字符号化方式から [[UTF-8]] などに変換済みなら NFC でないかもしれません。 IRI を[Q[作る]]側も、[[ファイル名]]など NFC でない因子を持っているかもしれません。)]]
や悪意のある者が必ずしもそれに従うとは限りません。

[187] '''見えない文字''':
[[Unicode]] には[[図形記号]]を持たない[[文字]]が多く含まれています。
例えば [CODE(char)[[[U+3000]]]]
([CODE(charname)[[[IDEOGRAPHIC SPACE]]]]) も IRI
で使えます。 IRI のような文字列があった時にどこで終わるのかわからないので不便ですし、
[CODE(char)[[[IDSP]]]] と [CODE(char)[[[EMSP]]]] と
[CODE(char)[[[ENSP]]]] が2つ並んでいるものは区別できなかったりします
(>>117 の問題)。

[6] [[零幅文字]]は、透明なだけでなく表示領域すら見えないもので、
ますます危険です。

[188] 単に見えないだけではなく、何らかの意味を持った[[文字]]もあります。
[CODE(charname)[[[PARAGRAPH SEPARATOR]]]] は段落境界を意味します。
IRI の途中で改段落などされると甚だ迷惑ではあるのですが、
仕様上は認められているようです。
悪意のある人は悪いことに使うかもしれません。

[3] 
これらは[[電子透かし]]的に文章に混入させ悪用されることがあります。


[189] '''双方向性''':
かつての [[RFC 3987]] には [[bidi]] に関する規定がありました。
要約すると、 Unicode の bidi 算法をそのまま使うというものです。
最近の色々な規格 [WEAK[(例えば [[CSS]])]]
は全面的に Unicode の bidi 算法を採用しているので IRI
の部分だけ他の算法を採用するというのは非現実的ではありますが、
Unicode の bidi 算法は普通の文章を主に想定しているので、
記号を普通の文章とは違う特別な意味で使っている IRI
では予期せぬことが起こります ([[RFC 3987//6]] 
にわずかながら例があります)。

[190] 1つの[[アドレス]]の途中で直感とは異なる形で表示上の場所が入れ替わるのは実用上も大きな問題ですが、
[[なりすまし]]などの[[保安]]上の問題もかかえています。

* 空白

[2] [[空白文字]]参照。

* エスケープ、引用、終端

[9] 
厳密に言えば[[文字]]自体に起因する[[セキュリティー]]問題ではありませんが、
[[文字]]を使って記述される[[構文]]
([[データ形式]]や[[プロトコル要素]]など)
の構造に含まれるべき[[文字]]は適切に扱わなければ、
深刻な問題に発展し得ます。

[10] 
よく問題を起こす[[文字]]というものもあります。
[SEE[ [[エスケープ]], [[文字参照]], [[SQLインジェクション]], [[XSS]], [["]], [[']], [[NULL]] ]]

[11] 
[[文字符号化]]と[[文字]]を使って記述される[[構文]]の相互作用による問題もあります。
[SEE[ [[円問題]], [[表\示]], [[ダメ文字]] ]]

* 不正入力

[7] 
不正な入力バイトや入力文字を、不正だからといってただ削除すると、
セキュリティーの問題となる場合もあります。
[SEE[ [[復号]]、[[非文字]] ]]

[12] [[文字]]を使って記述される[[構文]] (>>9) による問題とも関係します。

[8] 
[[非文字]]に特定の意味を与えていると、
外部から不正に[[非文字]]を与えられて誤動作することがあります。


* レンダリング

[4] [[文字のレンダリング]]に複雑な規則が適用される場合、
[[レンダリング]]の実装に深刻な[[不具合]]があり、
[[文字列]]を[[レンダリング]]させるだけで特定の[[実装]]をクラッシュさせるなどの[[セキュリティー]]上の問題を引き起こせる事例が知られています。
[SEE[ [[文字のレンダリング]] ]]

* 状態

[SEE[ [[paired stateful controls]] ]]



* 文字符号化

[SEE[ [[ISO/IEC 2022]], [[UTF-8]], [[サロゲートペア]] ]]

* メモ

[FIG(quote)[
[FIGCAPTION[
[5] [CITE@ja[歌詞表示サービスGenius、同社のコンテンツを無断使用したGoogleを提訴 | スラド IT]]
([TIME[2019-12-07 16:55:20 +09:00]])
<https://it.srad.jp/story/19/12/06/2239229/>
]FIGCAPTION]

> WSJの報道で証拠とされたのは、Geniusが一部の曲の歌詞でアポストロフィー「'」の一部を右シングルクォーテーションマーク「’」に置き換えた「ウォーターマーク#1」によるものだ。「'」をモールス符号の短点、「’」を長点に置き換えると「red handed」と読めるようになっているが、このウォーターマークをそのまま含む歌詞がGoogleの検索結果に表示されていたという。
> WSJの報道後、Googleの検索結果にはウォーターマークが除去されたバージョンが表示されるようになったが、証拠隠滅を疑ったGeniusは8月にスペースの(U+0020)一部をfour-per-em -space(U+2005)に置き換えたウォーターマーク#2の埋め込みを開始したそうだ。

]FIG]
