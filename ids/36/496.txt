[99] 
現在、[[情報機器]]で[[文字]]を扱うには、
抽象化された[[文字]]を表す[[文字コード]]層と[[字形]]を記述した[[フォント]]層が分離された体系によることが多いです。
しかし
[[Unicode]]
が普及するまでは、
両者が渾然一体となったシステムが世界各地で多数使われていました。
現在も
[[Unicode]]
に存在しない[[文字]]や [[Unicode]] で扱いにくい[[文字]]などでそうした手法が使われ続けています。
本稿ではそうした手法群を[DFN[フォント依存符号化]]と総称します。


* 呼称

[100] 
本稿では総称して[[フォント依存符号化]]としています。

[101] 
[[8ビット符号]]系[[フォント依存符号化]]手法の[[フォント]]の類やその[[符号化]]は
[DFN[8-bit font]],
[DFN[font-specific encoding]],
legacy font,
legacy encoding
などと呼ばれることがあります。


[97] 
[[印度]]方面では[[8ビット符号]]系[[フォント依存符号化]]手法の[[フォント]]の類を
[[clip font]] 
ということがあります。 [SEE[ [[clip font]] ]]


[131] 
[[鍵盤]]入力の便宜を中心に設計したものを[DFN[鍵盤符号化]], [DFN[keyboard encoding]],
鍵盤配置, keyboard layout などということがあります。

[132] 
[[日本]]では、当時 [[JIS]] になかった文字や [[JIS]]
で区別されない[[異体字]]を提供する[[フォント]]の類を[[外字フォント]]などということがあります。

** ANSI フォント

[80] 
[[8ビット符号]]系[[フォント依存符号化]]手法の[[フォント]]の類を 
[DFN[ANSI]], [DFN[ANSIフォント]]などということがあります。
[[語源]]をたどると、

= [81] [[ANSI]] は[[米国]]の[[標準化団体]]
= [82] [[ANSI]] が [[ASCII]] を制定する
= [83] 米国の計算機業界で [[ASCII]] が実装される
= [84] [[Windows]] が [[ASCII]] や [[ISO/IEC 8859]] を基に独自に拡張したシステムの[[文字コード]]のことを [[ANSIコードページ]]と呼ぶ
([[MS-DOS]] の [[OEMコードページ]]や [[Windows NT]] の [[Unicode]] との対比)
= [85] [[Windows]] での利用を想定した[[フォント依存符号化]]の[[フォント]]のことが
[[ANSI]] と呼ばれるようになる

で、ここでの [[ANSI]] の対義語は [[Unicode]] フォントです。

[93] 
もちろんこの [[ANSI]] は本来の [[ANSI]] とは無関係ですし、
対義語が [[Unicode]] フォントになっているにも関わらず、ここでいう [[ANSI]]
フォントのほとんどは技術的には [[Unicode]] を実装していることになっている [[OpenType]]
フォントです。

** 裏フォント

[92] 
[[日本語圏]]では[DFN[裏フォント]]、[DFN[裏フォント方式]]という言葉があります。
この語は[[平成時代]]初期にそれなりに使われていた痕跡がありますが、
現在では [[Web]] 上で数えるほどしか用例が見当たりません。

[94] 
現存する用例をみると、 [[JIS X 0208]] の通常の[[フォント]]のかわりに他の[[文字]]を割り当てたものを指しているようですが、
注意深く読むとその意味するところには微妙にズレが見られます。
まったく別の[[文字]]を割り当てるものを指している用例が古そうですが、
[[JIS X 0208]] の[[文字]]の[[異体字]]を割り当てたものや、
[[JIS X 0208]] の[[包摂規準]]の範囲内の別字形を割り当てたものを指すものもあります。



[90] 
[CITE[ほら貝:文字コード]], 
[[加藤弘一]],
This page was created on Nov15 1999.,
[TIME[2016-08-02T01:44:05.000Z]], [TIME[2025-10-04T12:01:43.666Z]] <http://www.horagai.com/www/moji/2000a.htm>

>文字コードと文字セットの違いは最初に述べたが、新しい文字コードを作ろうとすると複雑な問題がからんでくるので、符号化を棚上げし、ひとまず文字セットだけを作ろうという動きが進んでいる。コードがふられていなくては、コンピュータで使えないのではないかと思うかもしれないが、フォントが無償公開されていれば、お互いに共通のフォントを共有でき、そのフォントにおける通し番号を伝えることで、どの文字かが特定できるのである。研究者の間では諸橋轍次の『大漢和辞典』の検字番号でJIS表外字を特定する方法がかなりおこなわれていたが、そのフォント版といえる。
> 変則的だが、多くのCD-ROM出版物のように、JIS表外字をマッピングした「裏フォント」を使う手もあるし、XMLの実体参照でも文中に表示することができる。ただし、どちらも検索や置換といったテキスト操作はできない。

;; [96] 前段で指しているのは[[今昔文字鏡]]や[[GT明朝]]や[[e漢字]]など。


[89] [CITE[第2回 - 中国語情報処理]], 
09/28/2001,
[TIME[2003-11-28T10:03:15.000Z]], [TIME[2025-10-04T12:00:22.263Z]] <https://www.rikkyo.ne.jp/univ/masutani/diannao/diannao2001/2.html>

>[B[裏フォント方式の中国語入力ソフト]]
-「cWnn」(オムロンソフトウェア株式会社):8401にインストール済み
--    独自フォントを用いて表示するため、「cWnn」で入力した中国語は同じソフトのある環境でしか読めないが、中国語変換補助、辞書などの入力支援機能が便利である。
-「Chinese Writer」(光電社)
--    「cWnn」と同様のソフト。 

;; [95] 関連: [[シフトGB]]

[87] [CITE[ほら貝:文字コード]], 
[[加藤弘一]],
This page was created on July21 2002.,
[TIME[2016-08-02T01:43:50.000Z]], [TIME[2025-10-04T11:58:12.129Z]] <http://www.horagai.com/www/moji/int/saito.htm>

>
――20万字というと裏フォント方式ですか?
>
斎藤 そうではありません。[SNIP[]]




[88] 
[CITE@ja[*正字體フォント作成法――或いは、余は如何にして或種のフォントを作り得ざりし乎]], [[森洋介 MORI,Yousuke]], 
發行日 2007年10月14日 開板/2007年11月26日 改版,
[TIME[2025-10-04T11:58:46.000Z]], [TIME[2019-03-31T12:18:09.269Z]] <https://web.archive.org/web/20190331114747/http://livresque.g1.xrea.com/Data/font01.htm>

>[SNIP[]]正字體のうちJISコード(の第一・第二水準基本漢字)が割り振られてない字種を、新字體を振り當てたコードの場所に置き換へて表示する仕組み。俗に謂ふ裏フォント方式の一種だが、JIS X 0208(97JIS)に謂ふ包攝規準からすれば、一コードに複數の新舊異體字が「包摂」されてゐるわけだから、表示字形に新字でなく舊字體を選んでも構はない理窟だ[SNIP[]]


[91] [CITE@ja[字体 - Wikipedia]], [TIME[2025-10-03T12:42:45.000Z]], [TIME[2025-10-04T12:03:52.419Z]] <https://ja.wikipedia.org/wiki/%E5%AD%97%E4%BD%93#%E6%96%87%E5%AD%97%E9%9B%86%E5%90%88%E3%81%A8%E7%95%B0%E4%BD%93%E5%AD%97>

>
:フォント切り替え(裏フォント方式):    同じコードポイントに異体字を収録したフォントを複数(異体字の種類分)用意し、それによって字体の切り替えを行う。[SNIP[]]

[141] >>28

* 概略

[102] 
[[フォント依存符号化]]と他の[[文字符号化]]との最大の違いは、
[[フォント依存符号化]]が[[アプリケーション]]や[[プラットフォーム]]のレベルで実装されていない、
なんなれば他の[[文字符号化]]が実装されている点にあります。

[103] 
他の[[文字符号化]]の実装であれば、[[アプリケーション]]や[[プラットフォーム]]の[[プログラム]]は多かれ少なかれ当該[[文字符号化]]の知識を実装しています。
例えばどの[[符号]]が[[改行]]を表し、
どの[[符号]]が[[間隔]]を表し、
どの[[符号]]が[[数字]]を表し、
どの[[符号]]とどの[[符号]]が[[大文字と小文字]]の関係にある、
といった知識が[[プログラム]]の機能に反映されています。
それによって[[行]]の[[折り返し]]位置が決められたり、
[[文字列]]として記入された[[整数]]の[[演算]]を実行したり、
[[行頭]]を[[大文字]]に置換したりといった処理が実現されます。
あるいは[[鍵盤]]からの入力と[[文字]]の[[符号]]が関連付けられたり、
他の[[文字コード]]との相互変換が実装されたり、
[[音声]]による読み上げや[[全文検索]]システムの[[自然言語処理]]と統合されたりしています。

[104] 
[[フォント依存符号化]]は、こうした[[文字]]の多角的な処理のうち、
文字図形を表示するという1点のみに特化したものです。
例えば本来[CH[A]]が表示されるべき[[符号]]に[CH[あ]]の文字図形を割り当てた[[フォント]]を用意することで、
[[プログラム]]を改変せずに[[ラテン文字]]対応システムを[[仮名]]対応システムに出来ます。
容易に導入できるという利点と引き換えに、表示以外の処理を悉く諦める必要があります。
使えないだけでなく壊れることもあります。
[[プログラム]]が[[大文字と小文字]]の違いを自動的に無視する検索機能を持っていれば、
[CH[A]] と [CH[a]] のかわりに[CH[あ]]と他の文字を同一視する機能に化けてしまいます。

-*-*-

[105] 
[[フォント依存符号化]]は、他の[[文字符号化]]との関係で3種類に分類できます。

- [106] 他の[[文字符号化]]の[[文字]]を置き換えるもの
- [107] 他の[[文字符号化]]の[[空き領域]]を勝手に使うもの
- [108] 独自の[[文字]]の割当のための領域を使うもの

[109] 
このうち >>106, >>107 が狭義の[[フォント依存符号化]]というべきもので、
>>108 は [[Unicode]] の [[PUA]] や [[Windows]] の [[EUDC]] を含むいわゆる[[外字]]の仕組みとして区別することもできますが、
>>107 と >>108 の区別が明確ではない[[文字符号化]]もありますし、
>>106 や >>107 の[[フォント]]も[[外字]]と呼ばれることがあるなど、
厳密に区別しづらいこともあります。

[133] 
[[日本]]のように早くから公的標準が確立された地域では、そこから漏れた[[文字]] ([[外字]])
を併用するために、少数なら >>108 や >>107 の手法を使い、
それでは収容しきれない大量の[[外字]]の表示に >>106 が使われることになりがちです。

[134] 
[[アジア]]その他の基本文字の標準も確立されていなかった地域では、
[[8ビット符号]]で文字数が限られている場合がほとんどであることもあって、
はじめから >>106 が有力な選択肢となってきます。

[98] 
[[印度]]方面では[[フォント依存符号化]]手法の[[フォント]]の類のうち、
主に 
[[ASCII文字]]を置換したものを monolingual、
[[ASCII文字]]を温存して主に[[Latin-1]]文字を置換したものを bilingual
と区分することがあります。
[SEE[ [[インド系文字の文字コード]] ]]
[[English]] と地域言語の2言語の文字を共存できるかどうかを意味しています。


-*-*-


[135] 
[[フォント依存符号化]]の主な利用の主体と方法は、

- [136] 当該[[文字]]と[[言語]]を[[母語]]として使う一般の人々であり、
通常の文字表記の手段として使う
- [137] 当該[[文字]]と[[言語]]を[[母語]]として使う一般の人々、
ただしほとんどの[[文字]]は公的標準でカバーされており、
そこから漏れた場合に限られる
- [138] 当該[[文字]]を[[言語]]や[[地域]]の研究で使う専門分野の人々
- [139] 当該[[文字]]を特定の専門分野で使う人々

のようなパターンがあります。 >>136 は[[アジア]]や各国少数民族に多く、
>>137 は[[東アジア]]に多いです。
>>138 は[[欧米]]の研究者に多く、
[[母語]]として使う現地とは異なる慣習が成立していた場合もあります。
「[[母語]]として使う現地」のない[[古代文字]]の場合もあります。

[140] 
>>139 は専門分野の図記号など [[Unicode]] に追加されそうにないものも多く、
狭い範囲で現在も使われ続けていることがあります。
>>139 ないし >>138 に該当する使われ方としてはその他に、
娯楽や装飾や宗教を目的として使われるもの、
[[人工文字]]であるものなどがあります。


[110] 
[[フォント依存符号化]]のほとんどは、[[フォント]]の開発者の独自の[[符号化]]です。
当該[[フォント]]以外との互換性は一切ありません。

[111] 
場合によっては同じ開発元の他の[[フォント]]と互換性があり、
異なる見た目の別の[[書体]]に切り替えられる場合もあります。

[112] 
時には特定の[[フォント依存符号化]]が地域や言語コミュニティーの[[事実上の標準]]の地位を得るほどに普及した場合もあります。
そうなると異なる開発元からいくつも互換性のある[[フォント]]が出現することになります。

[113] 
[[国家標準]]等の[[フォント]]と分離された[[文字コード]]規格がありながら、
それが[[フォント依存符号化]]として運用されていることもあります。
欧米の計算機業界があまり重視していない地域だと、
[[プラットフォーム]]や重要[[アプリケーション]]が[[国家規格]]であっても対応しないためにそうなってしまいます。




* フォント依存の符号化機構

[FIG(short  list)[ [1] [[プロトコル]]
- [CODE[<font face>]]
- [CODE[font-family]]
- [CODE[x-user-defined]]

]FIG]

** 8ビット符号

[114] 
[[ASCII]] を拡張した形の[[8ビット符号]]は通常の[[文字符号化]]としても非常に広く使われていますが、
[[フォント依存符号化]]に属するものの大部分もこの類型です。

- [120] 純粋8ビット符号型 >>115
- [121] [[Unicode]] 化8ビット符号型 >>116
- [122] 8ビット符号・[[Unicode]] 統合型 >>118

[115] 
[[20世紀]]のものの多くは真の意味で[[8ビット符号]]です。
[[PostScript]] / [[PDF]] や [[TeX]] での利用を想定した[[フォント]]や単純な[[ビットマップフォント]]の多くはこれに該当します。

[116] 
[[20世紀]]末から少し事情が複雑になってきます。
[[Windows]] をはじめとする多くの[[応用]]や
[[TrueType]] / [[OpenType]] のような[[フォント]]技術の
[[Unicode]]
化が進み、たとえ[[文字列]]の入出力が[[8ビット符号]]であっても[[応用]]内部の[[文字列]]型データや表示に使う[[フォント]]は
[[Unicode]] であるケースが増えていきます。
すると入出力の[[8ビット符号]]は [[Windows-1252]] など当該システムの[[文字コード]]によって
[[Unicode]] に変換された形でシステム内部で処理されることになります。

[117] 
つまり [ [N[0x00]], [N[0xFF]] ] の[[8ビット符号]]のように見えて、
実態は [CC[U+0100]] [[以上]]の [[Unicode文字]]として[[プログラム]]は扱うことになり、
[[フォント]]も [CC[U+0100]] [[以上]]の [[Unicode文字]]に[[グリフ]]を割り当てることになります。

- [123] [[Windows-1252]] で [[Unicode]] と対応付けたものが世界中で最も広く用いられています。
-- [125] [[OTF Windows NT compatibility mapping]]
は純粋8ビット符号型から [[Windows-1252]] 型への移行措置といえます。
- [124] [[Windows-1251]] によるものが旧[[東側]]諸国で用いられています。
- [126] [[symbol encoding]] は [[Unicode]] の [[PUA]]
に対応付けるものです。



[118] 
これを更に発展させて本来の [[Unicode文字]]と「両対応」させた[[フォント]]も出現してきます。
例えば [N[0xA1]] に[[文字]] [CH[う]]を割り当てていたら、
[CC[U+00A1]] と本来の [[Unicode文字]][CH[う]]の両方に[CH[う]]の[[グリフ]]を割り当てておくことで、
従来の[[8ビット符号]]の[[文書]]も [[Unicode]] の[[文書]]も1つの[[フォント]]で表示できることになります。
もちろんこれでは本来の [CC[U+00A1]] は表示できませんし、
このような使い方は [[Unicode]] に違反するのですが、元々 [N[0xA1]] を置き換えていたのですから、
[CC[U+00A1]] が使えないことでこれまで以上に不便になることはありません。
むしろ[[後方互換性]]を保った優れた移行策という評価すら可能です。

;; [119] 事情は異なりますが、 [CC[U+005C]] に [CN[YEN SIGN]]
を割り当てた[[日本語]]フォントと構図は同じです。



*** 鍵盤符号化

[143] 
[[8ビット符号]]型の[[フォント依存符号化]]を使うと、
欧米の[[8ビット符号]]前提の[[計算機]]でも[[フォント]]の差し替え・指定だけで任意の[[文字]]を表示させられます。
しかし、
ただ単に使わない[[文字]]を置き換えるだけだと、
どのように置き換えた[[文字]]を入力するかが問題となります。

[144] 
基本的な文字とは別の頻度が低い文字を補助する目的の[[フォント]]なら、
[[コピペ]]や特殊な打鍵操作でもいいかもしれませんが、
常用する基本的な文字がそれでは困ります。
そこで専用の[[ワープロ]]や[[エディター]]を開発したり、
入寮補助用ソフトウェアを開発したりされてきました。

[145] 
そうしたソフトウェアすら不要で入力したいという要求から作られたのが、
[[鍵盤符号化]] ([[keyboard encoding]])、鍵盤配置 (keyboard layout) 
などと呼ばれる類の[[フォント依存符号化]]系[[フォント]]群です。

[146] 
[[鍵盤符号化]]は、打鍵操作で[[プラットフォーム]]が入力する[[文字]]を、
その打鍵操作に割り当てたい[[文字]]に差し替えるものです。

[147] 
置き換え元となる[[文字]]は[[プラットフォーム]]が元々対応しているものであり、
[[プラットフォーム]]ごとに異なりますが、多くの場合は [[ASCII文字]]です。
[[旧ソ連]]などでは[[ロシア語]]用[[キリル文字]]のこともあります。

[148] 
書き換え先、つまり[[フォント依存符号化]]に属する[[文字]]は、
書き換え元の[[文字]]と同じような[[音価]]とする、つまり[[翻字]]のような関係とすることもあります
(例えば [CH[A]] に[CH[あ]]を割り当てるものです)。
逆に書き換え元の[[英語鍵盤]]や[[ロシア語鍵盤]]とはまったく無関係に、
対象[[言語]]の入力に適して設計された鍵盤配置に基づいて割り当てられることも多いです。
その鍵盤配置はまったく新しく設計されることもあれば、
[[タイプライター]]時代の伝統を受け継いだものもあります。

[149] 
[[鍵盤符号化]]は入力も出力も簡単に実装できるという特徴があり、
地域によってはよく使われていました。
鍵盤配置の好みに合わせたカスタマイズが[[文字コード]]レベルの変更に発展してしまうのが難点です。


[SEE[ [[ジョージアの8ビット符号]] ]]



*** Windows symbol encoding

[17] 
[[OpenType]]
の
[CODE[platformID]] [N[3]] ([[Windows]])
[CODE[encodingID]] [N[0]] ([[Symbol]])
[SRC[>>16]]
は
[DFN[symbol encoding]]
を表します。

[18] 
[[symbol encoding]]
は、
[[Unicode]] その他の[[標準]]の[[符号化][文字符号化]]が対応していない[RUBYB[任意の装飾や記号][arbitrary ornaments or symbols]]の[[フォント]]に使います。
[SRC[>>16]]

[19] 
通常は 
[CODE[cmap]]
[CODE[format]] [N[4]]
[[部分表]]で、
[[符号位置]] [N[0xF020]] から始まる224個[[以下]]の[[図形文字]]を割り当てて使います。
[SRC[>>16]]


[20] 
[[symbol encoding]]
は
[[Unicode符号化]]ではないものの、
[N[0xF020]]
からの領域は
[[PUA]]
に相当するものである [SRC[>>16]]、
と説明されています。

;; [24] つまり [ [CODE[U+F020]], [CODE[U+F0FF]] ] の領域です。


[21] 
[[応用]]によっては[[遺物]]的な用法では[RUBYB[記号文字][symbol character]]を[[単一バイト符号化]]で表し、
[N[0x20]]
を[[フォント]]の [CODE[OS/2]] [[表][OpenType表]]の [F[[CODE[usFirstCharIndex]]]]
に[[写像]]して使っていました。
[SRC[>>16]]

;;
[22] と [CITE[[[OpenType]]]] [[仕様書]]の [[symbol encoding]]
の項で説明されているのですが、これが [[symbol encoding]]
の原初の用法を意味しているのか、
[[symbol encoding]] 成立前の慣習を説明しているのか、不明瞭です。

[23] 
新しい[[フォント]]では、
[[Unicode]] にない[RUBYB[記号][symbol]]や[RUBYB[文字][character]]は
[[Unicode [CODE[cmap]]部分表]]の [[PUA]] [[符号点]]で符号化する[RUBYB[べきです][should]]。
[SRC[>>16]]
つまり [[symbol encoding]] は使用するべきではないということのようです。

[REFS[
- 
[16] 
[CITE@ja-jp[[[cmap]] - Character To Glyph Index Mapping Table (OpenType 1.9) - Typography | Microsoft Docs]], [[PeterCon]], [TIME[2022-09-04T04:18:58.000Z]] <https://docs.microsoft.com/ja-jp/typography/opentype/spec/cmap>
]REFS]

- [142]
[CITE@ja-jp[Recommendations for [[OpenType]] Fonts (OpenType 1.9) - Typography | Microsoft Docs]], [[PeterCon]], [TIME[2022-06-16T13:18:34.000Z]] <https://docs.microsoft.com/ja-jp/typography/opentype/spec/recom#SymbolFonts>

[67] [CITE[Issue 3766 - chromium - Symbol and Wingdings fonts are not handled properly - An open-source browser project to help move the web forward. - Google Project Hosting]]
( ([TIME[2012-12-16 15:15:25 +09:00]] 版))
<http://code.google.com/p/chromium/issues/detail?id=3766>


*** Windows-1252 としての実装

[127] 
[[Windows-1252]] 
を使った[[フォント依存符号化]]は、
[[Windows-1252]]
としての処理と[[フォント]]が割り当てた[[文字]]の性質が整合しないと不都合が生じます。

[128] 
最も問題となるのは [CC[0xAD]] [CN[SOFT HYPHEN]] で、
ここに[[グリフ]]を割り当てても[[改行]]次第で表示されたりされなかったりします。
[SRC[>>9]]

[129] 
世界各地の[[フォント依存符号化]]の事例でも、
古いソフトウェアは単純に表示しているだけで [N[0xAD]]
に割り当てていても支障は無かったものが、
新しい版のソフトウェアが [CN[SOFT HYPHEN]]
を実装したことで壊れてしまい、
他の[[符号位置]]に割り当て直す羽目になったりしています。
[SEE[ [[インド系文字の文字コード]] ]]

[130] 
入力された [CH["]] を [CH[“]], [CH[”]] に自動変換する [[smart quotes]]
機能も意図せず動作してデータを破壊しがちで、
変換器や入力補助ソフトウェアなどがこれへの対処を実装している事例がよくみられます。


[REFS[

[FIG(quote)[
[FIGCAPTION[
[9] [CITE@ja[Antenna House によるXSL拡張仕様]]
([TIME[2015-05-29T04:41:14.000Z]], [TIME[2020-10-28T07:48:00.515Z]])
<https://www.antenna.co.jp/XML/axf-extension/axf-extension.htm#axf%3Asoft-hyphen-treatment>
]FIGCAPTION]

> 通常、SOFT HYPHEN (U+00AD) は、行分割しなかったときは表示せず、行分割した場合は表示される。しかし、この処理では、絵文字のようなフォントを使用した場合、U+00AD に割り当てられているグリフが印字されない場合が発生してしまう。axf:soft-hyphen-treatment プロパティを使用することで、この問題を回避することができる。

]FIG]

]REFS]



** シフトJISとの混在

[SEE[ [[Symbolフォント]] ]]


* 事例

[FIG(short list)[ [2] [[フォント]]
- [[Symbol]]
- [[Wingdings]]
- [[Zapf Dingbats]]
- [[ISO/IEC 646の版]]
- [[ISO/IEC 8859-3]]
- [[ジョージアの8ビット符号]]
- [[ArmSCII]]
- [[インド系文字の文字コード]]
-- [[ビルマ文字の文字コード]]
- [[東南アジア島嶼部の文字コード]]
- [[アラビア文字の文字コード]]
- [[キリル文字の文字コード]]
- [[エチオピア文字の文字コード]]
- [[VNI]]
- [[Inuktut]]
- [[SILフォント]]
-[[WinGreek]]
- [[シフトGB]]
- [[Shift-KS]]
- [[今昔文字鏡]]
- [[GT書体]]
- [[アイコンフォント]]
-- [[Font Awesome]]
- [[合字フォント]]
- [[バーコードフォント]]
- [[ユーリオンフォント]]
- [[返り点]]
- [[JIS外字フォント]]
- [[EUDC]]
- [[楽譜]]
- [[モールス符号]]
- [[アーヴ文字]]
- [[Sarati]]
- [[Tengwar]]
- [[甲骨文字]]
- [[神代文字]]
- [[漢字庫]]
- [[楽譜]]
- [[点字の文字コード]]
- [[Unicode非互換割当]]



]FIG]

[36] [CITE@en[GitHub - MichinariNukazawa/RuneAssignMN_Series_Fonts]], [TIME[2024-10-25T01:41:53.000Z]] <https://github.com/MichinariNukazawa/RuneAssignMN_Series_Fonts/>

>
本フォントは、A〜zを入力するだけで手軽にルーン文字が使えるよう作成されました。
ルーン文字に割り当てられているユニコード領域にはグリフを置いていません。

- [13]
[CITE@en-GB[Using FONT FACE to extend repertoire?]] ([TIME[2006-07-13 00:17:01 +09:00]] 版) <http://ppewww.physics.gla.ac.uk/~flavell/charset/fontface-harmful.html>
-- 消滅確認 [TIME[2020-03-04T05:43:10.600Z]]
- [15] [CITE[絵文字フォントと特殊文字[簡単タグ集] ]] ([TIME[2008-06-27 14:32:52 +09:00]] 版) <http://www3.ocn.ne.jp/~uri-o313/yumesato/tag/1/font-style2.htm>
-- 消滅確認 [TIME[2020-03-04T05:43:04.000Z]]
-- [CITE[絵文字フォントと特殊文字[簡単タグ集] ]], [TIME[2020-03-04 14:42:44 +09:00]] <https://web.archive.org/web/20120315225931/http://www3.ocn.ne.jp/~uri-o313/yumesato/tag/1/font-style2.htm>




-
[27] 
[CITE[Thai Keymapped YKの詳細情報 : Vector ソフトを探す!]], [TIME[2022-10-11T03:33:55.000Z]] <http://www.vector.co.jp/soft/data/writing/se019766.html>
-[26] [CITE[thai-yk <=> Unicode]], [TIME[2003-02-10T17:16:27.000Z]], [TIME[2022-10-11T03:33:43.317Z]] <https://ha1.seikyou.ne.jp/home/akairingosaita/hangul/thai-yk.htm>


[28] 
[CITE[Japanese Windows and hangul]], [TIME[2009-12-02T16:07:09.000Z]], [TIME[2022-10-11T05:31:42.507Z]] <https://ha1.seikyou.ne.jp/home/akairingosaita/hangul/hangul02.htm>

>"Yamada Language Center"で配布されている"Sorawin.ttf"は、
なんと1byte文字のフォントです。
初声、中声、終声を重ね打ちしてハングルを表示します。
欧文フォントの裏フォント(外字フォント)形式であり、
通常のハングルフォントとの互換性はありません。




[35] [CITE@ja[フォント]]
([TIME[2018-08-19T09:28:00.000Z]], [TIME[2021-01-05T03:26:30.339Z]])
<http://www.yamadera.info/fonts/fonts-index.htm>

- [5] [CITE@ja[Microsoft Word - AFSTrainPassFont-info - AFSTrainPassFont-info.pdf]], [TIME[2020-03-12T06:51:31.000Z]], [TIME[2025-06-24T03:57:39.520Z]] <https://www.fontucom.com/pdf/AFSTrainPassFont-info.pdf>
-- [7] [CITE@ja[Microsoft Word - ã†ﬂå‹©çﬂ¨ã†®ã†ﬂæ¡‹åƒ–.doc - AFSTrainPassUserGuide.pdf]], [TIME[2020-03-12T07:08:15.000Z]], [TIME[2025-06-24T03:57:53.118Z]] <https://www.fontucom.com/pdf/AFSTrainPassUserGuide.pdf>
-- [10] [CITE@ja[AFSTrainPassLatinFontMap - AFSTrainPassLatinFontMap.pdf]], [TIME[2020-03-12T06:51:31.000Z]], [TIME[2025-06-24T03:58:00.093Z]] <https://www.fontucom.com/pdf/AFSTrainPassLatinFontMap.pdf>


- [11] [CITE@ja[Î2⁄W - AFKakomiMaru-Map.pdf]], [TIME[2024-10-10T01:03:10.000Z]], [TIME[2025-06-24T04:02:44.072Z]] <https://www.fontucom.com/pdf/AFKakomiMaru-Map.pdf>
-- [14] [[丸付き文字]]
- [25] [CITE@ja[Î2⁄W - AFKakomiSikaku-Map.pdf]], [TIME[2024-10-10T01:03:10.000Z]], [TIME[2025-06-24T04:03:23.838Z]] <https://www.fontucom.com/pdf/AFKakomiSikaku-Map.pdf>
-- [29] [[四角囲み文字]]
- [30] [CITE@ja[Î2⁄W - AFKakomiHasenMaru-Map.pdf]], [TIME[2024-10-10T01:03:10.000Z]], [TIME[2025-06-24T04:03:43.387Z]] <https://www.fontucom.com/pdf/AFKakomiHasenMaru-Map.pdf>
-- [31] 点線丸付き文字
- [32] [CITE@ja[Î2⁄W - AFKakomiHasenKaku-Map.pdf]], [TIME[2024-10-10T01:03:10.000Z]], [TIME[2025-06-24T04:03:58.684Z]] <https://www.fontucom.com/pdf/AFKakomiHasenKaku-Map.pdf>
-- [33] 点線四角囲み文字


- [34] [CITE@ja[Microsoft Word - AFYubi-info.docx - AFYubi-info.pdf]], [TIME[2024-03-14T00:17:20.000Z]], [TIME[2025-06-24T04:09:33.214Z]] <https://www.fontucom.com/pdf/AFYubi-info.pdf>
-- [37] [[指文字]]
-- [38] 
[CITE@ja[Î2⁄W - AFYubi_aite-Map.pdf]], [TIME[2024-03-13T07:28:18.000Z]], [TIME[2025-06-24T04:10:07.007Z]] <https://www.fontucom.com/pdf/AFYubi_aite-Map.pdf>
-- [39] [CITE@ja[Î2⁄W - AFYubi_aite_Kana-Map.pdf]], [TIME[2024-03-13T07:28:17.000Z]], [TIME[2025-06-24T04:10:16.502Z]] <https://www.fontucom.com/pdf/AFYubi_aite_Kana-Map.pdf>
-- [40] [CITE@ja[Î2⁄W - AFYubi_Jibun-Map.pdf]], [TIME[2024-03-13T07:28:17.000Z]], [TIME[2025-06-24T04:10:23.629Z]] <https://www.fontucom.com/pdf/AFYubi_Jibun-Map.pdf>
-- [41] [CITE@ja[Î2⁄W - AFYubi_Jibun_Kana-Map.pdf]], [TIME[2024-03-13T07:28:17.000Z]], [TIME[2025-06-24T04:10:31.261Z]] <https://www.fontucom.com/pdf/AFYubi_Jibun_Kana-Map.pdf>

[72] 
[CITE@en[Release Monu Math v0.x · MY1L/Unicode · GitHub]], [TIME[2025-07-02T10:43:12.000Z]] <https://github.com/MY1L/Unicode/releases/tag/Math>

[73] 
[CITE@en[GitHub - ShikiSuen/Yuzuri-Font: 島岡系芸大和声記号専用フォント。 // A typeface which allows easy typography of Shimaoka Roman Numerals used among conservatories in Japan.A typeface which allows easy typography of Shimaoka Roman Numerals used among conservatories in Japan.]], [TIME[2025-07-02T10:44:09.000Z]] <https://github.com/ShikiSuen/Yuzuri-Font>


[74] 
[CITE[将棋プログラム「激指」のページ]], [TIME[2005-02-28T16:48:54.000Z]], [TIME[2025-07-02T15:46:14.168Z]] <https://www.logos.t.u-tokyo.ac.jp/~gekisashi/download.html>

;; [75] [[JIS X 0208]] ベース


[86] 
[CITE@es[The Birth of Xiis — A Guide to Font Creation - Filosofía Moderna, Arguméntame]], [[Reflexiones de la Vida y Filosofía Moderna]], [TIME[2025-09-06T15:45:36.000Z]], [TIME[2024-02-24T22:21:46.018Z]] <https://web.archive.org/web/20240224221836/https://argumentame.com/the-birth-of-xiis-a-guide-to-font-creation/>


* Web での利用

[42] 
記述方法としては、

- [43] 特に何もせず利用する。[[Webブラウザー]]の表示用フォントを[[利用者]]が設定しておく。
-- [44] 初期から使われていた方法。
- [45] [CODE[<font face>]] で指定する。フォントを[[利用者]]がインストールしておく。
-- [46] 後に [CODE[font-family]] も使われるようになったかも?
- [47] [CODE[font-family]] で指定する。 [[Webフォント]]を使う。
-- [48] [[NN4]] 用の [CODE[rel=fontdef]] + [[PFR]] で指定するもの、
[[IE]] 用の [CODE[@font-face]] + [[EOT]] で指定するもの

[49] 
[[文字コード]]としては、

- [51] [[7ビット符号]] : [[ASCII文字]]の一部を差し替えるタイプ
-- [58] この場合、 [[HTMLタグ]]を理解しないとただの [[ASCII]]
- [50] [[8ビット符号]] : [[Latin1]] 等の一部を差し替えるタイプ
- [59] [[8ビット符号]]の[[文字参照]] : >>50 を [[Latin1]] とみなして
[[HTML]] の[[名前文字参照]]に置換したタイプ
-- [60] この場合、 [[HTMLタグ]]を理解しないとただの [[ASCII]]
-- [61] [[HTML]] として解釈すると >>52 に変換できる
-- [62] >>50 や >>52 と混在状態のファイルも存在する可能性がある
- [52] [[UTF-8]] : >>50 を [[Latin1]] とみなして [[Unicode]] に移行したタイプ
- [63] 理論上は組合せや同じ方式で別の符号化の[[フォント]]の混在も存在する可能性はあるが、
どれだけ実在するか?
-- [64] わざわざそんな面倒なことをする理由がない
-- [65] 変換の失敗などで生じる可能性はあるか
-- [66] デザイン上の理由で別フォントを使い分ける可能性はないとはいいきれない

[53] 
[[文字コード]]指定としては、

- [54] 無指定 : かなり多い
- [55] [[Windows-1252]] : 多い
- [56] [[Windows-1251]] : 東側で見られる
- [57] [CODE[x-user-defined]] 


[68] [CITE@fr[<FONT FACE> réputé nuisible]], [TIME[2025-06-16T14:28:19.000Z]], [TIME[1999-02-21T11:01:55.673Z]] <https://web.archive.org/web/19990221105800/http://babel.alis.com:8080/web_ml/html/fontface.html>

[69] >>67 [CODE[<font face>]] は有害、ちゃんとした文字を使えと。最初に例示されている[[ギリシャ文字]]なら確かにそう。
でも [[Unicode]] ですらまともに扱えなかった文字をこの時代に他にどうしろと?
(なお平成11年は [[Unicode]] はかなり頑張れば[[アルファベット]]等は実用になるかな、くらいの時期。)


[6] [CITE@en[1054817 – Icon fonts don't work when "allow pages to choose their own fonts" is unchecked]]
( ([TIME[2014-08-18 02:20:12 +09:00]] 版))
<https://bugzilla.mozilla.org/show_bug.cgi?id=1054817>

[8] [CITE@en[789788 – Not allowing pages to choose their own fonts breaks with icon fonts]]
( ([TIME[2014-08-19 05:33:45 +09:00]] 版))
<https://bugzilla.mozilla.org/show_bug.cgi?id=789788>


[12] [CITE@en[chardetng: A More Compact Character Encoding Detector for the Legacy Web]]
([[Henri Sivonen]], [TIME[2020-06-08T16:23:51.000Z]], [TIME[2021-10-15T03:19:30.133Z]])
<https://hsivonen.fi/chardetng/#fonts>






[70] [CITE[Making Home Pages in Korean - EHC]], [TIME[2021-12-31T02:07:47.000Z]], [TIME[2025-06-17T10:05:43.059Z]] <http://www.kmml.net/ehc/hhpage.html#_two>

>対象となるブラウザやOSを限定するのであれば、<font face=>タグによるフォント指定を利用してハングルフォントと日本語フォントを使い分け、ハングルと日本語の混在したページを作ることも可能です(たとえばWindows NT上のNetscape 3.0x。ただし<meta>タグでcharsetを決め打ちするとうまく行きませんので、外しておかなければなりません)。
> ただし、指定されたフォントがなければせっかくの<font face=>の指定内容は無視されます(とくに異機種、異OSや異言語環境に対する配慮は忘れられがちです)し、ブラウザのバージョンやOSの言語仕様によっても見え方が異なります。と、いうわけで、個人的にはあまりお勧めしません。絶対やるなとまでは言いませんが、やるなら各ブラウザ(できればできる限り複数のOS、複数の言語環境)で一通り表示テストを行い、正常に表示できる環境を明記しておきましょう。



[71] 
まじか! そんなことできたのか! [[シフトJIS]]と[[EUC-KR]]が混在していても適切に 
[CODE[font]] で括っておけばそれぞれの[[フォント]] + [[ANSIコードページ]]でレンダリングされたってこと?




* ウィキ構文での事例

[SEE[ [[神代文字]] ]]


* フォントの実装方法

[76] 
[[フォント]]は現代においては [[OpenType]] ([[TrueType]]) 形式が使われますが、
[[フォント依存符号化]]もほとんどはそうです。

[77] 
[[OpenType]] の [CODE[cmap]] は [[Unicode]] でない[[文字コード]]も扱えますが、
実際上はほとんどが [[Unicode]] です。 [[西暦1990年代]]はそうではないものも使われたものの、
その場合でも [[Unicode]] の [CODE[cmap]] ''も''あるのが普通でした。

[78] 
多くの[[フォント依存符号化]]のデータは [[Windows-1252]] の文字を入れ替えた[[8ビット符号]]の形で存在していますが、
その[[フォント]]は [[Windows-1252]] の文字に相当する [[Unicode]] フォントの形になっています。

[79] 
[[日本]]で使われる[[フォント依存符号化]]も[[シフトJIS]]の文字を入れ替えたものと説明されることが多いですが、
実際には[[シフトJIS]]の文字に相当する [[Unicode]] フォントの形になっているのが普通です。

* 他の文字コードへの変換

[SEE[ [[文字コードの変換]] ]]

[SEE[ [CODE[.map]] ]]

* メモ







