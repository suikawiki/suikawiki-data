head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.22.06.01.11;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/C9D4BBD7B5C4A5DEA1BCA5AFC9D5A4B1.ns/C8F353474D4CC5AAC9D4BBD7B5C4B5A1C7BD.txt>
@
text
@#?SuikaWiki/0.9
[1] [[HTML]] は基本的には [[SGML]] 応用ですが、
歴史的あるいは[[不思議マーク付け]]的にはそうでないものも多く存在しています。

そういう謎機能を集めてみましょう。

やり方・意味的に SGML 的でない、というのは除いて、
構文的に SGML 違反であるものを中心に。

-[2] [[nextid]] 要素型の旧仕様
--例: [SAMP(HTML)[<NEXTID 12>]]
--当初のこの仕様は SGML 的に問題があるので、 [SAMP(HTML)[<NEXTID N=12>]] という書き方に改められました。
-[3] [[isindex]] 要素型の独自拡張
--例: [SAMP(HTML)[<ISINDEX "http://foo.example/index">]]
--標準的な方法として [[href]] 属性, [[action]] 属性が提案されましたが、いずれも [[IETF]]/[[W3C]] の規格では標準化されていません。
-[6] [[img]] 要素型の [[motion]] 属性
--例: [SAMP(HTML)[<IMG motion="image1.png" motion="image2.png">]]
--[CODE(HTML)[motion]] 属性の値の [[URI]] の画像を[[ぱらぱら漫画]]的にアニメーションして表示します。
--SGML では同じ名前の属性を一つの要素に複数指定することが出来ません。
-[7] [[xmp]], [[listing]] 両要素型の終了
--例: [CODE(HTML)[<XMP><html>・・・</html></XMP>]]
--両要素型では、終了タグが完全に出現しない限りその要素は終了しません。ですからこの例で一つの要素です。
--しかし、 SGML では終了タグ開始文字 [CODE(SGML)[</]]
に続けて名前(開始)文字 (ここでは [SAMP(HTML)[h]])
が登場した時点でその要素は終了してしまいます。
ですからこの例は謎の (対応要素のない)
終了タグ [SAMP(HTML)[</XMP>]] が登場する不正な SGML です。
-[4] 要素の重なり
--例: このように<b>要素が<i>重なって</b>います</i>。--この書き方は SGML でも、どの版の HTML でも認めていませんが、
実際にはしばしば使われており、対応している実装も多いです。
--[[W3C]] は [[XHTML1.0]] で従来の HTML との違いとして
(断りながらも) わざわざ挙げているくらいです。
-[8] 任意の位置の [[!DOCTYPE]]
--おかしな HTML [[AuthoringTool]] 
(例: [[FrontPage]] 98) などは、編集前の文書に
[CODE(SGML)[DOCTYPE]] 宣言があると勝手に文書末に移動したり意味の不明な動作をします。
-[9] おかしな注釈宣言
--例: [CODE(HTML)[<!------>]]
--[[注釈宣言]]は HTML の実装ではかなりルーズに扱われてきました。
--HTML 4 は [CODE(SGML)[--]] が対にならない 
(= SGML 的に不正な) 注釈を禁止していますし、 [[XML]] 
は丁度1対しか注釈宣言内に認めていません。

-[5] [[embed]] 要素型の任意の属性
--[CODE(HTML)[embed]] 要素型には好きな属性を自由に使えます。
--SGML 的には、[[文書型宣言]]で使用する属性を適宜宣言しておけば問題ないのですが、 HTML の標準化とは相容れないものです。--[[I-D]] [[draft-ietf-html-cda]] はこの悪臭を廃し [[param]]
要素の使用を提案しています。更にその後の W3C の HTML
では [CODE(HTML)[embed]] 要素を定義せず、 [[object]]
要素と [[param]] 要素の組合せを勧めています。
-[6] HTML 4.0 の16進表記による[[数値文字参照]]
--例: [CODE(HTML)[&#x1234;]]
--HTML 4.0 の勧告時には [[WebSGML]] が成立しておらず、
よって HTML 4.0 の [[SGML宣言]]は旧来の SGML
を参照しています。従って、旧来の SGML に規定のない
16進数表記の数値文字参照は使えないはずですが、 HTML 4
では使えることになっています。
--この問題は HTML 4.01 が Web SGML 応用を参照することで解決しました。
-[10] [[M$]] 独自[[マーク区間]]もどき
--[SAMP(HTML)[<![if [VAR[expr]]]>]]・・・[SAMP(HTML)[<![endif]>]]
--[CODE(HTML)[<!]] と [CODE(HTML)[>]] はそれぞれ [CODE(HTML)[<!--]] と [CODE(HTML)[-->]] と書くことも出来て、それならとりあえず SGML とは矛盾しませんが・・・。
--IE[VAR[n]] なら、とか Office[VAR[n]] なら、というクライアント側条件分岐に使います。
--似たようなものに、サーバー側で処理される [[SSI]] の構文とか ASP の [CODE(ASP)[<%]]・・・[CODE(ASP)[%>]] とか
[[PHP]] の (旧) [CODE(PHP)[<?]]・・・[CODE(PHP)[?>]]
とかもありますが、これらはサーバー側で処理される HTML
の元データでしかないので、取り立てて非 SGML
として非難することもありません。 (SSI や PHP
はあまり SGML としても矛盾しないですが。)
@
