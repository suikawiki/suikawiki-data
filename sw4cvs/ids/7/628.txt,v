head	1.2;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2011.08.07.11.56.14;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.15.12.43.22;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated by (anon)
@
text
@* key (XSLT)
** xslt:key 要素 (XSLT)

[2] [CODE(XSLTe)[[VAR[xslt:]]key]] 要素
(<http://www.w3.org/TR/xslt#element-key>)
は、[[鍵]]を設定するのに使います。

属性:
,[CODE(XSLTa)[[[match]]]],[[パターン]],(必須),鍵対象節
,[CODE(XSLTa)[[[name]]]],[[QName]],(必須),鍵名
,[CODE(XSLTa)[[[use]]]],[[式]],(必須),鍵値取得元

この要素は[[強制空要素]]で、[[最上位要素]]です。

他の最上位要素とは異なり、この要素型では[[輸入優先度]]による取捨選択がありません。
輸入優先度とは全く無関係に、全ての要素が使われます。

[3] [CODE(XSLTa)[match]] 属性及び
[CODE(XSLTa)[use]] 属性で[[変数参照]]を使うのは[[誤り]]です。

[CODE(XSLTa)[use]] 属性は [CODE(XSLTa)[match]]
の式に一致した節それぞれについて、
その節を[[現在節]], その節だけを[[現在節並び]]として評価します。
その結果が鍵名になりますが、節集合ならその構成要素それぞれの[[文字列値]]
(複数になることもある!), それ以外なら
[CODE(XPathf)[[[string]]]] 関数に通した結果が採用されます。

[[#comment]]

** key 関数 (XSLT)

[4] [CODE[[VAR[節集合]] [CODE(XPathf)[key]] ([VAR[[[QName]]]], [VAR[物体]])]]
は、条件に合致する鍵の節を返します。
<http://www.w3.org/TR/xslt#function-key>

第1引数は鍵の名前、第2引数は鍵の値です。
第2引数が節集合以外であれば、
[CODE(XPathf)[[[string]]]] 関数を通した値と鍵の値の一致をみます。
節集合であれば、構成するそれぞれの節の[[文字列値]]についての結果の[[和集合]]となります。

[[#comment]]

** メモ
- [1] ''<xsl:key>を使おう(1)'' <http://www.yuragi.jp/playxslt/p003.asp>
- [5] ''はてなダイアリー - Hatena::agenda'' <http://d.hatena.ne.jp/jintrick/20031004> : 仕様書に挙げられている例なんて簡単に XPath 式で代替できる、もっとまともな例を出せよ!という話。
- [6] ''key関数の考察(XSLT1.0) - agenda 2003-10(上旬) - Personnel'' <http://members.jcom.home.ne.jp/jintrick/Personal/d200310f.html#d4_1> : >>5 ということで key についての考察キター(AA略)
@


1.1
log
@created by (anon)
@
text
@d1 46
a46 1
wnsmhP  <a href="http://vikwoluacgyg.com/">vikwoluacgyg</a>, [url=http://wlzacncpbebh.com/]wlzacncpbebh[/url], [link=http://kohnlwyxears.com/]kohnlwyxears[/link], http://glhmvogpnpkn.com/@

