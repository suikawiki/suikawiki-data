head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.13.02.40.40;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/555249C9E4B9E6B2BD.txt>
@
text
@
[10] [DFN[[RUBYB[URI 符号化] [URI encoding]]]]は 
[[URI参照]]における[[百分率記号]] ([CODE(char)[%]]) 
と2桁の[[十六進数]]の3文字の組による[[オクテット]]の表現方法を指す言葉として使われていました。

[11] 同義語として [Q[[RUBYB[URI 逃避符号化] [URI escape(d) encoding]]]]、
[Q[URI [RUBY[逃避] [エスケープ] [escape]]]]など色々な言葉が使われてきました。
[ABBR[[[URI]]] [統一資源識別子]] の第4次規格である [[RFC 3986]] ([[IETF]]
[[インターネット標準]]) では分かりやすさのために以前の語を廃し、
[DFN[[RUBY[[[百分率符号化]]] [パーセント符号化] [percent‐encoding]]]]という用語を採用しています。

[15]
さとう
([[Mr.Anonymous]] [WEAK[2006-10-30 06:06:43 +00:00]])


[17]
今回ご応募ありがとうございます。
応募につきましては住所・氏名・生年月日・年齢・性別・電話番号を記入して送信して下さい。
ご記入頂いたお客様の個人情報は厳重に管理・保護し、賞品の抽選・発送のみに使用させて頂きます。

住所

氏名

生年月日

年齢

性別

電話番号



厳正な抽選のうえ、発送をもって当選の発表とさせて頂きます。
ご応募ありがとうございました。
([[名無しさん]])


[[#comment]]


* Escape/unescape vs encode/decode

- [3] [CODE(URI)[%[VAR[HH]]]] という表記のことを、 UR[IL] escape という流儀と UR[IL] encode という流儀があります。仕様書にも混在していて、有意な使い分けも認められません。早い話がどっちでもいいということです。

[4] あ、でも、最新の URI の定義である [[RFC 2396]] では整理されていて、 
URI 符号化の意味の encode は必ず [Q[escaped encoding]]
という語で登場します。 [Q[octet encoding]] と対になっています。

- [5] 2396 に「URI encoding」という語がないことからこれを誤りで「URI escape」が正しいとする論もありますけどナンセンスですね。正確を期すなら「URI escape encoding」とフルスペって初めて意味を成す。 URI escape encoding にするという意味の動詞なら「URI escape する」でもいいとは思いますがね。

[16]
あ
([[名無しさん]] [WEAK[2006-11-08 12:18:29 +00:00]])

[[#comment]]


* JavaScript での escape/unescape

- [1] ''Escape'' <http://www.felix.jp/~yugo/js/guide/escape.html>
- [9] [[JavaScript]] ([[ECMAScript]]) ではうっかり URI 規格で規定されていない [CODE[%u[VAR[hhhh]]]] なんてものを使ってしまったためにやや複雑な状況になっています。
- [12] >>9 は完全に Unicode マンセーが仇になりましたね。

[13]
%93%8C%8B%9E%93s%92%86%96%EC%8B%E6%8A%DB%8
([[名無しさん]] [WEAK[2006-01-25 17:15:42 +00:00]])

[14]
%93%8C%8B%9E%93s%92%86%96%EC%8B%E6%8A%DB%8
([[名無しさん]] [WEAK[2006-04-26 14:37:09 +00:00]])

[[#comment]]


* 仕様書から


** RFC 2396 (URI) 2.4. Escape Sequences

> Data must be escaped if it does not have a representation using an
unreserved character; this includes data that does not correspond to
a printable character of the US-ASCII coded character set, or that
corresponds to any US-ASCII character that is disallowed, as explained below.

データは、[[非予約]]文字を使って表現することができない場合には、
escape しなければなりません。これには、
US‐ASCII 符号化文字集合の[[印字可能文字]]に対応しないデータや対応する
US‐ASCII 文字が禁止されているデータを含みます。


*** 2.4.1. Escaped Encoding

> An escaped octet is encoded as a character triplet, consisting of the
percent character "%" followed by the two hexadecimal digits
representing the octet code. For example, "%20" is the escaped
encoding for the US-ASCII space character.

Escape するオクテットは、百分率記号
[CODE(char)[%]] とそれに続くオクテット符号を表現する2つの16進数字で構成される3文字列として符号化されます。
例えば、 [CODE(URI)[%29]] は US‐ASCII
間隔文字の escape した符号化です。

>
- [CODE(ABNF)[[DFN[escaped]] = "%" hex hex]]
- [CODE(ABNF)[[DFN[hex]] = digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f"]]


*** 2.4.2. When to Escape and Unescape

> A URI is always in an "escaped" form, since escaping or unescaping a completed URI might change its semantics.  Normally, the only time escape encodings can safely be made is when the URI is being created from its component parts; each component may have its own set of characters that are reserved, so only the mechanism responsible for generating or interpreting that component can determine whether or not escaping a character will change its semantics. Likewise, a URI must be separated into its components before the escaped characters within those components can be safely decoded.

URI は、常に「escape された」形です。
完全な URI を escape したり unescape したりすると、
その意味が変わってしまうかもしれません。
通常、 escape 符号化を安全に行うことができる唯一の機会は、
URI をその部品部分から作成するときです。
各部品は自身の予約されている文字の集合を持っているかもしれませんから、その部品を生成したり解釈したりするのに責を有する機構だけが文字を escape することでその意味が変わるかどうかを決定できます。
同様に、部品中の escape された文字を安全に復号する前には URI を部品群に分離しなければなりません。

> In some cases, data that could be represented by an unreserved
character may appear escaped; for example, some of the unreserved
"mark" characters are automatically escaped by some systems.  If the
given URI scheme defines a canonicalization algorithm, then
unreserved characters may be unescaped according to that algorithm.
For example, "%7e" is sometimes used instead of "~" in an http URL
path, but the two are equivalent for an http URL.

場合によっては、非予約文字で表現できるデータが escape
されて現れることがあります。例えば、幾つかの非予約「マーク」文字を自動的に escape するシステムがあります。
その URI scheme が正規化算法を定義しているのなら、
非予約文字はその算法に従って escape を解いて構いません。
例えば、 [CODE(URI)[%7e]] は [CODE(URI)[[[http]]]] URL
経路で時々 [CODE(URI)[~]] の代わりに使われますが、
[CODE(URI)[http]] URL では2つは同等です。

> Because the percent "%" character always has the reserved purpose of being the escape indicator, it must be escaped as "%25" in order to be used as data within a URI.  Implementers should be careful not to
escape or unescape the same string more than once, since unescaping
an already unescaped string might lead to misinterpreting a percent
data character as another escaped character, or vice versa in the
case of escaping an already escaped string.

百分率 [CODE(URI)[%]] 文字は escape 指示子として使う目的で常に予約されているので、 URL 中でデータとして使うためには [CODE(URI)[%25]] と escape しなければなりません。
実装者は、同じ文字列を複数回 escape したり解いたりしないように注意を払うべきです。
既に escape を解いた文字列を更に escape 解除すると百分率データ文字を他の escape された文字列を誤解したり、逆に既に escape された文字列を escape してしまったりします。


** RFC 1738 (URL) 2.2 の一部

>
:No corresponding graphic US-ASCII:
URLs are written only with the graphic printable characters of the
US-ASCII coded character set. The octets 80-FF hexadecimal are not
used in US-ASCII, and the octets 00-1F and 7F hexadecimal represent
control characters; these must be encoded.

:対応する図形が US‐ASCII にない:URL は US‐ASCII
符号化文字集合の図形印字可能文字のみによって書きます。
オクテット [CODE[80]]‐[CODE[FF]] (16進)
は US‐ASCII では使っておらず、
オクテット [CODE[00]]‐[CODE[7F]] (16進)
は[[制御文字]]を表現します。
これらは符号化しなければなりません。


** RFC 2396 (URI) 2.4.3. Excluded US-ASCII Characters

> Although they are disallowed within the URI syntax, we include here a
description of those US-ASCII characters that have been excluded and
the reasons for their exclusion.

これらの US‐ASCII 文字は URI 構文では禁止されていますが、
これらの US‐ASCII 文字が除外されていることとその除外の理由を説明するためにここに含めます。

> The control characters in the US-ASCII coded character set are not
used within a URI, both because they are non-printable and because
they are likely to be misinterpreted by some control mechanisms.

US‐ASCII 符号化文字集合の制御文字は URI
中では使いません。これらは非印字可能ですし。
誤解する制御機構もあるでしょうからです。

>
- [CODE(ABNF)[[DFN[control]] = <US-ASCII coded characters 00-1F and 7F hexadecimal>]]

> The space character is excluded because significant spaces may
disappear and insignificant spaces may be introduced when URI are
transcribed or typeset or subjected to the treatment of word-processing programs.  Whitespace is also used to delimit URI in many contexts.

間隔文字は除外されていますが、これは、 URI 
が転記されたり植字されたり文書処理プログラムの処理対象になったりしたときに意味のある間隔が消滅したり、意味のない間隔が URI に加わったりするかもしれないからです。
空白は多くの場面で URI を区切るためにも使われます。

>
- [CODE(ABNF)[[DFN[space]] = <US-ASCII coded character 20 hexadecimal>]]

> The angle-bracket "<" and ">" and double-quote (") characters are
excluded because they are often used as the delimiters around URI in
text documents and protocol fields.  The character "#" is excluded
because it is used to delimit a URI from a fragment identifier in URI
references (Section 4). The percent character "%" is excluded because
it is used for the encoding of escaped characters.

角括弧 [CODE(char)[<]] 及び [CODE(char)[>]]
並びに二重引用符 [CODE(char)["]] は、
文章やプロトコル欄の中においてしばしば URI
を囲む区切子として使われるので除外します。
文字 [CODE(char)[#]] は URI と[[素片識別子]]を [[URI参照]]中で区切るのに使うので除外します。
百分率文字 [CODE(char)[%]] は escape 文字の符号化に使うので除外します。 

>
- [CODE(ABNF)[[DFN[[[delims]]]] = "<" | ">" | "#" | "%" | <">]]

> Other characters are excluded because gateways and other transport
agents are known to sometimes modify such characters, or they are
used as delimiters.

他の文字は、関門や他の転送エージェントが時々これらの文字を修正したり区切子に使ったりすることが知られているので除外します。

>
- [CODE(ABNF)[[DFN[[[unwise]] = "{" | "}" | "|" | "\" | "^" | "[" | "]" | "`"]]]]

> Data corresponding to excluded characters must be escaped in order to
be properly represented within a URI.

除外文字に対応するデータは、 URI 中で適切に表現するためには
escape しなければなりません。


** RFC の部分の License

[[RFCのライセンス]]


* メモ

- [2] [[BNF]] では [CODE(ABNF)[[[escape]]]] とか [CODE(ABNF)[[[escaped]]]] とかと表しています。
- [6] なんにせよ、 URI 符号化は[[シフトJIS]] とか [[UTF-8]] のような[[文字符号化]]とは層が異なることには注意しておいて損はないです。
- [7] まあ、 URI 符号化も「文字」符号化には違いないけど... 言葉遊びは勘弁して。
- [8] >>6-7 URI エスケープ符号化は [[SGML]]/[[XML]] の[[文字参照]]と同じ層に位置すると考えればいいかなぁ。[WEAK[(細かいことをいうと SGML はあくまで文書文字集合中の文字を参照するのに対し、 URI エスケープ符号はオクテットを符号化したものに過ぎないのは重大な差異だけど、この際どうでもいいか。)]]@
