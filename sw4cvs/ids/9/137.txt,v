head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.17.00.44.13;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/BDBCC2ADA5BFA5B0C9D5A4ADCAB8BDF1BCC2B8BDC3CD.txt>
@
text
@
[1] 
>
:[INS[[[WebSGML]]]] K.2.2.4 充足タグ付き文書インスタンス (amply‐tagged document instance):
[[文書型宣言]]へのアクセスを必要としない範囲内のマーク付け最小化を用いている[[文書インスタンス]]。
- 備考1. [[SGML宣言]]が、 [CODE(SGML)[[[DATATAG]] NO]],
[CODE(SGML)[[[RANK]] NO]],
[CODE(SGML)[[[SHORTTAG]] [[ATTRIB]] [[OMITNAME]] NO]],
及び [CODE(SGML)[[[IMPLYDEF]] [[ELEMENT]] NO]]
又は [CODE(SGML)[IMPLYDEF ELEMENT [[ANYOTHER]]]]
のどちらかを指定している場合、文書インスタンスが最小化を用いている限り、
それらは充足タグ付きでなければならない。
SGML 宣言が要求しない場合でも、システムは、処理を起動する際のパラメタなどによって、
インスタンスが充足タグ付きであるかどうかの[[妥当性検証]]を要求する手段を提供することが望ましい。
- 2. 充足タグ付き文書インスタンス中では、 K.3.7 で規定するとおりにデフォルトで宣言された要素型についても、終了タグを省略できる。
--
もっと正確にいうと、充足タグ付き文書インスタンスは、
7.3.1.2 ([[JIS X 4151]] においては、 6.3.1.2)
で規定する三つの条件 a), b) 又は c) のどれかを満たすことによって、
暗黙に宣言された型の要素の終了タグを省略できる。
しかし、条件 c) は、
[CODE(SGML)[IMPLYDEF ELEMENT ANYOTHER]]
が SGML 宣言で指定されていて、
その要素に同じ方のほかの要素が続く場合だけ満たすことができる。
--
次に示す充足タグ付き文書インスタンスは、
[CODE(SGML)[IMPLYDEF ELEMENT ANYOTHER]]
が指定され、 [[DTD宣言]]が一つもない場合におけるこの可能性を例示している。
[PRE(SGML)[
<chapter>
<title>Chapter title</title>
<list>
<item>First item in the list
<item>Second item in the list
</list>
]PRE]
先頭の [CODE(SGML)[item]] の終了タグは、
条件 c) “この要素の後ろに、その内容中には出現を許されない他の要素 (この場合、他の [CODE(SGML)[item]]) が続いている”が成立するので、省略できる。
--
2番目の [CODE(SGML)[item]] の終了タグは、条件 b)
“この要素の後ろに、他の開要素 ([CODE(SGML)[list]]) の終了タグが続いている”が成立するので、省略できる。
--
[CODE(SGML)[chapter]] の終了タグは、条件 a)
“この要素の後ろで、 SGML 文書実体が終了する”が成立するので、省略できる。

[2] [DFN[充足タグ付き文書実現値]]は[[完全タグ付き文書実現値]]と合わせて、
[WEAK[([[文書型定義]]を読んで解釈しない限り)]]
文脈によって解釈が変わってしまう可能性を廃して
[WEAK[(SGML 適合ではないけど)]]
簡易的な構文解析器を作って作業させたい時に都合がいいですね。

@
