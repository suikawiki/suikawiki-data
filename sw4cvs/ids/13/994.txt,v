head	1.4;
access;
symbols
	suika-20100509:1.4
	before-graph-20090923:1.4;
locks; strict;
comment	@# @;
expand	@b@;


1.4
date	2009.02.01.03.30.01;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.12.09.49.17;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.12.09.37.55;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.11.02.52.39;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@updated by (anon)
@
text
@[1] [CITE@@ja-jp[posLeft]] ([TIME[2009-01-10 01:52:41 +09:00]] 版) <http://msdn.microsoft.com/ja-jp/library/cc409907.aspx>

[2] [[WinIE]], [[WebKit]], [[Opera]] が対応しています。 [[Firefox3]] にはありません。

[3] [[WinIE]] は [CODE(DOMa)@@en[[[style]]]] だけですが、
[[WebKit]] は [CODE(DOMm)@@en[[[getComputedStyle]]]] でも、
[[Opera]] は更に [CODE(DOMa)@@en[[[currentStyle]]]] でも定義されています。

[4] 
[CITE@@ja-jp[DHTML ページのパフォーマンス向上]] ([TIME[2009-01-31 21:31:07 +09:00]] 版) <http://msdn.microsoft.com/ja-jp/library/bb264005.aspx>

>CSS Positioning を使用しているときには、コードを高速化するためのテクニックがいくつかあります。要素の位置にアクセスし、設定するとき、大部分の開発者は element.style.left および element.style.top プロパティを使用します。しかし、これには小さな問題があります。left プロパティは、他のすべての CSS プロパティと同様に、文字列として返されます。返された値を使って計算を行いたい場合には、まず文字列から整数に変換を行わなくてはなりません。left および top プロパティのもう 1 つの問題は、その値にプロパティの単位も格納されているということです(10 px や 10 percent など)。その後、計算を行って、値をリセットしなくてはなりません。

>element.style.posLeft += 10
>
このコードの方がはるかに小さく、はるかに高速でもあります。アニメーション効果を作るために位置がつねに更新されるような場合には、速度は特に重要となります。
@


1.3
log
@updated by (anon)
@
text
@d8 9
@


1.2
log
@updated by (anon)
@
text
@d3 5
a7 1
[2] [[WinIE]], [[WebKit]], [[Opera]] が対応しています。 [[Firefox3]] にはありません。@


1.1
log
@created by (anon)
@
text
@d1 3
a3 1
[1] [CITE@@ja-jp[posLeft]] ([TIME[2009-01-10 01:52:41 +09:00]] 版) <http://msdn.microsoft.com/ja-jp/library/cc409907.aspx>@

