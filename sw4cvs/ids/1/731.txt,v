head	1.2;
access;
symbols
	suika-20100509:1.2
	before-graph-20090923:1.2;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2008.11.13.11.27.48;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.12.13.06.39;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated by (anon)
@
text
@PvLO1P  <a href="http://iudutexzmnxo.com/">iudutexzmnxo</a>, [url=http://wrrhlvpxhohn.com/]wrrhlvpxhohn[/url], [link=http://btwzuhxfnuvr.com/]btwzuhxfnuvr[/link], http://wtmufxrgqxbc.com/@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/58534C54.ns/6E756D626572.txt>
@
text
@d1 1
a1 144

[1] [CODE(XSLTe)[[VAR[xslt:]]number]] 要素は、
[[数値]]を与えられた書式の[[文字列]]に変換して[[結果木]]に追加するのに使えます。
<http://www.w3.org/TR/xslt#element-number>

この要素は章番号などの番号付けを極めて強く意識しています。
そのためかなり複雑な変換規則が規定されています。
そんなのはどうでもいいから[[読点]]を挿入するとか簡単な数値の表現変換をしたいだけなら、
[CODE(XSLTa)[number]] 属性と [CODE(XSLTa)[format]]
属性だけで十分です。
[WEAK[でも [[printf]] みたいなことを期待してるならあんまり嬉しくないかもしれません。]]

[2] 属性:
,[CODE(XSLTa)[[[count]]]]	,[[パターン]]	,	,数に入れる節
,[CODE(XSLTa)[[[format]]]]	,{[[文字列]]}	,'1'	,出力書式
,[CODE(XSLTa)[[[from]]]]	,[[パターン]]	,	,数に入れる最初の節
,[CODE(XSLTa)[[[grouping-separator]]]]	,{[[文字]]}	,(なし)	,集団化区切子
,[CODE(XSLTa)[[[grouping-size]]]]	,{数値}	,(なし)	,集団の長さ
,[CODE(XSLTa)[[[lang]]]]	,{[[NMTOKEN]]}	,(システムの言語)	,自然言語
,[CODE(XSLTa)[[[letter-value]]]]	,{[CODE(ABNF)['alphabetic' / 'traditional']]}	,(実装依存)	,番号体系
,[CODE(XSLTa)[[[level]]]]	,[CODE(ABNF)['single' / 'multiple' / 'any']]	,'single'	,数に入れる節の関係
,[CODE(XSLTa)[[[value]]]]	,[[式]]	,	,変換対象の数値

この要素は[[強制空要素]]です。

この要素は[[雛形]]中の禁止されていない任意の位置に挿入できます。

- [8] [CODE(XSLTa)[lang]] 属性, [CODE(XSLTa)[[[xml]]:lang]] 属性と同じだって書いてあるんですけど、それじゃあ [CODE(XSLTa)[xml:lang]] 属性の改訂 ([[CDATA]] 化) に追随するんでしょうかね? どうでしょうかね?

[9]
<a href=http://newbeltso.110mb.com >belt drives</a>
<a href=http://jerseysnewk.110mb.com >larry bird jersey</a>
<a href=http://tightsop.110mb.com >baby tights</a>
([[dorinox]] [dorincu@@yahoo.com])

[[#comment]]


* 変換元の値

[3] [CODE(XSLTa)[value]] 属性が指定されている場合、
この属性値を [[XPath]] 的に評価した結果を暗黙の
[CODE(XPathf)[[[number]]()]] 関数で数値化し、
更に[[丸め]]た値を使います。

[4] そうでない場合、
[CODE(XSLTa)[count]], [CODE(XSLTa)[from]],
[CODE(XSLTa)[level]] 各属性をもとに、
正の数の[[並び]]を次の手順で生成します。

- [CODE(XSLTa)[level]] 属性の既定値は [CODE(XSLT)[single]]
です。
- [CODE(XSLTa)[count]] 属性の既定値は「[[現在節]]と同じ型・同じ[[展開名]] (あれば。) のすべての[[節]]」です。
- [CODE(XSLTa)[from]] 属性の既定値は「最初から」です。

- [CODE(XSLTa)[level=single]] のとき、
== [CODE(XPath)[[[ancestor-or-self]]]] 軸で最初に
[CODE(XSLTa)[count]] のパターンと一致する節を探します。
== その節があれば、これについて、[CODE[([CODE(XSLTa)[count]] のパターンと一致する兄節の数)]]
という (大きさ 1 の) 並びを作ります。
== 該当する節がなければ、 [CODE[()]] (空の並び) を用意します。
- [CODE(XSLTa)[level=multiple]] のとき、
== [CODE(XPath)[(ancestor-or-self::[[node]]())]]
[WEAK[(注: [[文書順]])]] のうち、
[CODE(XSLTa)[count]] のパターンに一致する節それぞれについて、
== [CODE(XSLTa)[count]] のパターンと一致する兄節の数を数え、これを構成要素とする並びを作ります。
- [CODE(XSLTa)[level=any]] のとき、
== [CODE(XPath)[([[preceding]]::node() | ancestor-or-self::node())]]
[WEAK[(注: 文書順, 属性節・名前空間節を含まない)]]
のうち、[CODE(XSLTa)[count]] のパターンと一致する節を数えます。
この値だけを構成要素とする大きさ 1 の並びを作ります。- 以上いずれの [CODE(XSLTa)[level]] においても、
[CODE(XSLTa)[from]] のパターンと一致する直近の祖先節 ([CODE(XSLTa)[level=any]] のときは直近の任意の節) 及びその節より現在節に近い節だけを数に入れます。

[5] 例えば、
[PRE[
<e1>
  <e2/>
</e1>
<e1>
  <e2>
    <e3/>
  </e2>
  <e2>
    <current/>
  </e2>
</e1>
]PRE]

で、 [CODE(XSLT)[<number level="single" count="e2" from="/"/>]]
だと、得られる並びは [CODE[(2)]] です。
[CODE(XSLT)[<number level="single" count="e2" from="e1"/>]]
でも [CODE[(2)]] です。
[CODE(XSLT)[<number level="single" count="current" from="/"/>]]
なら [CODE[(1)]]。

[CODE(XSLT)[<number level="multiple" count="e2" from="/"/>]]
では [CODE[(2)]]。
[CODE(XSLT)[<number level="multiple" count="e1 | e2" from="/"/>]]
とすると [CODE[(2, 2)]]
[CODE(XSLT)[<number level="multiple" count="e1 | e2 | current" from="/"/>]]
とすると [CODE[(2, 2, 1)]]。

[CODE(XSLT)[<number level="any" count="e2" from="/"/>]]
は [CODE[(3)]]。
[CODE(XSLT)[<number level="any" count="e2" from="e1"/>]]
は [CODE[(2)]]。
[CODE(XSLT)[<number level="any" count="e1 | e2" from="/"/>]]
は [CODE[(5)]]。

[[#comment]]


* 書式の適用

[6] 数値の並びから文字列への変換は、

= {字句分解} 書式を、字母文字の列 ([DFN[[[書式字句]]]] (format token)) と非字母文字 ([DFN[分離字句]] (separator token)) の列の並びに分解します。
ここで、[CODE(ABNF)[[DFN[字母文字]] := [[Nd]] / [[Nl]] / [[No]] / [[Lu]] /, [[Ll]] / [[Lt]] / [[Lm]] / [[Lo]]]]
= 書式の最初の構成要素が区切字句であれば、
そのまま出力します。
= [CODE[for [VAR[$i]] := 1〜[VAR[書式字句の数]]]]
== [VAR[$i]] 番目の数値が元データである正数並びにあれば、
その数値を [VAR[$i]] 番目の書式中の書式字句を使って出力します。
== [VAR[$i]] 番目の数値が元データである正数並びになければ、
・・・どうするんでしょう?
== [WEAK[$i != [VAR[書式字句の数]]のとき]]  [VAR[$i]] 番目と [CODE(math)[([VAR[$i]] + 1)]] 番目の間の分離字句をそのまま出力します。
= 書式字句の数より多くの数が元データである正数並びにあれば、
== [CODE[for [VAR[$i]] := ([VAR[書式字句の数]] + 1)〜[VAR[正数の個数]]]]
=== [VAR[書式字句の数]]番目の書式字句 [WEAK[(書式字句が1個もなければ、 [CODE(XSLT)[1]])]] を使って [VAR[$i]] 番目の数を出力します。
=== [VAR[$i != [VAR[正数の個数]]のとき]] [VAR[書式字句の数]]番目の書式字句の直前の書式字句との間にある分離字句 [WEAK[(なければ、 [CODE(XSLT)[.]])]]
をそのまま出力します。
= 書式の最後の構成要素が分離字句であれば、
そのまま出力します。

- [7] [CODE(XSLTa)[grouping-size]] 属性と [CODE(XSLTa)[grouping-separator]] 属性は、共に既定値なしです。両属性が明示されたときのみ意味を持ちます。例えば size=[SAMP[3]], separator=[SAMP[,]] なら、 [SAMP[1000]] が [SAMP[1,000] になります。]]
[[#comment]]


* メモ

[10]
zpynbaqjx klmzc nciprqvj qbsm mjnrvp lnaomck xwnplev
([[itovxd rbkfy]] [nyfpo@@gmail.com])

@

