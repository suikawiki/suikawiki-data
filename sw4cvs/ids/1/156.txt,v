head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.11.14.57.15;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/5375696B6157696B69.ns/CDDFA4B7A4A4B5A1C7BD.ns/31.ns/3233.txt>
@
text
@#?SuikaWiki/0.9
- Subject: access control
- Priority: low
- Status: open
- Category: AccessControl
- Creation-Date: 2003-08-09T00:56:47+00:00

[1] 

[37]  名前空間ごと凍結機能。例えば [SAMP[Wiki//Admin//]] に管理情報を集中させて、それを編集不能にする時に一々凍結するのは面倒だし、管理者以外が管理者が書いたかのようなことを書く虞もある。
(この例で実際にそう運用するかは管理者次第だけどね。)

その場合、個々の WikiPage の凍結指定による上書きを認めるか否かとか、
他の Wiki で実装例がある、凍結するけど
comment は OK、というのも実装してみようかとか検討中。

後者は、基本的に凍結だけどこの WikiForm
は OK, という指定も出来たらいいけど、
実装が複雑に(以下略)。

更には、 SuikaWiki では WikiPlugin が mode を追加するのもありだから、他の
Wiki にある表編集モードの plugin もあり。
そういう mode 単位の編集制御も必要。

そういうのを考えていくと、結局、幾つかの
Wiki で実装されていて、実装されてない
Wiki に対しての要望も高い、編集権管理機能に行き着く。
([[わかば]] [WEAK[2003-04-20 14:14]])

[38]  >>37 の続き。こんな処理モデルはどうだろう。
-処理対象 (Wiki, WikiNS, WikiPage, block*)
--* block は、現時点では WikiForm block。
将来的には [[H2H]] で任意の block。
--属性「制御権」 := 継承 (既定値) / 制御権名-制御権設定データベース
--WikiPlugin 及び wikiconfig から構成
(今の ViewDefinition のように。)
--ハッシュ「モード制御権{モード名}」 := 既定モードから継承 (既定値) / *利用者制御権設定
--既定モード = *利用者制御権設定
--利用者制御権設定 := 利用者名 ":" ('R' / 'W' / 'RW')
以上が権限情報データ構造。複雑に見えるのは Wiki-WikiNS-WikiPage-block という構造と mode が直交しているため。一番重みのある情報が当該 block の当該 mode の指定で、一番重みのない情報が Wiki 全体の全 mode 対象の指定。

これを処理する手順。
=クライアントが要求。利用者名 [CODE[anonymous]] を仮定。
=SuikaWiki は処理対象, mode と利用者名からアクセス権情報を取り出す。
=アクセス権に基づき処理又はエラーを返す。

さて、擬似「ログイン」という概念を導入する。認証は [[Apache]]/[[HTTP]] に任せる。
[WEAK[CGI からは名前しか取れないから、自前でやろうとするのは無茶だ。]]
=クライアントは認証情報つきで要求する。
=サーバーは認証できれば SuikaWiki に要求を CGI で渡す。
=SuikaWiki は処理対象, mode と利用者名からアクセス権情報を取り出す。
=アクセス権に基づき処理又はエラーを返す。

どう? モデル的には単純でしょ?
あとは上手く実装できるかどうかだけど・・・
([[わかば]])
@
