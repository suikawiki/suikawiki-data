head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.13.11.29.33;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/555249A4ABA4E9A5D5A5A1A5A4A5EBCCBEA4D8.txt>
@
text
@[1] [[URI]] (特にそのうちの[[経路]]の部分) 
から[[ファイル名]]に変換したいことがよくありますが、
注意しなければならないことがいくつもあります。
その中の主要なものを次に述べます。

[5] '''相対経路''':
URI の[[経路]]の一部に [CODE(URI)[.]] や [CODE(URI)[..]]
が含まれている場合には、これを解決しなければなりません。
詳しい方法は [[RFC 3986]] に書かれています。
[CODE(URI)[.]] は[[非予約文字]]なので、
[CODE(URI)[.]] だけではなく [CODE(URI)[%2E]]
も等価に扱わなければならないことに注意が必要です。

[2] '''百分率符号化の復号''':
URI では[[百分率符号化]] ([[URI符号化]]) が使えます。
ですから、これを[[復号]]しなければなりません。

[[非予約文字]]は、百分率符号化した表現としていない生の表現が''等価''です。
[WEAK[(例えば [SAMP(URI)[1]] と [SAMP(URI)[%31]] は常に同義です。)]]
[[予約文字]]は、百分率符号化した表現としていない生の表現が必ずしも等価では''ありません''。
生の表現は特別な意味を持つことがあります。
[WEAK[(例えば [SAMP(URI)[/]] は [SAMP(URI)[%2F]] とは''違って''経路の区切り文字と使われるかもしれません。)]]
特別な意味を持つかどうかは、その URI を解釈する人が
[WEAK[(関係する [[URI scheme]] などの仕様と照らし合わせつつ)]]
決めることができます。

[CODE(URI)[[[http]]:]] URI では、
[[経路]]の百分率符号化を復号し、 [CODE(URI)[/]]
を使用するシステムの経路区切り文字 ([[Un|x]] ならそのまま
[CODE(char)[/]], [[Windows]] なら [CODE(char)[\]],
[[Macintosh]] なら [CODE(char)[:]] など) 
に変換したものをファイル名として使うことが多いようです。

ただし、 [SAMP(URI)[%2F]] 
[WEAK[([CODE(char)[/]] を百分率符号化したもの)]]
が元の URI に含まれていると、
そのまま復号すると経路の区切り文字と区別できなくなってしまいます。
安全上や実用上で色々な問題の元になりますから、注意が必要です。
[[Apache]] では [CODE(URI)[%2F]] が含まれていると
[CODE(HTTP)[[[404]]]] (見つかりません) を返すようです。
同様に、 [CODE(char)[:]] や [CODE(char)[\]]
などが元の URI に [WEAK[(直接または百分率符号化されて)]]
含まれている時には注意が必要です。

[3] '''文字の表現''':
URI の百分率符号化を復号したものは、
何らかの[[文字コード]]によって表現された[[オクテット列]]です。
これを使用しているシステムでファイル名に使う文字コードの[[文字列]]
[WEAK[(またはオクテット列)]] に変換しなければなりません。

元の URI でどんな文字コードが使われているのかは、
[[URI scheme]] の規定によります。
特に規定がなければ、 URI を解釈するシステムが決めることになります。

元の URI に不正なオクテットが含まれている場合や解釈の定まらない[[文字]]が含まれている場合などは、
[[誤り]]とするなど何らかの対策が必要です。

[[符号化文字集合]]を変換しただけでは済まないかもしれません。
例えば、大文字・小文字を区別するファイル・システムを使っている場合で、
URI の側が大文字・小文字を区別しないと規定しているなら、
適切に変換しなければなりません。また、 [[HFS Plus]]
のようにファイル・システムの側が修正 [[NFD]]
を使っているなら、それに合わせて[[正規化]]しなければなりません。


[4] '''特殊文字''':
>>5 や >>2 の他にも特別に扱わなければならない文字がファイル・
システムによっては存在しているかもしれません。
[[Un|x]] 系の [SAMP(char)[~]] や
[[MS-DOS]] 系の [SAMP(char)[:]] などにも注意が必要です。
>>5 や >>2 などで既にチェックしていても、
[[文字コード]]の変換の過程で新たにチェックしたはずの特殊文字が出てきているかもしれません。

また、ファイル名をその後どう処理するかによって、
更に別の対策も必要かもしれません。例えば、
[[シェル]]に[[引数]]として渡す場合には特殊文字を適切に[[逃避]]しなければなりません。

[6] '''アクセス権''':
[[鯖]]の設定などに従い、そのファイルへのアクセスが認められるかどうかを決定する必要があります。
認められない場合は、 [[HTTP]] であれば [CODE(HTTP)[[[401]]]] 
(認証が必要です) や [CODE(HTTP)[[[403]]]] (禁止)
を返すことになります。

ファイルの存在を確認するだけのような単純な 
(安全性に関わらないように見える) 処理であっても、
危険の元になるので注意が必要です。
システムによっては、 [SAMP(file)[[[/dev]]]] や [SAMP(file)[[[CON]]]]
のように[[装置]]がファイルとして扱われることがあります。
特定のプログラムに接続された特別なファイルもあるかもしれません。
通常のファイルであっても、 [[FD]] 
や[[ネットワーク]]経由の装置などの反応の遅いものがあると困ったことになるかもしれません。

@
