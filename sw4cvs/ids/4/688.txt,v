head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.13.18.35.25;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/C0A9B8E6CEF3.txt>
@
text
@[1]
制御のための論理的な単位としてデータストリーム中に
現れる[[ビット組合せ]]の列。 control string。 
([[JIS X 0211]]-1994 4.2.25)

仕様書:
[[ISO/IEC 6429]]:1991 5.6

データ列中に出現して、制御目的の論理実体となる。
See also [[区切子制御文字]]

=control-string = cmd-string / char-string
=cmd-string = cmd-opening-delimiter cmd-string terminating-delimiter
=char-string = char-opening-delimiter char-string terminating-delimiter
=cmd-opening-delimiter = APC / DCS / OCS / PM
=char-opening-delimter = SOS
=cmd-string = 1*( %x08-0D / %x20-7E )
=char-string = 1*<OCTET except SOS and ST>
=terminating-delimiter = ST

Command string で [CODE(ABNF)[%x08-0D]] が使えるってのは、
特定の [[C0]] 文字集合に依存してる気がしますがねぇ。この区間は 
[[ISO/IEC 6429//C0文字集合]]と解釈するのがいいんでしょうか?

あ、そもそも、 command string や character string
の中身は制御文字列の外側と同じように[[符号拡張法]]を使って
文字を表現するものなんですかね?

え? 制御文字列を解釈する受信装置に依存ですか? うーむ。

[CODE(ABNF)[char-string]] で [CODE(char)[[[SOS]]]] 
を除いてあるのは、制御文字列は入れ子に出来ないってことでしょう。

[CODE(ABNF)[%x0E-0F / %xA0-FE]] の扱いについては、
[[7ビット符号と8ビット符号]]参照。
[CODE(ABNF)[char-string]] は任意のビット組合せが使えるらしいですが、 
[[GR]] はこの方法で 
[SAMP[[CODE(char)[[[SO]]]][VAR[...]][CODE(char)[[[SI]]]]]] 
にするとして、 [[CR]] はどうしたらいいんでしょう?
[CODE(char)[[[ESC]] [VAR[[[Fe]]]]]] ですか...?

[[#comment]]

*制御列と制御シーケンス

[[JIS X 0211]]‐1994 の訳語にあわせて、 control sequence
→[[制御シーケンス]], control string →[[制御列]]に直しました。

* メモ@
