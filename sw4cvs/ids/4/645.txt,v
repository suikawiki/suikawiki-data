head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.13.18.08.07;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/C5BAB2C3CDD7C1C7.txt>
@
text
@#?SuikaWiki/0.9

[1] 
> 
:添加要素 (inclusions):
[[適用モデル]]が許していなくても、[[要素]]又はその[[部分要素]]の[[内容]]中のどこにでも許されている要素。 ([[JIS X 4151]]‐1992 3. (185))


[2] 例えば、[[内容モデル]]が [SAMP(SGML)[(foo|bar) +(baz)]] だと、本来 [CODE(SGML)[baz]] 要素は使えないはずなのですが、添加要素として敢えて示されているので、使えることになります。 [WEAK[この例では普通に内容モデルに加えるのとさして変わりませんが、内容モデルがより複雑な場合や子要素の内容との絡みによって、添加要素の仕組みがあると便利な場面がままあります。ちなみに [[XML]] には添加要素の仕組みはありません。内容モデル定義の便利さよりも[[妥当性検証]]の容易さを優先させた結果です。]]

[3] [[WebSGML]] では、名前の代わりに [CODE(SGML)[#[[ALL]]]] (全要素型) や [CODE(SGML)[#[[IMPLICIT]]]] (暗黙宣言要素型) を使用できます。いずれも、 [CODE(SGML)[([VAR[e1]] | [VAR[e2]] |...| [VAR[e[VAR[n]]]])*]] と対象要素型を並べたのと同じ意味になります。 (K.4.11 参照。)

[4] 添加要素に含まれていても、[[除外要素]]になっていれば、そちらが優先されて結局使えません。

[5]
添加要素はその周辺の[[空白]]の扱いが他の要素と異なることがあります。
詳しくは [[SGML//空白]]を参照。


@
