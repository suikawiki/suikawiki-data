head	1.1;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2008.11.11.07.31.00;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/48545450B1FEC5FA.txt>
@
text
@*RFC 2616 6 Response

After receiving and interpreting a request message, a server responds
with an HTTP response message.

要求メッセージを得て解釈した後、サーバーは HTTP
応答メッセージで応答します。

       Response      = Status-Line               ; Section 6.1
                       *(( general-header        ; Section 4.5
                        | response-header        ; Section 6.2
                        | entity-header ) CRLF)  ; Section 7.1
                       CRLF
                       [ message-body ]          ; Section 7.2

**6.1 Status-Line

The first line of a Response message is the Status-Line, consisting
of the protocol version followed by a numeric status code and its
associated textual phrase, with each element separated by SP
characters. No CR or LF is allowed except in the final CRLF sequence.

Response メッセージの最初の行は Status-Line
で、プロトコルの版とそれに続けて数値状態符号,
それに係る文言<!-- 良訳募集 -->を、各要素 SP
で区切って構成します。最後の CRLF 列以外で CR や LF
は認められません。

       Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

***6.1.1 Status Code and Reason Phrase 状態符号と理由句

The Status-Code element is a 3-digit integer result code of the
attempt to understand and satisfy the request. These codes are fully
defined in section 10. The Reason-Phrase is intended to give a short
textual description of the Status-Code. The Status-Code is intended
for use by automata and the Reason-Phrase is intended for the human
user. The client is not required to examine or display the 
Reason-Phrase.

Status-Code 要素は、要求を理解・満足しようとした結果の
3桁整数の符号です。この符号は10章で完全に定義します。
Reason-Phrase は Status-Code の短い文の説明を書き入れるものです。
Status-Code は自動装置が利用し、 Reason-Phrase
は人間利用者が利用することを想定しています。顧客は
Reason-Phrase を検査したり表示したりする必要はありません。

The first digit of the Status-Code defines the class of response. The
last two digits do not have any categorization role. There are 5
values for the first digit:

Status-Code の最初の数字は応答の級を表します。下2桁は分類役を
受け持っていません。最初の数字には5つの値があります。

- 1xx: Informational - Request received, continuing process
- 2xx: Success - The action was successfully received, understood, and accepted
- 3xx: Redirection - Further action must be taken in order to complete the request
- 4xx: Client Error - The request contains bad syntax or cannot be fulfilled
- 5xx: Server Error - The server failed to fulfill an apparently valid request

:1xx:参考 — 要求は受け取られ、処理続行中
:2xx:成功 — 行動は成功して受け取られ、理解され、認められました
:3xx:あっち向け<!-- 訳語きぼんぬ --> — 要求を完了するには更なる行動が必要
:4xx:顧客誤り — 要求の構文が悪いか満ち足りていません
:5xx:サーバー誤り — サーバーは明らかに妥当な応答を用意するのに失敗しました

The individual values of the numeric status codes defined for
HTTP/1.1, and an example set of corresponding Reason-Phrase's, are
presented below. The reason phrases listed here are only
recommendations -- they MAY be replaced by local equivalents without
affecting the protocol.

HTTP/1.1 に定義されている数値状態符号の個々の値と対応する
Reason-Phrase の例の集合を次に示します。ここに示した理由句は
推奨に過ぎません。プロトコルに影響すること無しに地方の同等のものに
置き換えて'''構いません'''。

      Status-Code    =
            "100"  ; Section 10.1.1: Continue
          | "101"  ; Section 10.1.2: Switching Protocols
          | "200"  ; Section 10.2.1: OK
          | "201"  ; Section 10.2.2: Created
          | "202"  ; Section 10.2.3: Accepted
          | "203"  ; Section 10.2.4: Non-Authoritative Information
          | "204"  ; Section 10.2.5: No Content
          | "205"  ; Section 10.2.6: Reset Content
          | "206"  ; Section 10.2.7: Partial Content
          | "300"  ; Section 10.3.1: Multiple Choices
          | "301"  ; Section 10.3.2: Moved Permanently
          | "302"  ; Section 10.3.3: Found
          | "303"  ; Section 10.3.4: See Other
          | "304"  ; Section 10.3.5: Not Modified
          | "305"  ; Section 10.3.6: Use Proxy
          | "307"  ; Section 10.3.8: Temporary Redirect
          | "400"  ; Section 10.4.1: Bad Request
          | "401"  ; Section 10.4.2: Unauthorized
          | "402"  ; Section 10.4.3: Payment Required
          | "403"  ; Section 10.4.4: Forbidden
          | "404"  ; Section 10.4.5: Not Found
          | "405"  ; Section 10.4.6: Method Not Allowed
          | "406"  ; Section 10.4.7: Not Acceptable
          | "407"  ; Section 10.4.8: Proxy Authentication Required
          | "408"  ; Section 10.4.9: Request Time-out
          | "409"  ; Section 10.4.10: Conflict
          | "410"  ; Section 10.4.11: Gone
          | "411"  ; Section 10.4.12: Length Required
          | "412"  ; Section 10.4.13: Precondition Failed
          | "413"  ; Section 10.4.14: Request Entity Too Large
          | "414"  ; Section 10.4.15: Request-URI Too Large
          | "415"  ; Section 10.4.16: Unsupported Media Type
          | "416"  ; Section 10.4.17: Requested range not satisfiable
          | "417"  ; Section 10.4.18: Expectation Failed
          | "500"  ; Section 10.5.1: Internal Server Error
          | "501"  ; Section 10.5.2: Not Implemented
          | "502"  ; Section 10.5.3: Bad Gateway
          | "503"  ; Section 10.5.4: Service Unavailable
          | "504"  ; Section 10.5.5: Gateway Time-out
          | "505"  ; Section 10.5.6: HTTP Version not supported
          | extension-code

      extension-code = 3DIGIT
      Reason-Phrase  = *<TEXT, excluding CR, LF>

   HTTP status codes are extensible. HTTP applications are not required
   to understand the meaning of all registered status codes, though such
   understanding is obviously desirable. However, applications MUST
   understand the class of any status code, as indicated by the first
   digit, and treat any unrecognized response as being equivalent to the
   x00 status code of that class, with the exception that an
   unrecognized response MUST NOT be cached. For example, if an
   unrecognized status code of 431 is received by the client, it can
   safely assume that there was something wrong with its request and
   treat the response as if it had received a 400 status code. In such
   cases, user agents SHOULD present to the user the entity returned
   with the response, since that entity is likely to include 
 human-readable information which will explain the unusual status.

HTTP 状態符号は拡張可能です。 HTTP 応用は登録されている全ての状態符号を
理解する必要はありません。理解出来る方が明らかに望ましいですけどね。
しかし、応用は状態符号の級, つまり最初の数字は理解出来'''なければなりません'''。
そして認識出来ない応答はその級の x00 の応答符号と同等のものとして
扱わ'''なければなりません'''。例外として、認識出来ない応答は
キャッシュしては'''なりません'''。例えば、認識出来ない状態符号
431 を顧客が受け取った場合、要求の何かがおかしいと仮定出来、
400 の状態符号を受け取ったものとしてその応答を処理出来ます。
このような場合、利用者代理者は利用者に応答で返された実態を
提示する'''べきです'''。その実体にはその普通でない状態を説明する
人間可読情報が入っているでしょう。

*License

[[RFCのライセンス]]
- [1] >>0 未知は [CODE(HTTP)[[VAR[n]]00]] とみなすとなると、 [CODE(HTTP)[3[VAR[nn]]]] はみんな [CODE(HTTP)[[[300]] Multiple Choices]] になっちゃいますけど、いいんですかね?
- [2] See also [CODE(WikiPage)[[[状態符号]]]]
- [3] >>1 いいんです。 [CODE(WikiPage)[[[300]]]] 参照。
@
