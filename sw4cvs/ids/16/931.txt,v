head	1.2;
access;
symbols;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2011.01.08.14.08.23;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.08.11.50.24;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated by (anon)
@
text
@[1] [CITE[ユビキタス環境に適した宛先記述性の高い間接型通信の実現]]を読んだメモ。

- 背景
  - ユビキタス環境
  - 現状の通信モデルの問題
    - 宛先の柔軟性が低い
      - IP アドレス、ホスト名、ポート番号
        - サービスとアドレスの対応の把握が困難
    - 通信が直接的
      - 現在はユニキャストが一般的
      - ユビキタス環境は頻繁に変化が起こる
        - 同じ or 類似のサービスを提供する機器の出入り
        -> 機器ではなく、サービス自体に対して通信する通信モデルが必要
- 本研究の提案するサービスモデル
  - サービス自体が宛先を柔軟に指定できる
    - 宛先は特徴を表す複数の属性で構成される
  - その宛先と実際の機器のアドレスを対応付けることができる
    - 通信ミドルウェアに登録されたサービスの宛先に対してメッセージを送受信する (間接型)
      - 通信相手の機器の変化にも動的に対応
- 通信ミドルウェア SBD (Service Bugger Distribution)
  - 単純性: 文字列の配列を宛先とする
  - 動的な環境の変化への対応: 送信されたメッセージを一時的にミドルウェア内で保持
  - 管理の容易さ: 動的にネットワークを構築し、機器の増減に動的に適応
  - 効率性: 宛先を DHT で管理
  - 間接型通信のため、遅延やスループットを重視するアプリケーションには不適切
- 宛先記述性
  - 高い: 宛先がサービスの特徴を表す複数の属性で構成されること
  - サービスを柔軟かつ直感的に指定できる
  - 機器の IP アドレスが変更されても意識しなくて済む
- 間接型通信
  - 機器のアドレスではなく、中間的な宛先にメッセージを送信する
  - 宛先に当たるサービスの1つが利用できなくなっても、同じ宛先の別サービスに配送できる
- 宛先の構造
  - 配列: 単純
  - タプル: 柔軟、複雑
  - XML: 柔軟、検証可能、複雑
  - 木: 検索効率、現実世界が木構造でない場合
- 宛先の名前解決
  - 宛先 -> 機器の対応の管理
  - 効率のため、複数の機器で分割して管理する
    - 宛先の情報の一部を使う: 宛先に必須属性が必要になる
    - ハッシュ関数: 宛先の記述性が失われる <- ?
- 宛先の管理
  - 集中管理: 低スケーラビリティ、特別な機器
  - インターネットルータ型: 高スケーラビリティ、要整合性維持、特別な機器
    - ルータは通常の機器とは異なる
  - アプリケーションルータ型: 高スケーラビリティ、耐故障性、特別な機器なし、複雑、高い処理能力
    - 通常の機器がルータの役割も担う
- メッセージの配送
  - フォワーディング: 低遅延、低耐故障性 (ミドルウェア内でメッセージを保持できない)
    - 宛先に対応する機器を決定し、転送する
  - 共有空間: 耐故障性、新サービス追加時に再送不要、高遅延

* 
ユビキタス環境に適した宛先記述性の高い間接型通信の実現

- 環境
  - ユビキタスネットワーク
- 目的
  - 機器間通信
  - サービス移動性、簡易の容易性
- 名前
  - 文字列の配列
- 経路制御
  - 「間接型通信」
  - 宛先から分散ハッシュ表により「中間ノード」を決定
  - 中間ノードへ/からデータを転送

@


1.1
log
@created by (anon)
@
text
@d53 16
@

