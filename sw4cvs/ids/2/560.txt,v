head	1.2;
access;
symbols
	suika-20100509:1.1
	before-graph-20090923:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2014.02.27.15.15.25;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.12.20.46.27;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated by (anon)
@
text
@
'''HTTP Remote Variant Selection Algorithm -- RVSA/1.0 [INS[HTTP 遠隔変種選択算法 —— RVSA/1.0]]'''
- Network Working Group                                        
- Request for Comments: 2296                                          
- Category: Experimental 
- K. Holtman
- TUE
- A. Mutz
- Hewlett-Packard
- March 1998


* Status of this Memo

> This memo defines an Experimental Protocol for the Internet
community.  It does not specify an Internet standard of any kind.
Discussion and suggestions for improvement are requested.
Distribution of this memo is unlimited.


* Copyright Notice

> Copyright (C) The Internet Society (1998).  All Rights Reserved.


* ABSTRACT

> HTTP allows web site authors to put multiple versions of the same
information under a single URL.  Transparent content negotiation is a
mechanism for automatically selecting the best version when the URL
is accessed.  A remote variant selection algorithm can be used to
speed up the transparent negotiation process. This document defines
the remote variant selection algorithm with the version number 1.0.

HTTP は、ウェブ・サイトの著者が同じ情報の複数の版を一つの URL
の元に置くことを認めています。透過内容折衝はその URL 
に接続したときに最善の版を自動的に選択するための機構です。
遠隔変種選択算法は透過折衝過程を高速化するために使うことができます。
この文書は版番号 1.0 の遠隔変種選択算法を定義します。


* TABLE OF CONTENTS

= 1  Introduction...............................................2
= 2  Terminology and notation...................................2
= 3  The remote variant selection algorithm.....................2
== 3.1 Input....................................................2
== 3.2 Output...................................................3
== 3.3 Computing overall quality values.........................3
== 3.4 Definite and speculative quality values..................5
== 3.5 Determining the result...................................6
= 4  Use of the algorithm.......................................7
== 4.1 Using quality factors to rank preferences................7
== 4.2 Construction of short requests...........................8
=== 4.2.1 Collapsing Accept- header elements.....................8
=== 4.2.2 Omitting Accept- headers...............................9
=== 4.2.3 Dynamically lengthening requests.......................9
== 4.3 Differences between the local and the remote algorithm..10
=== 4.3.1 Avoiding major differences............................11
=== 4.3.2 Working around minor differences......................11
= 5  Security and privacy considerations.......................11
= 6  Acknowledgments...........................................12
= 7  References................................................12
= 8  Authors' Addresses........................................12
= 9  Full Copyright Statement..................................13


* 1  Introduction

> HTTP allows web site authors to put multiple versions (variants) of
the same information under a single URL.  Transparent content
negotiation [2] is a mechanism for automatically selecting the best
variant when the URL is accessed.  A remote variant selection
algorithm can be used by a HTTP server to choose a best variant on
behalf of a negotiating user agent.  The use of a remote algorithm
can speed up the transparent negotiation process by eliminating a
request-response round trip.

HTTP は、著者に同じ情報の複数の版 (変種) を単一の URL
のもとに置くことを認めています。[[透過内容折衝]]はその URL
に接続した時に最善の変種を自動的に選択するための機構です。
遠隔変種選択算法は HTTP サーバーが折衝利用者エージェントに代わって最善の変種を選ぶために使用することができます。
遠隔算法を使うことによって要求‐応答の往復を省き、透過折衝過程を高速化できます。

> This document defines the remote variant selection algorithm with the
version number 1.0.  The algorithm computes whether the Accept-
headers in the request contain sufficient information to allow a
choice, and if so, which variant must be chosen.

この文書は版番号 1.0 の遠隔変種選択算法を定義します。
この算法は要求の [[Accept‐かしら]]が選ぶために十分な情報を含んでいるか、
含んでいるならどの変種が選ばれなければならないかを計算します。


* 2  Terminology and notation

> This specification uses the terminology and notation of the HTTP
transparent content negotiation specification [2].

この仕様書は、 HTTP 透過内容折衝仕様書 ([[RFC2295]])
の用語と記法を使います。


* 3  The remote variant selection algorithm

> This section defines the remote variant selection algorithm with the
version number 1.0.  To implement this definition, a server MAY run
any algorithm which gives equal results.

この節では、版番号 1.0 の遠隔変種選択算法を定義します。
サーバーは、この定義を実装するために、同等の結果を与える任意の算法を走らせて'''構いません'''。

> Note: According to [2], servers are always free to return a list
response instead of running a remote algorithm.  Therefore,
whenever a server may run a remote algorithm, it may also run a
partial implementation of the algorithm, provided that the partial
implementation always returns List_response when it cannot compute the real result.

注意 : RFC 2295 によれば、サーバーは常に自由に遠隔算法を走らせる代わりに[[目録応答]]を返せます。
従って、サーバーが遠隔算法を走らせてもよかろうがよかるまいが、
真の結果が計算できない時に [CODE(conneg)[List_response]] 
を常に返すこの算法の部分実装を走らせても構いません。


** 3.1 Input

> The algorithm is always run for a particular request on a
particular transparently negotiable resource.  It takes the
following information as input.

この算法は常に特定の[[透過折衝可能資源]]についての特定の[[要求]]に関して走らせます。
この算法は次の情報を入力として取ります。

>
- 1. The variant list of the resource, as present in the Alternates
header of the resource.
- 2. (Partial) Information about capabilities and preferences of the
user agent for this particular request, as given in the Accept-
headers of the request.

- 応答の [CODE(HTTP)[[[Alternates]]]] 頭として示す資源の[[変種目録]]
- 要求の [[Accept‐頭群]]で与えられた、この特定の要求についての[[利用者エージェント]]の能力と好みについての (部分的) 情報

> If a fallback variant description

Fallback [[変種記述]]

>
- {"fallback.html"}

> is present in the Alternates header, the algorithm MUST interpret it
as the variant description

が [CODE(HTTP)[Alternates]] 頭に示されている時は、この算法では変種記述

>
- {"fallback.html" 0.000001}

として解釈しなければ'''なりません'''。

> The extremely low source quality value ensures that the fallback
variant only gets chosen if all other options are exhausted.

極めて低い[[原典品質]]値とすることによって、他のすべての選択肢を使い果たしたときだけ
fallback 変種が選ばれるようにします。


** 3.2 Output

> As its output, the remote variant selection algorithm and will yield
the appropriate action to be performed.  There are two possibilities:

遠隔変種選択算法は出力として取るべき適切な動作を与えます。
これは2つの可能性があります。

>
:Choice_response:
The Accept- headers contain sufficient information to make a
choice on behalf of the user agent possible, and the best
variant MAY be returned in a choice response.
:List_response:
The Accept- headers do not contain sufficient information to
make a choice on behalf of the user agent possible.  A list
response MUST be returned, allowing the user agent to make the choice itself.

:[CODE(HTTP)[Chouice_response]]:Accept‐ 頭群は利用者エージェントの代わりに選ぶのに十分な情報を含んでおり、
最善の変種を[[選択応答]]で返しても'''構いません'''。
:[CODE(HTTP)[List_response]]:Accept‐ 頭群は利用者エージェントの代わりに選ぶのに十分な情報を含んでいません。
利用者エージェントが自身で選ぶことができるように目録応答を返さなければ'''なりません'''。


** 3.3 Computing overall quality values

> As a first step in the remote variant selection algorithm, the
overall qualities of the individual variants in the list are computed.

遠隔変種選択算法の最初の手順として、目録中の個々の変種の[[全体品質]]を計算します。

> The overall quality Q of a variant is the value

変種の全体品質 [VAR[Q]] は、値

>
- Q = round5( qs * qt * qc * ql * qf )

> where round5 is a function which rounds a floating point value to 5
decimal places after the point, and where the factors qs, qt, qc, ql,
and qf are determined as follows.

で、ここで [CODE[round5]] は浮動小数点値を小数点以下5桁までに丸める関数で、
因子 [VAR[qs]], [VAR[qt]], [VAR[qc]], [VAR[ql]], [VAR[qf]]
は次のように決定します。

> qs Is the source quality factor in the variant description.

:[VAR[qs]]:[[変種記述]]中の[[原典品質]]因子。

> qt The media type quality factor is 1 if there is no type
attribute in the variant description, or if there is no Accept
header in the request.  Otherwise, it is the quality assigned
by the Accept header to the media type in the type attribute.

:[VAR[qt]]:変種記述に型属性がないか、要求中に [CODE(HTTP)[[[Accept]]]]
頭がなければ[[媒体型]]品質因子は [CODE[1]]。
そうでなければ、型品質因子は型属性中の媒体型に [CODE(HTTP)[Accept]]
頭で割当てられた品質。

> Note: If a type is matched by none of the elements of an
Accept header, the Accept header assigns the quality factor 0 to that type.

注意 : 型が [CODE(HTTP)[Accept]] 頭の要素のどれにも一致しなければ、
[CODE(HTTP)[Accept]] 頭は品質因子 [CODE[0]]
をその型に割当てています。

> qc The charset quality factor is 1 if there is no charset
attribute in the variant description, or if there is no
Accept-Charset header in the request.  Otherwise, the charset
quality factor is the quality assigned by the Accept-Charset
header to the charset in the charset attribute.

:[VAR[qc]]:変種記述に charset 属性がないか、要求中に [CODE(HTTP)[[[Accept-Charset]]]]
頭がなければ [[charset]] 品質因子は [CODE[1]]。
そうでなければ、 charset 品質因子は charset 属性中の媒体型に [CODE(HTTP)[Accept-Charset]]
頭で割当てられた品質。

> ql The language quality factor is 1 if there is no language
attribute in the variant description, or if there is no
Accept-Language header in the request.  Otherwise, the language
quality factor is the highest quality factor assigned by the
Accept-Language header to any one of the languages listed in
the language attribute.

:[VAR[ql]]:変種記述に言語属性がないか、要求中に [CODE(HTTP)[[[Accept-Language]]]]
頭がなければ[[言語]]品質因子は [CODE[1]]。
そうでなければ、言語品質因子は言語属性中に列挙された言語に [CODE(HTTP)[Accept-Language]]
頭で割当てられた最高の品質因子。

> qf The features quality factor is 1 if there is no features
attribute in the variant description, or if there is no
Accept-Features header in the request.  Otherwise, it is the
quality degradation factor for the features attribute, see section 6.4 of [2].

:[VAR[qs]]:変種記述に特徴属性がないか、要求中に [CODE(HTTP)[[[Accept-Features]]]]
頭がなければ[[特徴]]品質因子は [CODE[1]]。
そうでなければ、特徴品質因子は特徴属性の[[品質減衰]]因子。
RFC 2295 の6.4節参照。

> As an example, if a variant list contains the variant description

例として、変種目録が変種記述

>
- {"paper.html.en" 0.7 {type text/html} {language fr}}

> and if the request contains the Accept- headers

を含むとして、要求が Accept‐ 頭群

>
[PRE[
     Accept: text/html:q=1.0, */*:q=0.8
     Accept-Language: en;q=1.0, fr;q=0.5
]PRE]
> the remote variant selection algorithm will compute an overall
quality for the variant as follows:

を含んでいれば、遠隔変種選択算法はこの変種の全体品質を次のように計算します。

>
[PRE[
     {"paper.html.fr" 0.7 {type text/html} {language fr}}
                       |           |                 |
                       |           |                 |
                       V           V                 V
             round5 ( 0.7   *     1.0        *      0.5 ) = 0.35000
]PRE]

> With the above Accept- headers, the complete variant list

前述の Accept‐ 頭群で、完全な変種目録

>
[PRE[
     {"paper.html.en" 0.9 {type text/html} {language en}},
     {"paper.html.fr" 0.7 {type text/html} {language fr}},
     {"paper.ps.en"   1.0 {type application/postscript} {language en}}
]PRE]
> would yield the following computations:

は次の計算になります。

>
[PRE[
            round5 ( qs  * qt  * qc  * ql  * qf  ) =   Q
                     ---   ---   ---   ---   ---     -------
      paper.html.en: 0.9 * 1.0 * 1.0 * 1.0 * 1.0   = 0.90000
      paper.html.fr: 0.7 * 1.0 * 1.0 * 0.5 * 1.0   = 0.35000
      paper.ps.en:   1.0 * 0.8 * 1.0 * 1.0 * 1.0   = 0.80000
]PRE]


** 3.4 Definite and speculative quality values

> A computed overall quality value can be either definite or
speculative.  An overall quality value is definite if it was computed
without using any wildcard characters '*' in the Accept- headers, and
without the need to use the absence of a particular Accept- header.
An overall quality value is speculative otherwise.

計算した全体品質値は決定的にも推測的にもなります。
全体品質値を Accept‐ 頭群の鬼札文字 [CODE(HTTP)[*]]
を使わずに、また特定の Accept‐ 頭の不存在を使用する必要がなく計算できたなら決定的です。
それ以外の場合は全体品質値は推測的です。

> As an example, in the previous section, the quality values of
paper.html.en and paper.html.fr are definite, and the quality value
of paper.ps.en is speculative because the type application/postscript
was matched to the range */*.

例として、前の状況で、 [CODE(URI)[paper.html.en]]
と [CODE(URI)[paper.html.fr]] の品質値は決定的で、
[CODE(URI)[paper.ps.en]] の品質値は型 [CODE(MIME)[[[application/postscript]]]]
が範囲 [CODE(HTTP)[[[*/*]]]] と一致したので推測的です。

> Definiteness can be defined more formally as follows.  An overall
quality value Q is definite if the same quality value Q can be
computed after the request message is changed in the following way:

決定的性は次のようにしてより形式的に定義できます。
全体品質値 [VAR[Q]] は要求メッセージを次の方法で変更してから同じ品質値
[VAR[Q]] を計算できれば決定的です。

>
- 1. If an Accept, Accept-Charset, Accept-Language, or
Accept-Features header is missing from the request, add this
header with an empty field.
- 2. Delete any media ranges containing a wildcard character '*'
from the Accept header.  Delete any wildcard '*' from the
Accept-Charset, Accept-Language, and Accept-Features headers.

[CODE(HTTP)[Accept]] 頭, [CODE(HTTP)[Accept-Charset]] 頭,
[CODE(HTTP)[Accept-Langauge]] 頭または [CODE(HTTP)[Accept-Features]] 頭が要求から欠けていたら、
これを空欄で追加する。
- 鬼札文字 [CODE(HTTP)[*]] を含んだ媒体範囲を [CODE(HTTP)[Accept]]
頭から削除する。鬼札 [CODE(HTTP)[*]] を
[CODE(HTTP)[Accept-Charset]] 頭,
[CODE(HTTP)[Accept-Langauge]] 頭および [CODE(HTTP)[Accept-Features]] 頭から削除する。

> As another example, the overall quality factor for the variant

他の例として、変種

>
- {"blah.html" 1 {language en-gb} {features blebber [x y]}}

> is 1 and definite with the Accept- headers

の全体品質因子は Accept‐ 頭群

>
- Accept-Language: en-gb, fr
- Accept-Features: blebber, x, !y, *

> and

および

>
- Accept-Language: en, fr
- Accept-Features: blebber, x, *

について [CODE[1]] で、決定的です。

> The overall quality factor is still 1, but speculative, with the Accept- headers

全体品質因子は Accept‐ 頭群

>
- Accept-language: en-gb, fr
- Accept-Features: blebber, !y, *

> and

および

>
- Accept-Language: fr, *
- Accept-Features: blebber, x, !y, *

でも依然 [CODE[1]] ですが、推測的です。


** 3.5 Determining the result

> The best variant, as determined by the remote variant selection
algorithm, is the one variant with the highest overall quality value,
or, if there are multiple variants which share the highest overall
quality, the first variant in the list with this value.

遠隔変種選択算法で決定する最善の変種は、
最高の全体品質値の変種か、最高の全体品質の変種が複数ある場合には、その値を持つ目録中で最初の変種です。

> The end result of the remote variant selection algorithm is
Choice_response if all of the following conditions are met

次のすべての状況に該当するなら、遠隔変種選択算法の最終結果は
[CODE[Choice_response]] です。

>
- a. the overall quality value of the best variant is greater than 0
- b. the overall quality value of the best variant is a definite quality value
- c. the variant resource is a neighbor of the negotiable resource.  This last condition exists to ensure that a
security-related restriction on the generation of choice
responses is met, see sections 10.2 and 14.2 of [2].

- 最善の変種の全体品質値が [CODE[0] より大きい]]
- 最善の変種の全体品質値が決定的品質値である
- その変種資源は折衝可能資源の隣接である。この最後の条件は選択応答の生成における安全に関する制限であって、
RFC 2295 の10.2節と14.2節を参照されたい。

> In all other cases, the end result is List_response.

他のすべての場合は、最終結果は [CODE[List_response]] です。

> The requirement for definiteness above affects the interpretation of
Accept- headers in a dramatic way.  For example, it causes the remote
algorithm to interpret the header

上述の決定的性の用件は劇的な形で Accept‐ 頭群の解釈に影響します。
例えば、遠隔算法が頭

>
- Accept: image/gif;q=0.9, */*;q=1.0

> as

を

> `I accept image/gif with a quality of 0.9, and assign quality
factors up to 1.0 to other media types.  If this information is
insufficient to make a choice on my behalf, do not make a choice
but send the list of variants'.

「私は [CODE(MIME)[[[image/gif]]]] を品質 [CODE(HTTP)[0.9]]
で受け入れまして、他の媒体型には最大 [CODE(HTTP)[1.0]]
の品質因子を割当てます。この情報が私の代わりに選ぶのに不十分であれば、
選ばないで変種の目録を送ってください。」

と解釈させることになります。

> Without the requirement, the interpretation would have been

この要件がなければ、解釈は

> `I accept image/gif with a quality of 0.9, and all other media
types with a quality of 1.0'.

「私は [CODE(MIME)[image/gif]] を品質 [CODE(HTTP)[0.9]]
で受け入れ、他のすべての媒体型を品質 [CODE(HTTP)[1.0]] で受け入れます。」

となっていたでしょう。


* 4  Use of the algorithm

> This section discusses how user agents can use the remote algorithm
in an optimal way.  This section is not normative, it is included for
informational purposes only.

この章では、利用者エージェントがどうやって最適な条件で遠隔算法を利用するかを取り上げます。
この章は規定ではなく、参考目的でのみ含めています。


** 4.1 Using quality factors to rank preferences

> Using quality factors, a user agent can not only rank the elements
within a particular Accept- header, it can also express precedence
relations between the different Accept- headers.  Consider for
example the following variant list:

利用者エージェントは、品質因子を使って、
特定 Accept‐頭内の要素に順位付けるだけでなく異なる Accept‐
頭群間の優先度の関係をも表現できます。
次の変種目録の例を考えましょう。

>
[PRE[
     {"paper.english" 1.0 {language en} {charset ISO-8859-1}},
     {"paper.greek"   1.0 {language el} {charset ISO-8859-7}}
]PRE]
> and suppose that the user prefers "el" over "en", while the user
agent can render "ISO-8859-1" with a higher quality than "ISO-8859-7".  If the Accept- headers are

そして、利用者は [CODE(lang)[[[en]]]] よりも [CODE(lang)[[[el]]]]
を好み、利用者エージェントは [CODE(HTTP)[[[ISO-8859-7]]]]
よりも [CODE(HTTP)[[[ISO-8859-1]]]] の方が高品質でレンダリングできるとします。
Accept‐頭群が

>
- Accept-Language: gr, en;q=0.8
- Accept-Charset: ISO-8859-1, ISO-8859-7;q=0.6, *

> then the remote variant selection algorithm would choose the English
variant, because this variant has the least overall quality
degradation.  But if the Accept- headers are

であったとすると、遠隔変種選択算法は品質減退が最も少ない英語の変種を選ぶことになります。
しかし、 Accept‐頭群が

>
- Accept-Language: gr, en;q=0.8
- Accept-Charset: ISO-8859-1, ISO-8859-7;q=0.95, *

> then the algorithm would choose the Greek variant.  In general, the
Accept- header with the biggest spread between its quality factors
gets the highest precedence.  If a user agent allows the user to set
the quality factors for some headers, while other factors are hard-coded, it should use a low spread on the hard-coded factors and a
high spread on the user-supplied factors, so that the user settings
take precedence over the built-in settings.

であれば、算法はギリシャ語変種を選ぶでしょう。
通常、その品質因子間で最大に配置した Accept‐ 頭群が最高の優先度を得ます。
利用者エージェントがある頭の品質因子を利用者に設定することを認めていながら他の因子は
hard‐code しているなら、 hard‐code 因子は低い方に配置し、
利用者供給様式の方は高く配置して、利用者の設定が組込みの設定よりも優先されるようにするべきです。


** 4.2 Construction of short requests

> In a request on a transparently negotiated resource, a user agent
need not send a very long Accept- header, which lists all of its
capabilities, to get optimal results.  For example, instead of sending

透過折衝資源についての要求では、
利用者エージェントは最適な結果を得るために、
その能力をすべて列挙した非常に長い Accept‐
頭群を送信する必要はありません。
例えば、利用者エージェントは

>
[PRE[
     Accept: image/gif;q=0.9, image/jpeg;q=0.8, image/png;q=1.0,
             image/tiff;q=0.5, image/ief;q=0.5, image/x-xbitmap;q=0.8,
             application/plugin1;q=1.0, application/plugin2;q=0.9
]PRE]
> the user agent can send

を送る代わりに、

>
- Accept: image/gif;q=0.9, */*;q=1.0

を送ることができます。

> It can send this short header without running the risk of getting a
choice response with, say, an inferior image/tiff variant.  For
example, with the variant list

利用者エージェントは、その、優先度の低い [CODE(MIME)[[[image/tiff]]]]
変種の[[選択応答]]を得てしまう危険を冒さずにこの短い頭を送ることができます。
例えば、変種目録

>
- {"x.gif" 1.0 {type image/gif}}, {"x.tiff" 1.0 {type image/tiff}},

> the remote algorithm will compute a definite overall quality of 0.9
for x.gif and a speculative overall quality value of 1.0 for x.tiff.
As the best variant has a speculative quality value, the algorithm
will not choose x.tiff, but return a list response, after which the
selection algorithm of the user agent will correctly choose x.gif.
The end result is the same as if the long Accept- header above had been sent.

では、遠隔算法は [CODE(URI)[x.gif]] には決定的全体品質 [CODE[0.9]]
を計算し、 [CODE(URI)[x.tiff]] には推測的品質値 [CODE[1.0]]
を計算しますので、算法は [CODE(URI)[x.tiff]] を選ばずに目録応答を返し、
その後利用者エージェントの選択算法は正しく [CODE(URI)[x.gif]]
を選ぶことになります。
最終結果は上述の長い Accept‐ 頭を送った場合と同じです。

> Thus, user agents can vary the length of the Accept- headers to get
an optimal tradeoff between the speed with which the first request is
transmitted, and the chance that the remote algorithm has enough
information to eliminate a second request.

従って、利用者エージェントは最初の要求が転送される速度と遠隔算法が二番目の要求を省くのに十分な情報を持つ機会との最適な取捨選択を得るために Accept‐ 頭群の長さを変化させることができます。


** 4.2.1 Collapsing Accept- header elements

> This section discusses how a long Accept- header which lists all
capabilities and preferences can be safely made shorter.  The remote
variant selection algorithm is designed in such a way that it is
always safe to shorten an Accept or Accept-Charset header by two
taking two header elements `A;q=f' and `B;q=g' and replacing them by
a single element `P;q=m' where P is a wildcard pattern that matches
both A and B, and m is the maximum of f and g.  Some examples are

この節ではどうやってすべての能力と好みを列挙した Accept‐
頭群を安全に短くできるかを考えます。
遠隔変種選択算法は [SAMP(HTTP)[[VAR[A]];[[q]]=f]] と [SAMP(HTTP)[[VAR[B]];q=[VAR[g]]]]
の2つの頭要素を取って [VAR[A]] と [VAR[B]] の両者に一致する鬼札パターンである
[VAR[P]] と [VAR[f]] 及び [VAR[g]] の最大値である [VAR[m]]
を使った単一の要素 [SAMP(HTTP)[[VAR[P]];q=[VAR[m]]]]
で置き換えることで [CODE(HTTP)[[[Acept]]]] 頭や
[CODE(HTTP)[[[Accept-Charset]]]] を常に安全に短くできるように設計しています。
たとえば、

>
[PRE[
      text/html;q=1.0, text/plain;q=0.8       -->    text/*;q=1.0
      image/*;q=0.8, application/*;q=0.7      -->    */*;q=0.8
      iso-8859-5;q=1.0, unicode-1-1;q=0.8     -->    *;q=1.0
]PRE]

> Note that every `;q=1.0' above is optional, and can be omitted:

上記のすべての [CODE(HTTP)[;q=1.0]] は省略可能なので、省略できることに注意。

>
- iso-8859-7;q=0.6, *                     -->    *

> For Accept-Language, it is safe to collapse all language ranges
with the same primary tag into a wildcard:

同じ主札のすべての言語範囲は鬼札に安全にまとめられます。

[CODE(HTTP)[[[Accept-Language]]]] では、

>
- en-us;q=0.9, en-gb;q=0.7, en;q=0.8, da  -->    *;q=0.9, da

> It is also safe to collapse a language range into a wildcard, or to
replace it by a wildcard, if its primary tag appears only once:

主札が一度だけ出現するのであれば、
この言語範囲を鬼札にまとめたり鬼札で置換したりすることも安全です。

>
- *;q=0.9, da                             -->    *

> Finally, in the Accept-Features header, every feature expression
can be collapsed into a wildcard, or replaced by a wildcard:

最後に、 [CODE(HTTP)[[[Accept-Features]]]] 頭では、
各特長式は鬼札にまとめたり、鬼札で置換することができます。

>
- colordepth!=5, *                        -->    *


*** 4.2.2 Omitting Accept- headers

> According to the HTTP/1.1 specification [1], the complete absence of
an Accept header from the request is equivalent to the presence of
`Accept: */*'.  Thus, if the Accept header is collapsed to `Accept:


* /*', a user agent may omit it entirely.  An Accept-Charset, Accept-Language, or Accept-Features header which only contains `*' may also

be omitted.

HTTP/1.1 仕様書によれば、要求に完全に [CODE(HTTP)[Accept]]
頭がないときには [CODE(HTTP)[Accept: */*]]
があるのと同等です。従って、 [CODE(HTTP)[Accept]]
頭を [CODE(HTTP)[Accept: */*]] にまとめた場合には、
利用者エージェントはこれを完全に省いて構いません。
[CODE(HTTP)[Accept-Charset]] 頭、[CODE(HTTP)[Accept-Language]] 頭、
[CODE(HTTP)[Accept-Features]] 頭で [CODE(HTTP)[*]]
だけを含んだものも省略できます。



*** 4.2.3 Dynamically lengthening requests

> In general, a user agent capable of transparent content negotiation
can send short requests by default.  Some short Accept- headers could
be included for the benefit of existing servers which use HTTP/1.0
style negotiation (see section 4.2 of [2]).  An example is

通常、透過内容折衝能力のある利用者エージェントは既定で短い要求を送ることができます。
既存の HTTP/1.0 様式折衝を使うサーバーでの利益のために短い Accept‐
頭群を幾つか含めることもできます。例えば、

>
[PRE[
      GET /paper HTTP/1.1
      Host: x.org
      User-Agent: WuxtaWeb/2.4
      Negotiate: 1.0
      Accept-Language: en, *;q=0.9
]PRE]

> If the Accept- headers included in such a default request are not
suitable as input to the remote variant selection algorithm, the user
agent can disable the algorithm by sending `Negotiate: trans' instead
of `Negotiate: 1.0'.

この既定の要求に含まれた Accept‐ 頭群が遠隔変種選択算法の入力として不適当であれば、
利用者エージェントは [CODE(HTTP)[[[Negotiate]]: [[trans]]]]
を [CODE(HTTP)[Negotiate: 1.0]] の代わりに送信することで算法を無効化出来ます。

> If the user agent discovers, though the receipt of a list or choice
response, that a particular origin server contains transparently
negotiated resources, it could dynamically lengthen future requests
to this server, for example to

利用者エージェントが目録応答または選択応答の受領を通して特定の起源サーバーが透過折衝資源を含んでいると発見したら、
このサーバーへの以後の要求を動的に長くすることができます。例えば、

>
[PRE[
      GET /paper/chapter1 HTTP/1.1
      Host: x.org
      User-Agent: WuxtaWeb/2.4
      Negotiate: 1.0
      Accept: text/html, application/postscript;q=0.8, */*
      Accept-Language: en, fr;q=0.5, *;q=0.9
      Accept-Features: tables, *
]PRE]

> This will increase the chance that the remote variant selection
algorithm will have sufficient information to choose on behalf of the
user agent, thereby optimizing the negotiation process.  A good
strategy for dynamic extension would be to extend the headers with
those media types, languages, charsets, and feature tags mentioned in
the variant lists of past responses from the server.

これで遠隔変種選択算法が利用者エージェントの変わりに選ぶのに十分な情報を得て折衝過程を最適化する機会が増えます。
サーバーの過去の応答の変種目録で触れられていた媒体型、言語、charset、特徴札で頭を伸ばすのは動的に伸ばすのの良い戦略です。


** 4.3 Differences between the local and the remote algorithm

> A user agent can only optimize content negotiation though the use of
a remote algorithm if its local algorithm will generally make the
same choice.  If a user agent receives a choice response containing a
variant X selected by the remote algorithm, while the local algorithm
would have selected Y, the user agent has two options:

利用者エージェントは、その局所算法が通常同じ選択をする場合のみ遠隔算法の使用で内容折衝を最適化できます。
利用者エージェントが遠隔算法により選択された変種 [VAR[X]]
を含んだ選択応答を受取って、局所算法は [VAR[Y]]
を選択するであろう場合には、利用者エージェントには二つの選択肢があります。

>
- 1. Retrieve Y in a subsequent request. This is sub-optimal
because it takes time.
- 2. Display X anyway.  This is sub-optimal because it makes the
end result of the negotiation process dependent on factors that
can randomly change.  For the next request on the same resource,
and intermediate proxy cache could return a list response, which
would cause the local algorithm to choose and retrieve Y instead
of X.  Compared to a stable representation, a representation
which randomly switches between X and Y (say, the version with
and without frames) has a very low subjective quality for most users.

- 後続要求で [VAR[Y]] を取り出す。これは時間を取るので準最適化です。
- とにかく [VAR[X]] を表示する。
これは折衝過程の最終結果が無作為に変わり得る因子に依存しているので準最適化です。
同じ資源の次の要求では、媒介串キャッシュは
[VAR[X]] の代わりに [VAR[Y]] を選んで取り出す局所算法を動かす目録応答を返すことができます。
安定な表現に比較すると、 [VAR[X]] と [VAR[Y]] (まあ、フレーム版と非フレーム版) で無作為に切り替わる表現はほとんどの利用者にはとても低い主観的品質を持ちます。

> As both alternatives above are unattractive, a user agent should try
to avoid the above situation altogether.  The sections below discuss
how this can be done.

両選択肢が共に美しくなければ、利用者エージェントはこの状況を共に避けるように努力するべきです。
次の節ではこれをどうやってなるかを取り上げます。


*** 4.3.1 Avoiding major differences

> If the user agent enables the remote algorithm in this specification,
it should generally use a local algorithm which closely resembles the
remote algorithm.  The algorithm should for example also use
multiplication to combine quality factors.  If the user agent
combines quality factors by addition, it would be more advantageous
to define a new remote variant selection algorithm, with a new major
version number, for use by this agent.

利用者エージェントがこの仕様書の遠隔算法を有効にするなら、
通常は遠隔算法によく似た局所算法を使うべきです。
局所算法も例えば品質因子の結合に乗算を使うべきです。
利用者エージェントが品質因子を加算で結合するなら、
そのエージェントが使うための新しい大版の新しい遠隔変種選択算法を定義する方がより有利でしょう。


*** 4.3.2 Working around minor differences

> Even if a local algorithm uses multiplication to combine quality
factors, it could use an extended quality formulae like

局所算法が品質因子の結合に乗算を使っていたとしても、
利用者エージェントの制限による次元間の特別の相互依存を考慮に入れるために

>
- Q = round5( qs * qt * qc * ql * qf ) * q_adjust

> in order to account for special interdependencies between dimensions,
which are due to limitations of the user agent.  For example, if the
user agent, for some reason, cannot handle the iso-8859-7 charset
when rendering text/plain documents, the q_adjust factor would be 0
when the text/plain - iso-8859-7 combination is present in the
variant description, and 1 otherwise.

のように拡張した品質公式を使うこともできます。
例えば、利用者エージェントが何らかの理由で [CODE(MIME)[[[text/plain]]]]
文書をレンダリングするときに [CODE(charset)[iso-8859-7]]
charset を取扱えないとすると、 [VAR[q_adjust]]
因子は [CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]]
の組合せで変種記述に現れた時には [CODE[0]]
で他の時には [CODE[1]] とします。

> By selectively withholding information from the remote variant
selection algorithm, the user agent can ensure that the remote
algorithm will never make a choice if the local q_adjust is less than
1.  For example, to prevent the remote algorithm from ever returning
a text/plain - iso-8859-7 choice response, the user agent should take
care to never produce a request which exactly specifies the quality
factors of both text/plain and iso-8859-7.  The omission of either
factor from a request will cause the overall quality value of any
text/plain - iso-8859-7 variant to be speculative, and variants with
speculative quality values can never be returned in a choice response.

利用者エージェントは、
遠隔変種選択算法に選択的に情報を与えないことによって、
遠隔算法が局所 [VAR[q_adjust]] が [CODE[1]] 未満の選択を決して行わないようにできます。
例えば、遠隔算法が [CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]]
選択応答を返すことのないようにするために、
利用者エージェントは [CODE(MIME)[text/plain]] と
[CODE(charset)[iso-8859-7]] の両者の品質因子を正確に指定する要求を決して生成することのないように注意するべきです。
要求からどちらかの因子を省くことによって、
[CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]] 変種の全体品質値は推測的となり、
推測的品質値の変種は決して選択応答で返されることはありません。

> In general, if the local q_adjust does not equal 1 for a particular
combination X - Y - Z, then a remote choice can be prevented by
always omitting at least one of the elements of the combination from
the Accept- headers, and adding a suitable wildcard pattern to match
the omitted element, if such a pattern is not already present.

一般に、局部 [VAR[q_adjust]] が特定の組合せ  [VAR[X]]‐[VAR[Y]]‐[VAR[Z]]
で [CODE[1]] に等しくなければ、組合せの要素の最低1つを
Accept‐ 頭群から省略し、省略した要素に一致する適当な鬼札パターンが既に存在しなければそれを追加することで、
遠隔選択を防ぐことができます。


* 5  Security and privacy considerations

> This specification introduces no security and privacy considerations
not already covered in [2].  See [2] for a discussion of privacy
risks connected to the sending of Accept- headers.

この仕様書は既に RFC 2295 で既に覆われていない安全と個人情報に関する考察を求めません。
Accept‐ 頭群を送ることに関係する個人情報的危険についての議論は RFC 2295
を見て下さい。


* 6  Acknowledgments

> Work on HTTP content negotiation has been done since at least 1993.
The authors are unable to trace the origin of many of the ideas
incorporated in this document.  Many members of the HTTP working
group have contributed to the negotiation model in this
specification.  The authors wish to thank the individuals who have
commented on earlier versions of this document, including Brian
Behlendorf, Daniel DuBois, Ted Hardie, Larry Masinter, and Roy T. Fielding.

HTTP 内容折衝の作業は少なくても1993年から行われています。
著者はこの文書に組み込まれた考えの多くの起源を追跡できません。
HTTP 作業部会の参加者の多くがこの仕様の折衝模型に貢献してくださいました。
著者は特に、 Brian
Behlendorf, Daniel DuBois, Ted Hardie, Larry Masinter, Roy T. Fielding
を含むこの文書の初期の版から意見してくださっている方々に感謝したいと思います。


* 7  References

[PRE[
   [1] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and
       T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC
       2068, January 1997.
]PRE]

[INS[

訳注 : [[RFC2068]] は後に改訂されて [[RFC2616]] になりました。
]INS]

[PRE[
   [2] Holtman, K., and A. Mutz, "Transparent Content Negotiation in
       HTTP", RFC 2295, March 1998.
]PRE]


* 8  Authors' Addresses

[PRE[
   Koen Holtman
   Technische Universiteit Eindhoven
   Postbus 513
   Kamer HG 6.57
   5600 MB Eindhoven (The Netherlands)
]PRE]

[PRE[
   EMail: koen@@win.tue.nl
]PRE]

[PRE[
   Andrew H. Mutz
   Hewlett-Packard Company
   1501 Page Mill Road 3U-3
   Palo Alto CA 94304, USA
]PRE]

[PRE[
   Fax:   +1 415 857 4691
   EMail: mutz@@hpl.hp.com
]PRE]


* 9  Full Copyright Statement

[PRE[
   Copyright (C) The Internet Society (1998).  All Rights Reserved.
]PRE]

[PRE[
   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.
]PRE]

[PRE[
   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.
]PRE]

[PRE[
   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
]PRE]


* ライセンス

[[RFCのライセンス]]


* メモ
@


1.1
log
@converted from SuikaWiki3 <http://suika.fam.cx/gate/cvs/suikawiki/wikidata/page/5246432032323936.txt>
@
text
@d1 986
a986 992
#?SuikaWiki/0.9 page-icon="HTTP"

'''HTTP Remote Variant Selection Algorithm -- RVSA/1.0 [INS[HTTP 遠隔変種選択算法 —— RVSA/1.0]]'''
- Network Working Group                                        
- Request for Comments: 2296                                          
- Category: Experimental 
- K. Holtman
- TUE
- A. Mutz
- Hewlett-Packard
- March 1998


* Status of this Memo

> This memo defines an Experimental Protocol for the Internet
community.  It does not specify an Internet standard of any kind.
Discussion and suggestions for improvement are requested.
Distribution of this memo is unlimited.


* Copyright Notice

> Copyright (C) The Internet Society (1998).  All Rights Reserved.


* ABSTRACT

> HTTP allows web site authors to put multiple versions of the same
information under a single URL.  Transparent content negotiation is a
mechanism for automatically selecting the best version when the URL
is accessed.  A remote variant selection algorithm can be used to
speed up the transparent negotiation process. This document defines
the remote variant selection algorithm with the version number 1.0.

HTTP は、ウェブ・サイトの著者が同じ情報の複数の版を一つの URL
の元に置くことを認めています。透過内容折衝はその URL 
に接続したときに最善の版を自動的に選択するための機構です。
遠隔変種選択算法は透過折衝過程を高速化するために使うことができます。
この文書は版番号 1.0 の遠隔変種選択算法を定義します。


* TABLE OF CONTENTS

= 1  Introduction...............................................2
= 2  Terminology and notation...................................2
= 3  The remote variant selection algorithm.....................2
== 3.1 Input....................................................2
== 3.2 Output...................................................3
== 3.3 Computing overall quality values.........................3
== 3.4 Definite and speculative quality values..................5
== 3.5 Determining the result...................................6
= 4  Use of the algorithm.......................................7
== 4.1 Using quality factors to rank preferences................7
== 4.2 Construction of short requests...........................8
=== 4.2.1 Collapsing Accept- header elements.....................8
=== 4.2.2 Omitting Accept- headers...............................9
=== 4.2.3 Dynamically lengthening requests.......................9
== 4.3 Differences between the local and the remote algorithm..10
=== 4.3.1 Avoiding major differences............................11
=== 4.3.2 Working around minor differences......................11
= 5  Security and privacy considerations.......................11
= 6  Acknowledgments...........................................12
= 7  References................................................12
= 8  Authors' Addresses........................................12
= 9  Full Copyright Statement..................................13


* 1  Introduction

> HTTP allows web site authors to put multiple versions (variants) of
the same information under a single URL.  Transparent content
negotiation [2] is a mechanism for automatically selecting the best
variant when the URL is accessed.  A remote variant selection
algorithm can be used by a HTTP server to choose a best variant on
behalf of a negotiating user agent.  The use of a remote algorithm
can speed up the transparent negotiation process by eliminating a
request-response round trip.

HTTP は、著者に同じ情報の複数の版 (変種) を単一の URL
のもとに置くことを認めています。[[透過内容折衝]]はその URL
に接続した時に最善の変種を自動的に選択するための機構です。
遠隔変種選択算法は HTTP サーバーが折衝利用者エージェントに代わって最善の変種を選ぶために使用することができます。
遠隔算法を使うことによって要求‐応答の往復を省き、透過折衝過程を高速化できます。

> This document defines the remote variant selection algorithm with the
version number 1.0.  The algorithm computes whether the Accept-
headers in the request contain sufficient information to allow a
choice, and if so, which variant must be chosen.

この文書は版番号 1.0 の遠隔変種選択算法を定義します。
この算法は要求の [[Accept‐かしら]]が選ぶために十分な情報を含んでいるか、
含んでいるならどの変種が選ばれなければならないかを計算します。


* 2  Terminology and notation

> This specification uses the terminology and notation of the HTTP
transparent content negotiation specification [2].

この仕様書は、 HTTP 透過内容折衝仕様書 ([[RFC2295]])
の用語と記法を使います。


* 3  The remote variant selection algorithm

> This section defines the remote variant selection algorithm with the
version number 1.0.  To implement this definition, a server MAY run
any algorithm which gives equal results.

この節では、版番号 1.0 の遠隔変種選択算法を定義します。
サーバーは、この定義を実装するために、同等の結果を与える任意の算法を走らせて'''構いません'''。

> Note: According to [2], servers are always free to return a list
response instead of running a remote algorithm.  Therefore,
whenever a server may run a remote algorithm, it may also run a
partial implementation of the algorithm, provided that the partial
implementation always returns List_response when it cannot compute the real result.

注意 : RFC 2295 によれば、サーバーは常に自由に遠隔算法を走らせる代わりに[[目録応答]]を返せます。
従って、サーバーが遠隔算法を走らせてもよかろうがよかるまいが、
真の結果が計算できない時に [CODE(conneg)[List_response]] 
を常に返すこの算法の部分実装を走らせても構いません。


** 3.1 Input

> The algorithm is always run for a particular request on a
particular transparently negotiable resource.  It takes the
following information as input.

この算法は常に特定の[[透過折衝可能資源]]についての特定の[[要求]]に関して走らせます。
この算法は次の情報を入力として取ります。

>
- 1. The variant list of the resource, as present in the Alternates
header of the resource.
- 2. (Partial) Information about capabilities and preferences of the
user agent for this particular request, as given in the Accept-
headers of the request.

- 応答の [CODE(HTTP)[[[Alternates]]]] 頭として示す資源の[[変種目録]]
- 要求の [[Accept‐頭群]]で与えられた、この特定の要求についての[[利用者エージェント]]の能力と好みについての (部分的) 情報

> If a fallback variant description

Fallback [[変種記述]]

>
- {"fallback.html"}

> is present in the Alternates header, the algorithm MUST interpret it
as the variant description

が [CODE(HTTP)[Alternates]] 頭に示されている時は、この算法では変種記述

>
- {"fallback.html" 0.000001}

として解釈しなければ'''なりません'''。

> The extremely low source quality value ensures that the fallback
variant only gets chosen if all other options are exhausted.

極めて低い[[原典品質]]値とすることによって、他のすべての選択肢を使い果たしたときだけ
fallback 変種が選ばれるようにします。


** 3.2 Output

> As its output, the remote variant selection algorithm and will yield
the appropriate action to be performed.  There are two possibilities:

遠隔変種選択算法は出力として取るべき適切な動作を与えます。
これは2つの可能性があります。

>
:Choice_response:
The Accept- headers contain sufficient information to make a
choice on behalf of the user agent possible, and the best
variant MAY be returned in a choice response.
:List_response:
The Accept- headers do not contain sufficient information to
make a choice on behalf of the user agent possible.  A list
response MUST be returned, allowing the user agent to make the choice itself.

:[CODE(HTTP)[Chouice_response]]:Accept‐ 頭群は利用者エージェントの代わりに選ぶのに十分な情報を含んでおり、
最善の変種を[[選択応答]]で返しても'''構いません'''。
:[CODE(HTTP)[List_response]]:Accept‐ 頭群は利用者エージェントの代わりに選ぶのに十分な情報を含んでいません。
利用者エージェントが自身で選ぶことができるように目録応答を返さなければ'''なりません'''。


** 3.3 Computing overall quality values

> As a first step in the remote variant selection algorithm, the
overall qualities of the individual variants in the list are computed.

遠隔変種選択算法の最初の手順として、目録中の個々の変種の[[全体品質]]を計算します。

> The overall quality Q of a variant is the value

変種の全体品質 [VAR[Q]] は、値

>
- Q = round5( qs * qt * qc * ql * qf )

> where round5 is a function which rounds a floating point value to 5
decimal places after the point, and where the factors qs, qt, qc, ql,
and qf are determined as follows.

で、ここで [CODE[round5]] は浮動小数点値を小数点以下5桁までに丸める関数で、
因子 [VAR[qs]], [VAR[qt]], [VAR[qc]], [VAR[ql]], [VAR[qf]]
は次のように決定します。

> qs Is the source quality factor in the variant description.

:[VAR[qs]]:[[変種記述]]中の[[原典品質]]因子。

> qt The media type quality factor is 1 if there is no type
attribute in the variant description, or if there is no Accept
header in the request.  Otherwise, it is the quality assigned
by the Accept header to the media type in the type attribute.

:[VAR[qt]]:変種記述に型属性がないか、要求中に [CODE(HTTP)[[[Accept]]]]
頭がなければ[[媒体型]]品質因子は [CODE[1]]。
そうでなければ、型品質因子は型属性中の媒体型に [CODE(HTTP)[Accept]]
頭で割当てられた品質。

> Note: If a type is matched by none of the elements of an
Accept header, the Accept header assigns the quality factor 0 to that type.

注意 : 型が [CODE(HTTP)[Accept]] 頭の要素のどれにも一致しなければ、
[CODE(HTTP)[Accept]] 頭は品質因子 [CODE[0]]
をその型に割当てています。

> qc The charset quality factor is 1 if there is no charset
attribute in the variant description, or if there is no
Accept-Charset header in the request.  Otherwise, the charset
quality factor is the quality assigned by the Accept-Charset
header to the charset in the charset attribute.

:[VAR[qc]]:変種記述に charset 属性がないか、要求中に [CODE(HTTP)[[[Accept-Charset]]]]
頭がなければ [[charset]] 品質因子は [CODE[1]]。
そうでなければ、 charset 品質因子は charset 属性中の媒体型に [CODE(HTTP)[Accept-Charset]]
頭で割当てられた品質。

> ql The language quality factor is 1 if there is no language
attribute in the variant description, or if there is no
Accept-Language header in the request.  Otherwise, the language
quality factor is the highest quality factor assigned by the
Accept-Language header to any one of the languages listed in
the language attribute.

:[VAR[ql]]:変種記述に言語属性がないか、要求中に [CODE(HTTP)[[[Accept-Language]]]]
頭がなければ[[言語]]品質因子は [CODE[1]]。
そうでなければ、言語品質因子は言語属性中に列挙された言語に [CODE(HTTP)[Accept-Language]]
頭で割当てられた最高の品質因子。

> qf The features quality factor is 1 if there is no features
attribute in the variant description, or if there is no
Accept-Features header in the request.  Otherwise, it is the
quality degradation factor for the features attribute, see section 6.4 of [2].

:[VAR[qs]]:変種記述に特徴属性がないか、要求中に [CODE(HTTP)[[[Accept-Features]]]]
頭がなければ[[特徴]]品質因子は [CODE[1]]。
そうでなければ、特徴品質因子は特徴属性の[[品質減衰]]因子。
RFC 2295 の6.4節参照。

> As an example, if a variant list contains the variant description

例として、変種目録が変種記述

>
- {"paper.html.en" 0.7 {type text/html} {language fr}}

> and if the request contains the Accept- headers

を含むとして、要求が Accept‐ 頭群

>
[PRE[
     Accept: text/html:q=1.0, */*:q=0.8
     Accept-Language: en;q=1.0, fr;q=0.5
]PRE]
> the remote variant selection algorithm will compute an overall
quality for the variant as follows:

を含んでいれば、遠隔変種選択算法はこの変種の全体品質を次のように計算します。

>
[PRE[
     {"paper.html.fr" 0.7 {type text/html} {language fr}}
                       |           |                 |
                       |           |                 |
                       V           V                 V
             round5 ( 0.7   *     1.0        *      0.5 ) = 0.35000
]PRE]

> With the above Accept- headers, the complete variant list

前述の Accept‐ 頭群で、完全な変種目録

>
[PRE[
     {"paper.html.en" 0.9 {type text/html} {language en}},
     {"paper.html.fr" 0.7 {type text/html} {language fr}},
     {"paper.ps.en"   1.0 {type application/postscript} {language en}}
]PRE]
> would yield the following computations:

は次の計算になります。

>
[PRE[
            round5 ( qs  * qt  * qc  * ql  * qf  ) =   Q
                     ---   ---   ---   ---   ---     -------
      paper.html.en: 0.9 * 1.0 * 1.0 * 1.0 * 1.0   = 0.90000
      paper.html.fr: 0.7 * 1.0 * 1.0 * 0.5 * 1.0   = 0.35000
      paper.ps.en:   1.0 * 0.8 * 1.0 * 1.0 * 1.0   = 0.80000
]PRE]


** 3.4 Definite and speculative quality values

> A computed overall quality value can be either definite or
speculative.  An overall quality value is definite if it was computed
without using any wildcard characters '*' in the Accept- headers, and
without the need to use the absence of a particular Accept- header.
An overall quality value is speculative otherwise.

計算した全体品質値は決定的にも推測的にもなります。
全体品質値を Accept‐ 頭群の鬼札文字 [CODE(HTTP)[*]]
を使わずに、また特定の Accept‐ 頭の不存在を使用する必要がなく計算できたなら決定的です。
それ以外の場合は全体品質値は推測的です。

> As an example, in the previous section, the quality values of
paper.html.en and paper.html.fr are definite, and the quality value
of paper.ps.en is speculative because the type application/postscript
was matched to the range */*.

例として、前の状況で、 [CODE(URI)[paper.html.en]]
と [CODE(URI)[paper.html.fr]] の品質値は決定的で、
[CODE(URI)[paper.ps.en]] の品質値は型 [CODE(MIME)[[[application/postscript]]]]
が範囲 [CODE(HTTP)[[[*/*]]]] と一致したので推測的です。

> Definiteness can be defined more formally as follows.  An overall
quality value Q is definite if the same quality value Q can be
computed after the request message is changed in the following way:

決定的性は次のようにしてより形式的に定義できます。
全体品質値 [VAR[Q]] は要求メッセージを次の方法で変更してから同じ品質値
[VAR[Q]] を計算できれば決定的です。

>
- 1. If an Accept, Accept-Charset, Accept-Language, or
Accept-Features header is missing from the request, add this
header with an empty field.
- 2. Delete any media ranges containing a wildcard character '*'
from the Accept header.  Delete any wildcard '*' from the
Accept-Charset, Accept-Language, and Accept-Features headers.

[CODE(HTTP)[Accept]] 頭, [CODE(HTTP)[Accept-Charset]] 頭,
[CODE(HTTP)[Accept-Langauge]] 頭または [CODE(HTTP)[Accept-Features]] 頭が要求から欠けていたら、
これを空欄で追加する。
- 鬼札文字 [CODE(HTTP)[*]] を含んだ媒体範囲を [CODE(HTTP)[Accept]]
頭から削除する。鬼札 [CODE(HTTP)[*]] を
[CODE(HTTP)[Accept-Charset]] 頭,
[CODE(HTTP)[Accept-Langauge]] 頭および [CODE(HTTP)[Accept-Features]] 頭から削除する。

> As another example, the overall quality factor for the variant

他の例として、変種

>
- {"blah.html" 1 {language en-gb} {features blebber [x y]}}

> is 1 and definite with the Accept- headers

の全体品質因子は Accept‐ 頭群

>
- Accept-Language: en-gb, fr
- Accept-Features: blebber, x, !y, *

> and

および

>
- Accept-Language: en, fr
- Accept-Features: blebber, x, *

について [CODE[1]] で、決定的です。

> The overall quality factor is still 1, but speculative, with the Accept- headers

全体品質因子は Accept‐ 頭群

>
- Accept-language: en-gb, fr
- Accept-Features: blebber, !y, *

> and

および

>
- Accept-Language: fr, *
- Accept-Features: blebber, x, !y, *

でも依然 [CODE[1]] ですが、推測的です。


** 3.5 Determining the result

> The best variant, as determined by the remote variant selection
algorithm, is the one variant with the highest overall quality value,
or, if there are multiple variants which share the highest overall
quality, the first variant in the list with this value.

遠隔変種選択算法で決定する最善の変種は、
最高の全体品質値の変種か、最高の全体品質の変種が複数ある場合には、その値を持つ目録中で最初の変種です。

> The end result of the remote variant selection algorithm is
Choice_response if all of the following conditions are met

次のすべての状況に該当するなら、遠隔変種選択算法の最終結果は
[CODE[Choice_response]] です。

>
- a. the overall quality value of the best variant is greater than 0
- b. the overall quality value of the best variant is a definite quality value
- c. the variant resource is a neighbor of the negotiable resource.  This last condition exists to ensure that a
security-related restriction on the generation of choice
responses is met, see sections 10.2 and 14.2 of [2].

- 最善の変種の全体品質値が [CODE[0] より大きい]]
- 最善の変種の全体品質値が決定的品質値である
- その変種資源は折衝可能資源の隣接である。この最後の条件は選択応答の生成における安全に関する制限であって、
RFC 2295 の10.2節と14.2節を参照されたい。

> In all other cases, the end result is List_response.

他のすべての場合は、最終結果は [CODE[List_response]] です。

> The requirement for definiteness above affects the interpretation of
Accept- headers in a dramatic way.  For example, it causes the remote
algorithm to interpret the header

上述の決定的性の用件は劇的な形で Accept‐ 頭群の解釈に影響します。
例えば、遠隔算法が頭

>
- Accept: image/gif;q=0.9, */*;q=1.0

> as

を

> `I accept image/gif with a quality of 0.9, and assign quality
factors up to 1.0 to other media types.  If this information is
insufficient to make a choice on my behalf, do not make a choice
but send the list of variants'.

「私は [CODE(MIME)[[[image/gif]]]] を品質 [CODE(HTTP)[0.9]]
で受け入れまして、他の媒体型には最大 [CODE(HTTP)[1.0]]
の品質因子を割当てます。この情報が私の代わりに選ぶのに不十分であれば、
選ばないで変種の目録を送ってください。」

と解釈させることになります。

> Without the requirement, the interpretation would have been

この要件がなければ、解釈は

> `I accept image/gif with a quality of 0.9, and all other media
types with a quality of 1.0'.

「私は [CODE(MIME)[image/gif]] を品質 [CODE(HTTP)[0.9]]
で受け入れ、他のすべての媒体型を品質 [CODE(HTTP)[1.0]] で受け入れます。」

となっていたでしょう。


* 4  Use of the algorithm

> This section discusses how user agents can use the remote algorithm
in an optimal way.  This section is not normative, it is included for
informational purposes only.

この章では、利用者エージェントがどうやって最適な条件で遠隔算法を利用するかを取り上げます。
この章は規定ではなく、参考目的でのみ含めています。


** 4.1 Using quality factors to rank preferences

> Using quality factors, a user agent can not only rank the elements
within a particular Accept- header, it can also express precedence
relations between the different Accept- headers.  Consider for
example the following variant list:

利用者エージェントは、品質因子を使って、
特定 Accept‐頭内の要素に順位付けるだけでなく異なる Accept‐
頭群間の優先度の関係をも表現できます。
次の変種目録の例を考えましょう。

>
[PRE[
     {"paper.english" 1.0 {language en} {charset ISO-8859-1}},
     {"paper.greek"   1.0 {language el} {charset ISO-8859-7}}
]PRE]
> and suppose that the user prefers "el" over "en", while the user
agent can render "ISO-8859-1" with a higher quality than "ISO-8859-7".  If the Accept- headers are

そして、利用者は [CODE(lang)[[[en]]]] よりも [CODE(lang)[[[el]]]]
を好み、利用者エージェントは [CODE(HTTP)[[[ISO-8859-7]]]]
よりも [CODE(HTTP)[[[ISO-8859-1]]]] の方が高品質でレンダリングできるとします。
Accept‐頭群が

>
- Accept-Language: gr, en;q=0.8
- Accept-Charset: ISO-8859-1, ISO-8859-7;q=0.6, *

> then the remote variant selection algorithm would choose the English
variant, because this variant has the least overall quality
degradation.  But if the Accept- headers are

であったとすると、遠隔変種選択算法は品質減退が最も少ない英語の変種を選ぶことになります。
しかし、 Accept‐頭群が

>
- Accept-Language: gr, en;q=0.8
- Accept-Charset: ISO-8859-1, ISO-8859-7;q=0.95, *

> then the algorithm would choose the Greek variant.  In general, the
Accept- header with the biggest spread between its quality factors
gets the highest precedence.  If a user agent allows the user to set
the quality factors for some headers, while other factors are hard-coded, it should use a low spread on the hard-coded factors and a
high spread on the user-supplied factors, so that the user settings
take precedence over the built-in settings.

であれば、算法はギリシャ語変種を選ぶでしょう。
通常、その品質因子間で最大に配置した Accept‐ 頭群が最高の優先度を得ます。
利用者エージェントがある頭の品質因子を利用者に設定することを認めていながら他の因子は
hard‐code しているなら、 hard‐code 因子は低い方に配置し、
利用者供給様式の方は高く配置して、利用者の設定が組込みの設定よりも優先されるようにするべきです。


** 4.2 Construction of short requests

> In a request on a transparently negotiated resource, a user agent
need not send a very long Accept- header, which lists all of its
capabilities, to get optimal results.  For example, instead of sending

透過折衝資源についての要求では、
利用者エージェントは最適な結果を得るために、
その能力をすべて列挙した非常に長い Accept‐
頭群を送信する必要はありません。
例えば、利用者エージェントは

>
[PRE[
     Accept: image/gif;q=0.9, image/jpeg;q=0.8, image/png;q=1.0,
             image/tiff;q=0.5, image/ief;q=0.5, image/x-xbitmap;q=0.8,
             application/plugin1;q=1.0, application/plugin2;q=0.9
]PRE]
> the user agent can send

を送る代わりに、

>
- Accept: image/gif;q=0.9, */*;q=1.0

を送ることができます。

> It can send this short header without running the risk of getting a
choice response with, say, an inferior image/tiff variant.  For
example, with the variant list

利用者エージェントは、その、優先度の低い [CODE(MIME)[[[image/tiff]]]]
変種の[[選択応答]]を得てしまう危険を冒さずにこの短い頭を送ることができます。
例えば、変種目録

>
- {"x.gif" 1.0 {type image/gif}}, {"x.tiff" 1.0 {type image/tiff}},

> the remote algorithm will compute a definite overall quality of 0.9
for x.gif and a speculative overall quality value of 1.0 for x.tiff.
As the best variant has a speculative quality value, the algorithm
will not choose x.tiff, but return a list response, after which the
selection algorithm of the user agent will correctly choose x.gif.
The end result is the same as if the long Accept- header above had been sent.

では、遠隔算法は [CODE(URI)[x.gif]] には決定的全体品質 [CODE[0.9]]
を計算し、 [CODE(URI)[x.tiff]] には推測的品質値 [CODE[1.0]]
を計算しますので、算法は [CODE(URI)[x.tiff]] を選ばずに目録応答を返し、
その後利用者エージェントの選択算法は正しく [CODE(URI)[x.gif]]
を選ぶことになります。
最終結果は上述の長い Accept‐ 頭を送った場合と同じです。

> Thus, user agents can vary the length of the Accept- headers to get
an optimal tradeoff between the speed with which the first request is
transmitted, and the chance that the remote algorithm has enough
information to eliminate a second request.

従って、利用者エージェントは最初の要求が転送される速度と遠隔算法が二番目の要求を省くのに十分な情報を持つ機会との最適な取捨選択を得るために Accept‐ 頭群の長さを変化させることができます。


** 4.2.1 Collapsing Accept- header elements

> This section discusses how a long Accept- header which lists all
capabilities and preferences can be safely made shorter.  The remote
variant selection algorithm is designed in such a way that it is
always safe to shorten an Accept or Accept-Charset header by two
taking two header elements `A;q=f' and `B;q=g' and replacing them by
a single element `P;q=m' where P is a wildcard pattern that matches
both A and B, and m is the maximum of f and g.  Some examples are

この節ではどうやってすべての能力と好みを列挙した Accept‐
頭群を安全に短くできるかを考えます。
遠隔変種選択算法は [SAMP(HTTP)[[VAR[A]];[[q]]=f]] と [SAMP(HTTP)[[VAR[B]];q=[VAR[g]]]]
の2つの頭要素を取って [VAR[A]] と [VAR[B]] の両者に一致する鬼札パターンである
[VAR[P]] と [VAR[f]] 及び [VAR[g]] の最大値である [VAR[m]]
を使った単一の要素 [SAMP(HTTP)[[VAR[P]];q=[VAR[m]]]]
で置き換えることで [CODE(HTTP)[[[Acept]]]] 頭や
[CODE(HTTP)[[[Accept-Charset]]]] を常に安全に短くできるように設計しています。
たとえば、

>
[PRE[
      text/html;q=1.0, text/plain;q=0.8       -->    text/*;q=1.0
      image/*;q=0.8, application/*;q=0.7      -->    */*;q=0.8
      iso-8859-5;q=1.0, unicode-1-1;q=0.8     -->    *;q=1.0
]PRE]

> Note that every `;q=1.0' above is optional, and can be omitted:

上記のすべての [CODE(HTTP)[;q=1.0]] は省略可能なので、省略できることに注意。

>
- iso-8859-7;q=0.6, *                     -->    *

> For Accept-Language, it is safe to collapse all language ranges
with the same primary tag into a wildcard:

同じ主札のすべての言語範囲は鬼札に安全にまとめられます。

[CODE(HTTP)[[[Accept-Language]]]] では、

>
- en-us;q=0.9, en-gb;q=0.7, en;q=0.8, da  -->    *;q=0.9, da

> It is also safe to collapse a language range into a wildcard, or to
replace it by a wildcard, if its primary tag appears only once:

主札が一度だけ出現するのであれば、
この言語範囲を鬼札にまとめたり鬼札で置換したりすることも安全です。

>
- *;q=0.9, da                             -->    *

> Finally, in the Accept-Features header, every feature expression
can be collapsed into a wildcard, or replaced by a wildcard:

最後に、 [CODE(HTTP)[[[Accept-Features]]]] 頭では、
各特長式は鬼札にまとめたり、鬼札で置換することができます。

>
- colordepth!=5, *                        -->    *


*** 4.2.2 Omitting Accept- headers

> According to the HTTP/1.1 specification [1], the complete absence of
an Accept header from the request is equivalent to the presence of
`Accept: */*'.  Thus, if the Accept header is collapsed to `Accept:


* /*', a user agent may omit it entirely.  An Accept-Charset, Accept-Language, or Accept-Features header which only contains `*' may also

be omitted.

HTTP/1.1 仕様書によれば、要求に完全に [CODE(HTTP)[Accept]]
頭がないときには [CODE(HTTP)[Accept: */*]]
があるのと同等です。従って、 [CODE(HTTP)[Accept]]
頭を [CODE(HTTP)[Accept: */*]] にまとめた場合には、
利用者エージェントはこれを完全に省いて構いません。
[CODE(HTTP)[Accept-Charset]] 頭、[CODE(HTTP)[Accept-Language]] 頭、
[CODE(HTTP)[Accept-Features]] 頭で [CODE(HTTP)[*]]
だけを含んだものも省略できます。



*** 4.2.3 Dynamically lengthening requests

> In general, a user agent capable of transparent content negotiation
can send short requests by default.  Some short Accept- headers could
be included for the benefit of existing servers which use HTTP/1.0
style negotiation (see section 4.2 of [2]).  An example is

通常、透過内容折衝能力のある利用者エージェントは既定で短い要求を送ることができます。
既存の HTTP/1.0 様式折衝を使うサーバーでの利益のために短い Accept‐
頭群を幾つか含めることもできます。例えば、

>
[PRE[
      GET /paper HTTP/1.1
      Host: x.org
      User-Agent: WuxtaWeb/2.4
      Negotiate: 1.0
      Accept-Language: en, *;q=0.9
]PRE]

> If the Accept- headers included in such a default request are not
suitable as input to the remote variant selection algorithm, the user
agent can disable the algorithm by sending `Negotiate: trans' instead
of `Negotiate: 1.0'.

この既定の要求に含まれた Accept‐ 頭群が遠隔変種選択算法の入力として不適当であれば、
利用者エージェントは [CODE(HTTP)[[[Negotiate]]: [[trans]]]]
を [CODE(HTTP)[Negotiate: 1.0]] の代わりに送信することで算法を無効化出来ます。

> If the user agent discovers, though the receipt of a list or choice
response, that a particular origin server contains transparently
negotiated resources, it could dynamically lengthen future requests
to this server, for example to

利用者エージェントが目録応答または選択応答の受領を通して特定の起源サーバーが透過折衝資源を含んでいると発見したら、
このサーバーへの以後の要求を動的に長くすることができます。例えば、

>
[PRE[
      GET /paper/chapter1 HTTP/1.1
      Host: x.org
      User-Agent: WuxtaWeb/2.4
      Negotiate: 1.0
      Accept: text/html, application/postscript;q=0.8, */*
      Accept-Language: en, fr;q=0.5, *;q=0.9
      Accept-Features: tables, *
]PRE]

> This will increase the chance that the remote variant selection
algorithm will have sufficient information to choose on behalf of the
user agent, thereby optimizing the negotiation process.  A good
strategy for dynamic extension would be to extend the headers with
those media types, languages, charsets, and feature tags mentioned in
the variant lists of past responses from the server.

これで遠隔変種選択算法が利用者エージェントの変わりに選ぶのに十分な情報を得て折衝過程を最適化する機会が増えます。
サーバーの過去の応答の変種目録で触れられていた媒体型、言語、charset、特徴札で頭を伸ばすのは動的に伸ばすのの良い戦略です。


** 4.3 Differences between the local and the remote algorithm

> A user agent can only optimize content negotiation though the use of
a remote algorithm if its local algorithm will generally make the
same choice.  If a user agent receives a choice response containing a
variant X selected by the remote algorithm, while the local algorithm
would have selected Y, the user agent has two options:

利用者エージェントは、その局所算法が通常同じ選択をする場合のみ遠隔算法の使用で内容折衝を最適化できます。
利用者エージェントが遠隔算法により選択された変種 [VAR[X]]
を含んだ選択応答を受取って、局所算法は [VAR[Y]]
を選択するであろう場合には、利用者エージェントには二つの選択肢があります。

>
- 1. Retrieve Y in a subsequent request. This is sub-optimal
because it takes time.
- 2. Display X anyway.  This is sub-optimal because it makes the
end result of the negotiation process dependent on factors that
can randomly change.  For the next request on the same resource,
and intermediate proxy cache could return a list response, which
would cause the local algorithm to choose and retrieve Y instead
of X.  Compared to a stable representation, a representation
which randomly switches between X and Y (say, the version with
and without frames) has a very low subjective quality for most users.

- 後続要求で [VAR[Y]] を取り出す。これは時間を取るので準最適化です。
- とにかく [VAR[X]] を表示する。
これは折衝過程の最終結果が無作為に変わり得る因子に依存しているので準最適化です。
同じ資源の次の要求では、媒介串キャッシュは
[VAR[X]] の代わりに [VAR[Y]] を選んで取り出す局所算法を動かす目録応答を返すことができます。
安定な表現に比較すると、 [VAR[X]] と [VAR[Y]] (まあ、フレーム版と非フレーム版) で無作為に切り替わる表現はほとんどの利用者にはとても低い主観的品質を持ちます。

> As both alternatives above are unattractive, a user agent should try
to avoid the above situation altogether.  The sections below discuss
how this can be done.

両選択肢が共に美しくなければ、利用者エージェントはこの状況を共に避けるように努力するべきです。
次の節ではこれをどうやってなるかを取り上げます。


*** 4.3.1 Avoiding major differences

> If the user agent enables the remote algorithm in this specification,
it should generally use a local algorithm which closely resembles the
remote algorithm.  The algorithm should for example also use
multiplication to combine quality factors.  If the user agent
combines quality factors by addition, it would be more advantageous
to define a new remote variant selection algorithm, with a new major
version number, for use by this agent.

利用者エージェントがこの仕様書の遠隔算法を有効にするなら、
通常は遠隔算法によく似た局所算法を使うべきです。
局所算法も例えば品質因子の結合に乗算を使うべきです。
利用者エージェントが品質因子を加算で結合するなら、
そのエージェントが使うための新しい大版の新しい遠隔変種選択算法を定義する方がより有利でしょう。


*** 4.3.2 Working around minor differences

> Even if a local algorithm uses multiplication to combine quality
factors, it could use an extended quality formulae like

局所算法が品質因子の結合に乗算を使っていたとしても、
利用者エージェントの制限による次元間の特別の相互依存を考慮に入れるために

>
- Q = round5( qs * qt * qc * ql * qf ) * q_adjust

> in order to account for special interdependencies between dimensions,
which are due to limitations of the user agent.  For example, if the
user agent, for some reason, cannot handle the iso-8859-7 charset
when rendering text/plain documents, the q_adjust factor would be 0
when the text/plain - iso-8859-7 combination is present in the
variant description, and 1 otherwise.

のように拡張した品質公式を使うこともできます。
例えば、利用者エージェントが何らかの理由で [CODE(MIME)[[[text/plain]]]]
文書をレンダリングするときに [CODE(charset)[iso-8859-7]]
charset を取扱えないとすると、 [VAR[q_adjust]]
因子は [CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]]
の組合せで変種記述に現れた時には [CODE[0]]
で他の時には [CODE[1]] とします。

> By selectively withholding information from the remote variant
selection algorithm, the user agent can ensure that the remote
algorithm will never make a choice if the local q_adjust is less than
1.  For example, to prevent the remote algorithm from ever returning
a text/plain - iso-8859-7 choice response, the user agent should take
care to never produce a request which exactly specifies the quality
factors of both text/plain and iso-8859-7.  The omission of either
factor from a request will cause the overall quality value of any
text/plain - iso-8859-7 variant to be speculative, and variants with
speculative quality values can never be returned in a choice response.

利用者エージェントは、
遠隔変種選択算法に選択的に情報を与えないことによって、
遠隔算法が局所 [VAR[q_adjust]] が [CODE[1]] 未満の選択を決して行わないようにできます。
例えば、遠隔算法が [CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]]
選択応答を返すことのないようにするために、
利用者エージェントは [CODE(MIME)[text/plain]] と
[CODE(charset)[iso-8859-7]] の両者の品質因子を正確に指定する要求を決して生成することのないように注意するべきです。
要求からどちらかの因子を省くことによって、
[CODE(MIME)[text/plain]]‐[CODE(charset)[iso-8859-7]] 変種の全体品質値は推測的となり、
推測的品質値の変種は決して選択応答で返されることはありません。

> In general, if the local q_adjust does not equal 1 for a particular
combination X - Y - Z, then a remote choice can be prevented by
always omitting at least one of the elements of the combination from
the Accept- headers, and adding a suitable wildcard pattern to match
the omitted element, if such a pattern is not already present.

一般に、局部 [VAR[q_adjust]] が特定の組合せ  [VAR[X]]‐[VAR[Y]]‐[VAR[Z]]
で [CODE[1]] に等しくなければ、組合せの要素の最低1つを
Accept‐ 頭群から省略し、省略した要素に一致する適当な鬼札パターンが既に存在しなければそれを追加することで、
遠隔選択を防ぐことができます。


* 5  Security and privacy considerations

> This specification introduces no security and privacy considerations
not already covered in [2].  See [2] for a discussion of privacy
risks connected to the sending of Accept- headers.

この仕様書は既に RFC 2295 で既に覆われていない安全と個人情報に関する考察を求めません。
Accept‐ 頭群を送ることに関係する個人情報的危険についての議論は RFC 2295
を見て下さい。


* 6  Acknowledgments

> Work on HTTP content negotiation has been done since at least 1993.
The authors are unable to trace the origin of many of the ideas
incorporated in this document.  Many members of the HTTP working
group have contributed to the negotiation model in this
specification.  The authors wish to thank the individuals who have
commented on earlier versions of this document, including Brian
Behlendorf, Daniel DuBois, Ted Hardie, Larry Masinter, and Roy T. Fielding.

HTTP 内容折衝の作業は少なくても1993年から行われています。
著者はこの文書に組み込まれた考えの多くの起源を追跡できません。
HTTP 作業部会の参加者の多くがこの仕様の折衝模型に貢献してくださいました。
著者は特に、 Brian
Behlendorf, Daniel DuBois, Ted Hardie, Larry Masinter, Roy T. Fielding
を含むこの文書の初期の版から意見してくださっている方々に感謝したいと思います。


* 7  References

[PRE[
   [1] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and
       T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC
       2068, January 1997.
]PRE]

[INS[

訳注 : [[RFC2068]] は後に改訂されて [[RFC2616]] になりました。
]INS]

[PRE[
   [2] Holtman, K., and A. Mutz, "Transparent Content Negotiation in
       HTTP", RFC 2295, March 1998.
]PRE]


* 8  Authors' Addresses

[PRE[
   Koen Holtman
   Technische Universiteit Eindhoven
   Postbus 513
   Kamer HG 6.57
   5600 MB Eindhoven (The Netherlands)
]PRE]

[PRE[
   EMail: koen@@win.tue.nl
]PRE]

[PRE[
   Andrew H. Mutz
   Hewlett-Packard Company
   1501 Page Mill Road 3U-3
   Palo Alto CA 94304, USA
]PRE]

[PRE[
   Fax:   +1 415 857 4691
   EMail: mutz@@hpl.hp.com
]PRE]


* 9  Full Copyright Statement

[PRE[
   Copyright (C) The Internet Society (1998).  All Rights Reserved.
]PRE]

[PRE[
   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implementation may be prepared, copied, published
   and distributed, in whole or in part, without restriction of any
   kind, provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to the Internet Society or other
   Internet organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.
]PRE]

[PRE[
   The limited permissions granted above are perpetual and will not be
   revoked by the Internet Society or its successors or assigns.
]PRE]

[PRE[
   This document and the information contained herein is provided on an
   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING
   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION
   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF
   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
]PRE]


* ライセンス

[[RFCのライセンス]]


* メモ

[1]
b45qwT  <a href="http://bmdoeedkhunh.com/">bmdoeedkhunh</a>, [url=http://siutoqaqkypb.com/]siutoqaqkypb[/url], [link=http://tfgxjrwihkeq.com/]tfgxjrwihkeq[/link], http://nzadrjawwjbd.com/
([[zfberzlxb]] [whwslw@@qeyjpq.com] [WEAK[2008-08-22 18:30:06 +00:00]])

@

