head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.2
	after-upgrade-to-suikawiki-3:1.2
	before-fork-suikawiki3:1.2
	after-restore-20040122:1.2;
locks; strict;
comment	@# @;


1.3
date	2007.07.08.02.42.09;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.03.02.00.13;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.30;	author make;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@

* doctype 属性 (DOM Document 界面)

[1] 属性 [CODE[[VAR(DOM)[[[Document]]]].'''[CODE(DOM)[doctype]]''']]
(読取り専用。) は、当該文書の[[文書型宣言]]です。

[[XML]] 文書で、文書型宣言がなされていた場合には、
[CODE(DOM)[[[DocumentType]]]] が返されます。
文書型宣言が無い場合や、 [[HTML]] 文書の場合は、
[CODE(DOM)[[[null]]]] が返されます。

[2] [[DOM 1]] の >>2 の規定は、文書型宣言のある HTML
文書の存在を黙殺している点で問題があります。
しかしながら、 HTML (SGML な。) の文書型宣言も扱うとなると、
[[SGML]] の [[DTD]] の物体モデルにまで立入る必要が出てきますから、仕様策定や実装の労力が激増します。
妥協点として妥当なところかもしれません。

[4] >>2 でも、 [[DOM 2]] までは文書型定義は具体的には扱ってないからその問題は大して存在しないような。

ほんとの理由は、 HTML を SGML 的に扱ってる UA
がほぼ皆無だから、 DTD を扱うことに意味は無いし、
そんなことしてる UA なんてないだろう、っていうことでしょうな。

[3] DOM 1 は文書型定義の編集に対応していませんから、
この属性を設定することは出来ません
(し、その内容をいじることも出来ません)。

- [DOM1] ''Document Object Model (Core) Level 1'' <http://www.w3.org/TR/DOM-Level-1/level-one-core.html#attribute-doctype>

[5]
[[DOM水準1]]と [[DOM水準2]]は、 [[HTML]] [[文書]]では常に [CODE(IDL)@@en[[[null]]]] だとしていました。
([[名無しさん]])

[6]
[[DOM水準3]]は、 [[HTML]] [[文書]]に実際に[[文書型宣言]]があるかに関わらず、
[CODE(DOMi)@@en[[[DocumentType]]]] [[節点]]を返してもよいとしています。
([[名無しさん]])


[7]
不正な[[文書]]で、[[文書要素]]より後に
[CODE(DOMi)@@en[[[DocumentType]]]] があったり、
複数 [CODE(DOMi)@@en[[[DocumentType]]]]
があったりする場合にどうなるのかは不明です。
([[名無しさん]])


[[#comment]]


* メモ@


1.2
log
@auto-committed
@
text
@d1 52
a52 31
#?SuikaWiki/0.9
*doctype 属性 (DOM Document 界面)

[1] 属性 [CODE[[VAR(DOM)[[[Document]]]].'''[CODE(DOM)[doctype]]''']]
(読取り専用。) は、当該文書の[[文書型宣言]]です。

[[XML]] 文書で、文書型宣言がなされていた場合には、
[CODE(DOM)[[[DocumentType]]]] が返されます。
文書型宣言が無い場合や、 [[HTML]] 文書の場合は、
[CODE(DOM)[[[null]]]] が返されます。

[2] [[DOM 1]] の >>2 の規定は、文書型宣言のある HTML
文書の存在を黙殺している点で問題があります。
しかしながら、 HTML (SGML な。) の文書型宣言も扱うとなると、
[[SGML]] の [[DTD]] の物体モデルにまで立入る必要が出てきますから、仕様策定や実装の労力が激増します。
妥協点として妥当なところかもしれません。

[4] >>2 でも、 [[DOM 2]] までは文書型定義は具体的には扱ってないからその問題は大して存在しないような。

ほんとの理由は、 HTML を SGML 的に扱ってる UA
がほぼ皆無だから、 DTD を扱うことに意味は無いし、
そんなことしてる UA なんてないだろう、っていうことでしょうな。

[3] DOM 1 は文書型定義の編集に対応していませんから、
この属性を設定することは出来ません
(し、その内容をいじることも出来ません)。

-[DOM1] ''Document Object Model (Core) Level 1'' <http://www.w3.org/TR/DOM-Level-1/level-one-core.html#attribute-doctype>
[[#comment]]

*メモ@


1.1
log
@auto-commited
@
text
@d4 1
a4 1
[1] 属性 [CODE[[VAR(DOM)[Document]].'''[CODE(DOM)[doctype]]''']]
d10 1
a10 1
[CODE(DOM)[null]] が返されます。
d12 1
a12 1
[2] DOM 1 の >>2 の規定は、文書型宣言のある HTML
d18 6
d28 1
a28 1
-[DOM1] ''Document Object Model (Core) Level 1'' <http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#attribute-doctype>
@

