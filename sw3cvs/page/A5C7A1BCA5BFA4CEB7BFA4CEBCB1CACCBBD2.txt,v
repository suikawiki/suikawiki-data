head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.3;
locks; strict;
comment	@# @;


1.3
date	2003.09.24.07.19.39;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.28.13.24.58;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.28.09.24.56;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@semi-auto committed
@
text
@#?SuikaWiki/0.9
[1] [[計算機]]で扱うデータには色々な種類がありますから、それぞれの型の識別方法が必要になります。
これには大きく分けて3つの方法が使われています。

*メタ情報として識別子を持つ

[2] [[ファイル・システム]]や[[プロトコル]]に、識別子を入れる方法です。

[3] 例えば [[MIME]] などで使われる Internet [[媒体型]] (media type)
は、 "text/plain" のように、大分類/小分類の形式の文字列で種類を識別します。
MIME ではこの文字列を[[頭]]に入れることで、[[本体]]の形式を示すことが出来ます。

[4] また、 [[Macintosh]] のファイル・システム上のファイルは、
[[リソース・フォーク]]と[[データ・フォーク]]の2つの部分から構成されますが、このうちリソース・フォークの中に、ファイル名を表す4文字の文字列があります。
例えば 'TEXT' は、 Internet の媒体型の "text/plain"
などに相当します。

[5] メタ情報を使う方式の難点は、統一された形式が無いことです。
上の >>3 と >>4 で既に識別子の値が違っています 
(し一対一対応もしません) し、そもそもこのようなメタ情報を保持できないファイル・システムやプロトコルが少なくありません。

*ファイル名の一部を使う方法

この方法は >>2 のメタ情報の方法の1つとも言えますが、あえて別の方法としますた。

[6] たとえば [[Microsoft]] [[Windows]] では、 "FOO.TXT"
という名前をファイルに与えると、 >>3 の Internet 
の媒体型でいうところの "text/plain" という型を与えたこととなります。
ここで、 "FOO" の部分が本来のファイルの名前で、 "."
を区切りとして "TXT" の部分が種類を表します。

[7] この方法は名前というおそらくすべてのファイル・システムおよびかなり多くのプロトコルが扱うことの出来る情報の一部に型の識別子を詰め込んでいるという点で、可搬性に優れています。
ですから >>2 のメタ情報の方法に比べると、情報を維持できる確率が高くなります。

[8] 逆に難点は、ファイル名という本来名前であるべき部分に種類というやや異質の概念が入り混じっていることでしょう。

また、情報が落ちにくいという点が逆に、 >>3 のような別の識別法のあるファイル・システムやプロトコルに持ち込んだときに、そのプロトコル本来の識別法がなおざりにされやすいという運用上の問題もあります。

[9] 例えば、 >>6 の Windows のファイル "FOO.PNG" は >>3 の
Internet の媒体型で表す時 "image/png" というメタ情報を持たなければならないのに、例えば
"application/octet-stream" で送っても、 ".PNG"
というファイル名の接尾辞を相手が理解してくれる可能性があります。
しかしだからといって、 >>3 のメタ情報が不要なわけではないのですが。

*データ自身が型情報を持つ方法

[10] 標題の通り。メタ情報やファイル名情報が失われても、データ本体の情報はデータが壊れない限りなくなりませんから。

勿論、この方法は役に立ちません。鍵が金庫の中にある状態ですから。

すべてのデータ形式が同じ方式の型情報をデータ中に持つことが出来れば問題はないのですが、それはつまり >>2 と同じことです。
メタ情報の部分がそのファイル・システムやプロトコルの設計上メタ部分にあるか本体部分にあるかの違いだけで。
- [11] [WEAK[2003-09-20 12:33:32 +00:00]] ''[[png]]'': 
@


1.2
log
@Updated.
@
text
@d53 1
@


1.1
log
@Updated.
@
text
@d45 8
a52 1
*ファイル自身が型情報を持つ方法
@

