head	1.10;
access;
symbols
	suikawiki3-final:1.10;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2007.06.27.02.39.47;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2006.11.18.02.17.01;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.08.02.14.14;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2006.08.08.02.13.15;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.18.02.16.42;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.23.02.11.08;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.03.02.25.19;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.13.02.07.33;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.13.02.04.38;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.23.02.07.38;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.10
log
@auto-committed
@
text
@
[2] [DFN[[ABBR[XML] [拡張可能マーク付け言語]] [RUBYB[取込み] [Inclusions]] 1.0]]
([DFN[[ABBR[XInclude] [XML 取込み]] 1.0]]) は、
ある [[XML文書]] ([[XML情報集合]]) の一部分として別の文書 (情報集合)
を[DFN[取込む]]ための汎用の規格です。

[[XML 1.0]] と [[XML 1.1]] から構築された情報集合に対応しています
[SRC[[ABBR[XInclude] [XML 取込み]] 2]]。


* 仕様書

[1]
仕様書:
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/xinclude/>
(最新版)
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/2004/REC-xinclude-20041220/>
(2004年12月20日勧告)
- 正誤表:
[CITE[XInclude 1.0 Errata]] <http://www.w3.org/2004/12/xinclude-errata>
- [33] 正誤表追加候補:
[CITE@@en[Errata Candidates for XInclude-1.0]] <http://www.w3.org/XML/2005/01/proposed-xinclude-errata>

[37]
PEX1
<http://www.w3.org/2004/12/xinclude-errata/#PEX1>
(2005年9月27日) では、次の段落が追加されています。

> [CODE(XMLe)@@en[[QN[xi:[[fallback]]] [http://www.w3.org/2001/XInclude]]]]
[[要素]]の[[内容]]は、囲んでいる
[CODE(XMLe)@@en[[QN[xi:[[fallback]]] [http://www.w3.org/2001/XInclude]]]]
[[要素]]の処理中に[[資源誤り]]が発生しない限り、
無視されます。特に、
[CODE(XMLe)@@en[[QN[xi:[[fallback]]] [http://www.w3.org/2001/XInclude]]]]
[[要素]]の内側の[[要素]]や[[属性]]の存在、不存在、または[[内容]]により起こる明白な[[致死誤り]]は、
無視される
[CODE(XMLe)@@en[[QN[xi:[[fallback]]] [http://www.w3.org/2001/XInclude]]]]
[[要素]]中において報告されてはなりません。

無視される
[CODE(XMLe)@@en[[QN[xi:[[fallback]]] [http://www.w3.org/2001/XInclude]]]]
[[要素]]に関する[[誤り]]は報告しなくてもいいということです。

[38]
PEX6
<http://www.w3.org/2004/12/xinclude-errata/#PEX6>
では次の段落が追加されています。

> 最初の[[文字]]が[[バイト順印]]と解釈された時は、
これを捨てるべきです。これは [[UTF-8]]、[[UTF-16]]、
および [[UTF-32]] では [CODE(charname)@@en[[[BOM]]]]
として解釈します。 [[UTF-16LE]]、[[UTF-16BE]]、
[[UTF-32LE]]、[[UTF-32BE]] では [CODE(charname)@@en[[[BOM]]]]
として解釈しません。

規定がなかったから追加したそうです。
一々文書形式の仕様で規定するようなことではないと思いますが。。。

[39]
PEX7
<http://www.w3.org/2004/12/xinclude-errata/#PEX7>
では、 [CODE(XMLa)@@en[[[encoding]]]] [[属性]]の値について、
[[XML宣言]]の [CODE(XMLa)@@en[[[encoding]]]] [[擬似属性]]の値と同じ
([Q@@en[is]]) とされていたのが、[Q[[[妥当]]な[[符号化名]]である'''べき''']]に変更されました。

[[違法]]な値をどうするか ([[誤り]]?) が曖昧だったので修正したのだそうですが、
何が[[妥当]]な[[符号化名]]なのでしょうか?

[40]
PEX10
<http://www.w3.org/2004/12/xinclude-errata/#PEX10>
では、 [CODE(XMLa)@@en[[[accept]]]] [[属性]]の説明の中の
[Q[[[HTTP]] [[頭部]]では禁止されているので]]という記述が削除されました。

よくわからない説明が書いてありますが、
単に事実に反する記述なので削除しただけだと思われます。
規定内容自体に変更はありません。

[CODE(XMLa)@@en[[[accept-language]]]] [[属性]]の説明にも同じ記述がありますが、なぜか修正されていません。

[41]
PEX11
<http://www.w3.org/2004/12/xinclude-errata/#PEX11>
では、 [[UTF-8]] の参照先が [[RFC 2279]] から [[RFC 3629]] 
に参照が変わっています。
ちなみに両者は非互換です。

[42]
PEX15
<http://www.w3.org/2004/12/xinclude-errata/#PEX15>
では、 [CODE(XMLa)@@en[[[xpointer]]]] [[属性]]の[[百分率符号化]]に関するメモで、
[[百分率符号化]]されていたら[[誤り]]であるかのような表現が、
そうではなく、 [CODE(charname)@@en[[[PERCENT SIGN]]]]
が現れても [CODE(charname)@@en[[[PERCENT SIGN]]]]
そのものとして解釈されることに改められています。

[34]
(冒頭の説明に反して) 日付が書かれていないので正確な時期はわかりませんが、
正誤表に項目が追加されています。

([[名無しさん]] [WEAK[2006-05-14 10:35:19 +00:00]])

[35]
PEX16 では [CODE(XMLa)@@en[[[xml]]:[[lang]]]] と
[CODE(XMLa)@@en[[[xml]]:[[base]]]] の調整について、
[[利用者の任意選択]]によって抑制しても'''構わない'''と追記しています。

適合性に変更は無いと述べられていますが、
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] は元々する'''べき'''、
[CODE(XMLa)@@en[[[xml]]:[[base]]]] は[[助動詞]]なしの定義だったわけですから、影響がないともいえないような。

[36]
PEX17 では [[IRI]] に関する規定を [[XML 1.1]]
で規定する [[XML資源識別子]]への参照に置き換えています。
やはり適合性に変更は無いと述べられていますが、
怪しいところです ([[IRI]] の項を参照)。
しかも現時点で [[XML 1.1]] および正誤表に
[[XML資源識別子]]はまだ規定されていなかったりします。

[44]
[CITE[XML Inclusions (XInclude) Version 1.0 (Second Edition)]] <http://www.w3.org/TR/2006/REC-xinclude-20061115/>
([[名無しさん]] [WEAK[2006-11-16 12:11:22 +00:00]])

[45]
[CITE[XInclude 1.0 Second Edition Errata]] <http://www.w3.org/XML/2006/11/xinclude-errata/>
([[名無しさん]] [WEAK[2006-11-16 12:12:22 +00:00]])


[46]
PEX18 <http://www.w3.org/XML/2006/11/xinclude-errata/#PEX18>
([[名無しさん]] [WEAK[2007-06-24 10:21:37 +00:00]])


[[#comment]]


* 処理模型

[7] 処理模型は仕様書 4 章で規定されています。

用語:
:[DFN[[RUBYB[[[原始情報集合]]] [source infoset]]]]:取込み処理の入力です。
:[DFN[[RUBYB[[[最上位被取込み項目]]] [top‐level included item]]]]:
[CODE(XMLe)[[VAR[xi:]][[include]]]] で位置付けられた[[情報項目]]。
:[DFN[[RUBYB[[[被取込み項目]]] [included item]]]]:
最上位被取込み項目とその[[属性]], [[名前空間]], [[子孫]]。
:[DFN[[RUBYB[[[取込み位置]]] [include location]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] 要素の [CODE(XMLa)[[[href]]]]
属性の値 [WEAK[(省略時は空文字列)]] を正規化して 
[ABBR[[[URI]]] [統一資源参照子]] または 
[ABBR[[[IRI]]] [国際化資源参照子]] とし、
[[XML基底]]に基づき[[解決]]した[[絶対URI]]
または[[絶対IRI]]。
:[DFN[[RUBYB[[[結果情報集合]]] [result infoset]]]]:原始情報集合と 
[CODE(XMLe)[[VAR[xi:]][[include]]]] で指定された[[資源]]の情報集合を併合した新しい[[情報集合]]です。
[WEAK[(基本的に原始情報項目と取込み項目の複製になります。)]]
:[DFN[[RUBYB[[[取込み親]]] [include parent]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] の[CODE(infoprop)[[[親]]]]。

- 原始情報集合、結果情報集合 [WEAK[(になるもの)]] は
[[XML情報集合]]が定義され得るものが対象です
[WEAK[(例えば[[整形式解析対象実体]]でも[[根要素]]が複数あるものは扱えません)]]。 
[SRC[[ABBR[XInclude] [XML 取込み]] 4]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
を陽にまたは陰に空文字列にすることで自分自身を指すことができますが、
実装方法によっては不都合があるかもしれません。
[WEAK[(自分自身の [CODE(XML)[parse="text"]] の元データがない場合など。)]]
[CODE(XMLa)[href]] が空文字列になる場合は[[資源誤り]]にして'''構いません'''。
その場合はそうなる状況を文書化する'''べきです'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
は非 [ABBR[IRI] [国際化資源識別子]] 文字を含んでいるかもしれません。
処理器は[[逃避]]する必要があります。
[ABBR[URI] [統一資源識別子]] として扱う場合は
更に [ABBR[URI] [統一資源識別子]] 文字も逃避する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1.1]]
- [[内容折衝]]を使っている場合は何が返ってくるかわかりません。
特定のものが必要な[[著者]]は [CODE(XMLe)[[VAR[xi:]]include]]
に [CODE(XMLa)[[[accept]]]] や [CODE(XMLa)[[[accept-charset]]]]
を指定する'''べきです'''。 [SRC[[ABBR[XInclude] [XML 取込み]] 4.1.2]]

[8] '''[CODE(XML)[parse=xml]] の場合''':
取込み位置の参照を解き、資源を取出し、
[[媒体型]]が [CODE(MIME)[[[application/xml]]]] 
であるとみなして[[文字符号化]]の判定や構文解析を行い、
情報集合を作成します。
[WEAK[(具体的な作成方法はあえて未規定とされており、たとえば[[妥当性検証]]を行うか否かは制約されていません。)]] 
資源が何らかの理由で利用できない時は[[資源誤り]]になります。
資源が[[整形式]]でないときは[[致命的誤り]]になります。
[WEAK[(資源誤りと致命的誤りの境界は実装依存なところがあり、例えば取込み位置が誤り頁っぽい [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 文書を返したら処理器は情報集合が作成できなかろうと資源誤りにしても構いませんし、解析しようとして非整形式で致命的誤りにしても構いません。)]]
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

(そういうのは [ABBR[[[HTTP]]] [ハイパーテキスト転送プロトコル]]
の[[状態符号]]のようなもので判断するのが普通じゃないですか?)

この情報集合の [CODE(XMLe)[[VAR[xi:]]include]]
要素は最適的に処理して[DFN[[RUBYB[[[獲得情報集合]]] [acquired infoset]]]]を作成します。
文書内参照 [WEAK[([CODE(XMLa)[[[xpointer]]]] 属性によります。)]] 
では原始情報集合を獲得情報集合として使います。
獲得情報集合のうち、取込む部分を[DFN[[RUBYB[[[取込み対象]]] [inclusion target]]]]といいます。
[CODE(XMLa)[xpointer]] 属性が省略されていれば獲得情報集合の[CODE(infoitem)[[[文書情報項目]]]]を取込み対象とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

処理器は [[XPointers]] のうち最低[CITE[枠組み]]の範囲と
[CODE[[[element]]]] scheme に対応しなければなりません。
XPointer の誤りは[[資源誤り]]とします。 [[XPath 1.0]]
と [ABBR[XML] [拡張可能マーク付け言語]] 情報集合のデータ模型の違いから、
[CODE[[[xpointer]]]] scheme が使われていて、
[CODE(infoitem)[[[未展開実体参照情報項目]]]]が対象の文書に含まれている時は、
[[致命的誤り]]とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

:取込み対象が[CODE(infoitem)[文書情報項目]]の場合:
最上位取込み項目は獲得情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[[[子供]]]]となります
(但し、 [CODE(infoitem)[[[文書型宣言情報項目]]]]を除きます)。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.1]]
:取込み対象が複数の[[節点]]の場合:
最上位取込み項目は獲得情報集合内の指された節点を獲得情報集合の[[文書順]]にしたものです。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.2]]
:取込み対象が範囲の場合:
最上位取込み項目は、指定された範囲をすべて文書順に、
重複は除いて選んだものとなります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.3]]
:点位置の場合:取込み対象が点の場合は、取込み項目は空となります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.4]]
:要素・注釈・処理指令の場合:
取込み対象が要素・注釈・処理指令の場合、
それが最上位取込み項目になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.5]]
:属性・名前空間宣言の場合:
取込み対象が[[属性節]]や[[名前空間節]]の場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.6]]
:循環の場合:[CODE(XMLe)[[VAR[xi:]]include]] 要素の処理で、
別の [CODE(XMLe)[[VAR[xi:]]include]] 要素が既に取込み鎖で処理された取込み位置・
[CODE(XMLa)[xpointer]] 属性値の時は、[[致命的誤り]]です。
(しかし、 [CODE(XMLe)[[VAR[xi:]]include]] を含む文書を [CODE(XML)[parse="text"]] で指す、同じ局所資源の異なる部分
(異なる [CODE(XMLa)[xpointer]]) を指す、
2つの入れ子でない [CODE(XMLe)[[VAR[xi:]]include]] が同じ
1つの文書 ([CODE(XMLe)[[VAR[xi:]]include]] を含む。) 
を指すなどは構いません。自分や先祖を [CODE(XML)[parse="xml"]]
で指したり、上位で既に処理した取込み要素・先祖を指すのは違法です。)
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.7]]

[9] '''[CODE(XML)[parse="text" の場合]]:'''
取込み位置の参照を解き、資源を取出し、
[CODE(infoitem)[[[文字情報項目]]]]の集合に変換します。
[CODE(infoprop)[[[要素内容項目]]]]特性は[[偽]]とします。
この[CODE(infoitem)[文字情報項目]]の集合を最上位取込み項目とします。
何らかの理由で資源が利用できない時は[[資源誤り]]になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

資源の[[文字符号化]]は、次により決定します
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]。
= 外部情報があれば、それにより。
= [CODE(MIME)[[[text/xml]]]], [CODE(MIME)[[[application/xml]]]],
[CODE(MIME)[[[text/[VAR[*]]+xml]]]],
[CODE(MIME)[[[application/[VAR[*]]+xml]]]]
であれば、 [ABBR[XML] [拡張可能マーク付け言語]] として。
= [CODE(charset)[[[UTF-8]]]] として。

- 符号化で認められないバイト列は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]
- [ABBR[XML] [拡張可能マーク付け言語]] 文書で認められない[[文字]]は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

[10] '''Fallback''': [[資源誤り]]の場合は、 fallback
動作にならなければ'''なりません'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.4]]
- 原始情報集合の [CODE(XMLe)[[VAR[xi:]][[include]]]]
[CODE(infoitem)[[[要素情報項目]]]]の[CODE(infoprop)[子供]]が丁度1つ
[CODE(XMLe)[[VAR[xi:]][[fallback]]]] を含んでいれば、
最上位取込み項目は [CODE(XMLe)[[VAR[xi:]][[fallback]]]]
の[CODE(infoprop)[子供]]を [ABBR[XInclude] [XML 取込み]]
処理した結果とします。
[WEAK[([CODE(XMLa)[parse]] 属性は影響しません。)]]

[11] '''結果情報集合の作成'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]:
= 原始情報集合の複製を作ります。
= 各 [CODE(XMLe)[[VAR[xi:]]include]] に対して、
取込み親の[CODE(infoprop)[子供]]の中の
[CODE(XMLe)[[VAR[xi:]]include]] を最上位取込み項目で置換します。
取込み項目の親は取込み親に設定します。
-- [CODE(XMLe)[[VAR[xi:]]include]] が[[根要素]]で、
最上位取込み項目が要素1つと零個以上の処理指令・注釈でない場合は[[致命的誤り]]です。
-- 取込み項目は取込み親から[CODE(infoprop)[[[適用範囲内名前空間]]]]を継承して'''構いません'''。
-- 各最上位取込み項目の取込み履歴を拡張特性[DFN[[CODE(infoprop)[[RUBYB[[[取込み履歴]]] [include history]]]]]]で記録します。
--- [CODE(infoprop)[取込み履歴]]特性が最上位水準取込み項目にあれば、
[CODE(XMLe)[[VAR[xi:]]include]] をその並びの先頭に追加します。
--- なければ、特性を追加して [CODE(XMLe)[[VAR[xi:]]include]]
[CODE(infoitem)[要素情報項目]]を唯一の項目とします。

[12] 注意: 文書内参照は原始情報集合で解決されます。
ですから、 [CODE(XMLe)[[VAR[xi:]]include]] 
の処理順は結果に影響しません。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]

[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include xpointer="xmlns(xi=http://www.w3.org/2001/XInclude)xpointer(x/xi:include[1])"
              parse="xml"/>
</x>
]PRE]

この例では、
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include href="something.xml"/>
</x>
]PRE]

と同じような結果が得られます。循環誤りにはなりません。

[13] '''非解析対象実体''':
取込み項目や子孫の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoprop)[非解析対象情報項目]]は、
重複でなければ結果情報項目に追加されます。
同じ[CODE(infoprop)[名前]]で重複でないのを追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

ここで、[DFN[重複]]とは、[CODE(infoprop)[名前]],
[CODE(infoprop)[システム識別子]], [CODE(infoprop)[公開識別子]],
[CODE(infoprop)[宣言基底URI]], [CODE(infoprop)[記法名]],
[CODE(infoprop)[記法]]が同じことを意味します。
[WEAK[(応用は他の方法、例えば[CODE(infoprop)[システム識別子]]と[CODE(infoprop)[宣言基底URI]] を使って重複を判断しても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

[14] '''記法''': 取込み項目の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoitem)[記法情報項目]]は既存のものと重複していなければ結果情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[記法]]特性に追加します。
>>13 で追加される[CODE(infoite)[非解析対象実体情報項目]]の[CODE(infoprop)[記法]]も追加します。
同じ名前で重複でない[CODE(infoitem)[記法情報項目]]を追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

記法が[DFN[重複]]とは、[CODE(infoitem)[名前]],
[CODE(infoitem)[システム識別子]], [CODE(infoitem)[公開識別子]],
[CODE(infoitem)[宣言基底URI]] が同じことを言います。
[WEAK[(応用は他の手段で重複としても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

[15] '''[CODE(infoprop)[参照]]特性の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.3]]

[[取込み]]の過程で他の要素への参照を持った属性が出てくることがあります。
[[XInclude]] 処理でこの不整合が出ればそれを修正します。

''対象'':
対象となるものは正確には、
- [CODE(InfoItem)[[[属性情報項目]]]]であり、
- [CODE(InfoProp)[[[属性型]]]]特性が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IFREFS]]]]
である時の、
- [CODE(InfoProp)[[[参照]]]]特性の値 (零個以上)

で、元々[[原始情報集合]]か[[被取込み情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]を指していたはずですが、
それを対応する[[結果情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]への参照に置換える必要が出ます。

''問題'':
具体的に問題となるのは次の場合です。
- 参照先の要素が[[被取込み文書]]中にあるものの、
取込まれる部分の外にある場合。
この場合[[結果情報集合]]では対応する要素なしとなります。
- 文書(の素片)が自己完結していない場合。
つまり参照が取込み後に認識されることを見込んでおり、
文書(の素片)中の要素を指していない場合。
この場合[CODE(InfoProp)[[[参照]]]]特性の値は[[未知]]または[[値無し]]となります。
- [[結果情報集合]]で識別子衝突が起こっている場合。
この場合、[CODE(InfoProp)[[[正規化値]]]]が同じでも[CODE(InfoProp)[[[参照]]]]が指す先は異なることが起こり得ます。

''解決法'':
簡単に言えば、[[属性値]]を元に[CODE(InfoProp)[[[参照]]]]特性を計算しなおします。

[SPAN(InfoItem)[[[属性情報項目]]]]で[CODE(InfoProp)[[[属性型]]]]が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IDREFS]]]]
の場合、
- [CODE(InfoProp)[[[正規化値]]]]の各字句について、
対応する[SPAN(InfoItem)[[[要素情報項目]]]]を並べたものを[CODE(InfoProp)[[[参照]]]]特性値とします。
- 対応する[SPAN(InfoItem)[[[要素情報項目]]]]とは、
[CODE(InfoProp)[[[属性型]]]]が [CODE(XML)@@en[[[XML]]]] であって[CODE(InfoProp)[[[正規化値]]]]が字句と一致するような[SPAN(InfoItem)[[[属性情報項目]]]]を持つことを意味します。
- [SPAN(InfoItem)[[[要素情報項目]]]]の順序は字句の順序と同じとします。
- 字句のいずれかについて対応する要素がないか、複数ある場合は、
[CODE(InfoProp)[[[参照]]]]特性値は[[値無し]]とします。

[16] '''名前空間の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.4]]

''問題'':
[CODE(InfoProp)[[[適用範囲内名前空間]]]]特性により名前空間の適用範囲は取込みを通じて保存されますが、
[CODE(InfoProp)[[[名前空間属性]]]]と齟齬が生じることがあります。

''解決策'':
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[名前空間属性]]]]特性を出さないことが推奨されていますが、
それが叶わない場合は近似のために[CODE(InfoProp)[[[名前空間属性]]]]特性に[SPAN(InfoItem)[[[属性情報項目]]]]を追加しても'''構わない'''とされています。

[17] '''基底 URI の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.5]]

''問題'':
取込み処理を通じて[CODE(InfoProp)[[[基底URI]]]]
特性は保存されるので、[[相対URI参照]]は元の[[情報集合]]においてと同じ
[[URI]] に[[解決]]されます。しかし [CODE(XMLa)@@en[[[xml]]:[[base]]]]
属性によって得られる[[基底URI]] とは食い違ってきます。

''解決策'':
最上位被取込み項目中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[基底URI]]]]
が異なるなら、[CODE(InfoProp)[[[属性]]]]に次の[SPAN(InfoItem)[[[属性情報項目]]]]を追加します。

- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[base]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XMLa)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は、
その要素の[CODE(InfoProp)[[[基底URI]]]]か、またはそれと等価な、
[CODE(InfoProp)[[[取込み親]]]]の[CODE(InfoProp)[[[基底URI]]]]
についての[[相対URI参照]]]] (その計算法は実装依存)
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]]]はその[SPAN(InfoItem)[[[要素情報項目]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[base]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[18] '''言語の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

''問題'':
[[XML]] の仕様では [CODE(XMLa)@@en[[[xml]]:[[lang]]]]
属性は[DFN[継承]]することになっていますが、
[[XML情報集合]]ではこれを特別扱いしていません。
そのため取込み時に取込みが行われた位置で言語情報が不正確になるかもしれません。

''解決策'':
[[XInclude 1.0]] では独自に[DFN[[CODE(InfoProp)[[[言語]]]]特性]]を導入し、
言語情報を保存することにしています。
[[原始情報集合]]と[[獲得情報集合]]の各[SPAN(InfoItem)[[[要素情報項目]]]]に
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[言語]]]]特性を補う'''べきです'''。
その値は、
- [CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性があれば、
その[CODE(InfoProp)[[[正規化値]]]]
- ただしその値が[[空文字列]]であるなら、[[値無し]]
- 属性がなくて[[親要素]]があれば、その[CODE(InfoProp)[[[言語]]]]
- 属性が無く[[親要素]]もなければ、[[値無し]]

となります。

そして、
[[最上位被取込み項目]]中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
- その[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[言語]]]]が異なる場合
(大文字・小文字は区別しません。) または
- 値を持ち、
[CODE(InfoProp)[[[取込み親]]]]が[SPAN(InfoItem)[[[文書情報項目]]]]である場合

には次の[SPAN(InfoItem)[[[属性情報項目]]]]を[CODE(InfoProp)[[[属性]]]]に追加します。
- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[lang]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XML)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は[CODE(InfoProp)[[[言語]]]]で、
[[値無し]]の場合は[[空文字列]]
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]はその[SPAN(InfoItem)[[[要素情報項目]]]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[lang]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[31]
'''[CODE(XMLa)@@en[[[xml]]:[[space]]]] 属性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

[CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性と
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性が特別扱いを受けているにも関わらず、
同じように[[継承]]する [CODE(XMLa)@@en[[[xml]]:[[space]]]]
属性は特別扱い''されません''。

[32]
'''その他の特性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[[XML情報集合]]で規定されているその他の[[特性]]と
[[XInclude 1.0]] で規定されている[CODE(InfoProp)[[[言語]]]]および[CODE(InfoProp)[[[取込み履歴]]]]は、
[[XInclude 1.0]] の処理でも保存されます。

それ以外の[[情報項目]]の特性は、既定では捨てます。
しかし、 [[XInclude 1.0]] の[[処理器]]は、[[利用者の任意選択]]により、
拡張特性の仕様書に従って意味的に正しくできるのであれば保存しても'''構いません'''。

例えば [[PSVI]] の[CODE(InfoProp)[[[妥当性]]]]特性は普通は捨てますが、
[[利用者の任意選択]]により保存しても構いません。
ただし[[取込み]]の結果[[妥当性]]が変化し得ますから、
それに合わせて新しい結果に修正しなければなりません。
その具体的な方法については [[XInclude 1.0]]
の範囲''外''とされています。

[[#comment]]


* 適合性

[19] '''マークの適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.1]]

ある[SPAN(InfoItem)[[[要素情報項目]]]]は、
[[XInclude 1.0]] 仕様書で規定された[[取込み要素]]の要件を満たす時、
[DFN[適合]]するといいます。 ([[要素]]および[[属性]]のみに関する制約で、
[[スキーマ]]等は制約されていません。)

[20] '''応用の適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.2]]

- 次の仕様に対応すること:
-- [[XML]] 本体:
--- [[XML 1.0]] (第3版) および [[XML名前空間 1.0]] または
--- [[XML 1.1]] および [[XML名前空間 1.1]] または
-- [[XML情報集合]] (第2版)
-- [[XML基底]]
-- [[XPointer]] 枠組み
-- [[XPointer scheme]] [CODE(XPointerScheme)@@en[[[element]]()]]
- [[致命的誤り]]に遭遇したら処理を停止すること
- 必須の条件 ('''しなければなりません''')
と選択した任意選択の条件 ('''するべきです'''と'''して構いません''')
について、規定に従うこと
- [[XInclude 1.0]] の規定するすべてのマークの適合性に関する試験を行うこと

仕様書は [CODE(XPointerScheme)@@en[[[xpointer]]()]]
[[XPointer scheme]] への対応が必須で無いので[[著者]]に注意するようにと特に助言しています。

[21] '''[ABBR[XML] [拡張可能マーク付け言語]] 情報集合適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.3]]

[[XInclude 1.0]] 仕様書は [[XML情報集合]] (第2版)
に適合すると主張しています。

正しい処理に必要な[[入力情報集合]]の情報項目:
- [SPAN(InfoItem)[[[文書情報項目]]]]:
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[基底URI]]]]
- [SPAN(InfoItem)[[[要素情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[属性]]]]、
[CODE(InfoProp)[[[基底URI]]]]、[CODE(InfoProp)[[[親]]]]
- [SPAN(InfoItem)[[[属性情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[正規化値]]]]

[[XInclude]] 処理によって更に次の情報項目が結果として生じ得ます。
- [SPAN(InfoItem)[[[子供情報項目]]]]:
[CODE(InfoProp)[[[文字符号]]]]、[CODE(InfoProp)[[[要素内容空白]]]]、
[CODE(InfoProp)[[[親]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[取込み履歴]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]
- [SPAN(InfoItem)[[[処理指令情報項目]]]]
- [SPAN(InfoItem)[[[注釈情報項目]]]]
- [SPAN(InfoItem)[[[文字情報項目]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[言語]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]

[[#comment]]


* 他との関係

[2] [ABBR[[[XLink 1.0]]] [XML 連結付け言語 1.0 版]]
で [CODE(XMLa)[[VAR[xlink:]][[show]]]] を [CODE(XML)[[[embed]]]]
にしたり、 [ABBR[[[HTML]]] [ハイパーテキストマーク付け言語]]
の [CODE(HTMLe)[[[object]]]] 要素を使ったりしても、
対応した [[WWWブラウザ]]で同じような表示にできるかもしれません。

しかし、 [ABBR[XLink] [XML 連結付け言語]] や [CODE(HTMLe)[object]]
はあくまで[[表現]]上 (見かけ上) の関係に過ぎないのに対し、
[ABBR[XInclude] [XML 取込み]] は文書の構造そのものに別の文書を取込みます。
一度取込みを行った後は、完全に元の文書の一部となります。

[3] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] の[[外部実体]]とも似ています。
[WEAK[(実際、外部実体の置換えが [ABBR[XInclude] [XML 取込み]] の1つの目的です。)]]
しかし、 [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] と次のような違いがあります。

- [ABBR[[[DTD]]] [文書型定義]] で宣言する必要はありません。
- 従って、[ABBR[[[DTD]]] [文書型定義]] 
を処理しない [[XML処理器]]でも扱えます。
[WEAK[(その代わりに当然 [ABBR[XInclude] [XML 取込み]] の処理器が必要ですけどね。)]]
- 何らかの理由で外部文書が利用できない時に、 
[ABBR[XInclude] [XML 取込み]] は fallback が利用できます。
- [ABBR[XInclude] [XML 取込み]] は [CODE(MIME)[[[text/plain]]]]
として取込むことができます。
- [[文書要素]]内とは異なる宣言の構文を使う必要がありません。

[4] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]]
文書の構文解析の後の情報集合の操作として定義されていますから、
構文解析や情報集合の構築の処理は変更されません。

取込み後の情報集合に対する [ABBR[DTD] [文書型定義]]
による[[妥当性検証]]については定義されていません
[SRC[[ABBR[XInclude] [XML 取込み]] 1.3]]。
取込みの入力は [ABBR[[[PSVI]]] [Schema 検証後情報集合]]
のような拡張された情報集合でも構いませんが、
既定では拡張部分は取込み処理で落とされます。
[[利用者の任意選択]]で拡張部分も保存しても構いませんが、
処理器は拡張部分の情報が適切であるように配慮する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[24] '''[CODE(XMLe)[[VAR[xop:]]Include]]''':
[[XOP]] には [CODE(XMLe)[[VAR[xop:]][[Include]]]]
という似た[[要素型]]があります。 

[[XOP]] は [[SOAP]] で[[バイナリ]]・データを送るにあたって [[XML 1]] +
[[Base64]] では無駄が多いことから
[CODE(MIME)[[[multipart/related]]]] 
で[[バイナリ]]・データは別に送ればよいという考えで、 [[XML]]
[[情報集合]]中の挿入点を示すために
[CODE(XMLe)[[VAR[xop:]][[Include]]]] が使われます。

[[XOP]] で [[XInclude]] が採用されなかったのは、 [[XInclude]]
の機能のごく一部しか要らないので無駄が多いこと、
外部データを [[Base64]] で符号化して挿入するために
[[XInclude]] を改訂する必要があることなどが理由とされています。

参考:
[CITE[XOP Inclusion Mechanism - Frequently Asked Questions]] 
<http://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/>

[[#comment]]


* メモ

[5] 最初に [ABBR[[[W3C]]] [World Wide Web Consortium]]
の [[Note]] として公表されたのが1999年の11月。
それから勧告されたのが2004年12月で丁度5年。
随分と掛かりましたねぇ。

[6] さて、今更こういうのを出してきたところで使ってもらえるのかどうか。
確かに現状のように各仕様それぞれで[[取込み]]・
[[輸入]]の仕組みを別個に持つよりは汎用のが1個あった方が色々便利なのは確かなのですが・・・。

[22]
[CITE[XML Inclusions (XInclude) Issues List]] <http://www.w3.org/XML/2001/05/xinclude-issues>

[23]
[CITE[XInclude CR Issues]] <http://www.w3.org/XML/2004/07/ExIT-xinclude/issues.html>

[25]
[CITE[PHP: DomDocument->xinclude - Manual]] 
<http://www.php.net/manual/ja/function.domdocument-xinclude.php>

[[PHP]] には [CODE@@en[DomDocument]] ([CODE(DOMi)@@en[[[Document]]]]
相当) に [CODE(DOMm)@@en[[[include]] ()]] メソッドがあり、
当該[[文書]]に関する取込み処理を行います。
([[名無しさん]])

[26]
[CITE[2002/dom-xinclude/org/w3c/tools/dom/xinclude/]] 
<http://dev.w3.org/cvsweb/2002/dom-xinclude/org/w3c/tools/dom/xinclude/>

[[DOM]] + [[XInclude 1.0]] の [[Java]] による実装例です。

[CODE(DOMi)@@en[[[Document]]]] の [CODE(DOMm)@@en[[[normalizeDocument]]]]
を呼ぶ時に normalize feature で [[XInclude]] 
が有効に設定されていれば [[XInclude]] を処理するようになっています。
(Normalize feature は調べていませんがおそらく [[DOM水準3]]
に入れる案があった機能なのでしょう。
[CODE(DOMi)@@en[[[DOMConfiguration]]]] 
があるから要らないということになったのでしょうか。)

[PRE[
クラス [CODE(DOMi)@@en[XIDocument]] (抜粋)
  メソッド
    [CODE(DOMm)@@en[[[normalizeDocument]]]]
      通常の処理の後、正規化機能 [CODE(URI)@@en[[[http://www.w3.org/2002/04/dom-xinclude]]]]
      が設定されている場合は、文書節点を引数として [CODE(DOMi)@@en[XITransform]] クラスの
      [CODE(DOMm)@@en[applyXInclude]] メソッドを実行します。
    引数無し
    返し値無し
    例外無し
]PRE]

[PRE[
クラス [CODE(DOMi)@@en[XITransform]]
  メソッド
    [CODE(DOMm)@@en[applyFallback]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(DOMe)@@en[xi:[[fallback]]]] 要素があればその内容で置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXInclude]]
      [[XInclude]] を与えられた節点から再帰的に適用します。
      引数
        [VAR(DOMp)@@en[n]], 型 [CODE(DOMi)@@en[[[Node]]]]
          [[XInclude]] の適用開始点。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsText]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[text]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsXML]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[xml]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[replaceXI]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を与えられた節点の並びで置換えます。
      各節点に対して [CODE(DOMm)@@en[[[applyXInclude]]]] した後、
      要素節点なら [CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性を調整した上で、
      要素を置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(XMLe)@@en[xi:[[xinclude]]]] 要素。
        [VAR(DOMp)@@en[children]], 型 [CODE(DOMi)@@en[[[NodeList]]]]
          節点の並び。
        [VAR(DOMp)@@en[importNode]], 型 [CODE(IDL)@@en[[[boolean]]]]
          もし [CODE(IDL)@@en[[[true]]]] なら、
          並び中の節点を木に挿入する前に輸入する。
      返し値無し
      例外無し
]PRE]

[CODE(DOMm)[applyXInclude]] だけ [CODE(Java)@@en[[[protected]]]]
で、後は全部 [CODE(Java)@@en[[[private]]]]。

([[名無しさん]])

[27]
[CITE[XInclude Engine]] <http://xincluder.sourceforge.net/>
([[名無しさん]])

[28]
>>27 の [[DOM]] 用は、 [CODE(DOMm)@@en[[[merge]]]]
というメソッドがあって文書節点か要素節点と基底 URI
を与えると [[XInclude]] 処理を行います。
([[名無しさん]])

[29]
[CITE[Using XInclude]] 
<http://xml.apache.org/xerces2-j/faq-xinclude.html>

[[Xerces]] の場合。読込んで木を作る時の option で有効にすれば
[[XInclude]] 処理結果に。
([[名無しさん]])

[30]
[CITE[Module xinclude from libxml2]] <http://xmlsoft.org/html/libxml-xinclude.html>

[[libxml]] の場合。

Context って中身は何?
([[名無しさん]])

[43]
[CITE[XML Inclusions (XInclude) Version 1.0 (Second Edition)]] <http://www.w3.org/TR/2006/PER-xinclude-20061003/>
([[名無しさん]] [WEAK[2006-10-05 23:48:38 +00:00]])@


1.9
log
@auto-committed
@
text
@a123 1

d127 5
@


1.8
log
@auto-committed
@
text
@d120 10
d759 1
a759 2
([[名無しさん]] [WEAK[2006-10-05 23:48:38 +00:00]])

@


1.7
log
@auto-committed
@
text
@d1 750
a750 742
[2] [DFN[[ABBR[XML] [拡張可能マーク付け言語]] [RUBYB[取込み] [Inclusions]] 1.0]]
([DFN[[ABBR[XInclude] [XML 取込み]] 1.0]]) は、
ある [[XML文書]] ([[XML情報集合]]) の一部分として別の文書 (情報集合)
を[DFN[取込む]]ための汎用の規格です。

[[XML 1.0]] と [[XML 1.1]] から構築された情報集合に対応しています
[SRC[[ABBR[XInclude] [XML 取込み]] 2]]。

* 仕様書

[1]
仕様書:
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/xinclude/>
(最新版)
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/2004/REC-xinclude-20041220/>
(2004年12月20日勧告)
- 正誤表:
[CITE[XInclude 1.0 Errata]] <http://www.w3.org/2004/12/xinclude-errata>
-[33] 正誤表追加候補:
[CITE@@en[Errata Candidates for XInclude-1.0]] <http://www.w3.org/XML/2005/01/proposed-xinclude-errata>

[37]
PEX1
<http://www.w3.org/2004/12/xinclude-errata/#PEX1>
(2005年9月27日) では、次の段落が追加されています。
>
[CODE(XMLe)@@en[[QN[xi:[[fallback]]][http://www.w3.org/2001/XInclude]]]]
[[要素]]の[[内容]]は、囲んでいる
[CODE(XMLe)@@en[[QN[xi:[[fallback]]][http://www.w3.org/2001/XInclude]]]]
[[要素]]の処理中に[[資源誤り]]が発生しない限り、
無視されます。特に、
[CODE(XMLe)@@en[[QN[xi:[[fallback]]][http://www.w3.org/2001/XInclude]]]]
[[要素]]の内側の[[要素]]や[[属性]]の存在、不存在、または[[内容]]により起こる明白な[[致死誤り]]は、
無視される
[CODE(XMLe)@@en[[QN[xi:[[fallback]]][http://www.w3.org/2001/XInclude]]]]
[[要素]]中において報告されてはなりません。

無視される
[CODE(XMLe)@@en[[QN[xi:[[fallback]]][http://www.w3.org/2001/XInclude]]]]
[[要素]]に関する[[誤り]]は報告しなくてもいいということです。

[38]
PEX6
<http://www.w3.org/2004/12/xinclude-errata/#PEX6>
では次の段落が追加されています。
> 最初の[[文字]]が[[バイト順印]]と解釈された時は、
これを捨てるべきです。これは [[UTF-8]]、[[UTF-16]]、
および [[UTF-32]] では [CODE(charname)@@en[[[BOM]]]]
として解釈します。 [[UTF-16LE]]、[[UTF-16BE]]、
[[UTF-32LE]]、[[UTF-32BE]] では [CODE(charname)@@en[[[BOM]]]]
として解釈しません。

規定がなかったから追加したそうです。
一々文書形式の仕様で規定するようなことではないと思いますが。。。

[39]
PEX7
<http://www.w3.org/2004/12/xinclude-errata/#PEX7>
では、 [CODE(XMLa)@@en[[[encoding]]]] [[属性]]の値について、
[[XML宣言]]の [CODE(XMLa)@@en[[[encoding]]]] [[擬似属性]]の値と同じ
([Q@@en[is]]) とされていたのが、[Q[[[妥当]]な[[符号化名]]である'''べき''']]に変更されました。

[[違法]]な値をどうするか ([[誤り]]?) が曖昧だったので修正したのだそうですが、
何が[[妥当]]な[[符号化名]]なのでしょうか?

[40]
PEX10
<http://www.w3.org/2004/12/xinclude-errata/#PEX10>
では、 [CODE(XMLa)@@en[[[accept]]]] [[属性]]の説明の中の
[Q[[[HTTP]] [[頭部]]では禁止されているので]]という記述が削除されました。

よくわからない説明が書いてありますが、
単に事実に反する記述なので削除しただけだと思われます。
規定内容自体に変更はありません。

[CODE(XMLa)@@en[[[accept-language]]]] [[属性]]の説明にも同じ記述がありますが、なぜか修正されていません。

[41]
PEX11
<http://www.w3.org/2004/12/xinclude-errata/#PEX11>
では、 [[UTF-8]] の参照先が [[RFC 2279]] から [[RFC 3629]] 
に参照が変わっています。
ちなみに両者は非互換です。

[42]
PEX15
<http://www.w3.org/2004/12/xinclude-errata/#PEX15>
では、 [CODE(XMLa)@@en[[[xpointer]]]] [[属性]]の[[百分率符号化]]に関するメモで、
[[百分率符号化]]されていたら[[誤り]]であるかのような表現が、
そうではなく、 [CODE(charname)@@en[[[PERCENT SIGN]]]]
が現れても [CODE(charname)@@en[[[PERCENT SIGN]]]]
そのものとして解釈されることに改められています。

[34]
(冒頭の説明に反して) 日付が書かれていないので正確な時期はわかりませんが、
正誤表に項目が追加されています。

([[名無しさん]] [WEAK[2006-05-14 10:35:19 +00:00]])

[35]
PEX16 では [CODE(XMLa)@@en[[[xml]]:[[lang]]]] と
[CODE(XMLa)@@en[[[xml]]:[[base]]]] の調整について、
[[利用者の任意選択]]によって抑制しても'''構わない'''と追記しています。

適合性に変更は無いと述べられていますが、
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] は元々する'''べき'''、
[CODE(XMLa)@@en[[[xml]]:[[base]]]] は[[助動詞]]なしの定義だったわけですから、影響がないともいえないような。

[36]
PEX17 では [[IRI]] に関する規定を [[XML 1.1]]
で規定する [[XML資源識別子]]への参照に置き換えています。
やはり適合性に変更は無いと述べられていますが、
怪しいところです ([[IRI]] の項を参照)。
しかも現時点で [[XML 1.1]] および正誤表に
[[XML資源識別子]]はまだ規定されていなかったりします。

[[#comment]]


* 処理模型

[7] 処理模型は仕様書 4 章で規定されています。

用語:
:[DFN[[RUBYB[[[原始情報集合]]] [source infoset]]]]:取込み処理の入力です。
:[DFN[[RUBYB[[[最上位被取込み項目]]] [top‐level included item]]]]:
[CODE(XMLe)[[VAR[xi:]][[include]]]] で位置付けられた[[情報項目]]。
:[DFN[[RUBYB[[[被取込み項目]]] [included item]]]]:
最上位被取込み項目とその[[属性]], [[名前空間]], [[子孫]]。
:[DFN[[RUBYB[[[取込み位置]]] [include location]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] 要素の [CODE(XMLa)[[[href]]]]
属性の値 [WEAK[(省略時は空文字列)]] を正規化して 
[ABBR[[[URI]]] [統一資源参照子]] または 
[ABBR[[[IRI]]] [国際化資源参照子]] とし、
[[XML基底]]に基づき[[解決]]した[[絶対URI]]
または[[絶対IRI]]。
:[DFN[[RUBYB[[[結果情報集合]]] [result infoset]]]]:原始情報集合と 
[CODE(XMLe)[[VAR[xi:]][[include]]]] で指定された[[資源]]の情報集合を併合した新しい[[情報集合]]です。
[WEAK[(基本的に原始情報項目と取込み項目の複製になります。)]]
:[DFN[[RUBYB[[[取込み親]]] [include parent]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] の[CODE(infoprop)[[[親]]]]。

- 原始情報集合、結果情報集合 [WEAK[(になるもの)]] は
[[XML情報集合]]が定義され得るものが対象です
[WEAK[(例えば[[整形式解析対象実体]]でも[[根要素]]が複数あるものは扱えません)]]。 
[SRC[[ABBR[XInclude] [XML 取込み]] 4]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
を陽にまたは陰に空文字列にすることで自分自身を指すことができますが、
実装方法によっては不都合があるかもしれません。
[WEAK[(自分自身の [CODE(XML)[parse="text"]] の元データがない場合など。)]]
[CODE(XMLa)[href]] が空文字列になる場合は[[資源誤り]]にして'''構いません'''。
その場合はそうなる状況を文書化する'''べきです'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
は非 [ABBR[IRI] [国際化資源識別子]] 文字を含んでいるかもしれません。
処理器は[[逃避]]する必要があります。
[ABBR[URI] [統一資源識別子]] として扱う場合は
更に [ABBR[URI] [統一資源識別子]] 文字も逃避する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1.1]]
- [[内容折衝]]を使っている場合は何が返ってくるかわかりません。
特定のものが必要な[[著者]]は [CODE(XMLe)[[VAR[xi:]]include]]
に [CODE(XMLa)[[[accept]]]] や [CODE(XMLa)[[[accept-charset]]]]
を指定する'''べきです'''。 [SRC[[ABBR[XInclude] [XML 取込み]] 4.1.2]]

[8] '''[CODE(XML)[parse=xml]] の場合''':
取込み位置の参照を解き、資源を取出し、
[[媒体型]]が [CODE(MIME)[[[application/xml]]]] 
であるとみなして[[文字符号化]]の判定や構文解析を行い、
情報集合を作成します。
[WEAK[(具体的な作成方法はあえて未規定とされており、たとえば[[妥当性検証]]を行うか否かは制約されていません。)]] 
資源が何らかの理由で利用できない時は[[資源誤り]]になります。
資源が[[整形式]]でないときは[[致命的誤り]]になります。
[WEAK[(資源誤りと致命的誤りの境界は実装依存なところがあり、例えば取込み位置が誤り頁っぽい [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 文書を返したら処理器は情報集合が作成できなかろうと資源誤りにしても構いませんし、解析しようとして非整形式で致命的誤りにしても構いません。)]]
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

(そういうのは [ABBR[[[HTTP]]] [ハイパーテキスト転送プロトコル]]
の[[状態符号]]のようなもので判断するのが普通じゃないですか?)

この情報集合の [CODE(XMLe)[[VAR[xi:]]include]]
要素は最適的に処理して[DFN[[RUBYB[[[獲得情報集合]]] [acquired infoset]]]]を作成します。
文書内参照 [WEAK[([CODE(XMLa)[[[xpointer]]]] 属性によります。)]] 
では原始情報集合を獲得情報集合として使います。
獲得情報集合のうち、取込む部分を[DFN[[RUBYB[[[取込み対象]]] [inclusion target]]]]といいます。
[CODE(XMLa)[xpointer]] 属性が省略されていれば獲得情報集合の[CODE(infoitem)[[[文書情報項目]]]]を取込み対象とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

処理器は [[XPointers]] のうち最低[CITE[枠組み]]の範囲と
[CODE[[[element]]]] scheme に対応しなければなりません。
XPointer の誤りは[[資源誤り]]とします。 [[XPath 1.0]]
と [ABBR[XML] [拡張可能マーク付け言語]] 情報集合のデータ模型の違いから、
[CODE[[[xpointer]]]] scheme が使われていて、
[CODE(infoitem)[[[未展開実体参照情報項目]]]]が対象の文書に含まれている時は、
[[致命的誤り]]とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

:取込み対象が[CODE(infoitem)[文書情報項目]]の場合:
最上位取込み項目は獲得情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[[[子供]]]]となります
(但し、 [CODE(infoitem)[[[文書型宣言情報項目]]]]を除きます)。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.1]]
:取込み対象が複数の[[節点]]の場合:
最上位取込み項目は獲得情報集合内の指された節点を獲得情報集合の[[文書順]]にしたものです。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.2]]
:取込み対象が範囲の場合:
最上位取込み項目は、指定された範囲をすべて文書順に、
重複は除いて選んだものとなります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.3]]
:点位置の場合:取込み対象が点の場合は、取込み項目は空となります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.4]]
:要素・注釈・処理指令の場合:
取込み対象が要素・注釈・処理指令の場合、
それが最上位取込み項目になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.5]]
:属性・名前空間宣言の場合:
取込み対象が[[属性節]]や[[名前空間節]]の場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.6]]
:循環の場合:[CODE(XMLe)[[VAR[xi:]]include]] 要素の処理で、
別の [CODE(XMLe)[[VAR[xi:]]include]] 要素が既に取込み鎖で処理された取込み位置・
[CODE(XMLa)[xpointer]] 属性値の時は、[[致命的誤り]]です。
(しかし、 [CODE(XMLe)[[VAR[xi:]]include]] を含む文書を [CODE(XML)[parse="text"]] で指す、同じ局所資源の異なる部分
(異なる [CODE(XMLa)[xpointer]]) を指す、
2つの入れ子でない [CODE(XMLe)[[VAR[xi:]]include]] が同じ
1つの文書 ([CODE(XMLe)[[VAR[xi:]]include]] を含む。) 
を指すなどは構いません。自分や先祖を [CODE(XML)[parse="xml"]]
で指したり、上位で既に処理した取込み要素・先祖を指すのは違法です。)
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.7]]

[9] '''[CODE(XML)[parse="text" の場合]]:'''
取込み位置の参照を解き、資源を取出し、
[CODE(infoitem)[[[文字情報項目]]]]の集合に変換します。
[CODE(infoprop)[[[要素内容項目]]]]特性は[[偽]]とします。
この[CODE(infoitem)[文字情報項目]]の集合を最上位取込み項目とします。
何らかの理由で資源が利用できない時は[[資源誤り]]になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

資源の[[文字符号化]]は、次により決定します
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]。
= 外部情報があれば、それにより。
= [CODE(MIME)[[[text/xml]]]], [CODE(MIME)[[[application/xml]]]],
[CODE(MIME)[[[text/[VAR[*]]+xml]]]],
[CODE(MIME)[[[application/[VAR[*]]+xml]]]]
であれば、 [ABBR[XML] [拡張可能マーク付け言語]] として。
= [CODE(charset)[[[UTF-8]]]] として。

- 符号化で認められないバイト列は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]
- [ABBR[XML] [拡張可能マーク付け言語]] 文書で認められない[[文字]]は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

[10] '''Fallback''': [[資源誤り]]の場合は、 fallback
動作にならなければ'''なりません'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.4]]
- 原始情報集合の [CODE(XMLe)[[VAR[xi:]][[include]]]]
[CODE(infoitem)[[[要素情報項目]]]]の[CODE(infoprop)[子供]]が丁度1つ
[CODE(XMLe)[[VAR[xi:]][[fallback]]]] を含んでいれば、
最上位取込み項目は [CODE(XMLe)[[VAR[xi:]][[fallback]]]]
の[CODE(infoprop)[子供]]を [ABBR[XInclude] [XML 取込み]]
処理した結果とします。
[WEAK[([CODE(XMLa)[parse]] 属性は影響しません。)]]

[11] '''結果情報集合の作成'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]:
= 原始情報集合の複製を作ります。
= 各 [CODE(XMLe)[[VAR[xi:]]include]] に対して、
取込み親の[CODE(infoprop)[子供]]の中の
[CODE(XMLe)[[VAR[xi:]]include]] を最上位取込み項目で置換します。
取込み項目の親は取込み親に設定します。
-- [CODE(XMLe)[[VAR[xi:]]include]] が[[根要素]]で、
最上位取込み項目が要素1つと零個以上の処理指令・注釈でない場合は[[致命的誤り]]です。
-- 取込み項目は取込み親から[CODE(infoprop)[[[適用範囲内名前空間]]]]を継承して'''構いません'''。
-- 各最上位取込み項目の取込み履歴を拡張特性[DFN[[CODE(infoprop)[[RUBYB[[[取込み履歴]]] [include history]]]]]]で記録します。
--- [CODE(infoprop)[取込み履歴]]特性が最上位水準取込み項目にあれば、
[CODE(XMLe)[[VAR[xi:]]include]] をその並びの先頭に追加します。
--- なければ、特性を追加して [CODE(XMLe)[[VAR[xi:]]include]]
[CODE(infoitem)[要素情報項目]]を唯一の項目とします。

[12] 注意: 文書内参照は原始情報集合で解決されます。
ですから、 [CODE(XMLe)[[VAR[xi:]]include]] 
の処理順は結果に影響しません。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]

[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include xpointer="xmlns(xi=http://www.w3.org/2001/XInclude)xpointer(x/xi:include[1])"
              parse="xml"/>
</x>
]PRE]

この例では、
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include href="something.xml"/>
</x>
]PRE]

と同じような結果が得られます。循環誤りにはなりません。

[13] '''非解析対象実体''':
取込み項目や子孫の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoprop)[非解析対象情報項目]]は、
重複でなければ結果情報項目に追加されます。
同じ[CODE(infoprop)[名前]]で重複でないのを追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

ここで、[DFN[重複]]とは、[CODE(infoprop)[名前]],
[CODE(infoprop)[システム識別子]], [CODE(infoprop)[公開識別子]],
[CODE(infoprop)[宣言基底URI]], [CODE(infoprop)[記法名]],
[CODE(infoprop)[記法]]が同じことを意味します。
[WEAK[(応用は他の方法、例えば[CODE(infoprop)[システム識別子]]と[CODE(infoprop)[宣言基底URI]] を使って重複を判断しても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

[14] '''記法''': 取込み項目の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoitem)[記法情報項目]]は既存のものと重複していなければ結果情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[記法]]特性に追加します。
>>13 で追加される[CODE(infoite)[非解析対象実体情報項目]]の[CODE(infoprop)[記法]]も追加します。
同じ名前で重複でない[CODE(infoitem)[記法情報項目]]を追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

記法が[DFN[重複]]とは、[CODE(infoitem)[名前]],
[CODE(infoitem)[システム識別子]], [CODE(infoitem)[公開識別子]],
[CODE(infoitem)[宣言基底URI]] が同じことを言います。
[WEAK[(応用は他の手段で重複としても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

[15] '''[CODE(infoprop)[参照]]特性の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.3]]

[[取込み]]の過程で他の要素への参照を持った属性が出てくることがあります。
[[XInclude]] 処理でこの不整合が出ればそれを修正します。

''対象'':
対象となるものは正確には、
- [CODE(InfoItem)[[[属性情報項目]]]]であり、
- [CODE(InfoProp)[[[属性型]]]]特性が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IFREFS]]]]
である時の、
- [CODE(InfoProp)[[[参照]]]]特性の値 (零個以上)

で、元々[[原始情報集合]]か[[被取込み情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]を指していたはずですが、
それを対応する[[結果情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]への参照に置換える必要が出ます。

''問題'':
具体的に問題となるのは次の場合です。
- 参照先の要素が[[被取込み文書]]中にあるものの、
取込まれる部分の外にある場合。
この場合[[結果情報集合]]では対応する要素なしとなります。
- 文書(の素片)が自己完結していない場合。
つまり参照が取込み後に認識されることを見込んでおり、
文書(の素片)中の要素を指していない場合。
この場合[CODE(InfoProp)[[[参照]]]]特性の値は[[未知]]または[[値無し]]となります。
- [[結果情報集合]]で識別子衝突が起こっている場合。
この場合、[CODE(InfoProp)[[[正規化値]]]]が同じでも[CODE(InfoProp)[[[参照]]]]が指す先は異なることが起こり得ます。

''解決法'':
簡単に言えば、[[属性値]]を元に[CODE(InfoProp)[[[参照]]]]特性を計算しなおします。

[SPAN(InfoItem)[[[属性情報項目]]]]で[CODE(InfoProp)[[[属性型]]]]が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IDREFS]]]]
の場合、
- [CODE(InfoProp)[[[正規化値]]]]の各字句について、
対応する[SPAN(InfoItem)[[[要素情報項目]]]]を並べたものを[CODE(InfoProp)[[[参照]]]]特性値とします。
- 対応する[SPAN(InfoItem)[[[要素情報項目]]]]とは、
[CODE(InfoProp)[[[属性型]]]]が [CODE(XML)@@en[[[XML]]]] であって[CODE(InfoProp)[[[正規化値]]]]が字句と一致するような[SPAN(InfoItem)[[[属性情報項目]]]]を持つことを意味します。
- [SPAN(InfoItem)[[[要素情報項目]]]]の順序は字句の順序と同じとします。
- 字句のいずれかについて対応する要素がないか、複数ある場合は、
[CODE(InfoProp)[[[参照]]]]特性値は[[値無し]]とします。

[16] '''名前空間の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.4]]

''問題'':
[CODE(InfoProp)[[[適用範囲内名前空間]]]]特性により名前空間の適用範囲は取込みを通じて保存されますが、
[CODE(InfoProp)[[[名前空間属性]]]]と齟齬が生じることがあります。

''解決策'':
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[名前空間属性]]]]特性を出さないことが推奨されていますが、
それが叶わない場合は近似のために[CODE(InfoProp)[[[名前空間属性]]]]特性に[SPAN(InfoItem)[[[属性情報項目]]]]を追加しても'''構わない'''とされています。

[17] '''基底 URI の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.5]]

''問題'':
取込み処理を通じて[CODE(InfoProp)[[[基底URI]]]]
特性は保存されるので、[[相対URI参照]]は元の[[情報集合]]においてと同じ
[[URI]] に[[解決]]されます。しかし [CODE(XMLa)@@en[[[xml]]:[[base]]]]
属性によって得られる[[基底URI]] とは食い違ってきます。

''解決策'':
最上位被取込み項目中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[基底URI]]]]
が異なるなら、[CODE(InfoProp)[[[属性]]]]に次の[SPAN(InfoItem)[[[属性情報項目]]]]を追加します。

- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[base]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XMLa)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は、
その要素の[CODE(InfoProp)[[[基底URI]]]]か、またはそれと等価な、
[CODE(InfoProp)[[[取込み親]]]]の[CODE(InfoProp)[[[基底URI]]]]
についての[[相対URI参照]]]] (その計算法は実装依存)
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]]]はその[SPAN(InfoItem)[[[要素情報項目]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[base]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[18] '''言語の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

''問題'':
[[XML]] の仕様では [CODE(XMLa)@@en[[[xml]]:[[lang]]]]
属性は[DFN[継承]]することになっていますが、
[[XML情報集合]]ではこれを特別扱いしていません。
そのため取込み時に取込みが行われた位置で言語情報が不正確になるかもしれません。

''解決策'':
[[XInclude 1.0]] では独自に[DFN[[CODE(InfoProp)[[[言語]]]]特性]]を導入し、
言語情報を保存することにしています。
[[原始情報集合]]と[[獲得情報集合]]の各[SPAN(InfoItem)[[[要素情報項目]]]]に
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[言語]]]]特性を補う'''べきです'''。
その値は、
- [CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性があれば、
その[CODE(InfoProp)[[[正規化値]]]]
- ただしその値が[[空文字列]]であるなら、[[値無し]]
- 属性がなくて[[親要素]]があれば、その[CODE(InfoProp)[[[言語]]]]
- 属性が無く[[親要素]]もなければ、[[値無し]]

となります。

そして、
[[最上位被取込み項目]]中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
- その[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[言語]]]]が異なる場合
(大文字・小文字は区別しません。) または
- 値を持ち、
[CODE(InfoProp)[[[取込み親]]]]が[SPAN(InfoItem)[[[文書情報項目]]]]である場合

には次の[SPAN(InfoItem)[[[属性情報項目]]]]を[CODE(InfoProp)[[[属性]]]]に追加します。
- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[lang]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XML)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は[CODE(InfoProp)[[[言語]]]]で、
[[値無し]]の場合は[[空文字列]]
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]はその[SPAN(InfoItem)[[[要素情報項目]]]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[lang]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[31]
'''[CODE(XMLa)@@en[[[xml]]:[[space]]]] 属性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

[CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性と
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性が特別扱いを受けているにも関わらず、
同じように[[継承]]する [CODE(XMLa)@@en[[[xml]]:[[space]]]]
属性は特別扱い''されません''。

[32]
'''その他の特性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[[XML情報集合]]で規定されているその他の[[特性]]と
[[XInclude 1.0]] で規定されている[CODE(InfoProp)[[[言語]]]]および[CODE(InfoProp)[[[取込み履歴]]]]は、
[[XInclude 1.0]] の処理でも保存されます。

それ以外の[[情報項目]]の特性は、既定では捨てます。
しかし、 [[XInclude 1.0]] の[[処理器]]は、[[利用者の任意選択]]により、
拡張特性の仕様書に従って意味的に正しくできるのであれば保存しても'''構いません'''。

例えば [[PSVI]] の[CODE(InfoProp)[[[妥当性]]]]特性は普通は捨てますが、
[[利用者の任意選択]]により保存しても構いません。
ただし[[取込み]]の結果[[妥当性]]が変化し得ますから、
それに合わせて新しい結果に修正しなければなりません。
その具体的な方法については [[XInclude 1.0]]
の範囲''外''とされています。

[[#comment]]


* 適合性

[19] '''マークの適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.1]]

ある[SPAN(InfoItem)[[[要素情報項目]]]]は、
[[XInclude 1.0]] 仕様書で規定された[[取込み要素]]の要件を満たす時、
[DFN[適合]]するといいます。 ([[要素]]および[[属性]]のみに関する制約で、
[[スキーマ]]等は制約されていません。)

[20] '''応用の適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.2]]

- 次の仕様に対応すること:
-- [[XML]] 本体:
--- [[XML 1.0]] (第3版) および [[XML名前空間 1.0]] または
--- [[XML 1.1]] および [[XML名前空間 1.1]] または
-- [[XML情報集合]] (第2版)
-- [[XML基底]]
-- [[XPointer]] 枠組み
-- [[XPointer scheme]] [CODE(XPointerScheme)@@en[[[element]]()]]
- [[致命的誤り]]に遭遇したら処理を停止すること
- 必須の条件 ('''しなければなりません''')
と選択した任意選択の条件 ('''するべきです'''と'''して構いません''')
について、規定に従うこと
- [[XInclude 1.0]] の規定するすべてのマークの適合性に関する試験を行うこと

仕様書は [CODE(XPointerScheme)@@en[[[xpointer]]()]]
[[XPointer scheme]] への対応が必須で無いので[[著者]]に注意するようにと特に助言しています。

[21] '''[ABBR[XML] [拡張可能マーク付け言語]] 情報集合適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.3]]

[[XInclude 1.0]] 仕様書は [[XML情報集合]] (第2版)
に適合すると主張しています。

正しい処理に必要な[[入力情報集合]]の情報項目:
- [SPAN(InfoItem)[[[文書情報項目]]]]:
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[基底URI]]]]
- [SPAN(InfoItem)[[[要素情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[属性]]]]、
[CODE(InfoProp)[[[基底URI]]]]、[CODE(InfoProp)[[[親]]]]
- [SPAN(InfoItem)[[[属性情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[正規化値]]]]

[[XInclude]] 処理によって更に次の情報項目が結果として生じ得ます。
- [SPAN(InfoItem)[[[子供情報項目]]]]:
[CODE(InfoProp)[[[文字符号]]]]、[CODE(InfoProp)[[[要素内容空白]]]]、
[CODE(InfoProp)[[[親]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[取込み履歴]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]
- [SPAN(InfoItem)[[[処理指令情報項目]]]]
- [SPAN(InfoItem)[[[注釈情報項目]]]]
- [SPAN(InfoItem)[[[文字情報項目]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[言語]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]

[[#comment]]


* 他との関係

[2] [ABBR[[[XLink 1.0]]] [XML 連結付け言語 1.0 版]]
で [CODE(XMLa)[[VAR[xlink:]][[show]]]] を [CODE(XML)[[[embed]]]]
にしたり、 [ABBR[[[HTML]]] [ハイパーテキストマーク付け言語]]
の [CODE(HTMLe)[[[object]]]] 要素を使ったりしても、
対応した [[WWWブラウザ]]で同じような表示にできるかもしれません。

しかし、 [ABBR[XLink] [XML 連結付け言語]] や [CODE(HTMLe)[object]]
はあくまで[[表現]]上 (見かけ上) の関係に過ぎないのに対し、
[ABBR[XInclude] [XML 取込み]] は文書の構造そのものに別の文書を取込みます。
一度取込みを行った後は、完全に元の文書の一部となります。

[3] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] の[[外部実体]]とも似ています。
[WEAK[(実際、外部実体の置換えが [ABBR[XInclude] [XML 取込み]] の1つの目的です。)]]
しかし、 [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] と次のような違いがあります。

- [ABBR[[[DTD]]] [文書型定義]] で宣言する必要はありません。
- 従って、[ABBR[[[DTD]]] [文書型定義]] 
を処理しない [[XML処理器]]でも扱えます。
[WEAK[(その代わりに当然 [ABBR[XInclude] [XML 取込み]] の処理器が必要ですけどね。)]]
- 何らかの理由で外部文書が利用できない時に、 
[ABBR[XInclude] [XML 取込み]] は fallback が利用できます。
- [ABBR[XInclude] [XML 取込み]] は [CODE(MIME)[[[text/plain]]]]
として取込むことができます。
- [[文書要素]]内とは異なる宣言の構文を使う必要がありません。

[4] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]]
文書の構文解析の後の情報集合の操作として定義されていますから、
構文解析や情報集合の構築の処理は変更されません。

取込み後の情報集合に対する [ABBR[DTD] [文書型定義]]
による[[妥当性検証]]については定義されていません
[SRC[[ABBR[XInclude] [XML 取込み]] 1.3]]。
取込みの入力は [ABBR[[[PSVI]]] [Schema 検証後情報集合]]
のような拡張された情報集合でも構いませんが、
既定では拡張部分は取込み処理で落とされます。
[[利用者の任意選択]]で拡張部分も保存しても構いませんが、
処理器は拡張部分の情報が適切であるように配慮する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[24] '''[CODE(XMLe)[[VAR[xop:]]Include]]''':
[[XOP]] には [CODE(XMLe)[[VAR[xop:]][[Include]]]]
という似た[[要素型]]があります。 

[[XOP]] は [[SOAP]] で[[バイナリ]]・データを送るにあたって [[XML 1]] +
[[Base64]] では無駄が多いことから
[CODE(MIME)[[[multipart/related]]]] 
で[[バイナリ]]・データは別に送ればよいという考えで、 [[XML]]
[[情報集合]]中の挿入点を示すために
[CODE(XMLe)[[VAR[xop:]][[Include]]]] が使われます。

[[XOP]] で [[XInclude]] が採用されなかったのは、 [[XInclude]]
の機能のごく一部しか要らないので無駄が多いこと、
外部データを [[Base64]] で符号化して挿入するために
[[XInclude]] を改訂する必要があることなどが理由とされています。

参考:
[CITE[XOP Inclusion Mechanism - Frequently Asked Questions]] 
<http://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/>

[[#comment]]


* メモ

[5] 最初に [ABBR[[[W3C]]] [World Wide Web Consortium]]
の [[Note]] として公表されたのが1999年の11月。
それから勧告されたのが2004年12月で丁度5年。
随分と掛かりましたねぇ。

[6] さて、今更こういうのを出してきたところで使ってもらえるのかどうか。
確かに現状のように各仕様それぞれで[[取込み]]・
[[輸入]]の仕組みを別個に持つよりは汎用のが1個あった方が色々便利なのは確かなのですが・・・。

[22]
[CITE[XML Inclusions (XInclude) Issues List]] <http://www.w3.org/XML/2001/05/xinclude-issues>

[23]
[CITE[XInclude CR Issues]] <http://www.w3.org/XML/2004/07/ExIT-xinclude/issues.html>

[25]
[CITE[PHP: DomDocument->xinclude - Manual]] 
<http://www.php.net/manual/ja/function.domdocument-xinclude.php>

[[PHP]] には [CODE@@en[DomDocument]] ([CODE(DOMi)@@en[[[Document]]]]
相当) に [CODE(DOMm)@@en[[[include]] ()]] メソッドがあり、
当該[[文書]]に関する取込み処理を行います。
([[名無しさん]])

[26]
[CITE[2002/dom-xinclude/org/w3c/tools/dom/xinclude/]] 
<http://dev.w3.org/cvsweb/2002/dom-xinclude/org/w3c/tools/dom/xinclude/>

[[DOM]] + [[XInclude 1.0]] の [[Java]] による実装例です。

[CODE(DOMi)@@en[[[Document]]]] の [CODE(DOMm)@@en[[[normalizeDocument]]]]
を呼ぶ時に normalize feature で [[XInclude]] 
が有効に設定されていれば [[XInclude]] を処理するようになっています。
(Normalize feature は調べていませんがおそらく [[DOM水準3]]
に入れる案があった機能なのでしょう。
[CODE(DOMi)@@en[[[DOMConfiguration]]]] 
があるから要らないということになったのでしょうか。)

[PRE[
クラス [CODE(DOMi)@@en[XIDocument]] (抜粋)
  メソッド
    [CODE(DOMm)@@en[[[normalizeDocument]]]]
      通常の処理の後、正規化機能 [CODE(URI)@@en[[[http://www.w3.org/2002/04/dom-xinclude]]]]
      が設定されている場合は、文書節点を引数として [CODE(DOMi)@@en[XITransform]] クラスの
      [CODE(DOMm)@@en[applyXInclude]] メソッドを実行します。
    引数無し
    返し値無し
    例外無し
]PRE]

[PRE[
クラス [CODE(DOMi)@@en[XITransform]]
  メソッド
    [CODE(DOMm)@@en[applyFallback]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(DOMe)@@en[xi:[[fallback]]]] 要素があればその内容で置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXInclude]]
      [[XInclude]] を与えられた節点から再帰的に適用します。
      引数
        [VAR(DOMp)@@en[n]], 型 [CODE(DOMi)@@en[[[Node]]]]
          [[XInclude]] の適用開始点。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsText]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[text]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsXML]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[xml]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[replaceXI]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を与えられた節点の並びで置換えます。
      各節点に対して [CODE(DOMm)@@en[[[applyXInclude]]]] した後、
      要素節点なら [CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性を調整した上で、
      要素を置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(XMLe)@@en[xi:[[xinclude]]]] 要素。
        [VAR(DOMp)@@en[children]], 型 [CODE(DOMi)@@en[[[NodeList]]]]
          節点の並び。
        [VAR(DOMp)@@en[importNode]], 型 [CODE(IDL)@@en[[[boolean]]]]
          もし [CODE(IDL)@@en[[[true]]]] なら、
          並び中の節点を木に挿入する前に輸入する。
      返し値無し
      例外無し
]PRE]

[CODE(DOMm)[applyXInclude]] だけ [CODE(Java)@@en[[[protected]]]]
で、後は全部 [CODE(Java)@@en[[[private]]]]。

([[名無しさん]])

[27]
[CITE[XInclude Engine]] <http://xincluder.sourceforge.net/>
([[名無しさん]])

[28]
>>27 の [[DOM]] 用は、 [CODE(DOMm)@@en[[[merge]]]]
というメソッドがあって文書節点か要素節点と基底 URI
を与えると [[XInclude]] 処理を行います。
([[名無しさん]])

[29]
[CITE[Using XInclude]] 
<http://xml.apache.org/xerces2-j/faq-xinclude.html>

[[Xerces]] の場合。読込んで木を作る時の option で有効にすれば
[[XInclude]] 処理結果に。
([[名無しさん]])

[30]
[CITE[Module xinclude from libxml2]] <http://xmlsoft.org/html/libxml-xinclude.html>

[[libxml]] の場合。

Context って中身は何?
([[名無しさん]])@


1.6
log
@auto-committed
@
text
@d1 109
a109 40

[2] [DFN[[ABBR[XML] [拡張可能マーク付け言語]] [RUBYB[取込み] [Inclusions]] 1.0]]
([DFN[[ABBR[XInclude] [XML 取込み]] 1.0]]) は、
ある [[XML文書]] ([[XML情報集合]]) の一部分として別の文書 (情報集合)
を[DFN[取込む]]ための汎用の規格です。

[[XML 1.0]] と [[XML 1.1]] から構築された情報集合に対応しています
[SRC[[ABBR[XInclude] [XML 取込み]] 2]]。

[1]
仕様書:
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/xinclude/>
(最新版)
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/2004/REC-xinclude-20041220/>
(2004年12月20日勧告)
- 正誤表:
[CITE[XInclude 1.0 Errata]] <http://www.w3.org/2004/12/xinclude-errata>

[33]
[CITE[Errata Candidates for XInclude-1.0]] <http://www.w3.org/XML/2005/01/proposed-xinclude-errata>
([[名無しさん]])

[34]
(冒頭の説明に反して) 日付が書かれていないので正確な時期はわかりませんが、
正誤表に項目が追加されています。

([[名無しさん]] [WEAK[2006-05-14 10:35:19 +00:00]])

[35]
PEX16 では [CODE(XMLa)@@en[[[xml]]:[[lang]]]] と
[CODE(XMLa)@@en[[[xml]]:[[base]]]] の調整について、
[[利用者の任意選択]]によって抑制しても'''構わない'''と追記しています。

適合性に変更は無いと述べられていますが、
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] は元々する'''べき'''、
[CODE(XMLa)@@en[[[xml]]:[[base]]]] は[[助動詞]]なしの定義だったわけですから、影響がないともいえないような。
([[名無しさん]])


[36]
d115 627
a741 629
[[XML資源識別子]]はまだ規定されていなかったりします。
([[名無しさん]])


[[#comment]]


* 処理模型

[7] 処理模型は仕様書 4 章で規定されています。

用語:
:[DFN[[RUBYB[[[原始情報集合]]] [source infoset]]]]:取込み処理の入力です。
:[DFN[[RUBYB[[[最上位被取込み項目]]] [top‐level included item]]]]:
[CODE(XMLe)[[VAR[xi:]][[include]]]] で位置付けられた[[情報項目]]。
:[DFN[[RUBYB[[[被取込み項目]]] [included item]]]]:
最上位被取込み項目とその[[属性]], [[名前空間]], [[子孫]]。
:[DFN[[RUBYB[[[取込み位置]]] [include location]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] 要素の [CODE(XMLa)[[[href]]]]
属性の値 [WEAK[(省略時は空文字列)]] を正規化して 
[ABBR[[[URI]]] [統一資源参照子]] または 
[ABBR[[[IRI]]] [国際化資源参照子]] とし、
[[XML基底]]に基づき[[解決]]した[[絶対URI]]
または[[絶対IRI]]。
:[DFN[[RUBYB[[[結果情報集合]]] [result infoset]]]]:原始情報集合と 
[CODE(XMLe)[[VAR[xi:]][[include]]]] で指定された[[資源]]の情報集合を併合した新しい[[情報集合]]です。
[WEAK[(基本的に原始情報項目と取込み項目の複製になります。)]]
:[DFN[[RUBYB[[[取込み親]]] [include parent]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] の[CODE(infoprop)[[[親]]]]。

- 原始情報集合、結果情報集合 [WEAK[(になるもの)]] は
[[XML情報集合]]が定義され得るものが対象です
[WEAK[(例えば[[整形式解析対象実体]]でも[[根要素]]が複数あるものは扱えません)]]。 
[SRC[[ABBR[XInclude] [XML 取込み]] 4]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
を陽にまたは陰に空文字列にすることで自分自身を指すことができますが、
実装方法によっては不都合があるかもしれません。
[WEAK[(自分自身の [CODE(XML)[parse="text"]] の元データがない場合など。)]]
[CODE(XMLa)[href]] が空文字列になる場合は[[資源誤り]]にして'''構いません'''。
その場合はそうなる状況を文書化する'''べきです'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
は非 [ABBR[IRI] [国際化資源識別子]] 文字を含んでいるかもしれません。
処理器は[[逃避]]する必要があります。
[ABBR[URI] [統一資源識別子]] として扱う場合は
更に [ABBR[URI] [統一資源識別子]] 文字も逃避する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1.1]]
- [[内容折衝]]を使っている場合は何が返ってくるかわかりません。
特定のものが必要な[[著者]]は [CODE(XMLe)[[VAR[xi:]]include]]
に [CODE(XMLa)[[[accept]]]] や [CODE(XMLa)[[[accept-charset]]]]
を指定する'''べきです'''。 [SRC[[ABBR[XInclude] [XML 取込み]] 4.1.2]]

[8] '''[CODE(XML)[parse=xml]] の場合''':
取込み位置の参照を解き、資源を取出し、
[[媒体型]]が [CODE(MIME)[[[application/xml]]]] 
であるとみなして[[文字符号化]]の判定や構文解析を行い、
情報集合を作成します。
[WEAK[(具体的な作成方法はあえて未規定とされており、たとえば[[妥当性検証]]を行うか否かは制約されていません。)]] 
資源が何らかの理由で利用できない時は[[資源誤り]]になります。
資源が[[整形式]]でないときは[[致命的誤り]]になります。
[WEAK[(資源誤りと致命的誤りの境界は実装依存なところがあり、例えば取込み位置が誤り頁っぽい [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 文書を返したら処理器は情報集合が作成できなかろうと資源誤りにしても構いませんし、解析しようとして非整形式で致命的誤りにしても構いません。)]]
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

(そういうのは [ABBR[[[HTTP]]] [ハイパーテキスト転送プロトコル]]
の[[状態符号]]のようなもので判断するのが普通じゃないですか?)

この情報集合の [CODE(XMLe)[[VAR[xi:]]include]]
要素は最適的に処理して[DFN[[RUBYB[[[獲得情報集合]]] [acquired infoset]]]]を作成します。
文書内参照 [WEAK[([CODE(XMLa)[[[xpointer]]]] 属性によります。)]] 
では原始情報集合を獲得情報集合として使います。
獲得情報集合のうち、取込む部分を[DFN[[RUBYB[[[取込み対象]]] [inclusion target]]]]といいます。
[CODE(XMLa)[xpointer]] 属性が省略されていれば獲得情報集合の[CODE(infoitem)[[[文書情報項目]]]]を取込み対象とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

処理器は [[XPointers]] のうち最低[CITE[枠組み]]の範囲と
[CODE[[[element]]]] scheme に対応しなければなりません。
XPointer の誤りは[[資源誤り]]とします。 [[XPath 1.0]]
と [ABBR[XML] [拡張可能マーク付け言語]] 情報集合のデータ模型の違いから、
[CODE[[[xpointer]]]] scheme が使われていて、
[CODE(infoitem)[[[未展開実体参照情報項目]]]]が対象の文書に含まれている時は、
[[致命的誤り]]とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

:取込み対象が[CODE(infoitem)[文書情報項目]]の場合:
最上位取込み項目は獲得情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[[[子供]]]]となります
(但し、 [CODE(infoitem)[[[文書型宣言情報項目]]]]を除きます)。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.1]]
:取込み対象が複数の[[節点]]の場合:
最上位取込み項目は獲得情報集合内の指された節点を獲得情報集合の[[文書順]]にしたものです。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.2]]
:取込み対象が範囲の場合:
最上位取込み項目は、指定された範囲をすべて文書順に、
重複は除いて選んだものとなります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.3]]
:点位置の場合:取込み対象が点の場合は、取込み項目は空となります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.4]]
:要素・注釈・処理指令の場合:
取込み対象が要素・注釈・処理指令の場合、
それが最上位取込み項目になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.5]]
:属性・名前空間宣言の場合:
取込み対象が[[属性節]]や[[名前空間節]]の場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.6]]
:循環の場合:[CODE(XMLe)[[VAR[xi:]]include]] 要素の処理で、
別の [CODE(XMLe)[[VAR[xi:]]include]] 要素が既に取込み鎖で処理された取込み位置・
[CODE(XMLa)[xpointer]] 属性値の時は、[[致命的誤り]]です。
(しかし、 [CODE(XMLe)[[VAR[xi:]]include]] を含む文書を [CODE(XML)[parse="text"]] で指す、同じ局所資源の異なる部分
(異なる [CODE(XMLa)[xpointer]]) を指す、
2つの入れ子でない [CODE(XMLe)[[VAR[xi:]]include]] が同じ
1つの文書 ([CODE(XMLe)[[VAR[xi:]]include]] を含む。) 
を指すなどは構いません。自分や先祖を [CODE(XML)[parse="xml"]]
で指したり、上位で既に処理した取込み要素・先祖を指すのは違法です。)
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.7]]

[9] '''[CODE(XML)[parse="text" の場合]]:'''
取込み位置の参照を解き、資源を取出し、
[CODE(infoitem)[[[文字情報項目]]]]の集合に変換します。
[CODE(infoprop)[[[要素内容項目]]]]特性は[[偽]]とします。
この[CODE(infoitem)[文字情報項目]]の集合を最上位取込み項目とします。
何らかの理由で資源が利用できない時は[[資源誤り]]になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

資源の[[文字符号化]]は、次により決定します
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]。
= 外部情報があれば、それにより。
= [CODE(MIME)[[[text/xml]]]], [CODE(MIME)[[[application/xml]]]],
[CODE(MIME)[[[text/[VAR[*]]+xml]]]],
[CODE(MIME)[[[application/[VAR[*]]+xml]]]]
であれば、 [ABBR[XML] [拡張可能マーク付け言語]] として。
= [CODE(charset)[[[UTF-8]]]] として。

- 符号化で認められないバイト列は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]
- [ABBR[XML] [拡張可能マーク付け言語]] 文書で認められない[[文字]]は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

[10] '''Fallback''': [[資源誤り]]の場合は、 fallback
動作にならなければ'''なりません'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.4]]
- 原始情報集合の [CODE(XMLe)[[VAR[xi:]][[include]]]]
[CODE(infoitem)[[[要素情報項目]]]]の[CODE(infoprop)[子供]]が丁度1つ
[CODE(XMLe)[[VAR[xi:]][[fallback]]]] を含んでいれば、
最上位取込み項目は [CODE(XMLe)[[VAR[xi:]][[fallback]]]]
の[CODE(infoprop)[子供]]を [ABBR[XInclude] [XML 取込み]]
処理した結果とします。
[WEAK[([CODE(XMLa)[parse]] 属性は影響しません。)]]

[11] '''結果情報集合の作成'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]:
= 原始情報集合の複製を作ります。
= 各 [CODE(XMLe)[[VAR[xi:]]include]] に対して、
取込み親の[CODE(infoprop)[子供]]の中の
[CODE(XMLe)[[VAR[xi:]]include]] を最上位取込み項目で置換します。
取込み項目の親は取込み親に設定します。
-- [CODE(XMLe)[[VAR[xi:]]include]] が[[根要素]]で、
最上位取込み項目が要素1つと零個以上の処理指令・注釈でない場合は[[致命的誤り]]です。
-- 取込み項目は取込み親から[CODE(infoprop)[[[適用範囲内名前空間]]]]を継承して'''構いません'''。
-- 各最上位取込み項目の取込み履歴を拡張特性[DFN[[CODE(infoprop)[[RUBYB[[[取込み履歴]]] [include history]]]]]]で記録します。
--- [CODE(infoprop)[取込み履歴]]特性が最上位水準取込み項目にあれば、
[CODE(XMLe)[[VAR[xi:]]include]] をその並びの先頭に追加します。
--- なければ、特性を追加して [CODE(XMLe)[[VAR[xi:]]include]]
[CODE(infoitem)[要素情報項目]]を唯一の項目とします。

[12] 注意: 文書内参照は原始情報集合で解決されます。
ですから、 [CODE(XMLe)[[VAR[xi:]]include]] 
の処理順は結果に影響しません。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]

[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include xpointer="xmlns(xi=http://www.w3.org/2001/XInclude)xpointer(x/xi:include[1])"
              parse="xml"/>
</x>
]PRE]

この例では、
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include href="something.xml"/>
</x>
]PRE]

と同じような結果が得られます。循環誤りにはなりません。

[13] '''非解析対象実体''':
取込み項目や子孫の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoprop)[非解析対象情報項目]]は、
重複でなければ結果情報項目に追加されます。
同じ[CODE(infoprop)[名前]]で重複でないのを追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

ここで、[DFN[重複]]とは、[CODE(infoprop)[名前]],
[CODE(infoprop)[システム識別子]], [CODE(infoprop)[公開識別子]],
[CODE(infoprop)[宣言基底URI]], [CODE(infoprop)[記法名]],
[CODE(infoprop)[記法]]が同じことを意味します。
[WEAK[(応用は他の方法、例えば[CODE(infoprop)[システム識別子]]と[CODE(infoprop)[宣言基底URI]] を使って重複を判断しても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

[14] '''記法''': 取込み項目の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoitem)[記法情報項目]]は既存のものと重複していなければ結果情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[記法]]特性に追加します。
>>13 で追加される[CODE(infoite)[非解析対象実体情報項目]]の[CODE(infoprop)[記法]]も追加します。
同じ名前で重複でない[CODE(infoitem)[記法情報項目]]を追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

記法が[DFN[重複]]とは、[CODE(infoitem)[名前]],
[CODE(infoitem)[システム識別子]], [CODE(infoitem)[公開識別子]],
[CODE(infoitem)[宣言基底URI]] が同じことを言います。
[WEAK[(応用は他の手段で重複としても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

[15] '''[CODE(infoprop)[参照]]特性の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.3]]

[[取込み]]の過程で他の要素への参照を持った属性が出てくることがあります。
[[XInclude]] 処理でこの不整合が出ればそれを修正します。

''対象'':
対象となるものは正確には、
- [CODE(InfoItem)[[[属性情報項目]]]]であり、
- [CODE(InfoProp)[[[属性型]]]]特性が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IFREFS]]]]
である時の、
- [CODE(InfoProp)[[[参照]]]]特性の値 (零個以上)

で、元々[[原始情報集合]]か[[被取込み情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]を指していたはずですが、
それを対応する[[結果情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]への参照に置換える必要が出ます。

''問題'':
具体的に問題となるのは次の場合です。
- 参照先の要素が[[被取込み文書]]中にあるものの、
取込まれる部分の外にある場合。
この場合[[結果情報集合]]では対応する要素なしとなります。
- 文書(の素片)が自己完結していない場合。
つまり参照が取込み後に認識されることを見込んでおり、
文書(の素片)中の要素を指していない場合。
この場合[CODE(InfoProp)[[[参照]]]]特性の値は[[未知]]または[[値無し]]となります。
- [[結果情報集合]]で識別子衝突が起こっている場合。
この場合、[CODE(InfoProp)[[[正規化値]]]]が同じでも[CODE(InfoProp)[[[参照]]]]が指す先は異なることが起こり得ます。

''解決法'':
簡単に言えば、[[属性値]]を元に[CODE(InfoProp)[[[参照]]]]特性を計算しなおします。

[SPAN(InfoItem)[[[属性情報項目]]]]で[CODE(InfoProp)[[[属性型]]]]が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IDREFS]]]]
の場合、
- [CODE(InfoProp)[[[正規化値]]]]の各字句について、
対応する[SPAN(InfoItem)[[[要素情報項目]]]]を並べたものを[CODE(InfoProp)[[[参照]]]]特性値とします。
- 対応する[SPAN(InfoItem)[[[要素情報項目]]]]とは、
[CODE(InfoProp)[[[属性型]]]]が [CODE(XML)@@en[[[XML]]]] であって[CODE(InfoProp)[[[正規化値]]]]が字句と一致するような[SPAN(InfoItem)[[[属性情報項目]]]]を持つことを意味します。
- [SPAN(InfoItem)[[[要素情報項目]]]]の順序は字句の順序と同じとします。
- 字句のいずれかについて対応する要素がないか、複数ある場合は、
[CODE(InfoProp)[[[参照]]]]特性値は[[値無し]]とします。

[16] '''名前空間の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.4]]

''問題'':
[CODE(InfoProp)[[[適用範囲内名前空間]]]]特性により名前空間の適用範囲は取込みを通じて保存されますが、
[CODE(InfoProp)[[[名前空間属性]]]]と齟齬が生じることがあります。

''解決策'':
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[名前空間属性]]]]特性を出さないことが推奨されていますが、
それが叶わない場合は近似のために[CODE(InfoProp)[[[名前空間属性]]]]特性に[SPAN(InfoItem)[[[属性情報項目]]]]を追加しても'''構わない'''とされています。

[17] '''基底 URI の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.5]]

''問題'':
取込み処理を通じて[CODE(InfoProp)[[[基底URI]]]]
特性は保存されるので、[[相対URI参照]]は元の[[情報集合]]においてと同じ
[[URI]] に[[解決]]されます。しかし [CODE(XMLa)@@en[[[xml]]:[[base]]]]
属性によって得られる[[基底URI]] とは食い違ってきます。

''解決策'':
最上位被取込み項目中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[基底URI]]]]
が異なるなら、[CODE(InfoProp)[[[属性]]]]に次の[SPAN(InfoItem)[[[属性情報項目]]]]を追加します。

- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[base]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XMLa)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は、
その要素の[CODE(InfoProp)[[[基底URI]]]]か、またはそれと等価な、
[CODE(InfoProp)[[[取込み親]]]]の[CODE(InfoProp)[[[基底URI]]]]
についての[[相対URI参照]]]] (その計算法は実装依存)
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]]]はその[SPAN(InfoItem)[[[要素情報項目]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[base]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[18] '''言語の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

''問題'':
[[XML]] の仕様では [CODE(XMLa)@@en[[[xml]]:[[lang]]]]
属性は[DFN[継承]]することになっていますが、
[[XML情報集合]]ではこれを特別扱いしていません。
そのため取込み時に取込みが行われた位置で言語情報が不正確になるかもしれません。

''解決策'':
[[XInclude 1.0]] では独自に[DFN[[CODE(InfoProp)[[[言語]]]]特性]]を導入し、
言語情報を保存することにしています。
[[原始情報集合]]と[[獲得情報集合]]の各[SPAN(InfoItem)[[[要素情報項目]]]]に
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[言語]]]]特性を補う'''べきです'''。
その値は、
- [CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性があれば、
その[CODE(InfoProp)[[[正規化値]]]]
- ただしその値が[[空文字列]]であるなら、[[値無し]]
- 属性がなくて[[親要素]]があれば、その[CODE(InfoProp)[[[言語]]]]
- 属性が無く[[親要素]]もなければ、[[値無し]]

となります。

そして、
[[最上位被取込み項目]]中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
- その[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[言語]]]]が異なる場合
(大文字・小文字は区別しません。) または
- 値を持ち、
[CODE(InfoProp)[[[取込み親]]]]が[SPAN(InfoItem)[[[文書情報項目]]]]である場合

には次の[SPAN(InfoItem)[[[属性情報項目]]]]を[CODE(InfoProp)[[[属性]]]]に追加します。
- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[lang]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XML)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は[CODE(InfoProp)[[[言語]]]]で、
[[値無し]]の場合は[[空文字列]]
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]はその[SPAN(InfoItem)[[[要素情報項目]]]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[lang]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[31]
'''[CODE(XMLa)@@en[[[xml]]:[[space]]]] 属性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

[CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性と
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性が特別扱いを受けているにも関わらず、
同じように[[継承]]する [CODE(XMLa)@@en[[[xml]]:[[space]]]]
属性は特別扱い''されません''。

[32]
'''その他の特性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[[XML情報集合]]で規定されているその他の[[特性]]と
[[XInclude 1.0]] で規定されている[CODE(InfoProp)[[[言語]]]]および[CODE(InfoProp)[[[取込み履歴]]]]は、
[[XInclude 1.0]] の処理でも保存されます。

それ以外の[[情報項目]]の特性は、既定では捨てます。
しかし、 [[XInclude 1.0]] の[[処理器]]は、[[利用者の任意選択]]により、
拡張特性の仕様書に従って意味的に正しくできるのであれば保存しても'''構いません'''。

例えば [[PSVI]] の[CODE(InfoProp)[[[妥当性]]]]特性は普通は捨てますが、
[[利用者の任意選択]]により保存しても構いません。
ただし[[取込み]]の結果[[妥当性]]が変化し得ますから、
それに合わせて新しい結果に修正しなければなりません。
その具体的な方法については [[XInclude 1.0]]
の範囲''外''とされています。

[[#comment]]


* 適合性

[19] '''マークの適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.1]]

ある[SPAN(InfoItem)[[[要素情報項目]]]]は、
[[XInclude 1.0]] 仕様書で規定された[[取込み要素]]の要件を満たす時、
[DFN[適合]]するといいます。 ([[要素]]および[[属性]]のみに関する制約で、
[[スキーマ]]等は制約されていません。)

[20] '''応用の適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.2]]

- 次の仕様に対応すること:
-- [[XML]] 本体:
--- [[XML 1.0]] (第3版) および [[XML名前空間 1.0]] または
--- [[XML 1.1]] および [[XML名前空間 1.1]] または
-- [[XML情報集合]] (第2版)
-- [[XML基底]]
-- [[XPointer]] 枠組み
-- [[XPointer scheme]] [CODE(XPointerScheme)@@en[[[element]]()]]
- [[致命的誤り]]に遭遇したら処理を停止すること
- 必須の条件 ('''しなければなりません''')
と選択した任意選択の条件 ('''するべきです'''と'''して構いません''')
について、規定に従うこと
- [[XInclude 1.0]] の規定するすべてのマークの適合性に関する試験を行うこと

仕様書は [CODE(XPointerScheme)@@en[[[xpointer]]()]]
[[XPointer scheme]] への対応が必須で無いので[[著者]]に注意するようにと特に助言しています。

[21] '''[ABBR[XML] [拡張可能マーク付け言語]] 情報集合適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.3]]

[[XInclude 1.0]] 仕様書は [[XML情報集合]] (第2版)
に適合すると主張しています。

正しい処理に必要な[[入力情報集合]]の情報項目:
- [SPAN(InfoItem)[[[文書情報項目]]]]:
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[基底URI]]]]
- [SPAN(InfoItem)[[[要素情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[属性]]]]、
[CODE(InfoProp)[[[基底URI]]]]、[CODE(InfoProp)[[[親]]]]
- [SPAN(InfoItem)[[[属性情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[正規化値]]]]

[[XInclude]] 処理によって更に次の情報項目が結果として生じ得ます。
- [SPAN(InfoItem)[[[子供情報項目]]]]:
[CODE(InfoProp)[[[文字符号]]]]、[CODE(InfoProp)[[[要素内容空白]]]]、
[CODE(InfoProp)[[[親]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[取込み履歴]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]
- [SPAN(InfoItem)[[[処理指令情報項目]]]]
- [SPAN(InfoItem)[[[注釈情報項目]]]]
- [SPAN(InfoItem)[[[文字情報項目]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[言語]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]

[[#comment]]


* 他との関係

[2] [ABBR[[[XLink 1.0]]] [XML 連結付け言語 1.0 版]]
で [CODE(XMLa)[[VAR[xlink:]][[show]]]] を [CODE(XML)[[[embed]]]]
にしたり、 [ABBR[[[HTML]]] [ハイパーテキストマーク付け言語]]
の [CODE(HTMLe)[[[object]]]] 要素を使ったりしても、
対応した [[WWWブラウザ]]で同じような表示にできるかもしれません。

しかし、 [ABBR[XLink] [XML 連結付け言語]] や [CODE(HTMLe)[object]]
はあくまで[[表現]]上 (見かけ上) の関係に過ぎないのに対し、
[ABBR[XInclude] [XML 取込み]] は文書の構造そのものに別の文書を取込みます。
一度取込みを行った後は、完全に元の文書の一部となります。

[3] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] の[[外部実体]]とも似ています。
[WEAK[(実際、外部実体の置換えが [ABBR[XInclude] [XML 取込み]] の1つの目的です。)]]
しかし、 [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] と次のような違いがあります。

- [ABBR[[[DTD]]] [文書型定義]] で宣言する必要はありません。
- 従って、[ABBR[[[DTD]]] [文書型定義]] 
を処理しない [[XML処理器]]でも扱えます。
[WEAK[(その代わりに当然 [ABBR[XInclude] [XML 取込み]] の処理器が必要ですけどね。)]]
- 何らかの理由で外部文書が利用できない時に、 
[ABBR[XInclude] [XML 取込み]] は fallback が利用できます。
- [ABBR[XInclude] [XML 取込み]] は [CODE(MIME)[[[text/plain]]]]
として取込むことができます。
- [[文書要素]]内とは異なる宣言の構文を使う必要がありません。

[4] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]]
文書の構文解析の後の情報集合の操作として定義されていますから、
構文解析や情報集合の構築の処理は変更されません。

取込み後の情報集合に対する [ABBR[DTD] [文書型定義]]
による[[妥当性検証]]については定義されていません
[SRC[[ABBR[XInclude] [XML 取込み]] 1.3]]。
取込みの入力は [ABBR[[[PSVI]]] [Schema 検証後情報集合]]
のような拡張された情報集合でも構いませんが、
既定では拡張部分は取込み処理で落とされます。
[[利用者の任意選択]]で拡張部分も保存しても構いませんが、
処理器は拡張部分の情報が適切であるように配慮する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[24] '''[CODE(XMLe)[[VAR[xop:]]Include]]''':
[[XOP]] には [CODE(XMLe)[[VAR[xop:]][[Include]]]]
という似た[[要素型]]があります。 

[[XOP]] は [[SOAP]] で[[バイナリ]]・データを送るにあたって [[XML 1]] +
[[Base64]] では無駄が多いことから
[CODE(MIME)[[[multipart/related]]]] 
で[[バイナリ]]・データは別に送ればよいという考えで、 [[XML]]
[[情報集合]]中の挿入点を示すために
[CODE(XMLe)[[VAR[xop:]][[Include]]]] が使われます。

[[XOP]] で [[XInclude]] が採用されなかったのは、 [[XInclude]]
の機能のごく一部しか要らないので無駄が多いこと、
外部データを [[Base64]] で符号化して挿入するために
[[XInclude]] を改訂する必要があることなどが理由とされています。

参考:
[CITE[XOP Inclusion Mechanism - Frequently Asked Questions]] 
<http://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/>

[[#comment]]


* メモ

[5] 最初に [ABBR[[[W3C]]] [World Wide Web Consortium]]
の [[Note]] として公表されたのが1999年の11月。
それから勧告されたのが2004年12月で丁度5年。
随分と掛かりましたねぇ。

[6] さて、今更こういうのを出してきたところで使ってもらえるのかどうか。
確かに現状のように各仕様それぞれで[[取込み]]・
[[輸入]]の仕組みを別個に持つよりは汎用のが1個あった方が色々便利なのは確かなのですが・・・。

[22]
[CITE[XML Inclusions (XInclude) Issues List]] <http://www.w3.org/XML/2001/05/xinclude-issues>

[23]
[CITE[XInclude CR Issues]] <http://www.w3.org/XML/2004/07/ExIT-xinclude/issues.html>

[25]
[CITE[PHP: DomDocument->xinclude - Manual]] 
<http://www.php.net/manual/ja/function.domdocument-xinclude.php>

[[PHP]] には [CODE@@en[DomDocument]] ([CODE(DOMi)@@en[[[Document]]]]
相当) に [CODE(DOMm)@@en[[[include]] ()]] メソッドがあり、
当該[[文書]]に関する取込み処理を行います。
([[名無しさん]])

[26]
[CITE[2002/dom-xinclude/org/w3c/tools/dom/xinclude/]] 
<http://dev.w3.org/cvsweb/2002/dom-xinclude/org/w3c/tools/dom/xinclude/>

[[DOM]] + [[XInclude 1.0]] の [[Java]] による実装例です。

[CODE(DOMi)@@en[[[Document]]]] の [CODE(DOMm)@@en[[[normalizeDocument]]]]
を呼ぶ時に normalize feature で [[XInclude]] 
が有効に設定されていれば [[XInclude]] を処理するようになっています。
(Normalize feature は調べていませんがおそらく [[DOM水準3]]
に入れる案があった機能なのでしょう。
[CODE(DOMi)@@en[[[DOMConfiguration]]]] 
があるから要らないということになったのでしょうか。)

[PRE[
クラス [CODE(DOMi)@@en[XIDocument]] (抜粋)
  メソッド
    [CODE(DOMm)@@en[[[normalizeDocument]]]]
      通常の処理の後、正規化機能 [CODE(URI)@@en[[[http://www.w3.org/2002/04/dom-xinclude]]]]
      が設定されている場合は、文書節点を引数として [CODE(DOMi)@@en[XITransform]] クラスの
      [CODE(DOMm)@@en[applyXInclude]] メソッドを実行します。
    引数無し
    返し値無し
    例外無し
]PRE]

[PRE[
クラス [CODE(DOMi)@@en[XITransform]]
  メソッド
    [CODE(DOMm)@@en[applyFallback]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(DOMe)@@en[xi:[[fallback]]]] 要素があればその内容で置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXInclude]]
      [[XInclude]] を与えられた節点から再帰的に適用します。
      引数
        [VAR(DOMp)@@en[n]], 型 [CODE(DOMi)@@en[[[Node]]]]
          [[XInclude]] の適用開始点。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsText]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[text]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsXML]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[xml]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[replaceXI]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を与えられた節点の並びで置換えます。
      各節点に対して [CODE(DOMm)@@en[[[applyXInclude]]]] した後、
      要素節点なら [CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性を調整した上で、
      要素を置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(XMLe)@@en[xi:[[xinclude]]]] 要素。
        [VAR(DOMp)@@en[children]], 型 [CODE(DOMi)@@en[[[NodeList]]]]
          節点の並び。
        [VAR(DOMp)@@en[importNode]], 型 [CODE(IDL)@@en[[[boolean]]]]
          もし [CODE(IDL)@@en[[[true]]]] なら、
          並び中の節点を木に挿入する前に輸入する。
      返し値無し
      例外無し
]PRE]

[CODE(DOMm)[applyXInclude]] だけ [CODE(Java)@@en[[[protected]]]]
で、後は全部 [CODE(Java)@@en[[[private]]]]。

([[名無しさん]])

[27]
[CITE[XInclude Engine]] <http://xincluder.sourceforge.net/>
([[名無しさん]])

[28]
>>27 の [[DOM]] 用は、 [CODE(DOMm)@@en[[[merge]]]]
というメソッドがあって文書節点か要素節点と基底 URI
を与えると [[XInclude]] 処理を行います。
([[名無しさん]])

[29]
[CITE[Using XInclude]] 
<http://xml.apache.org/xerces2-j/faq-xinclude.html>

[[Xerces]] の場合。読込んで木を作る時の option で有効にすれば
[[XInclude]] 処理結果に。
([[名無しさん]])

[30]
[CITE[Module xinclude from libxml2]] <http://xmlsoft.org/html/libxml-xinclude.html>

[[libxml]] の場合。

Context って中身は何?
@


1.5
log
@auto-committed
@
text
@a18 1

d21 26
@


1.4
log
@auto-committed
@
text
@d1 650
a650 642
[2] [DFN[[ABBR[XML] [拡張可能マーク付け言語]] [RUBYB[取込み] [Inclusions]] 1.0]]
([DFN[[ABBR[XInclude] [XML 取込み]] 1.0]]) は、
ある [[XML文書]] ([[XML情報集合]]) の一部分として別の文書 (情報集合)
を[DFN[取込む]]ための汎用の規格です。

[[XML 1.0]] と [[XML 1.1]] から構築された情報集合に対応しています
[SRC[[ABBR[XInclude] [XML 取込み]] 2]]。

[1]
仕様書:
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/xinclude/>
(最新版)
- [CITE[XML Inclusions (XInclude) Version 1.0]] <http://www.w3.org/TR/2004/REC-xinclude-20041220/>
(2004年12月20日勧告)
- 正誤表:
[CITE[XInclude 1.0 Errata]] <http://www.w3.org/2004/12/xinclude-errata>

[[#comment]]


* 処理模型

[7] 処理模型は仕様書 4 章で規定されています。

用語:
:[DFN[[RUBYB[[[原始情報集合]]] [source infoset]]]]:取込み処理の入力です。
:[DFN[[RUBYB[[[最上位被取込み項目]]] [top‐level included item]]]]:
[CODE(XMLe)[[VAR[xi:]][[include]]]] で位置付けられた[[情報項目]]。
:[DFN[[RUBYB[[[被取込み項目]]] [included item]]]]:
最上位被取込み項目とその[[属性]], [[名前空間]], [[子孫]]。
:[DFN[[RUBYB[[[取込み位置]]] [include location]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] 要素の [CODE(XMLa)[[[href]]]]
属性の値 [WEAK[(省略時は空文字列)]] を正規化して 
[ABBR[[[URI]]] [統一資源参照子]] または 
[ABBR[[[IRI]]] [国際化資源参照子]] とし、
[[XML基底]]に基づき[[解決]]した[[絶対URI]]
または[[絶対IRI]]。
:[DFN[[RUBYB[[[結果情報集合]]] [result infoset]]]]:原始情報集合と 
[CODE(XMLe)[[VAR[xi:]][[include]]]] で指定された[[資源]]の情報集合を併合した新しい[[情報集合]]です。
[WEAK[(基本的に原始情報項目と取込み項目の複製になります。)]]
:[DFN[[RUBYB[[[取込み親]]] [include parent]]]]:
[CODE(XMLe)[[VAR[xi:]]include]] の[CODE(infoprop)[[[親]]]]。

- 原始情報集合、結果情報集合 [WEAK[(になるもの)]] は
[[XML情報集合]]が定義され得るものが対象です
[WEAK[(例えば[[整形式解析対象実体]]でも[[根要素]]が複数あるものは扱えません)]]。 
[SRC[[ABBR[XInclude] [XML 取込み]] 4]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
を陽にまたは陰に空文字列にすることで自分自身を指すことができますが、
実装方法によっては不都合があるかもしれません。
[WEAK[(自分自身の [CODE(XML)[parse="text"]] の元データがない場合など。)]]
[CODE(XMLa)[href]] が空文字列になる場合は[[資源誤り]]にして'''構いません'''。
その場合はそうなる状況を文書化する'''べきです'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1]]
- [CODE(XMLe)[[VAR[xi:]]include]] の [CODE(XMLa)[href]]
は非 [ABBR[IRI] [国際化資源識別子]] 文字を含んでいるかもしれません。
処理器は[[逃避]]する必要があります。
[ABBR[URI] [統一資源識別子]] として扱う場合は
更に [ABBR[URI] [統一資源識別子]] 文字も逃避する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.1.1]]
- [[内容折衝]]を使っている場合は何が返ってくるかわかりません。
特定のものが必要な[[著者]]は [CODE(XMLe)[[VAR[xi:]]include]]
に [CODE(XMLa)[[[accept]]]] や [CODE(XMLa)[[[accept-charset]]]]
を指定する'''べきです'''。 [SRC[[ABBR[XInclude] [XML 取込み]] 4.1.2]]

[8] '''[CODE(XML)[parse=xml]] の場合''':
取込み位置の参照を解き、資源を取出し、
[[媒体型]]が [CODE(MIME)[[[application/xml]]]] 
であるとみなして[[文字符号化]]の判定や構文解析を行い、
情報集合を作成します。
[WEAK[(具体的な作成方法はあえて未規定とされており、たとえば[[妥当性検証]]を行うか否かは制約されていません。)]] 
資源が何らかの理由で利用できない時は[[資源誤り]]になります。
資源が[[整形式]]でないときは[[致命的誤り]]になります。
[WEAK[(資源誤りと致命的誤りの境界は実装依存なところがあり、例えば取込み位置が誤り頁っぽい [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 文書を返したら処理器は情報集合が作成できなかろうと資源誤りにしても構いませんし、解析しようとして非整形式で致命的誤りにしても構いません。)]]
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

(そういうのは [ABBR[[[HTTP]]] [ハイパーテキスト転送プロトコル]]
の[[状態符号]]のようなもので判断するのが普通じゃないですか?)

この情報集合の [CODE(XMLe)[[VAR[xi:]]include]]
要素は最適的に処理して[DFN[[RUBYB[[[獲得情報集合]]] [acquired infoset]]]]を作成します。
文書内参照 [WEAK[([CODE(XMLa)[[[xpointer]]]] 属性によります。)]] 
では原始情報集合を獲得情報集合として使います。
獲得情報集合のうち、取込む部分を[DFN[[RUBYB[[[取込み対象]]] [inclusion target]]]]といいます。
[CODE(XMLa)[xpointer]] 属性が省略されていれば獲得情報集合の[CODE(infoitem)[[[文書情報項目]]]]を取込み対象とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

処理器は [[XPointers]] のうち最低[CITE[枠組み]]の範囲と
[CODE[[[element]]]] scheme に対応しなければなりません。
XPointer の誤りは[[資源誤り]]とします。 [[XPath 1.0]]
と [ABBR[XML] [拡張可能マーク付け言語]] 情報集合のデータ模型の違いから、
[CODE[[[xpointer]]]] scheme が使われていて、
[CODE(infoitem)[[[未展開実体参照情報項目]]]]が対象の文書に含まれている時は、
[[致命的誤り]]とします。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2]]

:取込み対象が[CODE(infoitem)[文書情報項目]]の場合:
最上位取込み項目は獲得情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[[[子供]]]]となります
(但し、 [CODE(infoitem)[[[文書型宣言情報項目]]]]を除きます)。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.1]]
:取込み対象が複数の[[節点]]の場合:
最上位取込み項目は獲得情報集合内の指された節点を獲得情報集合の[[文書順]]にしたものです。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.2]]
:取込み対象が範囲の場合:
最上位取込み項目は、指定された範囲をすべて文書順に、
重複は除いて選んだものとなります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.3]]
:点位置の場合:取込み対象が点の場合は、取込み項目は空となります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.4]]
:要素・注釈・処理指令の場合:
取込み対象が要素・注釈・処理指令の場合、
それが最上位取込み項目になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.5]]
:属性・名前空間宣言の場合:
取込み対象が[[属性節]]や[[名前空間節]]の場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.6]]
:循環の場合:[CODE(XMLe)[[VAR[xi:]]include]] 要素の処理で、
別の [CODE(XMLe)[[VAR[xi:]]include]] 要素が既に取込み鎖で処理された取込み位置・
[CODE(XMLa)[xpointer]] 属性値の時は、[[致命的誤り]]です。
(しかし、 [CODE(XMLe)[[VAR[xi:]]include]] を含む文書を [CODE(XML)[parse="text"]] で指す、同じ局所資源の異なる部分
(異なる [CODE(XMLa)[xpointer]]) を指す、
2つの入れ子でない [CODE(XMLe)[[VAR[xi:]]include]] が同じ
1つの文書 ([CODE(XMLe)[[VAR[xi:]]include]] を含む。) 
を指すなどは構いません。自分や先祖を [CODE(XML)[parse="xml"]]
で指したり、上位で既に処理した取込み要素・先祖を指すのは違法です。)
[SRC[[ABBR[XInclude] [XML 取込み]] 4.2.7]]

[9] '''[CODE(XML)[parse="text" の場合]]:'''
取込み位置の参照を解き、資源を取出し、
[CODE(infoitem)[[[文字情報項目]]]]の集合に変換します。
[CODE(infoprop)[[[要素内容項目]]]]特性は[[偽]]とします。
この[CODE(infoitem)[文字情報項目]]の集合を最上位取込み項目とします。
何らかの理由で資源が利用できない時は[[資源誤り]]になります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

資源の[[文字符号化]]は、次により決定します
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]。
= 外部情報があれば、それにより。
= [CODE(MIME)[[[text/xml]]]], [CODE(MIME)[[[application/xml]]]],
[CODE(MIME)[[[text/[VAR[*]]+xml]]]],
[CODE(MIME)[[[application/[VAR[*]]+xml]]]]
であれば、 [ABBR[XML] [拡張可能マーク付け言語]] として。
= [CODE(charset)[[[UTF-8]]]] として。

- 符号化で認められないバイト列は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]
- [ABBR[XML] [拡張可能マーク付け言語]] 文書で認められない[[文字]]は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.3]]

[10] '''Fallback''': [[資源誤り]]の場合は、 fallback
動作にならなければ'''なりません'''。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.4]]
- 原始情報集合の [CODE(XMLe)[[VAR[xi:]][[include]]]]
[CODE(infoitem)[[[要素情報項目]]]]の[CODE(infoprop)[子供]]が丁度1つ
[CODE(XMLe)[[VAR[xi:]][[fallback]]]] を含んでいれば、
最上位取込み項目は [CODE(XMLe)[[VAR[xi:]][[fallback]]]]
の[CODE(infoprop)[子供]]を [ABBR[XInclude] [XML 取込み]]
処理した結果とします。
[WEAK[([CODE(XMLa)[parse]] 属性は影響しません。)]]

[11] '''結果情報集合の作成'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]:
= 原始情報集合の複製を作ります。
= 各 [CODE(XMLe)[[VAR[xi:]]include]] に対して、
取込み親の[CODE(infoprop)[子供]]の中の
[CODE(XMLe)[[VAR[xi:]]include]] を最上位取込み項目で置換します。
取込み項目の親は取込み親に設定します。
-- [CODE(XMLe)[[VAR[xi:]]include]] が[[根要素]]で、
最上位取込み項目が要素1つと零個以上の処理指令・注釈でない場合は[[致命的誤り]]です。
-- 取込み項目は取込み親から[CODE(infoprop)[[[適用範囲内名前空間]]]]を継承して'''構いません'''。
-- 各最上位取込み項目の取込み履歴を拡張特性[DFN[[CODE(infoprop)[[RUBYB[[[取込み履歴]]] [include history]]]]]]で記録します。
--- [CODE(infoprop)[取込み履歴]]特性が最上位水準取込み項目にあれば、
[CODE(XMLe)[[VAR[xi:]]include]] をその並びの先頭に追加します。
--- なければ、特性を追加して [CODE(XMLe)[[VAR[xi:]]include]]
[CODE(infoitem)[要素情報項目]]を唯一の項目とします。

[12] 注意: 文書内参照は原始情報集合で解決されます。
ですから、 [CODE(XMLe)[[VAR[xi:]]include]] 
の処理順は結果に影響しません。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]

[SRC[[ABBR[XInclude] [XML 取込み]] 4.5]]
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include xpointer="xmlns(xi=http://www.w3.org/2001/XInclude)xpointer(x/xi:include[1])"
              parse="xml"/>
</x>
]PRE]

この例では、
[PRE(XML)[
<x xmlns:xi="http://www.w3.org/2001/XInclude">
  <xi:include href="something.xml"/>
  <xi:include href="something.xml"/>
</x>
]PRE]

と同じような結果が得られます。循環誤りにはなりません。

[13] '''非解析対象実体''':
取込み項目や子孫の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoprop)[非解析対象情報項目]]は、
重複でなければ結果情報項目に追加されます。
同じ[CODE(infoprop)[名前]]で重複でないのを追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

ここで、[DFN[重複]]とは、[CODE(infoprop)[名前]],
[CODE(infoprop)[システム識別子]], [CODE(infoprop)[公開識別子]],
[CODE(infoprop)[宣言基底URI]], [CODE(infoprop)[記法名]],
[CODE(infoprop)[記法]]が同じことを意味します。
[WEAK[(応用は他の方法、例えば[CODE(infoprop)[システム識別子]]と[CODE(infoprop)[宣言基底URI]] を使って重複を判断しても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.1]]

[14] '''記法''': 取込み項目の[CODE(infoprop)[属性]]から[CODE(infoprop)[参照]]される[CODE(infoitem)[記法情報項目]]は既存のものと重複していなければ結果情報集合の[CODE(infoitem)[文書情報項目]]の[CODE(infoprop)[記法]]特性に追加します。
>>13 で追加される[CODE(infoite)[非解析対象実体情報項目]]の[CODE(infoprop)[記法]]も追加します。
同じ名前で重複でない[CODE(infoitem)[記法情報項目]]を追加しようとする場合は[[致命的誤り]]です。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

記法が[DFN[重複]]とは、[CODE(infoitem)[名前]],
[CODE(infoitem)[システム識別子]], [CODE(infoitem)[公開識別子]],
[CODE(infoitem)[宣言基底URI]] が同じことを言います。
[WEAK[(応用は他の手段で重複としても'''構いません'''。)]][SRC[[ABBR[XInclude] [XML 取込み]] 4.5.2]]

[15] '''[CODE(infoprop)[参照]]特性の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.3]]

[[取込み]]の過程で他の要素への参照を持った属性が出てくることがあります。
[[XInclude]] 処理でこの不整合が出ればそれを修正します。

''対象'':
対象となるものは正確には、
- [CODE(InfoItem)[[[属性情報項目]]]]であり、
- [CODE(InfoProp)[[[属性型]]]]特性が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IFREFS]]]]
である時の、
- [CODE(InfoProp)[[[参照]]]]特性の値 (零個以上)

で、元々[[原始情報集合]]か[[被取込み情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]を指していたはずですが、
それを対応する[[結果情報集合]]中の[CODE(InfoItem)[[[要素情報項目]]]]への参照に置換える必要が出ます。

''問題'':
具体的に問題となるのは次の場合です。
- 参照先の要素が[[被取込み文書]]中にあるものの、
取込まれる部分の外にある場合。
この場合[[結果情報集合]]では対応する要素なしとなります。
- 文書(の素片)が自己完結していない場合。
つまり参照が取込み後に認識されることを見込んでおり、
文書(の素片)中の要素を指していない場合。
この場合[CODE(InfoProp)[[[参照]]]]特性の値は[[未知]]または[[値無し]]となります。
- [[結果情報集合]]で識別子衝突が起こっている場合。
この場合、[CODE(InfoProp)[[[正規化値]]]]が同じでも[CODE(InfoProp)[[[参照]]]]が指す先は異なることが起こり得ます。

''解決法'':
簡単に言えば、[[属性値]]を元に[CODE(InfoProp)[[[参照]]]]特性を計算しなおします。

[SPAN(InfoItem)[[[属性情報項目]]]]で[CODE(InfoProp)[[[属性型]]]]が
[CODE(XML)@@en[[[IDREF]]]] または [CODE(XML)@@en[[[IDREFS]]]]
の場合、
- [CODE(InfoProp)[[[正規化値]]]]の各字句について、
対応する[SPAN(InfoItem)[[[要素情報項目]]]]を並べたものを[CODE(InfoProp)[[[参照]]]]特性値とします。
- 対応する[SPAN(InfoItem)[[[要素情報項目]]]]とは、
[CODE(InfoProp)[[[属性型]]]]が [CODE(XML)@@en[[[XML]]]] であって[CODE(InfoProp)[[[正規化値]]]]が字句と一致するような[SPAN(InfoItem)[[[属性情報項目]]]]を持つことを意味します。
- [SPAN(InfoItem)[[[要素情報項目]]]]の順序は字句の順序と同じとします。
- 字句のいずれかについて対応する要素がないか、複数ある場合は、
[CODE(InfoProp)[[[参照]]]]特性値は[[値無し]]とします。


[16] '''名前空間の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.4]]

''問題'':
[CODE(InfoProp)[[[適用範囲内名前空間]]]]特性により名前空間の適用範囲は取込みを通じて保存されますが、
[CODE(InfoProp)[[[名前空間属性]]]]と齟齬が生じることがあります。

''解決策'':
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[名前空間属性]]]]特性を出さないことが推奨されていますが、
それが叶わない場合は近似のために[CODE(InfoProp)[[[名前空間属性]]]]特性に[SPAN(InfoItem)[[[属性情報項目]]]]を追加しても'''構わない'''とされています。

[17] '''基底 URI の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.5]]

''問題'':
取込み処理を通じて[CODE(InfoProp)[[[基底URI]]]]
特性は保存されるので、[[相対URI参照]]は元の[[情報集合]]においてと同じ
[[URI]] に[[解決]]されます。しかし [CODE(XMLa)@@en[[[xml]]:[[base]]]]
属性によって得られる[[基底URI]] とは食い違ってきます。

''解決策'':
最上位被取込み項目中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[基底URI]]]]
が異なるなら、[CODE(InfoProp)[[[属性]]]]に次の[SPAN(InfoItem)[[[属性情報項目]]]]を追加します。

- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[base]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XMLa)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は、
その要素の[CODE(InfoProp)[[[基底URI]]]]か、またはそれと等価な、
[CODE(InfoProp)[[[取込み親]]]]の[CODE(InfoProp)[[[基底URI]]]]
についての[[相対URI参照]]]] (その計算法は実装依存)
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]]]はその[SPAN(InfoItem)[[[要素情報項目]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[base]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[18] '''言語の修正'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

''問題'':
[[XML]] の仕様では [CODE(XMLa)@@en[[[xml]]:[[lang]]]]
属性は[DFN[継承]]することになっていますが、
[[XML情報集合]]ではこれを特別扱いしていません。
そのため取込み時に取込みが行われた位置で言語情報が不正確になるかもしれません。

''解決策'':
[[XInclude 1.0]] では独自に[DFN[[CODE(InfoProp)[[[言語]]]]特性]]を導入し、
言語情報を保存することにしています。
[[原始情報集合]]と[[獲得情報集合]]の各[SPAN(InfoItem)[[[要素情報項目]]]]に
[[XInclude]] [[処理器]]は[CODE(InfoProp)[[[言語]]]]特性を補う'''べきです'''。
その値は、
- [CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性があれば、
その[CODE(InfoProp)[[[正規化値]]]]
- ただしその値が[[空文字列]]であるなら、[[値無し]]
- 属性がなくて[[親要素]]があれば、その[CODE(InfoProp)[[[言語]]]]
- 属性が無く[[親要素]]もなければ、[[値無し]]

となります。

そして、
[[最上位被取込み項目]]中の各[SPAN(InfoItem)[[[要素情報項目]]]]について、
- その[CODE(InfoProp)[[[取込み親]]]]と[CODE(InfoProp)[[[言語]]]]が異なる場合
(大文字・小文字は区別しません。) または
- 値を持ち、
[CODE(InfoProp)[[[取込み親]]]]が[SPAN(InfoItem)[[[文書情報項目]]]]である場合

には次の[SPAN(InfoItem)[[[属性情報項目]]]]を[CODE(InfoProp)[[[属性]]]]に追加します。
- [CODE(InfoProp)[[[名前空間名]]]]は
[CODE(URI)@@en[[[http://www.w3.org/XML/1998/namespace]]]]
- [CODE(InfoProp)[[[局所名]]]]は [CODE(XMLa)@@en[[[lang]]]]
- [CODE(InfoProp)[[[接頭辞]]]]は [CODE(XML)@@en[[[xml]]]]
- [CODE(InfoProp)[[[正規化値]]]]は[CODE(InfoProp)[[[言語]]]]で、
[[値無し]]の場合は[[空文字列]]
- [CODE(InfoProp)[[[指定]]]]は真
- [CODE(InfoProp)[[[属性型]]]]は [CODE(XML)@@en[[[CDATA]]]]
- [CODE(InfoProp)[[[参照]]]]は[[値無し]]
- [CODE(InfoProp)[[[所有要素]]はその[SPAN(InfoItem)[[[要素情報項目]]]]

(既に [CODE(XMLa)@@en[[[xml]]:[[lang]]]] [SPAN(InfoItem)[[[属性情報項目]]]]が存在していれば、新しいもので置換えます。)

[31]
'''[CODE(XMLa)@@en[[[xml]]:[[space]]]] 属性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.6]]

[CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性と
[CODE(XMLa)@@en[[[xml]]:[[lang]]]] 属性が特別扱いを受けているにも関わらず、
同じように[[継承]]する [CODE(XMLa)@@en[[[xml]]:[[space]]]]
属性は特別扱い''されません''。

[32]
'''その他の特性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[[XML情報集合]]で規定されているその他の[[特性]]と
[[XInclude 1.0]] で規定されている[CODE(InfoProp)[[[言語]]]]および[CODE(InfoProp)[[[取込み履歴]]]]は、
[[XInclude 1.0]] の処理でも保存されます。

それ以外の[[情報項目]]の特性は、既定では捨てます。
しかし、 [[XInclude 1.0]] の[[処理器]]は、[[利用者の任意選択]]により、
拡張特性の仕様書に従って意味的に正しくできるのであれば保存しても'''構いません'''。

例えば [[PSVI]] の[CODE(InfoProp)[[[妥当性]]]]特性は普通は捨てますが、
[[利用者の任意選択]]により保存しても構いません。
ただし[[取込み]]の結果[[妥当性]]が変化し得ますから、
それに合わせて新しい結果に修正しなければなりません。
その具体的な方法については [[XInclude 1.0]]
の範囲''外''とされています。

[[#comment]]

* 適合性

[19] '''マークの適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.1]]

ある[SPAN(InfoItem)[[[要素情報項目]]]]は、
[[XInclude 1.0]] 仕様書で規定された[[取込み要素]]の要件を満たす時、
[DFN[適合]]するといいます。 ([[要素]]および[[属性]]のみに関する制約で、
[[スキーマ]]等は制約されていません。)

[20] '''応用の適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.2]]

- 次の仕様に対応すること:
-- [[XML]] 本体:
--- [[XML 1.0]] (第3版) および [[XML名前空間 1.0]] または
--- [[XML 1.1]] および [[XML名前空間 1.1]] または
-- [[XML情報集合]] (第2版)
-- [[XML基底]]
-- [[XPointer]] 枠組み
-- [[XPointer scheme]] [CODE(XPointerScheme)@@en[[[element]]()]]
- [[致命的誤り]]に遭遇したら処理を停止すること
- 必須の条件 ('''しなければなりません''')
と選択した任意選択の条件 ('''するべきです'''と'''して構いません''')
について、規定に従うこと
- [[XInclude 1.0]] の規定するすべてのマークの適合性に関する試験を行うこと

仕様書は [CODE(XPointerScheme)@@en[[[xpointer]]()]]
[[XPointer scheme]] への対応が必須で無いので[[著者]]に注意するようにと特に助言しています。

[21] '''[ABBR[XML] [拡張可能マーク付け言語]] 情報集合適合性'''
[SRC[[ABBR[XInclude] [XML 取込み]] 5.3]]

[[XInclude 1.0]] 仕様書は [[XML情報集合]] (第2版)
に適合すると主張しています。

正しい処理に必要な[[入力情報集合]]の情報項目:
- [SPAN(InfoItem)[[[文書情報項目]]]]:
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[基底URI]]]]
- [SPAN(InfoItem)[[[要素情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[子供]]]]、[CODE(InfoProp)[[[属性]]]]、
[CODE(InfoProp)[[[基底URI]]]]、[CODE(InfoProp)[[[親]]]]
- [SPAN(InfoItem)[[[属性情報項目]]]]:
[CODE(InfoProp)[[[名前空間名]]]]、[CODE(InfoProp)[[[局所名]]]]、
[CODE(InfoProp)[[[正規化値]]]]

[[XInclude]] 処理によって更に次の情報項目が結果として生じ得ます。
- [SPAN(InfoItem)[[[子供情報項目]]]]:
[CODE(InfoProp)[[[文字符号]]]]、[CODE(InfoProp)[[[要素内容空白]]]]、
[CODE(InfoProp)[[[親]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[取込み履歴]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]
- [SPAN(InfoItem)[[[処理指令情報項目]]]]
- [SPAN(InfoItem)[[[注釈情報項目]]]]
- [SPAN(InfoItem)[[[文字情報項目]]]]

[[XInclude]] 拡張の [CODE(InfoProp)[[[言語]]]]特性が出現し得る情報項目:
- [SPAN(InfoItem)[[[要素情報項目]]]]

[[#comment]]
* 他との関係

[2] [ABBR[[[XLink 1.0]]] [XML 連結付け言語 1.0 版]]
で [CODE(XMLa)[[VAR[xlink:]][[show]]]] を [CODE(XML)[[[embed]]]]
にしたり、 [ABBR[[[HTML]]] [ハイパーテキストマーク付け言語]]
の [CODE(HTMLe)[[[object]]]] 要素を使ったりしても、
対応した [[WWWブラウザ]]で同じような表示にできるかもしれません。

しかし、 [ABBR[XLink] [XML 連結付け言語]] や [CODE(HTMLe)[object]]
はあくまで[[表現]]上 (見かけ上) の関係に過ぎないのに対し、
[ABBR[XInclude] [XML 取込み]] は文書の構造そのものに別の文書を取込みます。
一度取込みを行った後は、完全に元の文書の一部となります。

[3] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] の[[外部実体]]とも似ています。
[WEAK[(実際、外部実体の置換えが [ABBR[XInclude] [XML 取込み]] の1つの目的です。)]]
しかし、 [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]] と次のような違いがあります。

- [ABBR[[[DTD]]] [文書型定義]] で宣言する必要はありません。
- 従って、[ABBR[[[DTD]]] [文書型定義]] 
を処理しない [[XML処理器]]でも扱えます。
[WEAK[(その代わりに当然 [ABBR[XInclude] [XML 取込み]] の処理器が必要ですけどね。)]]
- 何らかの理由で外部文書が利用できない時に、 
[ABBR[XInclude] [XML 取込み]] は fallback が利用できます。
- [ABBR[XInclude] [XML 取込み]] は [CODE(MIME)[[[text/plain]]]]
として取込むことができます。
- [[文書要素]]内とは異なる宣言の構文を使う必要がありません。

[4] [ABBR[XInclude] [XML 取込み]] は 
[ABBR[XML] [拡張可能マーク付け言語]]
文書の構文解析の後の情報集合の操作として定義されていますから、
構文解析や情報集合の構築の処理は変更されません。

取込み後の情報集合に対する [ABBR[DTD] [文書型定義]]
による[[妥当性検証]]については定義されていません
[SRC[[ABBR[XInclude] [XML 取込み]] 1.3]]。
取込みの入力は [ABBR[[[PSVI]]] [Schema 検証後情報集合]]
のような拡張された情報集合でも構いませんが、
既定では拡張部分は取込み処理で落とされます。
[[利用者の任意選択]]で拡張部分も保存しても構いませんが、
処理器は拡張部分の情報が適切であるように配慮する必要があります。
[SRC[[ABBR[XInclude] [XML 取込み]] 4.5.7]]

[24] '''[CODE(XMLe)[[VAR[xop:]]Include]]''':
[[XOP]] には [CODE(XMLe)[[VAR[xop:]][[Include]]]]
という似た[[要素型]]があります。 

[[XOP]] は [[SOAP]] で[[バイナリ]]・データを送るにあたって [[XML 1]] +
[[Base64]] では無駄が多いことから
[CODE(MIME)[[[multipart/related]]]] 
で[[バイナリ]]・データは別に送ればよいという考えで、 [[XML]]
[[情報集合]]中の挿入点を示すために
[CODE(XMLe)[[VAR[xop:]][[Include]]]] が使われます。

[[XOP]] で [[XInclude]] が採用されなかったのは、 [[XInclude]]
の機能のごく一部しか要らないので無駄が多いこと、
外部データを [[Base64]] で符号化して挿入するために
[[XInclude]] を改訂する必要があることなどが理由とされています。

参考:
[CITE[XOP Inclusion Mechanism - Frequently Asked Questions]] 
<http://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/>

[[#comment]]


* メモ

[5] 最初に [ABBR[[[W3C]]] [World Wide Web Consortium]]
の [[Note]] として公表されたのが1999年の11月。
それから勧告されたのが2004年12月で丁度5年。
随分と掛かりましたねぇ。

[6] さて、今更こういうのを出してきたところで使ってもらえるのかどうか。
確かに現状のように各仕様それぞれで[[取込み]]・
[[輸入]]の仕組みを別個に持つよりは汎用のが1個あった方が色々便利なのは確かなのですが・・・。

[22]
[CITE[XML Inclusions (XInclude) Issues List]] <http://www.w3.org/XML/2001/05/xinclude-issues>

[23]
[CITE[XInclude CR Issues]] <http://www.w3.org/XML/2004/07/ExIT-xinclude/issues.html>

[25]
[CITE[PHP: DomDocument->xinclude - Manual]] 
<http://www.php.net/manual/ja/function.domdocument-xinclude.php>

[[PHP]] には [CODE@@en[DomDocument]] ([CODE(DOMi)@@en[[[Document]]]]
相当) に [CODE(DOMm)@@en[[[include]] ()]] メソッドがあり、
当該[[文書]]に関する取込み処理を行います。
([[名無しさん]])

[26]
[CITE[2002/dom-xinclude/org/w3c/tools/dom/xinclude/]] 
<http://dev.w3.org/cvsweb/2002/dom-xinclude/org/w3c/tools/dom/xinclude/>

[[DOM]] + [[XInclude 1.0]] の [[Java]] による実装例です。

[CODE(DOMi)@@en[[[Document]]]] の [CODE(DOMm)@@en[[[normalizeDocument]]]]
を呼ぶ時に normalize feature で [[XInclude]] 
が有効に設定されていれば [[XInclude]] を処理するようになっています。
(Normalize feature は調べていませんがおそらく [[DOM水準3]]
に入れる案があった機能なのでしょう。
[CODE(DOMi)@@en[[[DOMConfiguration]]]] 
があるから要らないということになったのでしょうか。)

[PRE[
クラス [CODE(DOMi)@@en[XIDocument]] (抜粋)
  メソッド
    [CODE(DOMm)@@en[[[normalizeDocument]]]]
      通常の処理の後、正規化機能 [CODE(URI)@@en[[[http://www.w3.org/2002/04/dom-xinclude]]]]
      が設定されている場合は、文書節点を引数として [CODE(DOMi)@@en[XITransform]] クラスの
      [CODE(DOMm)@@en[applyXInclude]] メソッドを実行します。
    引数無し
    返し値無し
    例外無し
]PRE]

[PRE[
クラス [CODE(DOMi)@@en[XITransform]]
  メソッド
    [CODE(DOMm)@@en[applyFallback]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(DOMe)@@en[xi:[[fallback]]]] 要素があればその内容で置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXInclude]]
      [[XInclude]] を与えられた節点から再帰的に適用します。
      引数
        [VAR(DOMp)@@en[n]], 型 [CODE(DOMi)@@en[[[Node]]]]
          [[XInclude]] の適用開始点。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsText]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[text]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[applyXIncludeAsXML]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を、 [CODE(XMLa)@@en[[[parse]]]] 属性の値が
      [CODE(XML)@@en[[[xml]]]] であるものとして適用します。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素。
      返し値無し
      例外無し
    [CODE(DOMm)@@en[replaceXI]]
      [CODE(DOMe)@@en[xi:[[xinclude]]]] 要素を与えられた節点の並びで置換えます。
      各節点に対して [CODE(DOMm)@@en[[[applyXInclude]]]] した後、
      要素節点なら [CODE(XMLa)@@en[[[xml]]:[[base]]]] 属性を調整した上で、
      要素を置換えます。
      引数
        [VAR(DOMp)@@en[xi]], 型 [CODE(DOMi)@@en[[[Element]]]]
          置換する [CODE(XMLe)@@en[xi:[[xinclude]]]] 要素。
        [VAR(DOMp)@@en[children]], 型 [CODE(DOMi)@@en[[[NodeList]]]]
          節点の並び。
        [VAR(DOMp)@@en[importNode]], 型 [CODE(IDL)@@en[[[boolean]]]]
          もし [CODE(IDL)@@en[[[true]]]] なら、
          並び中の節点を木に挿入する前に輸入する。
      返し値無し
      例外無し
]PRE]

[CODE(DOMm)[applyXInclude]] だけ [CODE(Java)@@en[[[protected]]]]
で、後は全部 [CODE(Java)@@en[[[private]]]]。

([[名無しさん]])

[27]
[CITE[XInclude Engine]] <http://xincluder.sourceforge.net/>
([[名無しさん]])

[28]
>>27 の [[DOM]] 用は、 [CODE(DOMm)@@en[[[merge]]]]
というメソッドがあって文書節点か要素節点と基底 URI
を与えると [[XInclude]] 処理を行います。
([[名無しさん]])

[29]
[CITE[Using XInclude]] 
<http://xml.apache.org/xerces2-j/faq-xinclude.html>

[[Xerces]] の場合。読込んで木を作る時の option で有効にすれば
[[XInclude]] 処理結果に。
([[名無しさん]])

[30]
[CITE[Module xinclude from libxml2]] <http://xmlsoft.org/html/libxml-xinclude.html>

[[libxml]] の場合。

Context って中身は何?
([[名無しさん]])

@


1.3
log
@auto-committed
@
text
@d27 1
a27 1
:[DFN[[RUBYB[[[最上位取込み項目]]] [top‐level included item]]]]:
d29 2
a30 2
:[DFN[[RUBYB[[[取込み項目]]] [included item]]]]:
最上位取込み項目とその[[属性]], [[名前空間]], [[子孫]]。
d226 41
d270 8
d281 26
d310 70
d386 5
d394 17
d414 24
d439 4
a520 1

a523 1

d526 117
@


1.2
log
@auto-committed
@
text
@a0 1

d292 20
a328 1
([[名無しさん]])
@


1.1
log
@auto-committed
@
text
@d1 3
a3 2
[2] [DFN[[ABBR[XML][拡張可能マーク付け言語]] [RUBYB[取込み][Inclusions]] 1.0]]
([DFN[[ABBR[XInclude][XML 取込み]] 1.0]]) は、
d8 1
a8 1
[SRC[[ABBR[XInclude][XML 取込み]] 2]]。
d21 1
d27 2
a28 2
:[DFN[[RUBYB[[[原始情報集合]]][source infoset]]]]:取込み処理の入力です。
:[DFN[[RUBYB[[[最上位取込み項目]]][top‐level included item]]]]:
d30 1
a30 1
:[DFN[[RUBYB[[[取込み項目]]][included item]]]]:
d32 1
a32 1
:[DFN[[RUBYB[[[取込み位置]]][include location]]]]:
d35 2
a36 2
[ABBR[[[URI]]][統一資源参照子]] または 
[ABBR[[[IRI]]][国際化資源参照子]] とし、
d39 1
a39 1
:[DFN[[RUBYB[[[結果情報集合]]][result infoset]]]]:原始情報集合と 
d42 1
a42 1
:[DFN[[RUBYB[[[取込み親]]][include parent]]]]:
a44 1

d48 1
a48 1
[SRC[[ABBR[XInclude][XML 取込み]] 4]]
d55 1
a55 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.1]]
d57 1
a57 1
は非 [ABBR[IRI][国際化資源識別子]] 文字を含んでいるかもしれません。
d59 3
a61 3
[ABBR[URI][統一資源識別子]] として扱う場合は
更に [ABBR[URI][統一資源識別子]] 文字も逃避する必要があります。
[SRC[[ABBR[XInclude][XML 取込み]] 4.1.1]]
d65 1
a65 1
を指定する'''べきです'''。 [SRC[[ABBR[XInclude][XML 取込み]] 4.1.2]]
d75 2
a76 2
[WEAK[(資源誤りと致命的誤りの境界は実装依存なところがあり、例えば取込み位置が誤り頁っぽい [ABBR[HTML][ハイパーテキスト・マーク付け言語]] 文書を返したら処理器は情報集合が作成できなかろうと資源誤りにしても構いませんし、解析しようとして非整形式で致命的誤りにしても構いません。)]]
[SRC[[ABBR[XInclude][XML 取込み]] 4.2]]
d78 1
a78 1
(そういうのは [ABBR[[[HTTP]]][ハイパーテキスト転送プロトコル]]
d82 1
a82 1
要素は最適的に処理して[DFN[[RUBYB[[[獲得情報集合]]][acquired infoset]]]]を作成します。
d85 1
a85 1
獲得情報集合のうち、取込む部分を[DFN[[RUBYB[[[取込み対象]]][inclusion target]]]]といいます。
d87 1
a87 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2]]
d92 1
a92 1
と [ABBR[XML][拡張可能マーク付け言語]] 情報集合のデータ模型の違いから、
d96 1
a96 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2]]
d101 1
a101 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.1]]
d104 1
a104 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.2]]
d108 1
a108 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.3]]
d110 1
a110 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.4]]
d114 1
a114 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.5]]
d117 1
a117 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.6]]
d127 1
a127 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.2.7]]
d129 1
a129 1
[9] '''[CODE(XML)[parse="text" の場合]]:
d135 1
a135 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.3]]
d138 1
a138 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.3]]。
d143 1
a143 1
であれば、 [ABBR[XML][拡張可能マーク付け言語]] として。
d147 3
a149 3
[SRC[[ABBR[XInclude][XML 取込み]] 4.3]]
- [ABBR[XML][拡張可能マーク付け言語]] 文書で認められない[[文字]]は[[致命的誤り]]です。
[SRC[[ABBR[XInclude][XML 取込み]] 4.3]]
d153 1
a153 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.4]]
d158 1
a158 1
の[CODE(infoprop)[子供]]を [ABBR[XInclude][XML 取込み]]
d163 1
a163 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5]]:
d169 1
a169 1
=- [CODE(XMLe)[[VAR[xi:]]include]] が[[根要素]]で、
d171 3
a173 3
=- 取込み項目は取込み親から[CODE(infoprop)[[[適用範囲内名前空間]]]]を継承して'''構いません'''。
=- 各最上位取込み項目の取込み履歴を拡張特性[DFN[[CODE(infoprop)[[RUBYB[[[取込み履歴]]][include history]]]]]]で記録します。
=-- [CODE(infoprop)[取込み履歴]]特性が最上位水準取込み項目にあれば、
d175 1
a175 1
=-- なければ、特性を追加して [CODE(XMLe)[[VAR[xi:]]include]]
d181 1
a181 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5]]
d183 1
a183 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5]]
d199 1
d206 1
a206 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.1]]
d212 1
a212 1
[WEAK[(応用は他の方法、例えば[CODE(infoprop)[システム識別子]]と[CODE(infoprop)[宣言基底URI]] を使って重複を判断しても'''構いません'''。)]][SRC[[ABBR[XInclude][XML 取込み]] 4.5.1]]
d217 1
a217 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.2]]
d222 1
a222 1
[WEAK[(応用は他の手段で重複としても'''構いません'''。)]][SRC[[ABBR[XInclude][XML 取込み]] 4.5.2]]
d225 1
a225 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.3]]
d228 1
a228 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.4]]
d231 1
a231 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.5]]
d234 2
a235 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.6]]
d240 1
a240 1
[SRC[[ABBR[XInclude][XML 取込み]] 5.1]]
d243 4
a246 1
[SRC[[ABBR[XInclude][XML 取込み]] 5.2]]
a247 2
[21] '''[ABBR[XML][拡張可能マーク付け言語]] 情報集合適合性'''
[SRC[[ABBR[XInclude][XML 取込み]] 5.3]]
d251 1
a251 1
[2] [ABBR[[[XLink 1.0]]][XML 連結付け言語 1.0 版]]
d253 1
a253 1
にしたり、 [ABBR[[[HTML]]][ハイパーテキストマーク付け言語]]
d257 1
a257 1
しかし、 [ABBR[XLink][XML 連結付け言語]] や [CODE(HTMLe)[object]]
d259 1
a259 1
[ABBR[XInclude][XML 取込み]] は文書の構造そのものに別の文書を取込みます。
d262 5
a266 5
[3] [ABBR[XInclude][XML 取込み]] は 
[ABBR[XML][拡張可能マーク付け言語]] の[[外部実体]]とも似ています。
[WEAK[(実際、外部実体の置換えが [ABBR[XInclude][XML 取込み]] の1つの目的です。)]]
しかし、 [ABBR[XInclude][XML 取込み]] は 
[ABBR[XML][拡張可能マーク付け言語]] と次のような違いがあります。
d268 2
a269 2
- [ABBR[[[DTD]]][文書型定義]] で宣言する必要はありません。
- 従って、[ABBR[[[DTD]]][文書型定義]] 
d271 1
a271 1
[WEAK[(その代わりに当然 [ABBR[XInclude][XML 取込み]] の処理器が必要ですけどね。)]]
d273 2
a274 2
[ABBR[XInclude][XML 取込み]] は fallback が利用できます。
- [ABBR[XInclude][XML 取込み]] は [CODE(MIME)[[[text/plain]]]]
d278 2
a279 2
[4] [ABBR[XInclude][XML 取込み]] は 
[ABBR[XML][拡張可能マーク付け言語]]
d283 1
a283 1
取込み後の情報集合に対する [ABBR[DTD][文書型定義]]
d285 2
a286 2
[SRC[[ABBR[XInclude][XML 取込み]] 1.3]]。
取込みの入力は [ABBR[[[PSVI]]][Schema 検証後情報集合]]
d291 1
a291 1
[SRC[[ABBR[XInclude][XML 取込み]] 4.5.7]]
d295 1
d298 1
a298 1
[5] 最初に [ABBR[[[W3C]]][World Wide Web Consortium]]
d306 9
@

