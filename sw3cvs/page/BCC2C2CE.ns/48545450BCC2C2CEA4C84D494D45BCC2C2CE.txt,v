head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.2;
locks; strict;
comment	@# @;


1.3
date	2004.03.08.02.16.40;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.23.02.04.07;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.56;	author make;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@#?SuikaWiki/0.9 page-icon="HTTP"
[1] [[MIME]] と [[HTTP]] 
では、[[実体]]の定義・扱いはほとんど同じながら、細かい点で幾つもの違いがあります。
その違いはどれも重要なものですから、よく理解しておかないと、
(いずれかに慣れていると) 
うっかりひどい間違いを犯してしまうかもしれません。

[2] また、 HTTP から派生した[[プロトコル]]である [[RTSP]]
や [[SIP]] は、ほとんど HTTP 
と同じながらも微妙な点でこれと異なったりしていますから、注意が必要です。

- [40] >>2 これは MIME の標準化の失敗だよなあ。そりゃあ [[Usefor]] も HTTP も RTSP も SIP も「Internet Mail」ではないのは確かなのだけれども。
[[#comment]]

* 仕様書から
** RFC 1945 (HTTP/1.0) C. Relationship to MIME; RFC 2068 (HTTP/1.1) Differences Between HTTP Entities and MIME Entities; RFC 2616 (HTTP/1.1) 19.4 Differences Between HTTP Entities and RFC 2045 Entities
> [DEL[HTTP/1.0]] [INS[HTTP/1.1]] uses many of the constructs defined for Internet Mail (RFC
822 [DEL[[INS[{1945}]] [7] ]] [INS[[INS[{2616}]] [9] ]]) and the Multipurpose Internet Mail Extensions (MIME [DEL[[INS[{1945}]] [5] ]] [INS[[INS[{2616}]] [7] ]]) to
allow entities to be transmitted in an open variety of representations and
with extensible mechanisms. However, [DEL[[DEL[RFC 1521]] [INS[MIME [7] ]]]] [INS[RFC 2045]]
discusses mail, and HTTP has a few features that are different [DEL[than]] [INS[from]] those described in [DEL[[DEL[RFC 1521]] [INS[MIME]]]] [INS[RFC 2045]].  These differences were carefully chosen
to optimize performance over binary connections, to allow greater freedom in the
use of new media types, to make date comparisons easier, and to
acknowledge the practice of some early HTTP servers and clients.

[2] 『[HTTP/1.1]] は Internet メイル ([[RFC822]]) と多目的 
Internet メイル拡張 ([[MIME]]) 
に定義された構造の多くを、色々な種類の表現を使って拡張可能な仕組みの元で実体を転送するために使います。しかし、 [[RFC2045]]
はメイルを扱っていて、 HTTP には RFC 2045
で説明されているものとは違う機能が幾つかあります。
この違いは[[バイナリ]]接続での効率を最適化するため、新しい[[媒体型]]の使用を更に自由にするため、日付比較をより簡単にするため、幾つかの早期の
HTTP サーバー及びクライアントの慣習を肯定するために、注意深く選びました。

[DEL[
> At the time of this writing, it is expected that RFC 1521 will be
revised. The revisions may include some of the practices found in
HTTP/1.0 but not in RFC 1521.

執筆の時点では、 [[RFC1521]] が改訂されることが予定されています。
改訂版は HTTP/1.0 にあるのに RFC 1521 にはない習慣の幾つかを含むかもしれません。
]DEL]

> This appendix describes specific areas where HTTP differs from [DEL[[DEL[RFC 1521]] [INS[MIME]]]] [INS[RFC 2045]].
Proxies and gateways to strict MIME environments [DEL[should]] [INS[SHOULD]] be aware of
these differences and provide the appropriate conversions where
necessary. Proxies and gateways from MIME environments to HTTP also
need to be aware of the differences because some conversions [DEL[may]] [INS[[INS[{2616}]] might]] be required.

[3] この附属書では、 RFC 2045 とは違う HTTP 
の規定領域を説明します。厳密な MIME 
環境への[[串]]と[[関門]]は、この差異に注意し、必要であれば適切な変換を施す'''のが良いです'''。
MIME 環境から HTTP 
への串と関門も、何らかの変換が必要かもしれないので差異に注意する必要があります。

[INS[
注意: 注記のない修正点は RFC 1945 → RFC 2068 もの。
]INS]

***RFC 1945 (HTTP/1.0) D.2.7; RFC 2068 (HTTP/1.1) 19.4.7; RFC 2616 (HTTP/1.1) 19.4.1 MIME-Version
→[CODE(WikiPage)[[[MIME-Version]]]]
***RFC 1945 (HTTP/1.0) C.1; RFC 2068 (HTTP/1.1) 19.4.1; RFC 2616 (HTTP/1.1) 19.4.2 Conversion to Canonical Form
→[CODE(WikiPage)[[[text/*//正規化]]]]
***RFC 1945 (HTTP/1.0) C.2; RFC 2068 (HTTP/1.1) 19.4.2; RFC 2616 (HTTP/1.1) 19.4.3 Conversion of Date Formats
→[CODE(WikiPage)[[[HTTPの日付形式]]]]
***RFC 1945 (HTTP/1.0) C.3; RFC 2068 (HTTP/1.1) 19.4.3; RFC 2616 (HTTP/1.1) 19.4.4 Introduction of Content-Encoding
→[CODE(WikiPage)[[[Content-Encoding]]]]
***RFC 1945 (HTTP/1.0) C.4; RFC 2068 (HTTP/1.1) 19.4.4; RFC 2616 (HTTP/1.1) 19.4.5 No Content-Transfer-Encoding
→[CODE(WikiPage)[[[Content-Transfer-Encoding]]]]
***RFC 1945 (HTTP/1.0) C.5; RFC 2068 (HTTP/1.1) 19.4.5 HTTP Header Fields in Multipart Body-Parts
→[CODE(WikiPage)[[[multipart/*//HTTP]]]]
*** RFC 2068・2616 (HTTP/1.1) 19.4.4; Introduction of Transfer-Encoding
→[CODE(WikiPage)[[[chunked]]]]
***RFC 1945 (HTTP/1.0) D.2.7; RFC 2068 (HTTP/1.1) 19.4.7; RFC 2616 (HTTP/1.1) 19.4.1 MIME-Version
→[CODE(WikiPage)[[[MIME-Version]]]]
***RFC 2616 (HTTP/1.1) 19.4.7 MHTML and Line Length Limitations
> HTTP implementations which share code with MHTML [45] implementations
need to be aware of MIME line length limitations. Since HTTP does not
have this limitation, HTTP does not fold long lines. MHTML messages
being transported by HTTP follow all conventions of MHTML, including
line length limitations and folding, canonicalization, etc., since
HTTP transports all message-bodies as payload (see section 3.7.2) and
does not interpret the content or any MIME header lines that might be
contained therein.

[[MHTML]] 実装と符号を共有する HTTP 実装は、 [[MIME]]
行長制限に注意する必要があります。 HTTP
はこの制限を有しませんから、 HTTP は長い行を[[折畳み]]ません。
HTTP で輸送される MHTML メッセージは、
HTTP がすべての [CODE(ABNF)[[[message-body]]]] を積荷として輸送し、
その中に含まれているかもしれない内容や MIME 頭行を解釈しませんから、
行長制限と折畳み, [[正統化]], その他を含む MHTML のすべての変換に従います。

** RFC 3229 (差分符号化), RFC 3230 (要約) 用語定義より抜粋
> The dictionary definition for "entity" is "something that has
separate and distinct existence and objective or conceptual reality" [21].  Unfortunately, the definition for "entity" in HTTP/1.1 is
similar to that used in MIME [12], based on a false analogy between
MIME and HTTP.

「[[実体]]」の辞書的定義は「分離された異なる存在ならびに物体的または概念的現実性を有するもの」です。
不幸にも、 HTTP/1.1 の「実体」の定義は [[MIME]] で使われているものと同様で、
完全に間違った MIME と HTTP との類似性に基づいています。

> In MIME, electronic mail messages do have distinct and separate
existences.  MIME defines "entity" as something that "refers
specifically to the MIME-defined header fields and contents of either
a message or one of the parts in the body of a multipart entity."

MIME では、電子メイル・メッセージは異なる分離された存在を有していました。
MIME は「実体」を「メッセージまたは[[多部分実体]]の本体中の[[部分]]の一つのいずれかの MIME 定義[[頭欄]]および[[内容]]を特に指す」ものとして定義しています。

> In HTTP, however, a response message to a GET does not have a
distinct and separate existence.  Rather, it reflects the current
state of a resource (or a variant, subject to a set of constraints).
The HTTP/1.1 specification has no term to describe "the value that
would be returned in response to a GET request at the current time
for the selected variant of the specified resource."  This leads to
awkward wordings in the HTTP/1.1 specification in places where this
concept is necessary.

しかし、 HTTP では、 [CODE(HTTP)[[[GET]]]] に対する[[応答メッセージ]]は異なる分離された存在を有していません。
むしろ、応答メッセージは資源の現在の状態 (制約の集合の対象となる、[[変体]])
を記述しています。 HTTP/1.1 仕様書は「指定された資源の選択された変体についての現時点で
[CODE(HTTP)[GET]] 要求に対する応答で返されることになる値」
を記述する用語を提供していません。このために、 HTTP/1.1
仕様書でこの概念が必要なところでぐちゃぐちゃした言い方をしています。

> To express this concept, we define a new term, for use in this document:

HTTP/1.1 仕様書での用語遣いの失敗を修正するのにはもう遅すぎますので、
代わりにこの文書で使用するために新しい用語を定義します。

[INS[
([[実現値]]参照)
]INS]

> It is convenient to think of an entity tag, in HTTP/1.1, as being
associated with an instance, rather than an entity.  That is, for a
given resource, two different response messages might include the
same entity tag, but two different instances of the resource should
never be associated with the same (strong) entity tag.

HTTP/1.1 の[[実体札]]は、実体と関連付けられていると考えるよりは、
実現値と関連付けられていると考えた方が便利です。
すなわち、ある資源について、二つの異なる[[応答メッセージ]]は同じ実体札を返すかもしれませんが、
その資源の二つの異なる実現値は決して同じ (強い) 実体札に関連付けられるべきではありません。

** RFC の部分の License
[[RFCのライセンス]]
* メモ
@


1.2
log
@auto-committed
@
text
@d93 54
@


1.1
log
@auto-commited
@
text
@d12 1
a12 1
- [40] >>2 これは MIME の標準化の失敗だよなあ。そりゃあ [[Usefor]] も HTTP も RTSP も SIP も「Internet Mail」ではないのは確かなのだけれども。
a13 1
*RFC 2616 から
d15 10
a24 12
**19.4 Differences Between HTTP Entities and RFC 2045 Entities

>HTTP/1.1 uses many of the constructs defined for Internet Mail (RFC
822 [9]) and the Multipurpose Internet Mail Extensions (MIME [7]) to
allow entities to be transmitted in an open variety of
representations and with extensible mechanisms. However, RFC 2045
discusses mail, and HTTP has a few features that are different from
those described in RFC 2045. These differences were carefully chosen
to optimize performance over binary connections, to allow greater
freedom in the use of new media types, to make date comparisons
easier, and to acknowledge the practice of some early HTTP servers
and clients.
d34 14
a47 6
>This appendix describes specific areas where HTTP differs from RFC
2045. Proxies and gateways to strict MIME environments SHOULD be
aware of these differences and provide the appropriate conversions
where necessary. Proxies and gateways from MIME environments to HTTP
also need to be aware of the differences because some conversions
might be required.
a54 125
***19.4.1 MIME-Version

>HTTP is not a MIME-compliant protocol. However, HTTP/1.1 messages MAY
include a single MIME-Version general-header field to indicate what
version of the MIME protocol was used to construct the message. Use
of the MIME-Version header field indicates that the message is in
full compliance with the MIME protocol (as defined in RFC 2045[7]).
Proxies/gateways are responsible for ensuring full compliance (where
possible) when exporting HTTP messages to strict MIME environments.

[4] HTTP は MIME に従ったプロトコルではありません。しかし、 
HTTP/1.1 メッセージは一つの MIME-Version 
一般頭欄を、メッセージの構築に使った MIME 
[[プロトコル]]の版を示すために含めても構いません。
MIME-Version 頭欄の使用は、メッセージが (RFC 2045 で定義された) 
MIME プロトコルに完全に適合することを示します。
串や関門は厳密な MIME 環境に HTTP メッセージを輸出する時に 
(可能である所で) 完全に適合させる責任があります。

-[5] MIME-Version   = "MIME-Version" ":" 1*DIGIT "." 1*DIGIT

>MIME version "1.0" is the default for use in HTTP/1.1. However,
HTTP/1.1 message parsing and semantics are defined by this document
and not the MIME specification.

MIME の版 "1.0" が HTTP/1.1 で使う時の既定値です。しかし、
HTTP/1.1 メッセージの解析と意味は MIME 
仕様ではなくこの文書で定義されます。

[INS[
[6] 訳注: See also [[MIME-Version:欄]]
]INS]

***19.4.2 Conversion to Canonical Form [INS[正規形への変換]]

>RFC 2045 [7] requires that an Internet mail entity be converted to
canonical form prior to being transferred, as described in section 4
of RFC 2049 [48]. Section 3.7.1 of this document describes the forms
allowed for subtypes of the "text" media type when transmitted over
HTTP. RFC 2046 requires that content with a type of "text" represent
line breaks as CRLF and forbids the use of CR or LF outside of line
break sequences. HTTP allows CRLF, bare CR, and bare LF to indicate a
line break within text content when a message is transmitted over
HTTP.

[7] RFC 2045 では、 Internet メイルの実体は転送される前に
RFC 2049 の第4章で説明された通り正規形に変換する必要があります。
この文書の3.7.1節は "text" 媒体型の亜型を HTTP 
上で転送する時に認められる形式について説明しています。 RFC 2046 
は "text" の型の内容は [[CRLF]] 
で[[改行]]を表現することを要求し、改行シーケンス以外で [[CR]] 
や [[LF]] を使うことを禁止しています。 HTTP は、 HTTP 
上でメッセージを転送する際に文中で CRLF, 単独の CR, 単独の LF 
を改行を示すのに使うことを認めています。

>Where it is possible, a proxy or gateway from HTTP to a strict MIME
environment SHOULD translate all line breaks within the text media
types described in section 3.7.1 of this document to the RFC 2049
canonical form of CRLF. Note, however, that this might be complicated
by the presence of a Content-Encoding and by the fact that HTTP
allows the use of some character sets which do not use octets 13 and
10 to represent CR and LF, as is the case for some multi-byte
character sets.

[8] 可能であれば、 HTTP から厳密な MIME 
環境への串や関門はこの文書の3.7.1節で説明した文媒体型中の全ての改行を
RFC 2049 正規形の CRLF に変換する'''のが良いです'''。しかし、 
Content-Encoding の出現や, HTTP 
が幾つかの多バイト[[文字集合]]の場合のように[[オクテット]] 
[CODE[13]] と [CODE[10]] を CR や LF 
を表現するのに使わない文字集合の使用を認めているという事実が、これを複雑にしていようことに注意して下さい。

>Implementors should note that conversion will break any cryptographic
checksums applied to the original content unless the original content
is already in canonical form. Therefore, the canonical form is
recommended for any content that uses such checksums in HTTP.

[9] 実装者は、元の内容が既に正規形で無かった時に、元の内容に適応される暗号検査和が壊れようことに注意するのが良いです。
このため、 HTTP で検査和を使う内容では正規形が推奨されます。

[INS[
[10] 訳注: See also [[text/*媒体型]], [[Content-Encoding:欄]],
[[Content-MD5:欄]]
]INS]

***19.4.3 Conversion of Date Formats [INS[日付形式の変換]]

>HTTP/1.1 uses a restricted set of date formats (section 3.3.1) to
simplify the process of date comparison. Proxies and gateways from
other protocols SHOULD ensure that any Date header field present in a
message conforms to one of the HTTP/1.1 formats and rewrite the date 
if necessary.

[11] HTTP/1.1
は[[日付形式]]の制限された集合を日付比較処理の簡素化のために使っています。
他のプロトコルからの串や関門はメッセージ中の Date
頭欄を HTTP/1.1 
形式のどれかに適合することを確認し、必要があれば日付を書き換える'''のが良い'''。

[INS[
[12] 訳注: See also [[Date:欄]], [[HTTPの日付形式]]
]INS]

***19.4.4 Introduction of Content-Encoding [INS[Content-Encoding の導入]]

>RFC 2045 does not include any concept equivalent to HTTP/1.1's
Content-Encoding header field. Since this acts as a modifier on the
media type, proxies and gateways from HTTP to MIME-compliant
protocols MUST either change the value of the Content-Type header
field or decode the entity-body before forwarding the message. (Some
experimental applications of Content-Type for Internet mail have used
a media-type parameter of ";conversions=<content-coding>" to perform
a function equivalent to Content-Encoding. However, this parameter is
not part of RFC 2045.)

[13] RFC 2045 は HTTP/1.1 の Content-Encoding
頭欄に相当する概念を持っていません。
この行為は媒体型を編集するものなので、 HTTP から MIME
に従ったプロトコルへの串と関門は Content-Type
頭欄の値を変えるか、[[実体本体]]をメッセージ転送の前に復号するかし'''なければなりません'''。
(Internet メイルの実験的 Content-Type 応用には媒体型パラメーター
";conversions=<content-coding>" を Content-Encoding
に相当する機能に使っているものもあります。
しかし、このパラメーターは RFC 2045 の一部ではありません。)

d56 1
a56 2
[14] 訳注: [[application/octet-stream媒体型]]の [CODE[conversions]]
パラメーターのことかな? See also [[Content-Encoding:欄]]
d59 18
a76 78
***19.4.5 No Content-Transfer-Encoding [INS[CTE がない]]

>HTTP does not use the Content-Transfer-Encoding (CTE) field of RFC
2045. Proxies and gateways from MIME-compliant protocols to HTTP MUST
remove any non-identity CTE ("quoted-printable" or "base64") encoding
prior to delivering the response message to an HTTP client.

[15] HTTP は RFC 2045 の Content-Transfer-Encoding ([[CTE]])
欄を使いません。 MIME に従ったプロトコルから
HTTP への串や関門は「同等」でない CTE ("quoted-printable" と
"base64") 符号化を HTTP 
クライアントへの応答メッセージで渡す前に解かなければ'''なりません'''。

>Proxies and gateways from HTTP to MIME-compliant protocols are
responsible for ensuring that the message is in the correct format
and encoding for safe transport on that protocol, where "safe
transport" is defined by the limitations of the protocol being used.
Such a proxy or gateway SHOULD label the data with an appropriate
Content-Transfer-Encoding if doing so will improve the likelihood of
safe transport over the destination protocol.

[16] HTTP から MIME 
に従うプロトコルへの串と関門は、メッセージが適切な形式であってそのプロトコルでの安全な転送のために符号化することに責任を持ちます。
ここで「安全な転送」とは、使用するプロトコルの制限により決まります。
そうした串や関門は、向こうのプロトコルでの安全な転送のためになりそうであれば、適切な
Content-Transfer-Encoding でデータを札付けする'''のが良いです'''。

***19.4.6 Introduction of Transfer-Encoding [INS[Transfer-Encoding の導入]]

>HTTP/1.1 introduces the Transfer-Encoding header field (section
14.41). Proxies/gateways MUST remove any transfer-coding prior to
forwarding a message via a MIME-compliant protocol.

[17] HTTP/1.1 は Transfer-Encoding 頭欄を導入しました。
串・関門は MIME に従うプロトコルにメッセージを転送する前に
[CODE[transfer-coding]] を解か'''なければなりません'''。

>A process for decoding the "chunked" transfer-coding (section 3.6)
can be represented in pseudo-code as:

[18] "chunked" transfer-coding の復号過程は擬似 code
で次のように表せます。

       length := 0
       read chunk-size, chunk-extension (if any) and CRLF
       while (chunk-size > 0) {
          read chunk-data and CRLF
          append chunk-data to entity-body
          length := length + chunk-size
          read chunk-size and CRLF
       }
       read entity-header
       while (entity-header not empty) {
          append entity-header to existing header fields
          read entity-header
       }
       Content-Length := length
       Remove "chunked" from Transfer-Encoding

       長さ := 0
       chunk-size と chunk-extension (あれば) と CRLF を読む
       (chunk-size > 0) の間 {
          chunk-data と CRLF を読む
          chunk-data を entity-body に付加する
          長さ := 長さ + chunk-size
          chunk-size と CRLF を読む
       }
       entity-header を読む
       (entity-header が空でない) の間 {
          entity-header を既存の頭欄に付加
          entity-header を読む
       }
       Content-Length := 長さ
       "chunked" を Transfer-Encoding から削除

***19.4.7 MHTML and Line Length Limitations [CODE[MHTML と行長制限]]

>HTTP implementations which share code with MHTML [45] implementations
d85 11
a95 73
[19]

**19.5 Additional Features [INS[追加機能]]

>RFC 1945 and RFC 2068 document protocol elements used by some
existing HTTP implementations, but not consistently and correctly
across most HTTP/1.1 applications. Implementors are advised to be
aware of these features, but cannot rely upon their presence in, or
interoperability with, other HTTP/1.1 applications. Some of these
describe proposed experimental features, and some describe features
that experimental deployment found lacking that are now addressed in
the base HTTP/1.1 specification.

[20]

>A number of other headers, such as Content-Disposition and Title,
from SMTP and MIME are also often implemented (see RFC 2076 [37]).

[21]

***19.5.1 Content-Disposition

>The Content-Disposition response-header field has been proposed as a
means for the origin server to suggest a default filename if the user
requests that the content is saved to a file. This usage is derived
from the definition of Content-Disposition in RFC 1806 [35].

[22]

-[23] content-disposition = "Content-Disposition" ":" disposition-type *( ";" disposition-parm )
-[24] disposition-type = "attachment" | disp-extension-token
-[25] disposition-parm = filename-parm | disp-extension-parm
-[26] filename-parm = "filename" "=" quoted-string
-[27] disp-extension-token = token
-[28] disp-extension-parm = token "=" ( token | quoted-string )

>An example is [INS[例:]]

-[29] Content-Disposition: attachment; filename="fname.ext"

>The receiving user agent SHOULD NOT respect any directory path
information present in the filename-parm parameter, which is the only
parameter believed to apply to HTTP implementations at this time. The
filename SHOULD be treated as a terminal component only.

[30]

>If this header is used in a response with the application/octet-
stream content-type, the implied suggestion is that the user agent
should not display the response, but directly enter a `save response
as...' dialog.

[31]

>See section 15.5 for Content-Disposition security issues.

[INS[
[32] 訳注: See also [[Content-Disposition:欄]]
]INS]

**RFC の部分の License

See [[RFCのライセンス]]

*See also
-[33] [[RFC1341]] <urn:ietf:rfc:1341>
-[34] [[RFC1521]] <urn:ietf:rfc:1521>
-[35] [[RFC2045]] <urn:ietf:rfc:2045>
-[36] [[RFC2046]] <urn:ietf:rfc:2046>
-[37] [[HTTP/1.0]] [[RFC1945]] <urn:ietf:rfc:1945>
-[38] [[HTTP/1.1]] [[RFC2068]] <urn:ietf:rfc:2068>
-[39] [[HTTP/1.1]] [[RFC2616]] <urn:ietf:rfc:2616>
*メモ
@

