head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2003.09.24.07.19.43;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@semi-auto committed
@
text
@#?SuikaWiki/0.9
[1] [[XPath]] は、構文的には[[字句]]の連続です。
字句の前後には空白を任意個入れることが出来ます。

詳しい仕様は
<http://www.w3.org/TR/xpath#exprlex>
にあります。

[2] 字句解析は[[欲張り]] ([[最長一致]]) です。
例えば [SAMP(XPath)[foo-bar]] は
[CODE(XPath)[foo-bar]] であって、
[CODE(XPath)[foo]] 引く [CODE(XPath)[bar]]
ではありません。

[3] 仕様書の [CODE(XPath)[ExprToken]]
を、意味を無視して構造的に整理すると、
-[CODE(ABNF)[[DFN[字句]] := <[().@@,*/|+=<>-]> / "[" / "]" / ".." / "::" / [[QName]] / [[NCName]] ":*" / "//" / "!=" / "<=" / ">=" / <"> *<[^"]> <"> / "'" *<[^']> "'" / 1*[[DIGIT]] ["." *DIGIT] / "." 1*DIGIT / "$" QName]]

です。字句の前後には [VAR(XML)[xml.[[S]]]]
を挿入できます。

[4] 
= 前にも字句があって、前の字句が [CODE(ABNF)[<[@@(+*/|=<>-]> / "[" / "::" / "//" / "<=" / ">=" / "!=" / 'and' / 'or' / 'div' / 'mod']] 以外である時には、
[CODE(XPath)[[[*]]]] は乗算演算子として、
NCName は演算子名として認識しなければなりません。
= NCName の (空白があればそれを飛ばしてその) 後に続く文字が
[CODE(XPath)[[[(]]]] であるときは、
その字句は[[関数]]又は節型 ([[節検査]]関数) として解釈します。
= NCName (同上) が [CODE(XPath)[[[::]]]]
であれば、その字句は[[軸]]の名前とみなします。
[WEAK[洒落でなしに。]]
= これ以外の場合には、
字句が乗算演算子, 演算子名, 節型, 関数名, 軸名として解釈されることはありません。

@
