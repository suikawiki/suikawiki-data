head	1.2;
access;
symbols
	suikawiki3-final:1.2;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2005.02.23.02.10.43;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.31.02.08.37;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-committed
@
text
@

[1] [[Perl]] の[[メソッド]]の[[名前]]は、
それが名前であること以上のことはほとんど何も決められていません。
プログラマは自分のスタイルで名前を決めることができます。
しかしながら、広く行われているやり方があれば、
それを採用した方がいいこともあるかもしれません
[WEAK[(プログラムが見やすくなるとか)]]。

[2] '''大文字と小文字''': Perl の関数・メソッドの名前ですべて[[大文字]]のものは特別な用途に予約されています。
([CODE(perl)[[[DESTROY]]]] のように自動的に呼ばれるものや、
[CODE(perl)[[[TIEHASH]]]] のように特定の機能で使われるものなどがあります。)
それ以外の目的で使ってはいけません。

メソッド名は、 [SAMP[method_name_like_this]] のように、
すべて小文字で [SAMP(char)[_]] を単語区切りにすることがすすめられています
[SRC[perlstyle]]。

[3] '''下線で始まる名前''':
[SAMP(char)[_]] で始まる名前は内部用の [[private]]
なものとみなすことがすすめられています [SRC[perlstyle]]。

[4] '''構築子''':
[[級]]の[[実現値]]を作るための[[構築子]]として機能する関数 (メソッド) は、
Perl では特別扱いされません。名前は自由ですし、
必要に応じて何種類でも作れます。
しかし、多くのモジュールでは他の言語にならって
[SAMP(perl)[[[new]]]] という名前が採用されています。

[8] '''輸入''':
関数 (メソッド) [CODE(perl)[[[import]]]] および
[CODE(perl)[[[unimport]]]] は、 [CODE(perl)[[[use]]]]
や [CODE(perl)[[[no]]]] を使用したときに呼ばれます。
それ以外の目的で使うのは混乱の元です。

[5] '''普遍メソッド名''':
すべての級の[[基底]]である特別な級 [CODE(perl)[[[UNIVERSAL]]]]
では、メソッド [CODE(perl)[[[isa]]]], [CODE(perl)[[[can]]]],
[CODE(perl)[[[VERSION]]]] が定義されています。
普通はこれらのメソッドと同じ名前のメソッドを上書きするべきではありません。

[6] '''文字列化''':
[[物体]]の文字列表現を返すメソッドが定義されていることがよくありますが、
Perl 付属のモジュールのいくつかやマニュアルの例で使われている名前は
[SAMP(perl)[[[as_string]]]] です。
[[CPAN]] のモジュールなどを調べてみると [SAMP(perl)[[[stringify]]]]
などの名前も使われています。

ちなみに、このようなメソッドは[[引数]]なしで動作し、
オプション指定が可能なら引数を指定できることが多いように思われます。

[7] '''クローン作成''':
物体の[[クローン]]を作成するメソッドが定義されていることがよくありますが、
その名前として CPAN のモジュールなどでよく使われているのは
[SAMP(perl)[[[clone]]]] のようです。

ちなみに、このようなメソッドは引数なしで動作し、
[[深い複製]]かどうかなどのオプション指定も可能であることが多いように思われます。

[9] '''多く使われている名前''':
手元の Perl 付属のモジュールを [CODE[[[grep]]]]
などを使ってざっと数えてみました。
特別な意味を持つ大文字の名前, [CODE(perl)[[[name]]]],
[CODE(perl)[[[as_string]]]] などが比較的多く出現しますが、
あまり共通の目的で共通に使われている名前はないようです。
[[CPAN]] 登録モジュール全体などもっと大規模に調べないと有意な結果は得られないと思われます。


[10]
>>7 手元の [[ActivePerl]] 標準付属のモジュールの中では、 [[LWP]] 系のモジュールに [CODE(per)[clone]] がありましたが、
引数零個で常に deep copy を作るようです。
([[名無しさん]])

@


1.1
log
@auto-committed
@
text
@d1 73
a73 64
[1] [[Perl]] の[[メソッド]]の[[名前]]は、
それが名前であること以上のことはほとんど何も決められていません。
プログラマは自分のスタイルで名前を決めることができます。
しかしながら、広く行われているやり方があれば、
それを採用した方がいいこともあるかもしれません
[WEAK[(プログラムが見やすくなるとか)]]。

[2] '''大文字と小文字''': Perl の関数・メソッドの名前ですべて[[大文字]]のものは特別な用途に予約されています。
([CODE(perl)[[[DESTROY]]]] のように自動的に呼ばれるものや、
[CODE(perl)[[[TIEHASH]]]] のように特定の機能で使われるものなどがあります。)
それ以外の目的で使ってはいけません。

メソッド名は、 [SAMP[method_name_like_this]] のように、
すべて小文字で [SAMP(char)[_]] を単語区切りにすることがすすめられています
[SRC[perlstyle]]。

[3] '''下線で始まる名前''':
[SAMP(char)[_]] で始まる名前は内部用の [[private]]
なものとみなすことがすすめられています [SRC[perlstyle]]。

[4] '''構築子''':
[[級]]の[[実現値]]を作るための[[構築子]]として機能する関数 (メソッド) は、
Perl では特別扱いされません。名前は自由ですし、
必要に応じて何種類でも作れます。
しかし、多くのモジュールでは他の言語にならって
[SAMP(perl)[[[new]]]] という名前が採用されています。

[8] '''輸入''':
関数 (メソッド) [CODE(perl)[[[import]]]] および
[CODE(perl)[[[unimport]]]] は、 [CODE(perl)[[[use]]]]
や [CODE(perl)[[[no]]]] を使用したときに呼ばれます。
それ以外の目的で使うのは混乱の元です。

[5] '''普遍メソッド名''':
すべての級の[[基底]]である特別な級 [CODE(perl)[[[UNIVERSAL]]]]
では、メソッド [CODE(perl)[[[isa]]]], [CODE(perl)[[[can]]]],
[CODE(perl)[[[VERSION]]]] が定義されています。
普通はこれらのメソッドと同じ名前のメソッドを上書きするべきではありません。

[6] '''文字列化''':
[[物体]]の文字列表現を返すメソッドが定義されていることがよくありますが、
Perl 付属のモジュールのいくつかやマニュアルの例で使われている名前は
[SAMP(perl)[[[as_string]]]] です。
[[CPAN]] のモジュールなどを調べてみると [SAMP(perl)[[[stringify]]]]
などの名前も使われています。

ちなみに、このようなメソッドは[[引数]]なしで動作し、
オプション指定が可能なら引数を指定できることが多いように思われます。

[7] '''クローン作成''':
物体の[[クローン]]を作成するメソッドが定義されていることがよくありますが、
その名前として CPAN のモジュールなどでよく使われているのは
[SAMP(perl)[[[clone]]]] のようです。

ちなみに、このようなメソッドは引数なしで動作し、
[[深い複製]]かどうかなどのオプション指定も可能であることが多いように思われます。

[9] '''多く使われている名前''':
手元の Perl 付属のモジュールを [CODE[[[grep]]]]
などを使ってざっと数えてみました。
特別な意味を持つ大文字の名前, [CODE(perl)[[[name]]]],
[CODE(perl)[[[as_string]]]] などが比較的多く出現しますが、
あまり共通の目的で共通に使われている名前はないようです。
[[CPAN]] 登録モジュール全体などもっと大規模に調べないと有意な結果は得られないと思われます。
@

