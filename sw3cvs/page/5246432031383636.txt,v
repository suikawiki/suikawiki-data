head	1.3;
access;
symbols
	suikawiki3-final:1.3;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2007.04.08.02.37.01;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.31.02.21.51;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.18.02.11.44;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@
'''Hypertext Markup Language - 2.0'''
- Network Working Group      
- Request for Comments: 1866 
- Category: Standards Track                                  
- T. Berners-Lee
- MIT/W3C
- D. Connolly
- November 1995


* Status of this Memo

> This document specifies an Internet standards track protocol for the
Internet community, and requests discussion and suggestions for
improvements.  Please refer to the current edition of the "Internet
Official Protocol Standards" (STD 1) for the standardization state
and status of this protocol.  Distribution of this memo is unlimited.


* Abstract

> The Hypertext Markup Language (HTML) is a simple markup language used
to create hypertext documents that are platform independent. HTML
documents are SGML documents with generic semantics that are
appropriate for representing information from a wide range of
domains. HTML markup can represent hypertext news, mail,
documentation, and hypermedia; menus of options; database query
results; simple structured documents with in-lined graphics; and
hypertext views of existing bodies of information.

ハイパーテキスト・マーク付け言語 (HTML) は、
ハイパーテキスト文書を作成するのに使用する、
環境過般の単純なマーク付け言語です。 HTML 文書は、
広範囲の種類の情報を表現するのに適切な一般的意味を持つ
SGML 文書です。 HTML マークはハイパーテキスト・ニュース,
メイル, 文書, ハイパー媒体 (選択肢のメニュー、
データベース照会結果、行内図形入り単純構造化文書、
既存情報本体のハイパーテキスト表示) を表現することができます。

> HTML has been in use by the World Wide Web (WWW) global information
initiative since 1990. This specification roughly corresponds to the
capabilities of HTML in common use prior to June 1994. HTML is an
application of ISO Standard 8879:1986 Information Processing Text and
Office Systems; Standard Generalized Markup Language (SGML).

HTML は 1990 年から World Wide Web (WWW)
大域情報活動で使用されています。この仕様書は大体
1994年6月までの HTML の広く使われている能力に対応します。
HTML は ISO 規格 8879:1986 情報処理文章および事務システム、
標準一般化マーク付け言語 (SGML) の応用です。

> The "text/html" Internet Media Type (RFC 1590) and MIME Content Type
(RFC 1521) is defined by this specification.

[CODE(MIME)[text/html]] インターネット媒体型 ([[RFC 1590]])
および MIME 内容型 ([[RFC 1521]]) はこの仕様書で定義しています。


* Table of Contents

>
[PRE[
    1.     Introduction ........................................... 2
    1.1    Scope .................................................. 3
    1.2    Conformance ............................................ 3
    2.     Terms .................................................. 6
    3.     HTML as an Application of SGML .........................10
    3.1    SGML Documents .........................................10
    3.2    HTML Lexical Syntax ................................... 12
    3.3    HTML Public Text Identifiers .......................... 17
    3.4    Example HTML Document ................................. 17
    4.     HTML as an Internet Media Type ........................ 18
    4.1    text/html media type .................................. 18
    4.2    HTML Document Representation .......................... 19
    5.     Document Structure .................................... 20
    5.1    Document Element: HTML ................................ 21
    5.2    Head: HEAD ............................................ 21
    5.3    Body: BODY ............................................ 24
    5.4    Headings: H1 ... H6 ................................... 24
    5.5    Block Structuring Elements ............................ 25
    5.6    List Elements ......................................... 28
    5.7    Phrase Markup ......................................... 30
    5.8    Line Break: BR ........................................ 34
    5.9    Horizontal Rule: HR ................................... 34
    5.10   Image: IMG ............................................ 34
    6.     Characters, Words, and Paragraphs ..................... 35
    6.1    The HTML Document Character Set ....................... 36
    7.     Hyperlinks ............................................ 36
    7.1    Accessing Resources ................................... 37
    7.2    Activation of Hyperlinks .............................. 38
    7.3    Simultaneous Presentation of Image Resources .......... 38
    7.4    Fragment Identifiers .................................. 38
    7.5    Queries and Indexes ................................... 39
    7.6    Image Maps ............................................ 39
    8.     Forms ................................................. 40
    8.1    Form Elements ......................................... 40
    8.2    Form Submission ....................................... 45
    9.     HTML Public Text ...................................... 49
    9.1    HTML DTD .............................................. 49
    9.2    Strict HTML DTD ....................................... 61
    9.3    Level 1 HTML DTD ...................................... 62
    9.4    Strict Level 1 HTML DTD ............................... 63
    9.5    SGML Declaration for HTML ............................. 64
    9.6    Sample SGML Open Entity Catalog for HTML .............. 65
    9.7    Character Entity Sets ................................. 66
    10.    Security Considerations ............................... 69
    11.    References ............................................ 69
    12.    Acknowledgments ....................................... 71
    12.1   Authors' Addresses .................................... 71
    13.    The HTML Coded Character Set .......................... 72
    14.    Proposed Entities ..................................... 75
]PRE]


* 1. Introduction

> The HyperText Markup Language (HTML) is a simple data format used to
create hypertext documents that are portable from one platform to
another. HTML documents are SGML documents with generic semantics
that are appropriate for representing information from a wide range
of domains.

ハイパーテキスト・マーク付け言語 (HTML) は、
ハイパーテキスト文書を作成するのに使用する、
環境過般の単純なデータ書式です。 HTML 文書は、
広範囲の種類の情報を表現するのに適切な一般的意味を持つ
SGML 文書です。

> As HTML is an application of SGML, this specification assumes a
working knowledge of [SGML].

HTML は SGML の応用で、この仕様書は SGML
の知識があるものと想定しています。


** 1.1. Scope

> HTML has been in use by the World-Wide Web (WWW) global information
initiative since 1990. Previously, informal documentation on HTML has
been available from a number of sources on the Internet. This
specification brings together, clarifies, and formalizes a set of
features that roughly corresponds to the capabilities of HTML in
common use prior to June 1994. A number of new features to HTML are
being proposed and experimented in the Internet community.

HTML は1990年から World Wide Web (WWW)
大域情報活動で使われてきました。以前は、非公式な HTML
についての文書がインターネットの数々の情報源から入手可能でした。
この仕様書は1994年6月までの HTML の広く使われている能力にまま相当する機能の集合をまとめて明確化・公式化しています。数々の HTML
の新しい機能がインターネット社会で提案・実験されています。

> This document thus defines a HTML 2.0 (to distinguish it from the
previous informal specifications). Future (generally upwardly
compatible) versions of HTML with new features will be released with
higher version numbers.

この文書は (以前の非公式な仕様書と区別して) HTML 2.0 を定義します。
将来の (通常上位互換な) 版の新しい機能の入った HTML
はより大きな版番号で公開されることに成るでしょう。

> HTML is an application of ISO Standard 8879:1986, "Information
Processing Text and Office Systems; Standard Generalized Markup
Language" (SGML). The HTML Document Type Definition (DTD) is a formal
definition of the HTML syntax in terms of SGML.

HTML は ISO 規格 8879:1986 [CITE[情報処理及び事務システム ― 標準一般化マーク付け言語]]
(SGML) の応用です。 HTML 文書型定義 (DTD)
は HTML 構文を SGML の言葉で公式に定義します。

> This specification also defines HTML as an Internet Media
Type[IMEDIA] and MIME Content Type[MIME] called `text/html'. As such,
it defines the semantics of the HTML syntax and how that syntax
should be interpreted by user agents.

この仕様書は HTML を [CODE(MIME)[[[text/html]]]] というインターネット媒体型および
MIME 内容型としても定義します。
この仕様書は HTML 構文の意味と、
その構文をどう利用者エージェントが解釈するべきかを定義します。


** 1.2. Conformance

> This specification governs the syntax of HTML documents and aspects
of the behavior of HTML user agents.

この仕様書は HTML 文書の構文と HTML
利用者エージェントの振る舞いについて規定します。


*** 1.2.1. Documents

> A document is a conforming HTML document if:

文書は、次の条件を満たす時、適合 HTML 文書です。

>
- * It is a conforming SGML document, and it conforms to the
HTML DTD (see 9.1, "HTML DTD").

適合 SGML 文書であって、 HTML DTD に適合すること。

> NOTE - There are a number of syntactic idioms that
are not supported or are supported inconsistently in
some historical user agent implementations. These
idioms are identified in notes like this throughout
this specification.

備考: 古い利用者エージェント実装は対応していないか一貫せずに対応している数々の構文的語句があります。
そのような語句はこの仕様書ではこのように注記して示しています。

> * It conforms to the application conventions in this
specification. For example, the value of the HREF attribute
of the <A> element must conform to the URI syntax.

この仕様書の応用表記法に適合すること。例えば、
[CODE(HTMLe)[a]] 要素の [CODE(HTMLa)[href]]
属性の値は URI 構文に適合しなければなりません。

>
- * Its document character set includes [ISO-8859-1] and
agrees with [ISO-10646]; that is, each code position listed
in 13, "The HTML Coded Character Set" is included, and each
code position in the document character set is mapped to the
same character as [ISO-10646] designates for that code
position.

文書文字集合が [[ISO/IEC 8859]]-1 を含み、
[[ISO/IEC 10646]] と合致すること。すなわち、
[CITE[HTML 符号化文字集合]]に挙げた各符号位置を含み、
文書文字集合の各符号位置が ISO/IEC 10646 
がその符号位置に割当てた文字と同じ物に写像されること。

> NOTE - The document character set is somewhat
independent of the character encoding scheme used to
represent a document. For example, the `ISO-2022-JP'
character encoding scheme can be used for HTML
documents, since its repertoire is a subset of the
[ISO-10646] repertoire. The critical distinction is
that numeric character references agree with
[ISO-10646] regardless of how the document is
encoded.

備考: 文書文字集合は文書を表現するのに使用する文字符号化方式とは独立なものです。
例えば、 [CODE(charset)[ISO-2022-JP]] 文字符号化方式は ISO/IEC 10646
レパートリの部分集合ですから、 HTML 文書に使用することができます。
大きな違いは、文書がどう符号化されているかに関わらず数値文字参照が
ISO/IEC 10646 に従うことです。

[INS[

訳注: [CODE(charset)[ISO-2022-JP]] レパートリが ISO/IEC 10646
レパートリの部分集合であることは自明ではありません
([[JIS X 0208]]-1978 などが問題)。
]INS]


*** 1.2.2. Feature Test Entities

> The HTML DTD defines a standard HTML document type and several
variations, by way of feature test entities. Feature test entities
are declarations in the HTML DTD that control the inclusion or
exclusion of portions of the DTD.

HTML DTD は、機能試験実体を使って、標準 HTML 文書型と幾つかの変種を定義します。
機能試験実体は、 HTML DTD で宣言され、 DTD 
の部分の取込みや除外を制御するために使用します。

>
:HTML.Recommended:
Certain features of the language are necessary for
compatibility with widespread usage, but they may
compromise the structural integrity of a document. This
feature test entity selects a more prescriptive document
type definition that eliminates those features. It is
set to `IGNORE' by default.

HTML のある機能は広く用いられている方法との互換のために必要ですが、
文書の構造的整合性を曲げてしまうかもしれません。
この機能試験実体は、そのような機能を除去したより規範的な文書型定義を選択します。
既定では [CODE(SGML)[IGNORE]] に設定されています。

> For example, in order to preserve the structure of a
document, an editing user agent may translate HTML
documents to the recommended subset, or it may require
that the documents be in the recommended subset for import.

例えば、文書の構造を保持するために、
編集利用者エージェントは HTML 文書を推奨部分集合に翻訳して構いませんし、
輸入するためには文書が推奨部分集合によっていることを要求しても構いません。

>
:HTML.Deprecated:
Certain features of the language are necessary for
compatibility with earlier versions of the
specification, but they tend to be used and implemented
inconsistently, and their use is deprecated. This
feature test entity enables a document type definition
that allows these features. It is set to `INCLUDE' by default.

HTML のある機能は以前の版の仕様との互換のために必要ですが、
一貫しない形で使用・実装される傾向にあり、
その使用は非推奨です。この機能試験実体はそのような機能を認める文書型定義を有効化します。
既定では [CODE(SGML)[INCLUDE]] に設定されています。

> Documents generated by translation software or editing
software should not contain deprecated idioms.

翻訳ソフトウェアや編集ソフトウェアが生成した文書は非推奨の語彙を含むべきではありません。


*** 1.2.3. User Agents

> An HTML user agent conforms to this specification if:

HTML 利用者エージェントは、次のとき、この仕様書に適合します。

>
- * It parses the characters of an HTML document into data
characters and markup according to [SGML].

- HTML 文書の文字を、 SGML に従って[[データ文字]]および[[マーク]]に構文解析する。

> NOTE - In the interest of robustness and
extensibility, there are a number of widely deployed
conventions for handling non-conforming documents.
See 4.2.1, "Undeclared Markup Error Handling" for details.

備考: 頑強性と拡張可能性の点から、種々の広く採用されている非適合文書の取扱い方法があります。
詳しくは 4.2.1 『未宣言マーク誤りの取扱い』を御覧下さい。

>
- * It supports the `ISO-8859-1' character encoding scheme and
processes each character in the ISO Latin Alphabet No. 1 as
specified in 6.1, "The HTML Document Character Set".

[CODE(charset)[[[ISO-8859-1]]]] 文字符号化方式に対応し、
6.1 『HTML 文書文字集合』に規定するとおり、
ISO Latin Alphabet No. 1 の各文字を処理する。

> NOTE - To support non-western writing systems, HTML
user agents are encouraged to support
`ISO-10646-UCS-2' or similar character encoding
schemes and as much of the character repertoire of
[ISO-10646] as is practical.

備考: 西洋以外の書字体系に対応するため、 HTML
利用者エージェントは [CODE(charset)[[[ISO-10646-UCS-2]]]]
や同様の文字符号化方式と [[ISO/IEC 10646]]
のできるだけ多くの[[文字レパートリ]]に対応することを推奨します。

>
- * It behaves identically for documents whose parsed token 
sequences are identical.

- 解析字句列が同一である文書に対して同じ様に振る舞う。

> For example, comments and the whitespace in tags disappear
during tokenization, and hence they do not influence the
behavior of conforming user agents.

例えば、注釈やタグ中の空白は字句化の過程で消失しますから、
適合利用者エージェントの振舞いには影響しません。

>
- * It allows the user to traverse (or at least attempt to
traverse, resources permitting) all hyperlinks from <A>
elements in an HTML document.

利用者が HTML 文書中の [CODE(HTML)[<[CODE(HTMLe)[[[a]]]]>]]
要素からのすべての[[ハイパーリンク]]を[[探索]]する
(あるいは少なくても探索することを試みる) のを認める。

> An HTML user agent is a level 2 user agent if, additionally:

HTML 利用者エージェントは、加えて次のとおりであれば、
水準 2 利用者エージェントです。

>
- * It allows the user to express all form field values
specified in an HTML document and to (attempt to) submit the
values as requests to information services.

- HTML 文書中に指定されたすべてのフォーム欄値を表現することおよびその値を情報サービスに要求として提出する
(のを試みる) ことを利用者に認める。


* 2. Terms

>
:absolute URI:
a URI in absolute form; for example, as per [URL]

:絶対 URI:絶対形での URI。例えば、 [[RFC 1738]] による。

>
:anchor:
one of two ends of a hyperlink; typically, a phrase
marked as an <A> element.

:アンカー:[[ハイパーリンク]]の2つの端点の1つ。
典型的には、 [CODE(HTMLe)[[[a]]]] 要素でマークされる語句。

>
:base URI:
an absolute URI used in combination with a relative URI
to determine another absolute URI.

相対 URI と合わせて絶対 URI を決定するために使われる別の絶対 URI。

>
:character:
An atom of information, for example a letter or a digit.
Graphic characters have associated glyphs, whereas
control characters have associated processing semantics.

:文字:情報の原子で、例えば文字や数字。
[[図形文字]]は関連付けられた[[グリフ]]を持ち、
[[制御文字]]は関連付けられた処理意味を持つ。

[PRE[
    character encoding
    scheme
            A function whose domain is the set of sequences of
            octets, and whose range is the set of sequences of
            characters from a character repertoire; that is, a
            sequence of octets and a character encoding scheme
            determines a sequence of characters.
]PRE]

:文字符号化方式:定義域がオクテットの列の集合であり、
値域が文字レパートリ内の文字の列の集合である関数。
すなわち、オクテットの列と文字符号化方式が文字の列を決定する。

[PRE[
    character repertoire
            A finite set of characters; e.g. the range of a coded
            character set.
]PRE]

:文字レパートリ:
文字の有限集合。例えば、符号化文字集合の値域。

[PRE[
    code position
            An integer. A coded character set and a code position
            from its domain determine a character.
]PRE]

:符号位置:
整数。符号化文字集合と定義域内の符号位置が文字を決定する。

[PRE[
    coded character set
            A function whose domain is a subset of the integers and
            whose range is a character repertoire. That is, for some
            set of integers (usually of the form {0, 1, 2, ..., N}
            ), a coded character set and an integer in that set
            determine a character. Conversely, a character and a
            coded character set determine the character's code
            position (or, in rare cases, a few code positions).
]PRE]

:符号化文字集合:
定義域が整数の部分集合であり、値域が文字レパートリである関数。
すなわち、ある整数の集合 (通常は [CODE(math)[{0, 1, 2, ..., [VAR[N]]}]]
の形) について、符号化文字集合とその集合中の整数が文字を決定する。
逆に、文字と符号化文字集合が文字の符号位置
(稀な場合には幾つかの符号位置群) を決定する。

[PRE[
    conforming HTML user
    agent
            A user agent that conforms to this specification in its
            processing of the Internet Media Type `text/html'.
]PRE]

:適合 HTML 利用者エージェント:
[[インターネット媒体型]] [CODE(MIME)[text/html]] 
の処理においてこの仕様書に適合する[[利用者エージェント]]。

[PRE[
    data character
            Characters other than markup, which make up the content
            of elements.
]PRE]

:データ文字:
[[マーク]]以外の[[文字]]であって、
[[要素]]の[[内容]]を構成する。

[PRE[
    document character set
            a coded character set whose range includes all
            characters used in a document. Every SGML document has
            exactly one document character set. Numeric character
            references are resolved via the document character set.
]PRE]

:文書文字集合:
値域が[[文書]]中で使用される全ての[[文字]]を含む[[符号化文字集合]]。
各 [[SGML文書]]はちょうど一つの文書文字集合を持つ。
[[数値文字参照]]は文書文字集合について解決する。

[PRE[
    DTD
            document type definition. Rules that apply SGML to the
            markup of documents of a particular type, including a
            set of element and entity declarations. [SGML]
]PRE]

:DTD:
[[文書型定義]]。特定の型の[[文書]]のマークに適用される規則で、
[[要素宣言]]や[[実体宣言]]の集合を含む。

[PRE[
    element
            A component of the hierarchical structure defined by a
            document type definition; it is identified in a document
            instance by descriptive markup, usually a start-tag and
            end-tag. [SGML]
]PRE]

:要素:[[文書型定義]]で定義される階層構造の構成部品。
[[記述的マーク]] (通常は[[開始タグ]]と[[終了タグ]])
により[[文書実現値]]中で識別される。

[PRE[
    end-tag
            Descriptive markup that identifies the end of an
            element. [SGML]
]PRE]

:終了タグ:[[要素]]の終了を識別する[[記述的マーク]]。

[PRE[
    entity
            data with an associated notation or interpretation; for
            example, a sequence of octets associated with an
            Internet Media Type. [SGML]
]PRE]

:実体:[[データ]]およびそれに[[関連付けられた記法]]または解釈。
例えば、[[インターネット媒体型]]に関連付けられた[[オクテット列]]。

[PRE[
    fragment identifier
            the portion of an HREF attribute value following the `#'
            character which modifies the presentation of the
            destination of a hyperlink.
]PRE]

:素片識別子:[[ハイパーリンク]]の[[終点]]の表現を修飾する、
[CODE(HTMLa)[[[href]]]] [[属性値]]の [CODE(char)[#]]
文字に続く部分。

[PRE[
    form data set
            a sequence of name/value pairs; the names are given by
            an HTML document and the values are given by a user.
]PRE]

:フォー・ムデータ集合:
[[名前]]と[[値]]の[[組]]の[[列]]。名前は HTML]]
[[要素]]により与えられ、値は[[利用者]]により与えられる。

[PRE[
    HTML document
            An SGML document conforming to this document type
            definition.
]PRE]

:HTML 文書:
この[[文書型定義]]に[[適合]]する [[SGML文書]]。

[PRE[
    hyperlink
            a relationship between two anchors, called the head and
            the tail. The link goes from the tail to the head. The
            head and tail are also known as destination and source,
            respectively.
]PRE]

:ハイパーリンク:[[頭]]および[[尾]]とよばれる二つの[[アンカー]]の間の関係。
[[リンク]]は尾から頭へと向かう。
頭と尾はそれぞれ[[終点]]および[[始点]]とも呼ぶ。

[PRE[
    markup
            Syntactically delimited characters added to the data of
            a document to represent its structure. There are four
            different kinds of markup: descriptive markup (tags),
            references, markup declarations, and processing
            instructions. [SGML]
]PRE]

:マーク(付け):[[文書]]の[[データ]]に、その構造を表現するために書き加える構造的に区切られた[[文字]]群。
マークには[[記述的マーク]] ([[タグ]]), [[参照]],
[[マーク宣言]], [[処理指令]]の4種類がある。

[PRE[
    may
            A document or user interface is conforming whether this
            statement applies or not.
]PRE]

:[VAR[〜]]してよい、構わない:
この文を適用するにせよ、しないにせよ、[[文書]]または[[利用者界面]]は[[適合]]している。

[PRE[
    media type
            an Internet Media Type, as per [IMEDIA].
]PRE]

:媒体型:[[RFC 1521]] による[[インターネット媒体型]]。

[PRE[
    message entity
            a head and body. The head is a collection of name/value
            fields, and the body is a sequence of octets. The head
            defines the content type and content transfer encoding
            of the body. [MIME]
]PRE]

:メッセージ実体:
[[頭部]]および[[本体]]。頭部は名前・値欄の集成であり、
本体は[[オクテット]]の列である。頭部は本体の[[内容型]]および[[内容転送符号化]]を定義する。

[PRE[
    minimally conforming
    HTML user agent
            A user agent that conforms to this specification except
            for form processing. It may only process level 1 HTML
            documents.
]PRE]

:最小適合 HTML 利用者エージェント:
[[フォーム]]処理を除いてこの仕様書に適合する[[利用者エージェント]]。
水準 1 [[HTML文書]]のみを処理しても構わない。

[PRE[
    must
            Documents or user agents in conflict with this statement
            are not conforming.
]PRE]

:[VAR[〜]]しなければならない:
この文に衝突する[[文書]]や[[利用者エージェント]]は適合していない。

[PRE[
    numeric character
    reference
            markup that refers to a character by its code position
            in the document character set.
]PRE]

:数値文字参照:[[文書文字集合]]中の[[符号位置]]によって[[文字]]を参照する[[マーク]]。

[PRE[
    SGML document
            A sequence of characters organized physically as a set
            of entities and logically into a hierarchy of elements.
            An SGML document consists of data characters and markup;
            the markup describes the structure of the information
            and an instance of that structure. [SGML]
]PRE]

:SGML 文書:物理的には[[実体]]の集合として、
論理的には[[要素]]の階層として組織化された[[文字]]の列。
SGML 文書は[[データ文字]]と[[マーク]]で構成される。
マークは情報の構造とその構造の[[実現値]]を記述する。

[PRE[
    shall
            If a document or user agent conflicts with this
            statement, it does not conform to this specification.
]PRE]

:[VAR[〜]]しなければならない:
[[文書]]または[[利用者エージェント]]がこの文と衝突するなら、
この仕様書に適合しない。

[PRE[
    should
            If a document or user agent conflicts with this
            statement, undesirable results may occur in practice
            even though it conforms to this specification.
]PRE]

:[VAR[〜]]するべきだ:
[[文書]]または[[利用者エージェント]]がこの文と衝突するなら、
それはこの仕様書には適合するものの、実際には望ましくない結果を引き起こすかもしれない。

[PRE[
    start-tag
            Descriptive markup that identifies the start of an
            element and specifies its generic identifier and
            attributes. [SGML]
]PRE]

:開始タグ:
[[要素]]の開始とその[[共通識別子]]および[[属性]]を指定する[[記述的マーク]]。

[PRE[
    syntax-reference
    character set
            A coded character set whose range includes all
            characters used for markup; e.g. name characters and
            delimiter characters.
]PRE]

:構文参照文字集合:
値域が[[マーク]]に使用するすべての[[文字]]、
例えば[[名前文字]]や[[区切子文字]]を含む[[符号化文字集合]]。

[PRE[
    tag
            Markup that delimits an element. A tag includes a name
            which refers to an element declaration in the DTD, and
            may include attributes. [SGML]
]PRE]

:タグ:[[要素]]を区切る[[マーク]]。タグは [[DTD]]
中の[[要素宣言]]を参照する[[名前]]を含み、
[[属性]]を含んでもよい。

[PRE[
    text entity
            A finite sequence of characters. A text entity typically
            takes the form of a sequence of octets with some
            associated character encoding scheme, transmitted over
            the network or stored in a file. [SGML]
]PRE]

:文実体:文字の有限の列。文実体は典型的には何らかの関連付けられた[[文字符号化方式]]の[[オクテット]]の列の形を取り、
[[ネットワーク]]上を転送されたり[[ファイル]]に蓄積されたりする。

[PRE[
    typical
            Typical processing is described for many elements. This
            is not a mandatory part of the specification but is
            given as guidance for designers and to help explain the
            uses for which the elements were intended.
]PRE]

:典型的:典型的処理を多くの[[要素]]について記述する。
これは仕様書の強制の部分ではないが、
設計者への指針および要素の意図する使用法を説明するのを助けるために与える。

[PRE[
    URI
            A Uniform Resource Identifier is a formatted string that
            serves as an identifier for a resource, typically on the
            Internet. URIs are used in HTML to identify the anchors
            of hyperlinks. URIs in common practice include Uniform
            Resource Locators (URLs)[URL] and Relative URLs
            [RELURL].
]PRE]

:URI:統一資源識別子は、典型的には[[インターネット]]上にある[[資源]]の識別子として供給される書式付けされた文字列である。
URI は、 [[HTML]] においては[[ハイパーリンク]]の[[アンカー]]を識別するために使用する。
URI は一般的な習慣として統一資源位置子 ([[URL]]) および[[相対URL]]
を含む。

[PRE[
    user agent
            A component of a distributed system that presents an
            interface and processes requests on behalf of a user;
            for example, a www browser or a mail user agent.
]PRE]

:利用者エージェント:
[[界面]]を提供し、[[利用者]]に代わって[[要求]]を処理する[[分散システム]]の構成部品。
例えば、 [[WWWブラウザ]]や[[メイル利用者エージェント]]。

[PRE[
    WWW
            The World-Wide Web is a hypertext-based, distributed
            information system created by researchers at CERN in
            Switzerland. <URL:http://www.w3.org/>
]PRE]

:WWW:世界規模網は[[ハイパーテキスト]]を基にした分散情報システムで、
[[スイス]]の [[CERN]] の研究者により作られた。


* 3. HTML as an Application of SGML

> HTML is an application of ISO 8879:1986 -- Standard Generalized
Markup Language (SGML). SGML is a system for defining structured
document types and markup languages to represent instances of those
document types[SGML]. The public text -- DTD and SGML declaration --
of the HTML document type definition are provided in 9, "HTML Public Text".

HTML は [[ISO8879]]:1986 ―標準一般化マーク付け言語 ([[SGML]])
の[[応用]]です。 SGML は構造化[[文書型]]の定義とその文書型の[[実現値]]を表現するための[[マーク付け言語]]のシステムです。
HTML [[文書型定義]]の[[公開文]] ([[DTD]] と [[SGML宣言]])
は 9. HTML 公開文で提供しています。

> The term "HTML" refers to both the document type defined here and the
markup language for representing instances of this document type.

用語「HTML」は、ここで定義する文書型およびこの文書型の実現値を表現するマーク付け言語の両方を指します。


** 3.1. SGML Documents

> An HTML document is an SGML document; that is, a sequence of
characters organized physically into a set of entities, and logically
as a hierarchy of elements.

[[HTML文書]]は [[SGML文書]]です。すなわち、
物理的には[[実体]]の集合として、論理的には[[要素]]の階層として組織化された[[文字]]の列です。

> In the SGML specification, the first production of the SGML syntax
grammar separates an SGML document into three parts: an SGML
declaration, a prologue, and an instance. For the purposes of this
specification, the prologue is a DTD. This DTD describes another
grammar: the start symbol is given in the doctype declaration, the
terminals are data characters and tags, and the productions are
determined by the element declarations. The instance must conform to
the DTD, that is, it must be in the language defined by this grammar.

SGML 仕様書では、 SGML 構文文法の最初の生成規則で
SGML 文書を3つの部分 ― [[SGML宣言]], [[前書き]], 実現値に分離しています。
この仕様書の目的では、前書きは [[DTD]] です。
この DTD は他の文法を記述します。開始記号は[[文書型宣言]]中に与えられ、
終端は[[データ文字]]と[[タグ]]であり、
生成規則は[[要素宣言]]で決定されます。
実現値は DTD に適合しなければなりません。すなわち、
この文法で定義された言語で書かれていなければなりません。

> The SGML declaration determines the lexicon of the grammar. It
specifies the document character set, which determines a character
repertoire that contains all characters that occur in all text
entities in the document, and the code positions associated with
those characters.

SGML 宣言は文法の字句を決定します。
SGML 宣言は[[文書文字集合]]を指定し、文書文字集合は[[文書]]中のすべての[[文実体]]に出現するすべての[[文字]]を含む[[文字レパートリ]]とそららの文字に関連付けられた[[符号位置]]を決定します。

> The SGML declaration also specifies the syntax-reference character
set of the document, and a few other parameters that bind the
abstract syntax of SGML to a concrete syntax. This concrete syntax
determines how the sequence of characters of the document is mapped
to a sequence of terminals in the grammar of the prologue.

SGML 宣言は文書の[[構文参照文字集合]]と、
SGML の[[抽象構文]]を[[具象構文]]に束縛する数個の他の[[引数]]も指定します。
この具象構文が文書の文字の列をどう前書きの文法中の終端の列に写像するかを決定します。

> For example, consider the following document:

例えば、次の文書を考えてみましょう。

>
[PRE(HTML)[
<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<title>Parsing Example</title>
<p>Some text. <em>&#42;wow&#42;</em></p>
]PRE]

> An HTML user agent should use the SGML declaration that is given in
9.5, "SGML Declaration for HTML". According to its document character
set, `&#42;' refers to an asterisk character, `*'.

HTML 利用者エージェントは、 9.5 『HTML 用 SGML 宣言』
にある SGML 宣言を使用するべきです。その[[文書文字集合]]によれば、
[SAMP(SGML)[&#42;]] は星印文字 [CODE(char)[*]] を指します。

> The instance above is regarded as the following sequence of terminals:
= 1. start-tag: TITLE
= 2. data characters: "Parsing Example"
= 3. end-tag: TITLE
= 4. start-tag: P
= 5. data characters "Some text."
= 6. start-tag: EM
= 7. data characters: "*wow*"
= 8. end-tag: EM
= 9. end-tag: P

前述の実現値は次の終端の列と考えます。
= 開始タグ: [CODE(HTMLe)[title]]
= データ文字群: [Q[Parsing Example]]
= 終了タグ: [CODE(HTMLe)[title]]
= 開始タグ: [CODE(HTMLe)[p]]
= データ文字群: [Q[Some text.]]
= 開始タグ: [CODE(HTMLe)[em]]
= データ文字群: [Q[*wow*]]
= 終了タグ: [CODE(HTMLe)[em]]
= 終了タグ: [CODE(HTMLe)[p]]

> The start symbol of the DTD grammar is HTML, and the productions are
given in the public text identified by `-//IETF//DTD HTML 2.0//EN'
(9.1, "HTML DTD"). The terminals above parse as:

DTD 文法の開始記号は [CODE(HTMLe)[html]] で、
生成規則群は [CODE[-//IETF//DTD HTML 2.0//EN]]
で識別される公開文で与えられます。
先の終端群は、次のように解析します。

>
[PRE[
       HTML
        |
        \-HEAD
        |  |
        |  \-TITLE
        |      |
        |      \-<TITLE>
        |      |
        |      \-"Parsing Example"
        |      |
        |      \-</TITLE>
        |
        \-BODY
          |
          \-P
            |
            \-<P>
            |
            \-"Some text. "
            |
            \-EM
            |  |
            |  \-<EM>
            |  |
            |  \-"*wow*"
            |  |
            |  \-</EM>
            |
            \-</P>
]PRE]

> Some of the elements are delimited explicitly by tags, while the
boundaries of others are inferred. The <HTML> element contains a
<HEAD> element and a <BODY> element. The <HEAD> contains <TITLE>,
which is explicitly delimited by start- and end-tags.

いくつかの要素はタグにより陽に区切られており、
他の境界は推論しています。 [CODE(HTMLe)[html]] 要素は
[CODE(HTMLe)[head]] 要素と [CODE(HTMLe)[body]] 要素を含みます。
[CODE(HTMLe)[head]] は開始タグと終了タグで陽に区切られている
[CODE(HTMLe)[title]] を含みます。


** 3.2. HTML Lexical Syntax

> SGML specifies an abstract syntax and a reference concrete syntax.
Aside from certain quantities and capacities (e.g. the limit on the
length of a name), all HTML documents use the reference concrete
syntax. In particular, all markup characters are in the repertoire of
[ISO-646]. Data characters are drawn from the document character set
(see 6, "Characters, Words, and Paragraphs").

SGML は[[抽象構文]]と[[具象構文]]を規定しています。
[[量]]や[[容量]] (例えば名前の長さの制限) は別として、すべての
HTML 文書は[[規格参照具象構文]]を使います。
特に、すべての[[マーク文字]]は [[ISO/IEC 646]] のレパートリ中にあります。
データ文字は文書文字集合からえらびます。

> A complete discussion of SGML parsing, e.g. the mapping of a sequence
of characters to a sequence of tags and data, is left to the SGML
standard[SGML]. This section is only a summary.

SGML の構文解析、例えば文字の列からタグおよびデータの列への写像についての完全な議論は
SGML 規格によります。この節は要約だけです。


*** 3.2.1. Data Characters

> Any sequence of characters that do not constitute markup (see 9.6
"Delimiter Recognition" of [SGML]) are mapped directly to strings of
data characters. Some markup also maps to data character strings.
Numeric character references map to single-character strings, via the
document character set. Each reference to one of the general entities
defined in the HTML DTD maps to a single-character string.

マークを構成しない任意の文字の列は直接データ文字の列に写像します。
いくつかのマークもデータ文字列に写像します。
数値文字参照は文書文字集合によりひとつの文字に写像します。
HTML DTD で定義された一般実体のいずれかへの参照はひとつの文字に写像します。

> For example,

たとえば、

>
- abc&lt;def    => "abc","<","def"
- abc&#60;def   => "abc","<","def"

> The terminating semicolon on entity or numeric character references
is only necessary when the character following the reference would
otherwise be recognized as part of the name (see 9.4.5 "Reference
End" in [SGML]).

実体参照や数値文字参照の終端のセミコロンは、
参照の次の文字が名前の一部と認知されてしまう場合にのみ必要です。

>
- abc &lt def     => "abc ","<"," def"
- abc &#60 def    => "abc ","<"," def"

> An ampersand is only recognized as markup when it is followed by a
letter or a `#' and a digit:

アンド記号は文字 (letter) か [CODE[#]] か数字が続く時のみマークとして認知します。

>
- abc & lt def    => "abc & lt def"
- abc &# 60 def    => "abc &# 60 def"

> A useful technique for translating plain text to HTML is to replace
each '<', '&', and '>' by an entity reference or numeric character
reference as follows:

平文を HTML に翻訳する有用な技法は、各 [CODE[<]], [CODE[&]],
[CODE[>]] を実体参照や数値文字参照で次のように置き換えることです。

>
,CHARACTER	,ENTITY REFERENCE	,NUMERIC CHAR REF	,CHARACTER DESCRIPTION
,---------	,----------	,-----------	,---------------------
,&	,&amp;	,&#38;	,Ampersand
,<	,&lt;	,&#60;	,Less than
,>	,&gt;	,&#62;	,Greater than

> NOTE - There are SGML mechanisms, CDATA and RCDATA
declared content, that allow most `<', `>', and `&'
characters to be entered without the use of entity
references. Because these mechanisms tend to be used and
implemented inconsistently, and because they conflict
with techniques for reducing HTML to 7 bit ASCII for
transport, they are deprecated in this version of HTML.
See 5.5.2.1, "Example and Listing: XMP, LISTING".

備考: SGML には [CODE(SGML)[[[CDATA]]]] や [CODE(SGML)[[[RCDATA]]]]
のような[[宣言内容]]の仕組みがあり、ほとんどの [CODE[<]], [CODE[>]],
[CODE[&]] の文字を実体参照を使用せずに入れることができます。
このような仕組みは一貫せずに使用・実装される傾向にあり、
HTML を輸送のため 7 ビット ASCII に削減する技法とも衝突するので、
この版の HTML では非推奨とします。


*** 3.2.2. Tags

> Tags delimit elements such as headings, paragraphs, lists, character
highlighting, and links. Most HTML elements are identified in a
document as a start-tag, which gives the element name and attributes,
followed by the content, followed by the end tag. Start-tags are
delimited by `<' and `>'; end tags are delimited by `</' and `>'. An
example is:

タグは、要素、たとえば頭、段落、リスト、文字強調、リンクを区切ります。
ほとんどの HTML 要素は文書の中で開始タグで識別します。
開始タグは要素名と属性を与え、次に内容が続き、その次に終了タグが来ます。
開始タグは [CODE[<]] と [CODE[>]] で区切ります。終了タグは
[CODE[</]] と [CODE[>]] で区切ります。例:

> [SAMP(HTML)[<H1>This is a Heading</H1>]]

> Some elements only have a start-tag without an end-tag. For example,
to create a line break, use the `<BR>' tag.  Additionally, the end
tags of some other elements, such as Paragraph (`</P>'), List Item
(`</LI>'), Definition Term (`</DT>'), and Definition Description
(`</DD>') elements, may be omitted.

いくつかの要素は終了タグがなく、開始タグだけを持ちます。
例えば、改行を行うためには、 [CODE(HTML)[<[CODE(HTMLe)[br]]>]]
タグを使います。加えて、いくつかの他の要素の終了タグ、
例えば段落 ([SAMP(HTML)[</[CODE(HTMLe)[p]]>]]),
リスト項目 ([SAMP(HTML)[</[CODE(HTMLe)[li]]>]]),
定義語 ([SAMP(HTML)[</[CODE(HTMLe)[dt]]>]]),
定義記述 ([SAMP(HTML)[</[CODE(HTMLe)[dd]]>]]) の要素の終了タグは、
省略して構いません。

> The content of an element is a sequence of data character strings and
nested elements. Some elements, such as anchors, cannot be nested.
Anchors and character highlighting may be put inside other
constructs. See the HTML DTD, 9.1, "HTML DTD" for full details.

要素の内容はデータ文字と入れ子の要素の列です。
いくつかの要素、たとえばアンカーは、入れ子にできません。
アンカーと文字強調は一方の内に他方を入れて構いません。
完全な詳細は HTML DTD を参照してください。

> NOTE - The SGML declaration for HTML specifies SHORTTAG YES, which
means that there are other valid syntaxes for tags, such as NET
tags, `<EM/.../'; empty start tags, `<>'; and empty end-tags,
`</>'. Until support for these idioms is widely deployed, their
use is strongly discouraged.

備考: HTML の SGML 宣言は [CODE(SGML)[[[SHORTTAG]] YES]]
と指定しており、他にも妥当なタグの構文、たとえば [CODE(SGML)[[[NET]]]]
タグ [SAMP(HTML)[<[CODE(HTMLe)[em]]/.../]], 空開始タグ
[SAMP(HTML)[<>]], 空終了タグ [SAMP(HTML)[</>]] があることを意味しています。
このような表記への対応が広がるまでは、その使用は強く非推奨とします。


*** 3.2.3. Names

> A name consists of a letter followed by letters, digits, periods, or
hyphens. The length of a name is limited to 72 characters by the
`NAMELEN' parameter in the SGML declaration for HTML, 9.5, "SGML
Declaration for HTML". Element and attribute names are not case
sensitive, but entity names are.  For example, `<BLOCKQUOTE>',
`<BlockQuote>', and `<blockquote>' are equivalent, whereas `&amp;' is
different from `&AMP;'.

名前は、文字 (ltter) とそれに続く文字、数字、句点またはハイフンで構成します。
名前の長さは HTML の SGML 宣言の [CODE(SGML)[[[NAMELEN]]]]
引数により 72 文字に制限されています。要素や属性の名前は大文字・小文字を区別しませんが、
実体名は区別します。例えば、 [SAMP(HTML)[<BLOCKQUOTE>]],
[SAMP(HTML)[<BlockQuote>]], [SAMP(HTML)[<blockquote>]]
は同等ですが、 [SAMP(HTML)[&amp;]] は [SAMP(HTML)[&AMP;]]
とは異なります。

> In a start-tag, the element name must immediately follow the tag open
delimiter `<'.

開始タグでは、要素名はタグ開始区切子 [CODE[<]]
のすぐ後ろに続かなければなりません。


*** 3.2.4. Attributes

> In a start-tag, white space and attributes are allowed between the
element name and the closing delimiter. An attribute specification
typically consists of an attribute name, an equal sign, and a value,
though some attribute specifications may be just a name token. White
space is allowed around the equal sign.

開始タグでは、要素名と閉じ区切子の間に空白と属性群が認められます。
属性指定は典型的に属性名、等号、値から成りますが、
いくつかの属性指定は単に名前字句だけでも構いません。
等号の回りに空白が認められます。

> The value of the attribute may be either:

属性の値は、次のうちのいずれかです。

>
- * A string literal, delimited by single quotes or double
quotes and not containing any occurrences of the delimiting character.

文字列表記。一重引用符または二重引用符で区切り、
区切文字を含まない。

> NOTE - Some historical implementations consider any
occurrence of the `>' character to signal the end of
a tag. For compatibility with such implementations,
when `>' appears in an attribute value, it should be
represented with a numeric character reference. For
example, `<IMG SRC="eq1.jpg" alt="a>b">' should be
written `<IMG SRC="eq1.jpg" alt="a&#62;b">' or `<IMG
SRC="eq1.jpg" alt="a&gt;b">'.

備考: いくつかの歴史的な実装は [CODE[>]] 文字があるとタグの終了と考えます。
そのような実装との互換性のため、 [CODE[>]] が属性値中に出現するときは、
数値文字参照で表現するべきです。例えば、
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a>b">]] は
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a&#62;b">]] または
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a&gt;b">]] とするべきです。

>
- * A name token (a sequence of letters, digits, periods, or
hyphens). Name tokens are not case sensitive.

名前字句 (文字、数字、句点またはハイフンの列)。
名前字句は大文字・小文字を区別しません。

> NOTE - Some historical implementations allow any
character except space or `>' in a name token.

備考: いくつかの歴史的実装は生枝路駆虫に空白や [CODE[>]]
を除く任意の文字を認めます。

> In this example, <img> is the element name, src is the attribute
name, and `http://host/dir/file.gif' is the attribute value:

この例では、 [SAMP(HTMLe)[img]] は要素名で、
[SAMP(HTMLa)[src]] は属性名で、 [SAMP[http://host/dir/file.gif]]
は属性値です。

>
- [SAMP(HTML)[<img src='http://host/dir/file.gif'>]]

> A useful technique for computing an attribute value literal for a
given string is to replace each quote and white space character by an
entity reference or numeric character reference as follows:

ある文字列の属性値表記を計算する有用な技法は、
各引用符と空白文字を実体参照や数値文字参照で次のとおり置換することです。

>
[PRE[
                     ENTITY      NUMERIC
           CHARACTER REFERENCE   CHAR REF     CHARACTER DESCRIPTION
           --------- ----------  -----------  ---------------------
             HT                  &#9;         Tab
             LF                  &#10;        Line Feed
             CR                  &#13;        Carriage Return
             SP                  &#32;        Space
             "       &quot;      &#34;        Quotation mark
             &       &amp;       &#38;        Ampersand
]PRE]

> For example:

たとえば、

> [SAMP(HTML)[<IMG SRC="image.jpg" alt="First &quot;real&quot; example">]]

> The `NAMELEN' parameter in the SGML declaration (9.5, "SGML
Declaration for HTML") limits the length of an attribute value to
1024 characters.

SGML 宣言の [CODE(SGML)[[[NAMELEN]]]] 引数は属性値の長さを 1024
文字に制限しています。

> Attributes such as ISMAP and COMPACT may be written using a minimized
syntax (see 7.9.1.2 "Omitted Attribute Name" in [SGML]). The markup:

[CODE(HTMLa)[[[ismap]]]] や [CODE(HTMLa)[[[compatct]]]]]
のような属性は最小化構文を使って書いて構いません。
マーク

- [SAMP(HTML)[<UL COMPACT="compact">]]

> can be written using a minimized syntax:

は最小化構文を使って

- [SAMP(HTML)[<UL COMPACT>]]

と書くことができます。

> NOTE - Some historical implementations only understand the minimized syntax.

備考: いくつかの歴史的実装は最小化構文のみを理解します。


*** 3.2.5. Comments

> To include comments in an HTML document, use a comment declaration. A
comment declaration consists of `<!' followed by zero or more
comments followed by `>'. Each comment starts with `--' and includes
all text up to and including the next occurrence of `--'. In a
comment declaration, white space is allowed after each comment, but
not before the first comment.  The entire comment declaration is ignored.

注釈を HTML 文書に含めるためには、注釈宣言を使用します。
注釈宣言は [CODE[<!]] とそれに続く零個以上の注釈、
それに続く [CODE[>]] から成ります。注釈は [CODE[--]]
ではじまり、次に [CODE[--]] が現れるまでのすべての文を含みます。
注釈宣言では、空白が各注釈の後に認められますが、
最初の注釈の前には認められません。注釈宣言全体が無視されます。

> NOTE - Some historical HTML implementations incorrectly consider
any `>' character to be the termination of a comment.

備考: いくつかの歴史的 HTML 実装は誤って任意の [CODE[>]]
文字を注釈の終端と考えます。

> For example:
[PRE(HTML)[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HEAD>
    <TITLE>HTML Comment Example</TITLE>
    <!-- Id: html-sgml.sgm,v 1.5 1995/05/26 21:29:50 connolly Exp  -->
    <!-- another -- -- comment -->
    <!>
    </HEAD>
    <BODY>
    <p> <!- not a comment, just regular old data characters ->
]PRE]


** 3.3. HTML Public Text Identifiers

> To identify information as an HTML document conforming to this
specification, each document must start with one of the following
document type declarations.

情報をこの仕様書に適合する HTML 文書と識別するために、
各文書は次の文書型宣言のいずれかで始めなければなりません。

> [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">]]

> This document type declaration refers to the HTML DTD in 9.1, "HTML DTD".

この文書型宣言は 9.1 の HTML DTD を参照します。

> NOTE - If the body of a `text/html' message entity does not begin
with a document type declaration, an HTML user agent should infer
the above document type declaration.

備考: [CODE(MIME)[[[text/html]]]] メッセージ実体の本体が文書型宣言で始まらなければ、
HTML 利用者エージェントはこの文書型宣言と推論するべきです。

> [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Level 2//EN">]]

> This document type declaration also refers to the HTML DTD which
appears in 9.1, "HTML DTD".

この文書型宣言も 9.1 にある HTML DTD を参照します。

> [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Level 1//EN">]]

> This document type declaration refers to the level 1 HTML DTD in 9.3,
"Level 1 HTML DTD". Form elements must not occur in level 1 documents.

この文書型宣言は 9.3 にある水準 1 HTML DTD を参照します。
フォーム要素群は水準 1 文書に出現してはなりません。

> [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Strict//EN">]]
> [CODE{<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Strict Level 1//EN">]]

> These two document type declarations refer to the HTML DTD in 9.2,
"Strict HTML DTD" and 9.4, "Strict Level 1 HTML DTD". They refer to
the more structurally rigid definition of HTML.

これらの二つの文書型宣言は 9.2 と 9.4 にある HTML DTD
を参照します。これらはより構造的に厳密な HTML の定義を参照します。

> HTML user agents may support other document types. In particular,
they may support other formal public identifiers, or other document
types altogether. They may support an internal declaration subset
with supplemental entity, element, and other markup declarations.

HTML 利用者エージェントは他の文書型にも対応して構いません。
特に、他の[[公式公開識別子]]や他の文書型にあわせて対応して構いません。
HTML 利用者エージェントは補遺実体・要素・他のマーク宣言の含まれた内部宣言部分集合に対応して構いません。

[INS[

訳注: HTML UA は SGML に従って構文解析しなければならないのだから、
内部部分集合には対応しなければならないはずだが。
構文解析はできなければならないが、それを適用する必要はないということか。
]INS]


** 3.4. Example HTML Document

>
[PRE[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HTML>
    <!-- Here's a good place to put a comment. -->
    <HEAD>
    <TITLE>Structural Example</TITLE>
    </HEAD><BODY>
    <H1>First Header</H1>
    <P>This is a paragraph in the example HTML file. Keep in mind
    that the title does not appear in the document text, but that
    the header (defined by H1) does.</P>
    <OL>
    <LI>First item in an ordered list.
    <LI>Second item in an ordered list.
      <UL COMPACT>
      <LI> Note that lists can be nested;
      <LI> Whitespace may be used to assist in reading the
           HTML source.
      </UL>
    <LI>Third item in an ordered list.
    </OL>
    <P>This is an additional paragraph. Technically, end tags are
    not required for paragraphs, although they are allowed. You can
    include character highlighting in a paragraph. <EM>This sentence
    of the paragraph is emphasized.</EM> Note that the &lt;/P&gt;
    end tag has been omitted.
    <P>
    <IMG SRC ="triangle.xbm" alt="Warning: ">
    Be sure to read these <b>bold instructions</b>.
    </BODY></HTML>
]PRE]

[PRE[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HTML>
    <!-- ここは注釈を入れるのにいい場所だ -->
    <HEAD>
    <TITLE>構造的な例</TITLE>
    </HEAD><BODY>
    <H1>最初の見出し</H1>
    <P>これは例の HTML ファイル中の段落です。
    題は文書文中に出現しないものの、見出し ([CODE(HTML)[h1]] により定義)
    は出現することに注意してください。</P>
    <OL>
    <LI>順序付きリスとの最初の項目
    <LI>順序付きリストの二番目の項目
      <UL COMPACT>
      <LI> リストは入れ子にできることに注意
      <LI> HTML 原文を読む助けに
           空白を入れて構いません
      </UL>
    <LI>順序付きリストの三番目の項目
    </OL>
    <P>これは追加の段落です。典型的に、終了タグは段落には必須ではありません。
    とはいうものの認められてはいます。段落中に文字強調を含めることができます。
    <EM>段落のこの文は強調します。</EM> &lt;/P&gt;
    終了タグが省略されていることに注意されたし。
    <P>
    <IMG SRC ="triangle.xbm" alt="警告: ">
    <b>太字の指示</b>を読むように。
    </BODY></HTML>
]PRE]


* 4. HTML as an Internet Media Type

> An HTML user agent allows users to interact with resources which have
HTML representations. At a minimum, it must allow users to examine
and navigate the content of HTML level 1 documents. HTML user agents
should be able to preserve all formatting distinctions represented in
an HTML document, and be able to simultaneously present resources
referred to by IMG elements (they may ignore some formatting
distinctions or IMG resources at the request of the user). Level 2
HTML user agents should support form entry and submission.

[[HTML利用者エージェント]]を使うと[[利用者]]は HTML
[[表現]]を持つ[[資源]]と対話できます。少なくても、
HTML 利用者エージェントは利用者が HTML [[水準]] 1 
文書の内容を検査して誘導できなければなりません。
HTML 利用者エージェントは HTML 文書で表現されているすべての書式付け上の区別を保存することができるべきであり、
[CODE(HTMLe)[[[img]]]] 要素で参照された資源を同時に表示できるべきです
(HTML 利用者エージェントは利用者の要求により書式付け上の区別や
[CODE(HTMLe)[img]] 資源を無視しても構いません)。水準 2
HTML 利用者エージェントはフォーム項目とフォーム提出に対応するべきです。


** 4.1. text/html media type

> This specification defines the Internet Media Type [IMEDIA] (formerly
referred to as the Content Type [MIME]) called `text/html'. The
following is to be registered with [IANA].

この仕様書は [DFN[[CODE(MIME)[[[text/html]]]]]]
というインターネット媒体型 (従来内容型と呼ばれてきたもの。)
を定義します。次の通り IANA に登録します。

>
:Media Type name:
text
:Media subtype name:
html
:Required parameters:
none
:Optional parameters:
level, charset
:Encoding considerations:
any encoding is allowed
:Security considerations:
see 10, "Security Considerations"

> The optional parameters are defined as follows:

省略可能な引数は次の通り定義します。

>
:Level:
The level parameter specifies the feature set used in
the document. The level is an integer number, implying
that any features of same or lower level may be present
in the document. Level 1 is all features defined in this
specification except those that require the <FORM>
element. Level 2 includes form processing. Level 2 is
the default.

[CODE(MIME)[level]] ([[水準]]) 
引数は[[文書]]で使用される機能の集合を指定します。
水準は整数で、それ以下の水準の機能が出現し得ることを示します。
水準 1 は、この仕様書で定義するすべての機能から
[CODE(HTMLe)[[[form]]]] 要素に必要な機能を除いたものです。
水準 2 はフォーム処理を含みます。水準 2 が既定値です。

>
:Charset:
The charset parameter (as defined in section 7.1.1 of
RFC 1521[MIME]) may be given to specify the character
encoding scheme used to represent the HTML document as a
sequence of octets. The default value is outside the
scope of this specification; but for example, the
default is `US-ASCII' in the context of MIME mail, and
`ISO-8859-1' in the context of HTTP [HTTP].

Charset 引数 ([[RFC 1521]] 7.1.1 節で定義。) は HTML 文書を[[オクテット]]の列として表現するために使用する[[文字符号化方式]]を指定することができます。
既定値はこの仕様書の適用範囲外とします。
例えば [[MIME]] メイルの文脈では [CODE(charset)[[[US-ASCII]]]]
が既定値です。 [[HTTP]] の文脈では [CODE(charset)[[[ISO-8859-1]]]]
が既定値です。


** 4.2. HTML Document Representation

> A message entity with a content type of `text/html' represents an
HTML document, consisting of a single text entity. The `charset'
parameter (whether implicit or explicit) identifies a character
encoding scheme. The text entity consists of the characters
determined by this character encoding scheme and the octets of the
body of the message entity.

内容型 [CODE(MIME)[text/html]] のメッセージ表現は、
ひとつの文実体からなる HTML 文書を表します。
[CODE(MIME)[[[charset]]]] 引数は、 (暗示であれ明示であれ)
文字符号化方式を識別します。文実体はこの文字符号化方式によって決定される文字とメッセージ実体の本体のオクテットから成ります。


*** 4.2.1. Undeclared Markup Error Handling

> To facilitate experimentation and interoperability between
implementations of various versions of HTML, the installed base of
HTML user agents supports a superset of the HTML 2.0 language by
reducing it to HTML 2.0: markup in the form of a start-tag or end-tag, whose generic identifier is not declared is mapped to nothing
during tokenization. Undeclared attributes are treated similarly. The
entire attribute specification of an unknown attribute (i.e., the
unknown attribute and its value, if any) should be ignored. On the
other hand, references to undeclared entities should be treated as
data characters.

実験と種々の版の [[HTML]] の実装の間の相互運用性の向上のため、
実際に使用されている [[HTML利用者エージェント]]は [[HTML 2.0]]
言語の[[超集合]]を HTML 2.0 に削減することで対応しています。
つまり、[[開始タグ]]や[[終了タグ]]の形の[[マーク]]で、
その[[共通識別子]]が宣言されていないものは、
字句化の過程で何にも写像しません。
未宣言の属性も同様に扱います。未知の属性の[[属性指定]]全体
(つまり、未知の属性とその値があれば両方) を無視するべきです。
他方、未宣言の[[実体]]への[[参照]]は[[データ文字]]として扱うべきです。

> For example:
[PRE[
    <div class=chapter><h1>foo</h1><p>...</div>
      => <H1>,"foo",</H1>,<P>,"..."
    xxx <P ID=z23> yyy
      => "xxx ",<P>," yyy
    Let &alpha; &amp; &beta; be finite sets.
      => "Let &alpha; & &beta; be finite sets."
]PRE]

> Support for notifying the user of such errors is encouraged.

このような[[誤り]]を利用者に通知する機能への対応を推奨します。

> Information providers are warned that this convention is not binding:
unspecified behavior may result, as such markup does not conform to
this specification.

この慣習は束縛ではないことを情報提供者に警告しておきます。
この仕様書に適合しないマークは未規定の結果となり得ます。


*** 4.2.2. Conventional Representation of Newlines

> SGML specifies that a text entity is a sequence of records, each
beginning with a record start character and ending with a record end
character (code positions 10 and 13 respectively) (section 7.6.1,
"Record Boundaries" in [SGML]).

[[SGML]] は[[文実体]]を[[記録]]の列で、
各記録は[[記録開始]]文字で始まり、[[記録終了]]文字で終わる
(それぞれ[[符号位置]] [CODE(char)[10]] と [CODE(char)[13]])
と規定しています。

> [MIME] specifies that a body of type `text/*' is a sequence of lines,
each terminated by CRLF, that is, octets 13, 10.

[[MIME]] は型 [CODE(MIME)[[[text/[VAR[*]]]]]]
の[[本体]]を[[行]]の列として、
各行は [CODE(ABNF)[[[CRLF]]]]、すなわちオクテット [CODE(char)[13]],
[CODE(char)[10]] で終端と規定しています。

> In practice, HTML documents are frequently represented and
transmitted using an end of line convention that depends on the
conventions of the source of the document; frequently, that
representation consists of CR only, LF only, or a CR LF sequence.
Hence the decoding of the octets will often result in a text entity
with some missing record start and record end characters.

実際には、 HTML 文書はよく文書源の慣習依存の行末表現を使って表現・
転送されます。行末は [CODE(char)[[[CR]]]] だけ、
[CODE(char)[[[LF]]]] だけまたは [CODE(char)[CR]] [CODE(char)[LF]]
列でよく表現されます。ですから、オクテットを復号するとしばしば文実体の記録開始や記録終了が欠けたものによくなります。

> Since there is no ambiguity, HTML user agents are encouraged to infer
the missing record start and end characters.

曖昧性はありませんから、 HTML 利用者エージェントは欠けた記録開始・
記録終了文字を補うことを推奨します。

> An HTML user agent should treat end of line in any of its variations
as a word space in all contexts except preformatted text. Within
preformatted text, an HTML user agent should treat any of the three
common representations of end-of-line as starting a new line.

HTML 利用者エージェントは、整形済み文以外のどの文脈でも、
すべての種類の行末を語間隔として扱うべきです。
整形済み文では、 HTML 利用者エージェントは3種類すべての共通な行末表現を新しい行の開始として扱うべきです。


* 5. Document Structure

> An HTML document is a tree of elements, including a head and body,
headings, paragraphs, lists, etc. Form elements are discussed in 8,
"Forms".

HTML [[文書]]は[[要素]]の[[木]]で、
[[頭部]]と[[本体]] (身体), [[見出し]],
[[段落]], [[並び]], その他を含みます。
[[フォーム]]要素は8章で議論します。


** 5.1. Document Element: HTML

> The HTML document element consists of a head and a body, much like a
memo or a mail message. The head contains the title and optional
elements. The body is a text flow consisting of paragraphs, lists,
and other elements.

[CODE(HTMLe)[[[html]]]] [[文書要素]]は、
メモや[[メイル]]のメッセージのように[[頭部]]と[[本体]] (身体)
から成ります。頭部は題と省略可能な要素を含みます。
本体は段落、並び、その他の要素から成る文章の流れです。


** 5.2. Head: HEAD

> The head of an HTML document is an unordered collection of
information about the document. For example:

HTML 文書の [CODE(HTMLe)[[[head]]]] (頭部) は、
文書についての情報の非順序集成です。例:

>
[PRE(HTML)[
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HEAD>
<TITLE>Introduction to HTML</TITLE>
</HEAD>
...
]PRE]


*** 5.2.1. Title: TITLE

> Every HTML document must contain a <TITLE> element.

すべての HTML 文書は [CODE(HTMLe)[title]] (題)
要素を含まなければなりません。

> The title should identify the contents of the document in a global
context. A short title, such as "Introduction" may be meaningless out
of context. A title such as "Introduction to HTML Elements" is more
appropriate.

題は大域文脈での文書の内容を識別するべきです。
「紹介」のような短い題は文脈外では意味を成さないかもしれません。
「HTML 要素の紹介」のような題の方が適切です。

> NOTE - The length of a title is not limited; however, long titles
may be truncated in some applications. To minimize this
possibility, titles should be fewer than 64 characters.

備考: 題の長さは制限しません。しかし、
長い題は応用によっては切られるかもしれません。
この虞を最小化するため、題は64文字より短くするべきです。

> A user agent may display the title of a document in a history list or
as a label for the window displaying the document. This differs from
headings (5.4, "Headings: H1 ... H6"), which are typically displayed
within the body text flow.

利用者エージェントは文書の題を履歴一覧に表示したり、
文書を表示する窓の札として表示したりして構いません。
これが通常本体 ([[body]]) の文章の流れに表示する見出しとの違いです。


*** 5.2.2. Base Address: BASE

> The optional <BASE> element provides a base address for interpreting
relative URLs when the document is read out of context (see 7,
"Hyperlinks"). The value of the HREF attribute must be an absolute URI.

省略可能な [CODE(HTMLe)[base]] 要素は、
文書を文脈外で読む時に相対 URL 
を解釈するための基底番地を提供します。
[CODE(HTMLa)[href]] 属性の値は絶対 URL
でなければなりません。


*** 5.2.3. Keyword Index: ISINDEX

> The <ISINDEX> element indicates that the user agent should allow the
user to search an index by giving keywords. See 7.5, "Queries and
Indexes" for details.

[CODE(HTMLe)[isindex]] 要素は、
利用者エージェントが利用者が鍵語を与えて索引を検索できるようにするべきことを示します。


*** 5.2.4. Link: LINK

> The <LINK> element represents a hyperlink (see 7, "Hyperlinks").  Any
number of LINK elements may occur in the <HEAD> element of an HTML
document. It has the same attributes as the <A> element (see 5.7.3,
"Anchor: A").

[CODE(HTMLe)[link]] 要素はハイパーリンクを表現します。
任意の数の [CODE(HTMLe)[link]] 要素が HTML の [CODE(HTMLe)[[[head]]]]
要素の中に出現できます。 [CODE(HTMLe)[link]] 要素は
[CODE(HTMLe)[[[a]]]] 要素と同じ属性を持ちます。

> The <LINK> element is typically used to indicate authorship, related
indexes and glossaries, older or more recent versions, document
hierarchy, associated resources such as style sheets, etc.

[CODE(HTMLe)[link]] 要素は普通著者、関係する索引・用語集、
古い版や新しい版、文書階層、スタイル・シートなど関連付ける資源、
その他を示すために使います。


*** 5.2.5. Associated Meta-information: META

> The <META> element is an extensible container for use in identifying
specialized document meta-information.  Meta-information has two main
functions:

[CODE(HTMLe)[meta]] 要素は特化した文書のメタ情報を識別するために使用する拡張可能な包含子です。
メタ情報は2つの機能を持ちます。

>
- * to provide a means to discover that the data set exists
and how it might be obtained or accessed; and
- * to document the content, quality, and features of a data
set, indicating its fitness for use.

- データ集合が存在することとこれをどう得たり access
したりできるかを発見する手段を提供
- データ集合の内容、品質、特徴 (使用の合致性を示す) を文書化

> Each <META> element specifies a name/value pair. If multiple META
elements are provided with the same name, their combined contents--
concatenated as a comma-separated list--is the value associated with
that name.

それぞれの [CODE(HTMLe)[meta]] 要素が名前と値の組を指定します。
複数の [CODE(HTMLe)[meta]] 要素が同じ名前で提供されていれば、
結合した内容 (読点分離並びとして連結) がその名前に関連付けられた値です。

> NOTE - The <META> element should not be used where a
specific element, such as <TITLE>, would be more
appropriate. Rather than a <META> element with a URI as
the value of the CONTENT attribute, use a <LINK>
element.

備考: [CODE(HTMLe)[meta]] 要素は特定の要素、
例えば [CODE(HTMLe)[[[title]]]] がより適切な時には使用するべきではありません。
[CODE(HTMLa)[content]] 属性の値が URI の [CODE(HTMLe)[meta]]
要素よりも、 [CODE(HTMLe)[[[link]]]] 要素を使って下さい。

> HTTP servers may read the content of the document <HEAD> to generate
header fields corresponding to any elements defining a value for the
attribute HTTP-EQUIV.

HTTP 鯖は文書の [CODE(HTMLe)[[[head]]]] を読んで 
[CODE(HTMLa)[http-equiv]] 属性に対して値を定義する要素に対応する頭欄を生成しても構いません。

> NOTE - The method by which the server extracts document
meta-information is unspecified and not mandatory. The
<META> element only provides an extensible mechanism for
identifying and embedding document meta-information --
how it may be used is up to the individual server
implementation and the HTML user agent.

備考: 鯖が文書のメタ情報を取出す方法は規定しませんし、
強制もしません。 [CODE(HTMLe)[meta]] 要素は文書のメタ情報を識別・
埋込みする拡張可能な仕組みだけを提供します。
これをどう使用するかは個々の鯖実装と HTML
利用者エージェント次第です。

> Attributes of the META element:

[CODE(HTMLe)[meta]] 要素の属性:

>
:HTTP-EQUIV:
binds the element to an HTTP header field. An HTTP
server may use this information to process the document.
In particular, it may include a header field in the
responses to requests for this document: the header name
is taken from the HTTP-EQUIV attribute value, and the
header value is taken from the value of the CONTENT
attribute. HTTP header names are not case sensitive.

要素を HTTP 頭欄に束縛します。 HTTP
鯖はこの情報を文書の処理に使用して構いません。
特に、この文書に対する要求への応答に頭欄を含めても構いません。
その頭名は [CODE(HTMLa)[http-equiv]] 属性値から取り、
頭値は [CODE(HTMLa)[content]] 属性の値から取ります。
HTTP 頭欄名は大文字・小文字を区別しません。

>
:NAME:
specifies the name of the name/value pair. If not
present, HTTP-EQUIV gives the name.

名前・値の組の名前を指定します。
存在しなければ、 [CODE(HTMLa)[http-equiv]] が名前を与えます。

>
:CONTENT:
specifies the value of the name/value pair.

名前・値の組の値を指定します。

> Examples

例

> If the document contains:

文書が

>
[PRE(HTML)[
    <META HTTP-EQUIV="Expires"
          CONTENT="Tue, 04 Dec 1993 21:29:02 GMT">
    <meta http-equiv="Keywords" CONTENT="Fred">
    <META HTTP-EQUIV="Reply-to"
          content="fielding@@ics.uci.edu (Roy Fielding)">
    <Meta Http-equiv="Keywords" CONTENT="Barney">
]PRE]

> then the server may include the following header fields:

を含んでいれば、鯖は次の頭欄をこの文書への
[CODE(HTTP)[[[GET]]]] や [CODE(HTTP)[[[HEAD]]]]
の要求に対する HTTP 応答の一部として含めて構いません。

[PRE(HTTP)[
Expires: Tue, 04 Dec 1993 21:29:02 GMT
Keywords: Fred, Barney
Reply-to: fielding@@ics.uci.edu (Roy Fielding)
]PRE]

> as part of the HTTP response to a `GET' or `HEAD' request for
that document.

> An HTTP server must not use the <META> element to form an HTTP
response header unless the HTTP-EQUIV attribute is present.

HTTP 鯖は [CODE(HTMLa)[http-equiv]] 属性が存在しない限り
[CODE(HTMLe)[meta]] 要素を HTTP 応答頭を形成するために使用してはなりません。

> An HTTP server may disregard any <META> elements that specify
information controlled by the HTTP server, for example `Server',
`Date', and `Last-modified'.

HTTP 鯖は HTTP 鯖が制御する情報、例えば [CODE(HTTP)[[[Server]]]],
[CODE(HTTP)[[[Date]]]], [CODE(HTTP)[[[Last-Modified]]]]
を指定する [CODE(HTMLe)[meta]] 要素を捨てても構いません。


*** 5.2.6. Next Id: NEXTID

> The <NEXTID> element is included for historical reasons only.  HTML
documents should not contain <NEXTID> elements.

[CODE(HTMLe)[nextid]] 要素は歴史的理由のためのみで含まれています。
HTML 文書は [CODE(HTMLe)[nextid]] 要素を含むべきではありません。

> The <NEXTID> element gives a hint for the name to use for a new <A>
element when editing an HTML document. It should be distinct from all
NAME attribute values on <A> elements. For example:

[CODE(HTMLe)[nextid]] 要素は HTML 文書を編集する時に新しい [CODE(HTMLe)[[[a]]]]
要素で使用する名前のヒントを与えます。これは [CODE(HTMLe)[a]]
要素すべての [CODE(HTMLa)[name]] 属性値とは違うものであるべきです。
例:

> <NEXTID N=Z27>


** 5.3. Body: BODY

> The <BODY> element contains the text flow of the document, including
headings, paragraphs, lists, etc.

[CODE(HTMLe)[body]] 要素は文書の文章の流れを含みます。
見出し、段落、並びなどが含まれます。

> For example:
[PRE(HTML)[
<BODY>
<h1>Important Stuff</h1>
<p>Explanation about important stuff...
</BODY>
]PRE]


** 5.4. Headings: H1 ... H6

> The six heading elements, <H1> through <H6>, denote section headings.
Although the order and occurrence of headings is not constrained by
the HTML DTD, documents should not skip levels (for example, from H1
to H3), as converting such documents to other representations is
often problematic.

6種類の見出し要素 [CODE(HTMLe)[[[h1]]]] 〜 [CODE(HTMLe)[[[h6]]]]
は、章見出しを示します。見出しの順序や出現は HTML DTD
で制約していませんが、文書は水準を飛ばす
(例えば [CODE(HTMLe)[h1]] から [CODE(HTMLe)[h3]] へ飛ぶ) 
べきではありません。
そのような文書を他の表現に変換する時にしばしば問題に成ります。

> Example of use:
[PRE(HTML)[
    <H1>This is a heading</H1>
    Here is some text
    <H2>Second level heading</H2>
    Here is some more text.
]PRE]

> Typical renderings are:

典型レンダリング:

>
:H1:
Bold, very-large font, centered. One or two blank lines above and below.
:H2:
Bold, large font, flush-left. One or two blank lines above and below.
:H3:
Italic, large font, slightly indented from the left
margin. One or two blank lines above and below.
:H4:
Bold, normal font, indented more than H3. One blank line above and below.
:H5:
Italic, normal font, indented as H4. One blank line above.
:H6:
Bold, indented same as normal text, more than H5. One blank line above.

:[CODE(HTMLe)[h1]]:太字、特大フォント、中央寄せ。上下に余白1,2行。
:[CODE(HTMLe)[h2]]:太字、大フォント、左揃え。上下に余白1,2行。
:[CODE(HTMLe)[h3]]:斜体、大フォント、左余白から激しく字下げ。上下に余白1,2行。
:[CODE(HTMLe)[h4]]:太字、通常フォント、 [CODE(HTMLe)[h3]] 以上に字下げ。上下に1行余白。
:[CODE(HTMLe)[h5]]:斜体、通常フォント、 [CODE(HTMLe)[h4]] 程度字下げ。上に1行余白。
:[CODE(HTMLe)[h6]]:太字、通常の文章くらい、 [CODE(HTMLe)[h5]] 以上に字下げ。上に1行余白。


** 5.5. Block Structuring Elements

> Block structuring elements include paragraphs, lists, and block
quotes. They must not contain heading elements, but they may contain
phrase markup, and in some cases, they may be nested.

ブロック構造要素は段落、並び、ブロック引用を含みます。
これらは見出し要素を含むことはできませんが、
語句マークを含んで構いませんし、場合によっては入れ子にしても構いません。


*** 5.5.1. Paragraph: P

> The <P> element indicates a paragraph. The exact indentation, leading
space, etc. of a paragraph is not specified and may be a function of
other tags, style sheets, etc.

[CODE(HTMLe)[p]] 要素は段落を示します。段落の正確な字下げ、
先導する間隔、その他は指定しません。他のタグ、スタイル・シートその他の機能となるかもしれません。

> Typically, paragraphs are surrounded by a vertical space of one line
or half a line. The first line in a paragraph is indented in some cases.

普通、段落は一行か半行の垂直間隔で囲まれます。
段落の最初の行は場合によっては字下げされます。

> Example of use:
[PRE(HTML)[
    <H1>This Heading Precedes the Paragraph</H1>
    <P>This is the text of the first paragraph.
    <P>This is the text of the second paragraph. Although you do not
    need to start paragraphs on new lines, maintaining this
    convention facilitates document maintenance.</P>
    <P>This is the text of a third paragraph.</P>
]PRE]


*** 5.5.2. Preformatted Text: PRE

> The <PRE> element represents a character cell block of text and is
suitable for text that has been formatted for a monospaced font.

[CODE(HTMLe)[pre]] 要素は文章の文字こまブロックを表し、
固定幅フォント用に書式付けされた文章に適当です。

> The <PRE> tag may be used with the optional WIDTH attribute. The
WIDTH attribute specifies the maximum number of characters for a line
and allows the HTML user agent to select a suitable font and
indentation.

[CODE(HTMLe)[pre]] 要素には省略可能な [CODE(HTMLa)[[[width]]]]
属性を指定できます。 [CODE(HTMLa)[width]] 属性は一行の文字の最大数を指定し、
HTML 利用者エージェントは適切なフォントと字下げを選ぶことができます。

> Within preformatted text:

整形済み文章中では、

>
- * Line breaks within the text are rendered as a move to the
beginning of the next line.

文章中の改行は次の行のはじめへの移動としてレンダリングされます。

> NOTE - References to the "beginning of a new line"
do not imply that the renderer is forbidden from
using a constant left indent for rendering
preformatted text. The left indent may be
constrained by the width required.

備考: [Q[新しい行のはじめ]]という言い回しは、
レンダリング器が整形済み文章をレンダリングする時に一定量の左字下げを取ることを禁止することを暗示してはいません。
左字下げは必要な幅により制約されるかもしれません。

>
- * Anchor elements and phrase markup may be used.

他の要素や語句マークを使って構いません。

> NOTE - Constraints on the processing of <PRE>
content may limit or prevent the ability of the HTML
user agent to faithfully render phrase markup.

備考: [CODE(HTMLe)[pre]] 内容の処理の制約のため HTML
利用者エージェントが語句マークを正しくレンダリングすることができなかったり制限されたりするかもしれません。

>
- * Elements that define paragraph formatting (headings,
address, etc.) must not be used.

段落書式付けを定義する要素 (見出し、番地など)
は使用してはなりません。

> NOTE - Some historical documents contain <P> tags in
<PRE> elements. User agents are encouraged to treat
this as a line break. A <P> tag followed by a
newline character should produce only one line
break, not a line break plus a blank line.

備考: 幾つかの古の文書は [CODE(HTMLe)[p]] タグを
[CODE(HTMLe)[pre]] 要素内で使っています。
利用者エージェントはこれを改行として扱うことを推奨します。
改行文字が直後に来る [CODE(HTMLe)[p]] タグは改行と改行ではなく
1つだけの改行とするべきです。

>
- * The horizontal tab character (code position 9 in the HTML
document character set) must be interpreted as the smallest
positive nonzero number of spaces which will leave the
number of characters so far on the line as a multiple of 8.
Documents should not contain tab characters, as they are not
supported consistently.

水平タブ文字 (HTML 文書文字集合では符号位置 [CODE(char)[9]])
はその行の8の倍数文字目となるような最小の正の非零数分の間隔として解釈しなければなりません。
タブ文字は一貫して対応されてはいませんから、
文書はタブ文字を含むべきではありません。

> Example of use:
[PRE(HTML)[
    <PRE>
    Line 1.
           Line 2 is to the right of line 1.     <a href="abc">abc</a>
           Line 3 aligns with line 2.            <a href="def">def</a>
    </PRE>
]PRE]


**** 5.5.2.1. Example and Listing: XMP, LISTING

> The <XMP> and <LISTING> elements are similar to the <PRE> element,
but they have a different syntax. Their content is declared as CDATA,
which means that no markup except the end-tag open delimiter-in-context is recognized (see 9.6 "Delimiter Recognition" of [SGML]).

[CODE(HTMLe)[xmp]] 要素と [CODE(HTMLe)[listing]] 要素は
[CODE(HTMLe)[pre]] 要素と似ていますが、異なる構文を持っています。
これらの内容は [CODE(SGML)[[[CDATA]]]] として宣言されています。
つまり、終了タグ開き文脈依存区切子を除いてマークが認知されません。

> NOTE - In a previous draft of the HTML specification, the syntax
of <XMP> and <LISTING> elements allowed closing tags to be treated
as data characters, as long as the tag name was not <XMP> or
<LISTING>, respectively.

備考: 以前の HTML 仕様書案では、 [CODE(HTMLe)[xmp]] 要素と
[CODE(HTMLe)[listing]] 要素の構文で閉じタグを、
それぞれ [CODE(HTMLe)[xmp]] と [CODE(HTMLe)[listing]]
がタグ名でない限り、データ文字として扱うことを認めていました。

> Since CDATA declared content has a number of unfortunate interactions
with processing techniques and tends to be used and implemented
inconsistently, HTML documents should not contain <XMP> nor <LISTING>
elements -- the <PRE> tag is more expressive and more consistently
supported.

[CODE(SGML)[CDATA]] 宣言内容は処理技術と数々の不幸な相互作用があり、
一貫せずに使用・実装される傾向にありますから、 HTML
文書は [CODE(HTMLe)[xmp]] 要素も [CODE(HTMLe)[listing]]
要素も含むべきではありません。 [CODE(HTMLe)[pre]]
タグはより表現力があり、一貫して対応されています。

> The <LISTING> element should be rendered so that at least 132
characters fit on a line. The <XMP> element should be rendered so
that at least 80 characters fit on a line but is otherwise identical
to the <LISTING> element.

[CODE(HTMLe)[listing]] 要素は一行に最低132文字が入るようにレンダリングするべきです。
[CODE(HTMLe)[xmp]] 要素は一行に最低80文字が入るようにレンダリングするべきですが、
その他は [CODE(HTMLe)[listing]] 要素と同じです。

> NOTE - In a previous draft, HTML included a <PLAINTEXT> element
that is similar to the <LISTING> element, except that there is no
closing tag: all characters after the <PLAINTEXT> start-tag are data.

備考: 以前の原案では、 HTML は [CODE(HTMLe)[[[plaintext]]]]
要素を [CODE(HTMLe)[[[listing]]]] 要素と同様ながら閉じタグがない
([CODE(HTMLe)[plaintext]] 開始タグの後すべての文字がデータである)
ものとして含めていました。


*** 5.5.3. Address: ADDRESS

> The <ADDRESS> element contains such information as address, signature
and authorship, often at the beginning or end of the body of a
document.

[CODE(HTMLe)[address]] 要素は住所、
署名、著者のような情報を含み、しばしば文書の本体の最初や終わりに置かれます。

> Typically, the <ADDRESS> element is rendered in an italic typeface
and may be indented.

普通、 [CODE(HTMLe)[address]] 要素は[RUBY[斜体] [イタリック]]書体でレンダリングされ、
字下げもされるかもしれません。

> Example of use:
[PRE(HTML)[
    <ADDRESS>
    Newsletter editor<BR>
    J.R. Brown<BR>
    JimquickPost News, Jimquick, CT 01234<BR>
    Tel (123) 456 7890
    </ADDRESS>
]PRE]


*** 5.5.4. Block Quote: BLOCKQUOTE

> The <BLOCKQUOTE> element contains text quoted from another source.

[CODE(HTMLe)[blockquote]] 要素は他の出典から引用した文章を含みます。

> A typical rendering might be a slight extra left and right indent,
and/or italic font. The <BLOCKQUOTE> typically provides space above
and below the quote.

普通レンダリングは幾分左右に字下げしたり、
[RUBY[斜体] [イタリック]]フォントにしたり、その両方にしたりします。
[CODE(HTMLe)[blockquote]] は普通引用の上下に間隔を置きます。

> Single-font rendition may reflect the quotation style of Internet
mail by putting a vertical line of graphic characters, such as the
greater than symbol (>), in the left margin.

単一フォントのレンダリングでは、インターネット・メイルの引用法のように左余白に垂直棒な図形文字、
例えば大なり記号 ([CODE(char)[>]]) を置くかもしれません。

> Example of use:
[PRE(HTML)[
    I think the play ends
    <BLOCKQUOTE>
    <P>Soft you now, the fair Ophelia. Nymph, in thy orisons, be all
    my sins remembered.
    </BLOCKQUOTE>
    but I am not sure.
]PRE]


** 5.6. List Elements

> HTML includes a number of list elements. They may be used in
combination; for example, a <OL> may be nested in an <LI> element of
a <UL>.

HTML は数々の並び要素を含みます。並び要素は組合せて使って構いません。
例えば、 [CODE(HTMLe)[ol]] は [CODE(HTMLe)[ul]] の中の [CODE(HTMLe)[li]]
要素中に入れ子にして構いません。

> The COMPACT attribute suggests that a compact rendering be used.

[CODE(HTMLe)[compact]] 属性は小さ目にレンダリングすることを提案します。


*** 5.6.1. Unordered List: UL, LI

> The <UL> represents a list of items -- typically rendered as a
bulleted list.

[CODE(HTMLe)[ul]] は項目の並びを表現します。
普通印つき並びとしてレンダリングします。

> The content of a <UL> element is a sequence of <LI> elements.  For
example:

[CODE(HTMLe)[ul]] 要素の内容は [CODE(HTMLe)[[[li]]]] 要素です。
例:

[PRE(HTML)[
    <UL>
    <LI>First list item
    <LI>Second list item
     <p>second paragraph of second item
    <LI>Third list item
    </UL>
]PRE]


*** 5.6.2. Ordered List: OL

> The <OL> element represents an ordered list of items, sorted by
sequence or order of importance. It is typically rendered as a
numbered list.

[CODE(HTMLe)[ol]] 要素は、順番や重要度で並べた項目の順序並びを表現します。
普通番号付き並びとしてレンダリングします。

> The content of a <OL> element is a sequence of <LI> elements.  For
example:

[CODE(HTMLe)[ol]] 要素の無い様は [CODE(HTMLe)[li]] 要素の並びです。例:

[PRE(HTML)[
    <OL>
    <LI>Click the Web button to open URI window.
    <LI>Enter the URI number in the text field of the Open URI
    window. The Web document you specified is displayed.
      <ol>
       <li>substep 1
       <li>substep 2
      </ol>
    <LI>Click highlighted text to move from one link to another.
    </OL>
]PRE]


*** 5.6.3. Directory List: DIR

> The <DIR> element is similar to the <UL> element. It represents a
list of short items, typically up to 20 characters each. Items in a
directory list may be arranged in columns, typically 24 characters
wide.

[CODE(HTMLe)[dir]] 要素は [CODE(HTMLe)[ul]] 要素と似ています。
普通は20文字未満くらいの短い項目の並びを表現します。
ディレクトリ並びの項目は、普通24文字幅の列にして並べて構いません。

> The content of a <DIR> element is a sequence of <LI> elements.
Nested block elements are not allowed in the content of <DIR>
elements. For example:

[CODE(HTMLe)[dir]] 要素の内容は [CODE(HTMLe)[li]] 要素の列です。
[CODE(HTMLe)[dir]] 要素の内容では入れ子のブロック要素は認められていません。例:

[PRE(HTML)[
    <DIR>
    <LI>A-H<LI>I-M
    <LI>M-R<LI>S-Z
    </DIR>
]PRE]


*** 5.6.4. Menu List: MENU

> The <MENU> element is a list of items with typically one line per
item. The menu list style is typically more compact than the style of
an unordered list.

[CODE(HTMLe)[menu]] 要素は普通項目ごとに一行取る項目の並びです。
メニュー並び様式は普通非順序並びの様式よりも小さ目です。

> The content of a <MENU> element is a sequence of <LI> elements.
Nested block elements are not allowed in the content of <MENU>
elements. For example:

[CODE(HTMLe)[menu]] 要素の内容は [CODE(HTMLe)[li]]
要素の列です。 [CODE(HTMLe)[menu]] 要素の内容では入れ子のブロック要素は認められません。
例:

[PRE(HTML)[
    <MENU>
    <LI>First item in the list.
    <LI>Second item in the list.
    <LI>Third item in the list.
    </MENU>
]PRE]


*** 5.6.5. Definition List: DL, DT, DD

> A definition list is a list of terms and corresponding definitions.
Definition lists are typically formatted with the term flush-left and
the definition, formatted paragraph style, indented after the term.

定義並びは用語と対応する定義の並びです。
定義並びは普通用語を左揃えに書式付けして、
用語の後に字下げして定義を段落様式で書式付けします。

> The content of a <DL> element is a sequence of <DT> elements and/or
<DD> elements, usually in pairs. Multiple <DT> may be paired with a
single <DD> element. Documents should not contain multiple
consecutive <DD> elements.

[CODE(HTMLe)[dl]] 要素の内容は [CODE(HTMLe)[[[dt]]]]
要素[[及び/又は]] [CODE(HTMLe)[[[dd]]]] 要素の列で、通常組で使います。
複数の [CODE(HTMLe)[dt]] を1つの [CODE(HTMLe)[dd]]
要素と組にしても構いません。文書は複数の連続した [CODE(HTMLe)[[[dd]]]]
要素を含むべきではありません。

> Example of use:
[PRE(HTML)[
    <DL>
    <DT>Term<DD>This is the definition of the first term.
    <DT>Term<DD>This is the definition of the second term.
    </DL>
]PRE]

> If the DT term does not fit in the DT column (typically one third of
the display area), it may be extended across the page with the DD
section moved to the next line, or it may be wrapped onto successive
lines of the left hand column.

[CODE(HTMLe)[dt]] 用語が [CODE(HTMLe)[dt]] 列
(普通表示領域の三分の一) に収まらなければ、
境界を跨いで [CODE(HTMLe)[dd]] 節を次の行に移動させたり、
左の列の次の行に折返したりしても構いません。

> The optional COMPACT attribute suggests that a compact rendering be
used, because the list items are small and/or the entire list is
large.

省略可能な [CODE(HTMLa)[compact]] 属性は、
並び項目が小さいか、並び全体が大きいか、その両方かで小さ目にレンダリングすることを提案します。

> Unless the COMPACT attribute is present, an HTML user agent may leave
white space between successive DT, DD pairs. The COMPACT attribute
may also reduce the width of the left-hand (DT) column.

[CODE(HTMLa)[compact]] 属性が存在しなければ、 HTML
利用者エージェントは次の [CODE(HTMLe)[dt]]・[CODE(HTMLe)[dd]]
の組と間を置いても構いません。 [CODE(HTMLa)[compact]]
属性は左側 ([CODE(HTMLe)[dt]]) の列の幅も削減して構いません。

[PRE(HTML)[
    <DL COMPACT>
    <DT>Term<DD>This is the first definition in compact format.
    <DT>Term<DD>This is the second definition in compact format.
    </DL>
]PRE]


** 5.7. Phrase Markup

> Phrases may be marked up according to idiomatic usage, typographic
appearance, or for use as hyperlink anchors.

語句は語法、植字的表現やハイパーリンク・アンカーとしての使用のためにマーク付けすることができます。

> User agents must render highlighted phrases distinctly from plain
text. Additionally, <EM> content must be rendered as distinct from
<STRONG> content, and <B> content must rendered as distinct from <I>
content.

利用者エージェントは強調字句を平文とは違ってレンダリングしなければなりません。
加えて、 [CODE(HTMLe)[[[em]]]] 内容は [CODE(HTMLe)[[[strong]]]]
内容と違ってレンダリングしなければなりませんし、
[CODE(HTMLe)[[[b]]]] 内容は [CODE(HTMLe)[[[i]]]] 内容と違ってレンダリングしなければなりません。

> Phrase elements may be nested within the content of other phrase
elements; however, HTML user agents may render nested phrase elements
indistinctly from non-nested elements:

語句要素は他の語句要素の内容として入れ子にして構いません。
しかし、 HTML 利用者エージェントは入れ子の語句要素を非入れ子要素と同じようにレンダリングしても構いません。

[PRE(HTML)[
   plain <B>bold <I>italic</I></B> may be rendered
   the same as plain <B>bold </B><I>italic</I>
]PRE]


*** 5.7.1. Idiomatic Elements

> Phrases may be marked up to indicate certain idioms.

語句は特定の語法を示すためにマーク付けして構いません。

> NOTE - User agents may support the <DFN> element, not included in
this specification, as it has been deployed to some extent. It is
used to indicate the defining instance of a term, and it is
typically rendered in italic or bold italic.

備考: 利用者エージェントは、この仕様書に含まれていない
[CODE(HTMLe)[[[dfn]]]] 要素がある程度使用されているので、
これに対応しても構いません。これは用語を定義する実現値を示すために使い、
普通[RUBY[斜体] [イタリック]]や太字[RUBY[斜体] [イタリック]]でレンダリングします。


**** 5.7.1.1. Citation: CITE

> The <CITE> element is used to indicate the title of a book or
other citation. It is typically rendered as italics. For example:

[CODE(HTMLe)[cite]] 要素は本の題名や他の引用を示します。
普通[RUBY[斜体] [イタリック]]でレンダリングします。例:

[PRE(HTML)[
He just couldn't get enough of <cite>The Grapes of Wrath</cite>.
]PRE]


**** 5.7.1.2. Code: CODE

> The <CODE> element indicates an example of code, typically
rendered in a mono-spaced font. The <CODE> element is intended for
short words or phrases of code; the <PRE> block structuring
element (5.5.2, "Preformatted Text: PRE") is more appropriate
for multiple-line listings. For example:

[CODE(HTMLe)[code]] 要素は符号の例を示し、
普通固定幅フォントでレンダリングします。 [CODE(HTMLe)[code]]
要素は符号の短い語や語句を想定しています。 [CODE(HTMLe)[[[pre]]]]
ブロック構造要素が複数行並びにはより適切です。例:

[PRE(HTML)[
      The expression <code>x += 1</code>
      is short for <code>x = x + 1</code>.
]PRE]


**** 5.7.1.3. Emphasis: EM

> The <EM> element indicates an emphasized phrase, typically
rendered as italics. For example:

[CODE(HTMLe)[em]] 要素は強調語句を表し、
普通[RUBY[斜体] [イタリック]]でレンダリングします。例:

[PRE(HTML)[
      A singular subject <em>always</em> takes a singular verb.
]PRE]


**** 5.7.1.4. Keyboard: KBD

> The <KBD> element indicates text typed by a user, typically
rendered in a mono-spaced font. This is commonly used in
instruction manuals. For example:

[CODE(HTMLe)[kbd]] 要素は利用者が打鍵する文章を示し、
普通固定幅フォントでレンダリングします。
これは取扱説明書でよく使われます。例:

[PRE(HTML)[
      Enter <kbd>FIND IT</kbd> to search the database.
]PRE]


**** 5.7.1.5. Sample: SAMP

> The <SAMP> element indicates a sequence of literal characters,
typically rendered in a mono-spaced font. For example:

[CODE(HTMLe)[samp]] 要素は[RUBY[表記] [リテラル]]文字の列を示し、
普通固定長フォントでレンダリングします。例:

[PRE(HTML)[
      The only word containing the letters <samp>mt</samp> is dreamt.
]PRE]


**** 5.7.1.6. Strong Emphasis: STRONG

> The <STRONG> element indicates strong emphasis, typically rendered
in bold. For example:

[CODE(HTMLe)[strong]] 要素は強い強調を示し、
普通太字でレンダリングします。例:

[PRE(HTML)[
      <strong>STOP</strong>, or I'll say "<strong>STOP</strong>" again!
]PRE]


**** 5.7.1.7. Variable: VAR

> The <VAR> element indicates a placeholder variable, typically
rendered as italic. For example:

[CODE(HTMLe)[var]] 要素は場所取り変数を示し、
普通[RUBY[斜体] [イタリック]]でレンダリングします。例:

[PRE(HTML)[
      Type <SAMP>html-check <VAR>file</VAR> | more</SAMP>
      to check <VAR>file</VAR> for markup errors.
]PRE]


*** 5.7.2. Typographic Elements

> Typographic elements are used to specify the format of marked
text.

活字要素はマークした文章の書式を指定するために使います。

> Typical renderings for idiomatic elements may vary between user
agents. If a specific rendering is necessary -- for example, when
referring to a specific text attribute as in "The italic parts are
mandatory" -- a typographic element can be used to ensure that the
intended typography is used where possible.

語法要素の普通のレンダリングは利用者エージェントによって色々かもしれません。
特定のレンダリングが必要なら、例えば[Q[[RUBY[斜体] [イタリック]]の部分は必須です]]のように特定の文章を指したいなら、
意図した活字を使うことができれば使わせるために活字要素を使用できます。

> NOTE - User agents may support some typographic elements not
included in this specification, as they have been deployed to some
extent. The <STRIKE> element indicates horizontal line through the
characters, and the <U> element indicates an underline.

備考: 利用者エージェントはこの仕様書に含まれていない活字要素もある程度使われているので、それにに対応しても構いません。
[CODE(HTMLe)[strike]] 要素は文字上の水平線を示し、
[CODE(HTMLe)[u]] 要素は下線を示します。


**** 5.7.2.1. Bold: B

> The <B> element indicates bold text. Where bold typography is
unavailable, an alternative representation may be used.

[CODE(HTMLe)[b]] 要素は太字文を示します。
太字の活字が利用できなければ、代替表現を使っても構いません。


**** 5.7.2.2. Italic: I

> The <I> element indicates italic text. Where italic typography is
unavailable, an alternative representation may be used.

[CODE(HTMLe)[i]] 要素は[RUBY[斜体] [イタリック]]文を示します。
[RUBY[斜体] [イタリック]]の活字が利用できなければ、
代替表現を使っても構いません。


**** 5.7.2.3. Teletype: TT

> The <TT> element indicates teletype (monospaced )text. Where a
teletype font is unavailable, an alternative representation may be
used.

[CODE(HTMLe)[tt]] 要素はテレタイプ (単一幅) 文を示します。
テレタイプ・フォントが利用できなければ、
代替表現を使っても構いません。


*** 5.7.3. Anchor: A

> The <A> element indicates a hyperlink anchor (see 7, "Hyperlinks").
At least one of the NAME and HREF attributes should be present.
Attributes of the <A> element:

[CODE(HTMLe)[a]] 要素はハイパーリンク・アンカーを示します。
[CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[href]] 属性の最低1つが存在するべきです。
[CODE(HTMLe)[a]] 要素の属性:

>
:HREF:
gives the URI of the head anchor of a hyperlink.

ハイパーリンクの終点アンカーの URI を与えます。

>
:NAME:
gives the name of the anchor, and makes it available as
a head of a hyperlink.

アンカーに名前を付け、ハイパーリンクの終点として利用できるようにします。

>
:TITLE:
suggests a title for the destination resource --
advisory only. The TITLE attribute may be used:

終点資源の題を参考までに提案します。
[CODE(HTMLa)[title]] 属性は、

>
- * for display prior to accessing the destination
resource, for example, as a margin note or on a
small box while the mouse is over the anchor, or
while the document is being loaded;

終点資源に access する前に、例えば余白のメモとして、
あるいは鼠をアンカーの上に置いている間の小さな箱に、
もしくは文書の読込中に表示しても構いません。

>
- * for resources that do not include a title, such as
graphics, plain text and Gopher menus, for use as a
window title.

題を含まない資源、例えば図形、平文、 Gopher メニューで窓の題に使用しても構いません。

>
:REL:
The REL attribute gives the relationship(s) described by
the hyperlink. The value is a whitespace separated list
of relationship names. The semantics of link
relationships are not specified in this document.

[CODE(HTMLa)[rel]] 属性はハイパーリンクが記述する関係を与えます。
値は関係名を間隔で分離した並びです。リンク関係の意味はこの文書では規定しません。

>
:REV:
same as the REL attribute, but the semantics of the
relationship are in the reverse direction. A link from A
to B with REL="X" expresses the same relationship as a
link from B to A with REV="X". An anchor may have both
REL and REV attributes.

[CODE(HTMLa)[rel]] 属性と同じですが、関係の意味が逆方向です。
[CODE(HTML)[[CODE(HTMLa)[rel]]="X"]] の [VAR[A]] から [VAR[B]]
へのリンクは [CODE(HTML)[[CODE(HTMLa)[rev]]="X"]] の [VAR[B]]
から [VAR[A]] へのリンクと同じ関係を表現します。
アンカーは [CODE(HTMLa)[rel]] 属性と [CODE(HTMLa)[rev]]
属性の両方を持っても構いません。

>
:URN:
specifies a preferred, more persistent identifier for
the head anchor of the hyperlink. The syntax and
semantics of the URN attribute are not yet specified.

ハイパーリンクの終点アンカーのより好ましい、
より持続的な識別子を指定します。
[CODE(HTMLa)[urn]] 属性の構文と意味はまだ規定されていません。

>
:METHODS:
specifies methods to be used in accessing the
destination, as a whitespace-separated list of names.
The set of applicable names is a function of the scheme
of the URI in the HREF attribute. For similar reasons as
for the TITLE attribute, it may be useful to include the
information in advance in the link. For example, the
HTML user agent may chose a different rendering as a
function of the methods allowed; for example, something
that is searchable may get a different icon.

終点の access に使う method を、空白分離の名前の並びで指定します。
適用可能な名前の集合は [CODE(HTMLa)[href]] 属性の URI
の scheme の関数です。 [CODE(HTMLa)[title]] 属性同様の理由により、
リンクにあらかじめ有用な情報を含めるのに有用です。
例えば、 HTML 利用者エージェントは認められている method
の関数として異なるレンダリングを選ぶかもしれません。
例えば、何か検索可能なものには異なる絵をつけるかもしれません。


** 5.8. Line Break: BR

> The <BR> element specifies a line break between words (see 6,
"Characters, Words, and Paragraphs"). For example:

[CODE(HTMLe)[br]] 要素は語間の改行を指定します。例:

[PRE(HTML)[
    <P> Pease porridge hot<BR>
    Pease porridge cold<BR>
    Pease porridge in the pot<BR>
    Nine days old.
]PRE]


** 5.9. Horizontal Rule: HR

> The <HR> element is a divider between sections of text; typically a
full width horizontal rule or equivalent graphic.  For example:

[CODE(HTMLe)[br]] 要素は文章の章間の区切りです。
普通幅一杯の水平罫か同じような図形です。例:

[PRE(HTML)[
    <HR>
    <ADDRESS>February 8, 1995, CERN</ADDRESS>
    </BODY>
]PRE]


** 5.10. Image: IMG

> The <IMG> element refers to an image or icon via a hyperlink (see
7.3, "Simultaneous Presentation of Image Resources").

[CODE(HTMLe)[img]] 要素はハイパーリンクを通して画像や小さな絵を指します。

> HTML user agents may process the value of the ALT attribute as an
alternative to processing the image resource indicated by the SRC
attribute.

HTML 利用者エージェントは [CODE(HTMLa)[src]] 属性で示された画像資源を処理する代わりに
[CODE(HTMLa)[alt]] 属性の値を処理しても構いません。

> NOTE - Some HTML user agents can process graphics linked via
anchors, but not <IMG> graphics. If a graphic is essential, it
should be referenced from an <A> element rather than an <IMG>
element. If the graphic is not essential, then the <IMG> element
is appropriate.

備考: HTML 利用者エージェントには、アンカーを介してリンクされた図形を処理できても
[CODE(HTMLe)[img]] 図形を処理できないものもあります。
図形が重要であるなら、 [CODE(HTMLe)[img]] 要素よりも [CODE(HTMLe)[a]]
要素で参照するべきです。図形が重要ではないなら、
[CODE(HTMLe)[img]] 要素が適切です。

> Attributes of the <IMG> element:

[CODE(HTMLe)[img]] 要素の属性:

>
:ALIGN:
alignment of the image with respect to the text
baseline.

文の基線に対する画像の揃え位置。

>
- * `TOP' specifies that the top of the image aligns
with the tallest item on the line containing the
image.

[CODE(HTML)[top]] は画像の上を画像を含む行の一番高い項目に揃えると指定します。

>
- * `MIDDLE' specifies that the center of the image
aligns with the baseline of the line containing the
image.

[CODE(HTML)[middle]] は画像の中央を画像を含む行の基線に揃えると指定します。

>
- * `BOTTOM' specifies that the bottom of the image
aligns with the baseline of the line containing the
image.

[CODE(HTML)[bottom]] は画像の下を画像を含む行の基線に揃えると指定します。

>
:ALT:
text to use in place of the referenced image resource,
for example due to processing constraints or user
preference.

参照された画像資源の代わりに使う文章。
例えば処理の制約や利用者の好みにより使います。

>
:ISMAP:
indicates an image map (see 7.6, "Image Maps").

画像写像を示します。

>
:SRC:
specifies the URI of the image resource.

画像資源の URI を指定します。

> NOTE - In practice, the media types of image
resources are limited to a few raster graphic
formats: typically `image/gif', `image/jpeg'. In
particular, `text/html' resources are not
intended to be used as image resources.

備考: 実際には画像資源の媒体型はいくつかの raster 図形書式に限定されます。
普通 [CODE(MIME)[[[image/gif]]]], [CODE(MIME)[[[image/jpeg]]]] です。
特に、 [CODE(MIME)[[[text/html]]]] 資源は画像資源として使用することを想定していません。

> Examples of use:
[PRE(HTML)[
    <IMG SRC="triangle.xbm" ALT="Warning:"> Be sure
    to read these instructions.
]PRE]

[PRE(HTML)[
    <a href="http://machine/htbin/imagemap/sample">
    <IMG SRC="sample.xbm" ISMAP>
    </a>
]PRE]

[INS[

訳注: 直前の NOTE の後に堂々と XBM を例に出す神経がまた素晴らしい。
]INS]


* 6. Characters, Words, and Paragraphs

> An HTML user agent should present the body of an HTML document as a
collection of typeset paragraphs and preformatted text.  Except for
preformatted elements (<PRE>, <XMP>, <LISTING>, <TEXTAREA>), each
block structuring element is regarded as a paragraph by taking the
data characters in its content and the content of its descendant
elements, concatenating them, and splitting the result into words,
separated by space, tab, or record end characters (and perhaps hyphen
characters). The sequence of words is typeset as a paragraph by
breaking it into lines.

HTML 利用者エージェントは HTML 文書の本体を植字段落と整形済み文の集まりとして示すべきです。
各ブロック構造要素は、
整形済み要素 ([CODE(HTMLe)[pre]], [CODE(HTMLe)[xmp]],
[CODE(HTMLe)[listing]], [CODE(HTMLe)[textarea]]) を除き、
その内容と子孫要素の内容のデータ文字を取り、
それを間隔、タブ、記録終了文字 (とたぶんハイフン文字) で語に分割し、
段落とみなします。語の列は行に分けて段落として植字します。


** 6.1. The HTML Document Character Set

> The document character set specified in 9.5, "SGML Declaration for
HTML" must be supported by HTML user agents. It includes the graphic
characters of Latin Alphabet No. 1, or simply Latin-1.  Latin-1
comprises 191 graphic characters, including the alphabets of most
Western European languages.

[CITE[HTML 用 SGML 宣言]]で規定する文書文字集合に HTML
利用者エージェントは対応しなければなりません。 HTML
文書文字集合にはラテン字母その1 (Latin-1) の図形文字が含まれます。
Latin-1 は191個の図形文字から成り、ほとんどの西洋言語の字母が含まれます。

> NOTE - Use of the non-breaking space and soft hyphen indicator
characters is discouraged because support for them is not widely
deployed.

備考: 非改行間隔と軟ハイフンは、あまり実装されていないので、
使用することは非推奨とします。

> NOTE - To support non-western writing systems, a larger character
repertoire will be specified in a future version of HTML. The
document character set will be [ISO-10646], or some subset that
agrees with [ISO-10646]; in particular, all numeric character
references must use code positions assigned by [ISO-10646].

備考: 非西洋書記法に対応するため、将来の版の HTML
ではより大きな文字レパートリを規定することになるでしょう。
文書文字集合は ISO/IEC 10646 か、その部分集合となるでしょう。
特に、すべての数値文字参照は ISO/IEC 10646
で割当てられた符号位置を使わなければなりません。

> In SGML applications, the use of control characters is limited in
order to maximize the chance of successful interchange over
heterogeneous networks and operating systems. In the HTML document
character set only three control characters are allowed: Horizontal
Tab, Carriage Return, and Line Feed (code positions 9, 13, and 10).

SGML 応用では、異種のネットワークやオペレーティング・システムで情報交換が成功する機会を最大化するために制御文字の使用を制限しています。
HTML 文書文字集合は水平タブ、復帰、改行 (符号位置 [CODE(char)[9]],
[CODE(char)[13]], [CODE(char)[10]]) の3つの制御文字だけが認められます。

> The HTML DTD references the Added Latin 1 entity set, to allow
mnemonic representation of selected Latin 1 characters using only the
widely supported ASCII character repertoire. For example:

HTML DTD は、広く対応されている ASCII 文字レパートリだけを使って選定
Latin 1 文字を略称表現できるように、追加 Latin 1
実体集合を参照しています。例:

[PRE(HTML)[
   Kurt G&ouml;del was a famous logician and mathematician.
]PRE]

> See 9.7.2, "ISO Latin 1 Character Entity Set" for a table of the
"Added Latin 1" entities, and 13, "The HTML Coded Character Set" for
a table of the code positions of [ISO 8859-1] and the control
characters in the HTML document character set.

「追加 Latin 1」実体の表は [CITE[ISO Latin 1 文字実体集合]]を、
ISO/IEC 8859-1 の符号位置の表と HTML 文書文字集合の制御文字は
[CITE[HTML 文書文字集合]]を見て下さい。


* 7. Hyperlinks

> In addition to general purpose elements such as paragraphs and lists,
HTML documents can express hyperlinks. An HTML user agent allows the
user to navigate these hyperlinks.

HTML 文書は、段落や並びのような一般目的の要素に加えて、
ハイパーリンクを表現できます。 HTML 利用者エージェントを使って利用者はハイパーリンクを飛び回れます。

> A hyperlink is a relationship between two anchors, called the head
and the tail of the hyperlink[DEXTER]. Anchors are identified by an
anchor address: an absolute Uniform Resource Identifier (URI),
optionally followed by a '#' and a sequence of characters called a
fragment identifier. For example:

ハイパーリンクは2つのアンカーの関係で、
それぞれのアンカーをハイパーリンクの頭と尾といいます。
アンカーはアンカー番地で識別します。
アンカー番地は絶対統一資源識別子 (URI) とそれに続く省略可能な
[CODE(URI)[#]] と[[素片識別子]]という文字列です。例:

>
- [SAMP(URI)[http://www.w3.org/hypertext/WWW/TheProject.html]]
- [SAMP(URI)[http://www.w3.org/hypertext/WWW/TheProject.html#z31]]

> In an anchor address, the URI refers to a resource; it may be used in
a variety of information retrieval protocols to obtain an entity that
represents the resource, such as an HTML document. The fragment
identifier, if present, refers to some view on, or portion of the
resource.

アンカー番地では、 URI が資源を指します。
URI は資源を表現する実体、例えば HTML 文書を得るための種々の情報取出しプロトコルを使うことができます。
素片識別子は、存在する場合、資源の何らかの視点や一部分を指します。

> Each of the following markup constructs indicates the tail anchor of
a hyperlink or set of hyperlinks:

次のマーク構造がそれぞれハイパーリンクの尾またはハイパーリンクの集合を示します。

>
- * <A> elements with HREF present.
- * <LINK> elements.
- * <IMG> elements.
- * <INPUT> elements with the SRC attribute present.
- * <ISINDEX> elements.
- * <FORM> elements with `METHOD=GET'.

- [CODE(HTMLa)[[[href]]]] 属性のある [CODE(HTMLe)[[[a]]]] 要素
- [CODE(HTMLe)[[[link]]]] 要素
- [CODE(HTMLe)[[[img]]]] 要素
- [CODE(HTMLa)[[[src]]]] 属性のある [CODE(HTMLe)[[[input]]]] 要素
- [CODE(HTMLe)[[[isindex]]]] 要素
- [CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[GET]]]] の]]
[CODE(HTMLe)[[[form]]]] 要素

> These markup constructs refer to head anchors by a URI, either
absolute or relative, or a fragment identifier, or both.

これらのマーク構造は絶対 URI または相対 URI か素片識別子かその両方で頭アンカーを指します。

> In the case of a relative URI, the absolute URI in the address of the
head anchor is the result of combining the relative URI with a base
absolute URI as in [RELURL]. The base document is taken from the
document's <BASE> element, if present; else, it is determined as in
[RELURL].

相対 URI の場合、頭アンカーの番地の絶対 URI はその相対 URI
を [[RFC 1808]] の通り基底絶対 URI と結合した結果です。
基底文書はその文書に [CODE(HTMLe)[[[base]]]]
要素があればそこから取ります。なければ RFC 1808
の通り決定します。


** 7.1. Accessing Resources

> Once the address of the head anchor is determined, the user agent may
obtain a representation of the resource.

一度頭アンカーの番地が決定されれば、利用者エージェントは資源の表現を得ることができます。

> For example, if the base URI is `http://host/x/y.html' and the
document contains:

例えば、基底 URI が [SAMP(URI)[http://host/x/y.html]] で、
文書が

[PRE(HTML)[
   <img src="../icons/abc.gif">
]PRE]

> then the user agent uses the URI `http://host/icons/abc.gif' to
access the resource, as in [URL]..

を含んでいれば、利用者エージェントは資源に access するために
URI [SAMP(URI)[http://host/icons/abc.gif]] を [[RFC 1738]]
の通り使います。


** 7.2. Activation of Hyperlinks

> An HTML user agent allows the user to navigate the content of the
document and request activation of hyperlinks denoted by <A>
elements. HTML user agents should also allow activation of <LINK>
element hyperlinks.

HTML 利用者エージェントによって利用者は文書の内容をまわって 
[CODE(HTMLe)[a]] 要素で示されるハイパーリンクの活性化を要求できます。
HTML 利用者エージェントは [CODE(HTMLe)[link]] 
要素ハイパーリンクの活性化もできるべきです。

> To activate a link, the user agent obtains a representation of the
resource identified in the address of the head anchor. If the
representation is another HTML document, navigation may begin again
with this new document.

利用者エージェントは、リンクを活性化するため、
頭アンカーの番地で識別される資源の表現を得ます。
表現が他の HTML 文書なら、閲覧はまたこの新しい文書から始まります。


** 7.3. Simultaneous Presentation of Image Resources

> An HTML user agent may activate hyperlinks indicated by <IMG> and
<INPUT> elements concurrently with processing the document; that is,
image hyperlinks may be processed without explicit request by the
user. Image resources should be embedded in the presentation at the
point of the tail anchor, that is the <IMG> or <INPUT> element.

HTML 利用者エージェントは [CODE(HTMLe)[[[img]]]] 要素や
[CODE(HTMLe)[[[input]]]] 要素によって示されるハイパーリンクを文書の処理中すぐに活性化して構いません。
つまり、画像ハイパーリンクは利用者の明示的な要求なしで処理して構いません。
画像資源は尾アンカーの場所、つまり [CODE(HTMLe)[img]] 要素または
[CODE(HTMLe)[input]] 要素の場所の表現に埋め込むべきです。

> <LINK> hyperlinks may also be processed without explicit user
request; for example, style sheet resources may be processed before
or during the processing of the document.

[CODE(HTMLe)[link]] ハイパーリンクも利用者の明示的な要求なしで処理して構いません。
例えば、スタイル・シート資源は文書の処理中か処理前に処理して構いません。


** 7.4. Fragment Identifiers

> Any characters following a `#' character in a hypertext address
constitute a fragment identifier. In particular, an address of the
form `#fragment' refers to an anchor in the same document.

ハイパーテキスト番地の [CODE(URI)[#]] 文字に続く文字はすべて素片識別子を構成します。
特に、 [SAMP(URI)[#fragment]] の形の番地は同じ文書中のアンカーを指します。

> The meaning of fragment identifiers depends on the media type of the
representation of the anchor's resource. For `text/html'
representations, it refers to the <A> element with a NAME attribute
whose value is the same as the fragment identifier.  The matching is
case sensitive. The document should have exactly one such element.
The user agent should indicate the anchor element, for example by
scrolling to and/or highlighting the phrase.

素片識別子の意味はアンカーの資源の表現の媒体型に依存します。
例えば、 [CODE(MIME)[text/html]] 資源では、素片識別子は
値が素片識別子と同じ [CODE(HTMLa)[[[name]]]] 属性の
[CODE(HTMLe)[[[a]]]] 要素を指します。
一致は大文字・小文字を区別します。文書はそのような要素を丁度1つ持つべきです。
利用者エージェントは、例えば scroll したり語句を強調したりして、
そのアンカー要素を示すべきです。

> For example, if the base URI is `http://host/x/y.html' and the user
activated the link denoted by the following markup:

例えば、基底 URI が [SAMP(URI)[http://host/x/y.html]] で、
利用者が次のマークで表されるリンクを活性化したとします。

[PRE(HTML)[
   <p> See: <a href="app1.html#bananas">appendix 1</a>
   for more detail on bananas.
]PRE]

> Then the user agent accesses the resource identified by
`http://host/x/app1.html'. Assuming the resource is represented using
the `text/html' media type, the user agent must locate the <A>
element whose NAME attribute is `bananas' and begin navigation there.

この時利用者エージェントは [SAMP(URI)[http://host/x/app1.html]]
で識別される資源に access します。資源が [CODE(MIME)[text/html]]
媒体型を使って表現されると仮定すると、利用者エージェントは
[CODE(HTMLa)[name]] 属性が [SAMP[bananas]] の [CODE(HTMLe)[a]]
要素を探し、そこから navigation
を始めなければなりません。


** 7.5. Queries and Indexes

> The <ISINDEX> element represents a set of hyperlinks. The user can
choose from the set by providing keywords to the user agent.  The
user agent computes the head URI by appending `?' and the keywords to
the base URI. The keywords are escaped according to [URL] and joined
by `+'. For example, if a document contains:

[CODE(HTMLe)[isindex]] 要素はハイパーリンクの集合を表現します。
利用者は利用者エージェントに鍵語を与えることによって集合からハイパーリンクを選ぶことができます。
利用者エージェントは基底 URI に [SAMP(URI)[?]] と鍵語を加えることによって頭
URI を計算します。鍵語は [[RFC 1738]] に従って escape
し、 [SAMP(URI)[+]] でつなげます。例えば、文書が

[PRE(HTML)[
    <BASE HREF="http://host/index">
    <ISINDEX>
]PRE]

> and the user provides the keywords `apple' and `berry', then the
user agent must access the resource
`http://host/index?apple+berry'.

を含み、利用者が鍵語 [SAMP[apple]] と [SAMP[berry]]
を指定したとすると、利用者エージェントは資源
[SAMP(URI)[http://host/index?apple+berry]] に access
しなければなりません。

> <FORM> elements with `METHOD=GET' also represent sets of
hyperlinks. See 8.2.2, "Query Forms: METHOD=GET" for details.

[CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[GET]]]]]]
の [CODE(HTMLe)[form]] 要素もハイパーリンクの集合を表現します。


** 7.6. Image Maps

> If the ISMAP attribute is present on an <IMG> element, the <IMG>
element must be contained in an <A> element with an HREF present.
This construct represents a set of hyperlinks. The user can choose
from the set by choosing a pixel of the image. The user agent
computes the head URI by appending `?' and the x and y coordinates of
the pixel to the URI given in the <A> element.  For example, if a
document contains:

[CODE(HTMLe)[img]] 要素に [CODE(HTMLa)[ismap]] 属性が存在すれば、
その [CODE(HTMLe)[img]] 要素は [CODE(HTMLa)[href]]
属性の存在する [CODE(HTMLe)[a]] 要素に含まれていなければなりません。
この構造はハイパーリンクの集合を表現します。
利用者は画像の画素を選ぶことで集合からハイパーリンクを選ぶことができます。
利用者エージェントは [CODE(HTMLe)[a]] 要素に与えられた URI
に [SAMP(URI)[?]] と画素の [VAR(math)[x]] 座標と [VAR(math)[y]]
座標を加えることで頭 URI を計算します。例えば、文書が

[PRE(HTML)[
   <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
   <head><title>ImageMap Example</title>
   <BASE HREF="http://host/index"></head>
   <body>
   <p> Choose any of these icons:<br>
   <a href="/cgi-bin/imagemap"><img ismap src="icons.gif"></a>
]PRE]

> and the user chooses the upper-leftmost pixel, the chosen
hyperlink is the one with the URI
`http://host/cgi-bin/imagemap?0,0'.

を含んでいて、利用者が一番左上の画素を選んだとすると、
選んだハイパーリンクは URI が
[SAMP(URI)[http://host/cgi-bin/imagemap?0,0]] のものです。


* 8. Forms

> A form is a template for a form data set and an associated
method and action URI. A form data set is a sequence of
name/value pair fields. The names are specified on the NAME
attributes of form input elements, and the values are given
initial values by various forms of markup and edited by the
user. The resulting form data set is used to access an
information service as a function of the action and method.

フォームは、フォーム・データ集合の雛形および関連付けられた method
と動作 URI です。フォーム・データ集合は名前と値の組の欄の列です。
名前はフォーム入力要素の [CODE(HTMLa)[name]]
属性で指定し、値は種々の形態のマークで初期値を指定して利用者が編集します。
結果のフォーム・データ集合は動作と method
の関数として情報サービスに access するために使います。

> Forms elements can be mixed in with document structuring
elements. For example, a <PRE> element may contain a <FORM>
element, or a <FORM> element may contain lists which contain
<INPUT> elements. This gives considerable flexibility in
designing the layout of forms.

フォーム要素は文書構造化要素と混ぜて使うことができます。
例えば、 [CODE(HTMLe)[[[pre]]]] 要素は [CODE(HTMLe)[[[form]]]]
要素を含むことができますし、 [CODE(HTMLe)[form]]
要素は並びを含むことができますし、並びは
[CODE(HTMLe)[[[input]]]] 要素を含むことができます。
これはフォームの配置の設計にかなりの柔軟性を与えます。

> Form processing is a level 2 feature.

フォーム処理は水準 2 の機能です。


** 8.1. Form Elements


*** 8.1.1. Form: FORM

> The <FORM> element contains a sequence of input elements, along
with document structuring elements. The attributes are:

[CODE(HTMLe)[form]] 要素は入力要素の列を、
文書構造化要素と共に含みます。属性:

>
:ACTION:
specifies the action URI for the form. The action URI of
a form defaults to the base URI of the document (see 7,
"Hyperlinks").

フォームの動作 URI を指定します。フォームの動作 URI
はその文書の基底 URI が既定となります。

>
:METHOD:
selects a method of accessing the action URI. The set of
applicable methods is a function of the scheme of the
action URI of the form. See 8.2.2, "Query Forms:
METHOD=GET" and 8.2.3, "Forms with Side-Effects:
METHOD=POST".

動作 URI に access する方式を選択します。適用可能な method
の集合はフォームの動作 URI の scheme の関数です。

>
:ENCTYPE:
specifies the media type used to encode the name/value
pairs for transport, in case the protocol does not
itself impose a format. See 8.2.1, "The form-urlencoded
Media Type".

名前・値の組を輸送時にプロトコル自体が書式を決めていない場合に符号化するために使われる媒体型を指定します。


*** 8.1.2. Input Field: INPUT

> The <INPUT> element represents a field for user input. The TYPE
attribute discriminates between several variations of fields.

[CODE(HTMLe)[input]] 要素は利用者入力欄を表現します。
[CODE(HTMLa)[type]] 属性が欄の種類を区別します。

> The <INPUT> element has a number of attributes. The set of applicable
attributes depends on the value of the TYPE attribute.

[CODE(HTMLe)[input]] 要素は数々の属性を持っています。
適用可能な属性の集合は [CODE(HTMLa)[type]] 属性の値に依存します。


**** 8.1.2.1. Text Field: INPUT TYPE=TEXT

> The default value of the TYPE attribute is `TEXT', indicating a
single line text entry field. (Use the <TEXTAREA> element for multi-
line text fields.)

[CODE(HTMLa)[type]] 属性の既定値は ODE(HTML)[text]] で、
単一行文章入力欄を示します。 (複数行文章欄には [CODE(HTMLe)[[[textarea]]]]
要素を使って下さい。)

> Required attributes are:

必須属性:

>
:NAME:
name for the form field corresponding to this element.

この要素に対応するフォーム欄の名前。

> The optional attributes are:

省略可能な属性:

>
:MAXLENGTH:
constrains the number of characters that can be entered
into a text input field. If the value of MAXLENGTH is
greater the the value of the SIZE attribute, the field
should scroll appropriately. The default number of
characters is unlimited.

文章入力欄に入力できる文字の数を制約します。
[CODE(HTMLa)[maxlength]] 値が [CODE(HTMLa)[size]]
属性の値よりも大きければ、欄は適当に scroll するべきです。
既定の文字数は無制限です。

>
:SIZE:
specifies the amount of display space allocated to this
input field according to its type. The default depends
on the user agent.

この入力欄に割当てる表示空間の量をその型に従って指定します。
既定値は利用者エージェントに依存します。

>
:VALUE:
The initial value of the field.

欄の初期値。

> For example:
[PRE(HTML)[
<p>Street Address: <input name=street><br>
Postal City code: <input name=city size=16 maxlength=16><br>
Zip Code: <input name=zip size=10 maxlength=10 value="99999-9999"><br>
]PRE]


**** 8.1.2.2. Password Field: INPUT TYPE=PASSWORD

> An <INPUT> element with `TYPE=PASSWORD' is a text field as above,
except that the value is obscured as it is entered. (see also: 10,
"Security Considerations").

[CODE(HTML)[[CODE(HTMLa)[type]]=password]] の [CODE(HTMLe)[input]]
要素は前述の文章欄ですが、その値は入力しても隠されます。

> For example:
[PRE(HTML)[
<p>Name: <input name=login> Password: <input type=password name=passwd>
]PRE]


**** 8.1.2.3. Check Box: INPUT TYPE=CHECKBOX

> An <INPUT> element with `TYPE=CHECKBOX' represents a boolean choice.
A set of such elements with the same name represents an n-of-many
choice field. Required attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=checkbox]] の [CODE(HTMLe)[input]]
要素は真偽の選択を表現します。同じ名前のこの種の要素の集合は
[Q[複数の選択肢から [VAR[n]] 個]]の欄を表現します。
必須の属性:

>
:NAME:
symbolic name for the form field corresponding to this
element or group of elements.

この要素またはこの要素群に対応するフォーム欄の記号名。

>
:VALUE:
The portion of the value of the field contributed by
this element.

この要素が貢献する欄の値の一部分。

> Optional attributes are:

省略可能な属性:

>
:CHECKED:
indicates that the initial state is on.

初期状態が入であることを示します。

> For example:
[PRE(HTML)[
  <p>What flavors do you like?
  <input type=checkbox name=flavor value=vanilla>Vanilla<br>
  <input type=checkbox name=flavor value=strawberry>Strawberry<br>
  <input type=checkbox name=flavor value=chocolate checked>Chocolate<br>
]PRE]


**** 8.1.2.4. Radio Button: INPUT TYPE=RADIO

> An <INPUT> element with `TYPE=RADIO' represents a boolean choice. A
set of such elements with the same name represents a 1-of-many choice
field. The NAME and VALUE attributes are required as for check boxes.
Optional attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=radio]] の [CODE(HTMLe)[input]]
要素は真偽の選択を表現します。同じ名前のこの種の要素の集合は、
[Q[複数の選択肢から1個]]の欄を表現します。
チェック箱同様に [CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[value]]
属性が必須です。省略可能な属性:

>
:CHECKED:
indicates that the initial state is on.

初期状態が入であることを示します。

> At all times, exactly one of the radio buttons in a set is checked.
If none of the <INPUT> elements of a set of radio buttons specifies
`CHECKED', then the user agent must check the first radio button of
the set initially.

集合中のラジオ・ボタンは、いつも丁度1つがチェックされます。
ラジオ・ボタンの集合の [CODE(HTMLe)[input]]
要素のどれも [CODE(HTMLa)[checked]] が指定されていなければ、
利用者エージェントは初期状態として集合の最初のラジオ・ボタンをチェックしなければなりません。

> For example:
[PRE(HTML)[
    <p>Which is your favorite?
    <input type=radio name=flavor value=vanilla>Vanilla<br>
    <input type=radio name=flavor value=strawberry>Strawberry<br>
    <input type=radio name=flavor value=chocolate>Chocolate<br>
]PRE]


**** 8.1.2.5. Image Pixel: INPUT TYPE=IMAGE

> An <INPUT> element with `TYPE=IMAGE' specifies an image resource to
display, and allows input of two form fields: the x and y coordinate
of a pixel chosen from the image. The names of the fields are the
name of the field with `.x' and `.y' appended.  `TYPE=IMAGE' implies
`TYPE=SUBMIT' processing; that is, when a pixel is chosen, the form
as a whole is submitted.

[CODE(HTML)[[CODE(HTMLa)[type]]=image]] の [CODE(HTMLe)[input]]
要素は表示する画像資源を指定すると共に、画像から選んだ画素の
[VAR(math)[x]] 座標と [VAR(math)[y]] 座標の2つのフォーム欄の入力を認めます。
2つの欄の名前は、欄の名前に [CODE(HTML)[.x]] と [CODE(HTML)[,y]]
を付加したものです。 [CODE(HTML)[[CODE(HTMLa)[type]]=image]]
は [CODE(HTML)[[CODE(HTMLa)[type]]=submit]] 処理を暗示します。
つまり、画素が選ばれた時、フォーム全体が提出されます。

> The NAME attribute is required as for other input fields. The SRC
attribute is required and the ALIGN is optional as for the <IMG>
element (see 5.10, "Image: IMG").

他の入力欄同様に [CODE(HTMLa)[name]] 属性が必須です。
ODE(HTMLe)[[[img]]]] 要素同様に [CODE(HTMLa)[[[src]]]]
属性が必須で [CODE(HTMLa)[[[align]]]] 属性が省略可能です。

> For example:
[PRE(HTML)[
    <p>Choose a point on the map:
    <input type=image name=point src="map.gif">
]PRE]


**** 8.1.2.6. Hidden Field: INPUT TYPE=HIDDEN

> An <INPUT> element with `TYPE=HIDDEN' represents a hidden field.The
user does not interact with this field; instead, the VALUE attribute
specifies the value of the field. The NAME and VALUE attributes are
required.

[CODE(HTML)[[CODE(HTMLa)[type]]=hidden]] の [CODE(HTMLe)[input]]
要素は隠し欄を表現します。利用者はこの欄と対話しません。
代わりに、 [CODE(HTMLa)[value]] 属性がこの欄の値を指定します。
[CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[value]]
属性が必須です。

> For example:
[PRE(HTML)[
   <input type=hidden name=context value="l2k3j4l2k3j4l2k3j4lk23">
]PRE]


**** 8.1.2.7. Submit Button: INPUT TYPE=SUBMIT

> An <INPUT> element with `TYPE=SUBMIT' represents an input option,
typically a button, that instructs the user agent to submit the form.
Optional attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=submit]] の [CODE(HTMLe)[input]]
要素は、利用者エージェントにフォームを提出するよう指示する入力選択肢、
普通はボタンを表現します。省略可能な属性:

>
:NAME:
indicates that this element contributes a form field
whose value is given by the VALUE attribute. If the NAME
attribute is not present, this element does not
contribute a form field.

この要素がフォーム欄に貢献することを示し、
その値は [CODE(HTMLa)[value]] で与えられます。
[CODE(HTMLa)[name]] 属性が存在しなければ、
この要素はフォーム欄に貢献しません。

>
:VALUE:
indicates a label for the input (button).

入力 (ボタン) の札を示します。

[PRE(HTML)[
    You may submit this request internally:
    <input type=submit name=recipient value=internal><br>
    or to the external world:
    <input type=submit name=recipient value=world>
]PRE]


**** 8.1.2.8. Reset Button: INPUT TYPE=RESET

> An <INPUT> element with `TYPE=RESET' represents an input option,
typically a button, that instructs the user agent to reset the form's
fields to their initial states. The VALUE attribute, if present,
indicates a label for the input (button).

[CODE(HTML)[[CODE(HTMLa)[type]]=reset]] の [CODE(HTMLe)[input]]
要素は、利用者エージェントにフォームの欄を初期状態に再設定するよう指示する入力選択肢、
普通はボタンを表現します。 [CODE(HTMLa)[value]] 属性が存在すれば、
入力 (ボタン) の札を示します。

[PRE(HTML)[
When you are finished, you may submit this request:
<input type=submit><br>
You may clear the form and start over at any time: <input type=reset>
]PRE]


*** 8.1.3. Selection: SELECT

> The <SELECT> element constrains the form field to an enumerated list
of values. The values are given in <OPTION> elements.  Attributes
are:

[CODE(HTMLe)[select]] 要素はフォーム欄を値の列挙並びに制約します。
値は [CODE(HTMLe)[option]] 要素で与えます。属性:

>
:MULTIPLE:
indicates that more than one option may be included in
the value.

複数の選択肢を値に含められることを示します。

>
:NAME:
specifies the name of the form field.

フォーム欄の名前を指定します。

>
:SIZE:
specifies the number of visible items. Select fields of
size one are typically pop-down menus, whereas select
fields with size greater than one are typically lists.

可視項目の数を指定します。寸法が一の選択欄は普通ポップ・ダウン・メニューで、
寸法が一より大きな選択欄は普通並びです。

> For example:
[PRE(HTML)[
    <SELECT NAME="flavor">
    <OPTION>Vanilla
    <OPTION>Strawberry
    <OPTION value="RumRasin">Rum and Raisin
    <OPTION selected>Peach and Orange
    </SELECT>
]PRE]

> The initial state has the first option selected, unless a SELECTED
attribute is present on any of the <OPTION> elements.

初期状態は、 [CODE(HTMLe)[option]] 要素のどれかに [CODE(HTMLa)[selected]]
属性が存在しなければ、最初の選択肢を選んだ状態です。


**** 8.1.3.1. Option: OPTION

> The Option element can only occur within a Select element. It
represents one choice, and has the following attributes:

[CODE(HTMLe)[option]] 要素は [CODE(HTMLe)[select]]
要素内にのみ出現できます。 [CODE(HTMLe)[option]]
要素は一つの選択肢を表現し、次の属性を持ちます。

>
:SELECTED:
Indicates that this option is initially selected.

この選択肢が初期状態で選択されていることを示します。

>
:VALUE:
indicates the value to be returned if this option is
chosen. The field value defaults to the content of the
<OPTION> element.

この選択肢が選ばれた時に返される値を示します。
欄値の既定値は [CODE(HTMLe)[option]] 要素の内容です。

> The content of the <OPTION> element is presented to the user to
represent the option. It is used as a returned value if the VALUE
attribute is not present.

[CODE(HTMLe)[option]] 要素の内容は利用者に選択肢として提示されます。
また、 [CODE(HTMLa)[value]] 属性が存在しない時に返す値として使われます。


*** 8.1.4. Text Area: TEXTAREA

> The <TEXTAREA> element represents a multi-line text field.
Attributes are:

[CODE(HTMLe)[textarea]] 要素は複数行文章欄を表現します。
属性:

>
:COLS:
the number of visible columns to display for the text
area, in characters.

文章欄を表示する可視列の数を文字数で。

>
:NAME:
Specifies the name of the form field.

フォーム欄の名前を指定します。

>
:ROWS:
The number of visible rows to display for the text area,
in characters.

文章欄を表示する可視行の数を文字数で。

> For example:
[PRE(HTML)[
    <TEXTAREA NAME="address" ROWS=6 COLS=64>
    HaL Computer Systems
    1315 Dell Avenue
    Campbell, California 95008
    </TEXTAREA>
]PRE]

> The content of the <TEXTAREA> element is the field's initial value.

[CODE(HTMLe)[textarea]] 要素の内容は欄の初期値です。

> Typically, the ROWS and COLS attributes determine the visible
dimension of the field in characters. The field is typically rendered
in a fixed-width font. HTML user agents should allow text to extend
beyond these limits by scrolling as needed.

普通、 [CODE(HTMLa)[rows]] 属性と [CODE(HTMLa)[cols]]
属性が欄の可視次元を文字数で決定します。
欄は普通固定幅フォントでレンダリングします。
HTML 利用者エージェントは文章がこれらの制限を超えても必要に応じて
scroll することで伸ばせるべきです。


** 8.2. Form Submission

> An HTML user agent begins processing a form by presenting the
document with the fields in their initial state. The user is allowed
to modify the fields, constrained by the field type etc.  When the
user indicates that the form should be submitted (using a submit
button or image input), the form data set is processed according to
its method, action URI and enctype.

HTML 利用者エージェントは、欄を初期状態にして文書を提示することでフォーム処理を始めます。
利用者は欄の種類その他の制約の元で欄を集成できます。
利用者がフォームを提出せよと (提出ボタンや画像入力を使って) 示した時、
フォーム・データ集合を method と行動 URI と enctype
に従って処理します。

> When there is only one single-line text input field in a form, the
user agent should accept Enter in that field as a request to submit
the form.

利用者エージェントは、フォームに1つの単一行文章入力欄しかない時には、
その欄での [KEY[Enter]] をフォームの提出の要求として受付けるべきです。


*** 8.2.1. The form-urlencoded Media Type

> The default encoding for all forms is `application/x-www-form-urlencoded'. A form data set is represented in this media type as
follows:

すべてのフォームの既定の符号化は [CODE(MIME)[application/x-www-form-urlencoded]]
です。フォーム・データ集合はこの媒体型で次の通り表現します。

>
= 1. The form field names and values are escaped: space
characters are replaced by `+', and then reserved characters
are escaped as per [URL]; that is, non-alphanumeric
characters are replaced by `%HH', a percent sign and two
hexadecimal digits representing the ASCII code of the
character. Line breaks, as in multi-line text field values,
are represented as CR LF pairs, i.e. `%0D%0A'.
= 2. The fields are listed in the order they appear in the
document with the name separated from the value by `=' and
the pairs separated from each other by `&'. Fields with null
values may be omitted. In particular, unselected radio
buttons and checkboxes should not appear in the encoded
data, but hidden fields with VALUE attributes present should.

= フォーム欄名と値を escape します。間隔文字は [CODE(URI)[+]]
で置換してから、 [[RFC 1738]] の通り予約文字を escape します。
つまり、非英数文字は [SAMP(URI)[%[VAR[HH]]]] (百分率記号と2つの16進数字で文字の
ASCII 符号を表現したもの) で置換します。複数行文章欄の値の改行は、
[CODE(char)[CR]] [CODE(char)[LF]] 組で、つまり [SAMP(URI)[%0D%0A]]
で表現します。
= 欄は文書に出現する順序に並べて名前と値は [SAMP(URI)[=]] で区切り、
各組は [CODE(URI)[&]] で区切ります。 Null 値の欄は省略して構いません。
特に、未選択のラジオ・ボタンとチェック箱は符号化データに出現するべきではありませんが、
[CODE(HTMLa)[value]] 属性の存在する隠し欄は出現するべきです。

> NOTE - The URI from a query form submission can be
used in a normal anchor style hyperlink.
Unfortunately, the use of the `&' character to
separate form fields interacts with its use in SGML
attribute values as an entity reference delimiter.
For example, the URI `http://host/?x=1&y=2' must be
written `<a href="http://host/?x=1&#38;y=2"' or `<a
href="http://host/?x=1&amp;y=2">'.

備考: 照会フォーム提出による URI は通常のアンカー式のハイパーリンクで使うこともできます。
残念ながら、 [CODE(char)[&]] 文字をフォーム欄の区切りに使うのは
[[SGML]] の[[属性値]]では[[実体参照]]区切子になってしまいます。
例えば、 URI [SAMP(URI)[http://host/?x=1&y=2]] は
[SAMP(HTML)[<a href="http://host/?x=1&#38;y=2"]] または
[SAMP(HTML)[<a href="http://host/?x=1&amp;y=2">]]
と書かなければなりません。

> HTTP server implementors, and in particular, CGI
implementors are encouraged to support the use of
`;' in place of `&' to save users the trouble of
escaping `&' characters this way.

HTTP 鯖実装者と、特に CGI 実装者は、このように [SAMP(char)[&]]
文字を escape する問題から利用者をまもるために [SAMP(URI)[&]]
の場所で [SAMP(URI)[;]] を使うのを支援することを推奨します。


*** 8.2.2. Query Forms: METHOD=GET

> If the processing of a form is idempotent (i.e. it has no lasting
observable effect on the state of the world), then the form method
should be `GET'. Many database searches have no visible side-effects
and make ideal applications of query forms.

フォームの処理が[[同効]] (世界の状態に目立った影響がなければ)、
フォームの method は [CODE(HTTP)[[[GET]]]] とするべきです。
多くのデータベース検索は目に見える副作用が無く、
照会フォームの理想的な応用です。

> To process a form whose action URL is an HTTP URL and whose method is
`GET', the user agent starts with the action URI and appends a `?'
and the form data set, in `application/x-www-form-urlencoded' format
as above. The user agent then traverses the link to this URI just as
if it were an anchor (see 7.2, "Activation of Hyperlinks").

利用者エージェントは、行動 URL が HTTP URL で method が [CODE(HTTP)[GET]] 
のフォームを処理する場合、まず行動 URI を用意し、
ODE(URI)[?]] を付加し、更にフォーム・データ集合を前述の
[CODE(MIME)[[[application/x-www-form-urlencoded]]]] 書式で付加します。
利用者エージェントはそれからこの URI
へのリンクをアンカーの場合と同じように探索します。

> NOTE - The URL encoding may result in very long URIs, which cause
some historical HTTP server implementations to exhibit defective
behavior. As a result, some HTML forms are written using
`METHOD=POST' even though the form submission has no side-effects.

備考: URL 符号化によって非常に長い URL となって、
古い HTTP 鯖実装がいかれた動作をしめすことがあります。
ですから、フォーム提出による副作用が無くても 
[CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[POST]]]]]]
を使って書かれた HTML フォームもあります。


*** 8.2.3. Forms with Side-Effects: METHOD=POST

> If the service associated with the processing of a form has side
effects (for example, modification of a database or subscription to a
service), the method should be `POST'.

フォームの処理に関連付けられたサービスが副作用を持っているなら
(例えばデータベースの修正やサービスへの登録が行われるなら)、
method は [CODE(HTTP)[[[POST]]]] とするべきです。

> To process a form whose action URL is an HTTP URL and whose method is
`POST', the user agent conducts an HTTP POST transaction using the
action URI, and a message body of type `application/x-www-form-urlencoded' format as above. The user agent should display the
response from the HTTP POST interaction just as it would display the
response from an HTTP GET above.

利用者エージェントは、行動 URL が HTTP URL で method が [CODE(HTTP)[[[POST]]]]
のフォームを処理する場合、 HTTP POST 取引を動作 URI
と型が上述の [CODE(MIME)[[[application/x-www-form-urlencoded]]]] 
書式のメッセージ本体とします。利用者エージェントは HTTP POST
対話の応答を前述の HTTP GET 応答と同様に表示するべきです・


*** 8.2.4. Example Form Submission: Questionnaire Form

> Consider the following document:

次の文書を考えてみます。

[PRE(HTML)[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <title>Sample of HTML Form Submission</title>
    <H1>Sample Questionnaire</H1>
    <P>Please fill out this questionnaire:
    <FORM METHOD="POST" ACTION="http://www.w3.org/sample">
    <P>Your name: <INPUT NAME="name" size="48">
    <P>Male <INPUT NAME="gender" TYPE=RADIO VALUE="male">
    <P>Female <INPUT NAME="gender" TYPE=RADIO VALUE="female">
    <P>Number in family: <INPUT NAME="family" TYPE=text>
    <P>Cities in which you maintain a residence:
    <UL>
    <LI>Kent <INPUT NAME="city" TYPE=checkbox VALUE="kent">
    <LI>Miami <INPUT NAME="city" TYPE=checkbox VALUE="miami">
    <LI>Other <TEXTAREA NAME="other" cols=48 rows=4></textarea>
    </UL>
    Nickname: <INPUT NAME="nickname" SIZE="42">
    <P>Thank you for responding to this questionnaire.
    <P><INPUT TYPE=SUBMIT> <INPUT TYPE=RESET>
    </FORM>
]PRE]

> The initial state of the form data set is:

フォーム・データ集合の初期状態:

>
:name:""
:gender:"male"
:family:""
:other:""
:nickname:""

> Note that the radio input has an initial value, while the
checkbox has none.

ラジオ入力ボタンは初期値を持ちますが、
チェック箱は持たないことに注意して下さい。

> The user might edit the fields and request that the form be
submitted. At that point, suppose the values are:

利用者は欄を編集してフォームの提出を要求することができます。
その時点で、

>
:name:"John Doe"
:gender:"male"
:family:"5"
:city:"kent"
:city:"miami"
:other:"abc\ndefk"
:nickname:"J&D"

> The user agent then conducts an HTTP POST transaction using the URI
`http://www.w3.org/sample'. The message body would be (ignore the
line break):

という値を仮定します。利用者エージェントは URI
AMP(URI)[http://www.w3.org/sample]] を使った HTTP POST
取引を行います。メッセージ本体は

>
[PRE[
   name=John+Doe&gender=male&family=5&city=kent&city=miami&
   other=abc%0D%0Adef&nickname=J%26D
]PRE]

となります (改行は無視して下さい)。


* 9. HTML Public Text


** 9.1. HTML DTD

> This is the Document Type Definition for the HyperText Markup
Language, level 2.

これはハイパーテキスト・マーク付け言語水準 2 の文書型定義です。

[INS[

訳注: 日本語訳を適宜付加しています。真の DTD は原文を参照して下さい。
]INS]

[PRE(SGML)[
<!--    html.dtd
        Document Type Definition for the HyperText Markup Language
        ハイパーテキスト・マーク付け言語の文書型定義
                 (HTML DTD)
        $Id: html.dtd,v 1.30 1995/09/21 23:30:19 connolly Exp $
        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: html.decl, html-1.dtd
          http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->
<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0//EN"
        -- Typical usage:
           典型的使用法:
            <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
            <html>
            ...
            </html>
        --
        >
<!--============ Feature Test Entities ========================-->
<!ENTITY % HTML.Recommended "IGNORE"
        -- Certain features of the language are necessary for
           compatibility with widespread usage, but they may
           compromise the structural integrity of a document.
           This feature test entity enables a more prescriptive
           document type definition that eliminates
           those features.
           
           HTML のある種の機能は広く行われている用法との互換性
           のため必要ですが、文書の構造的整合性を曲げることになる
           かもしれません。この機能試験実体はそうした機能を除去
           したより規範的な文書型定義を有効にします。
        -->
<![ %HTML.Recommended [
        <!ENTITY % HTML.Deprecated "IGNORE">
]]>
<!ENTITY % HTML.Deprecated "INCLUDE"
        -- Certain features of the language are necessary for
           compatibility with earlier versions of the specification,
           but they tend to be used and implemented inconsistently,
           and their use is deprecated. This feature test entity
           enables a document type definition that eliminates
           these features.
           HTML のある種の機能は以前の版の仕様書との互換性のために
           必要ですが、一貫して使用・実装されない傾向にあります。
           このような機能の使用は非推奨です。この機能試験実体は
           そうした機能を除去した文書型定義を有効にします。
        -->
<!ENTITY % HTML.Highlighting "INCLUDE"
        -- Use this feature test entity to validate that a
           document uses no highlighting tags, which may be
           ignored on minimal implementations.
           強調タグは最小実装では無視されるかもしれませんが、
           文書が強調タグを使っていないことを検証するには
           この機能試験実体を使って下さい。
        -->
<!ENTITY % HTML.Forms "INCLUDE"
        -- Use this feature test entity to validate that a document
           contains no forms, which may not be supported in minimal
           implementations
           フォームは最小実装では対応していないかもしれませんが、
           文書がフォームを含まないことを検証するにはこの機能試験実体
           を使って下さい。
        -->
<!--============== Imported Names ==============================-->
<!ENTITY % Content-Type "CDATA"
        -- meaning an internet media type
           (aka MIME content type, as per RFC1521)
           インターネット媒体型 (MIME 内容型) を意味します
        -->
<!ENTITY % HTTP-Method "GET | POST"
        -- as per HTTP specification, in progress
           HTTP 仕様書によります
        -->
<!--========= DTD "Macros" =====================-->
<!ENTITY % heading "H1|H2|H3|H4|H5|H6">
<!ENTITY % list " UL | OL | DIR | MENU " >
<!--======= Character mnemonic entities =================-->
<!ENTITY % ISOlat1 PUBLIC
  "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML">
%ISOlat1;
<!ENTITY amp CDATA "&#38;"     -- ampersand          -->
Berners-Lee & Connolly      Standards Track                    [Page 50]

RFC 1866            Hypertext Markup Language - 2.0        November 1995
<!ENTITY gt CDATA "&#62;"      -- greater than       -->
<!ENTITY lt CDATA "&#60;"      -- less than          -->
<!ENTITY quot CDATA "&#34;"    -- double quote       -->
<!--========= SGML Document Access (SDA) Parameter Entities =====-->
<!-- HTML 2.0 contains SGML Document Access (SDA) fixed attributes
in support of easy transformation to the International Committee
for Accessible Document Design (ICADD) DTD
         "-//EC-USA-CDA/ICADD//DTD ICADD22//EN".
HTML 2.0 は access 可能文書設計国際委員会 (ICADD) DTD
         "-//EC-USA-CDA/ICADD//DTD ICADD22//EN"
に簡単に変換できるように SGML 文書 access (SDA)
固定属性を含んでいます。
ICADD applications are designed to support usable access to
structured information by print-impaired individuals through
Braille, large print and voice synthesis.  For more information on
SDA & ICADD:
ICADD 応用は視覚障害者が点字、大きな印刷、音声合成を通じて構造化情報
への有用な access を支援するために設計されています。 SDA
および ICADD の詳細:
        - ISO 12083:1993, Annex A.8, Facilities for Braille,
          large print and computer voice
        - ICADD ListServ
          <ICADD%ASUACAD.BITNET@@ARIZVM1.ccit.arizona.edu>
        - Usenet news group bit.listserv.easi
        - Recording for the Blind, +1 800 221 4792
-->
<!ENTITY % SDAFORM  "SDAFORM  CDATA  #FIXED"
          -- one to one mapping
             一対一対応                -->
<!ENTITY % SDARULE  "SDARULE  CDATA  #FIXED"
          -- context-sensitive mapping
             文脈依存対応              -->
<!ENTITY % SDAPREF  "SDAPREF  CDATA  #FIXED"
          -- generated text prefix
             生成文接頭辞              -->
<!ENTITY % SDASUFF  "SDASUFF  CDATA  #FIXED"
          -- generated text suffix
             生成文接尾辞              -->
<!ENTITY % SDASUSP  "SDASUSP  NAME   #FIXED"
          -- suspend transform process
             変換処理中断              -->
<!--========== Text Markup =====================-->
<![ %HTML.Highlighting [
<!ENTITY % font " TT | B | I ">
<!ENTITY % phrase "EM | STRONG | CODE | SAMP | KBD | VAR | CITE ">
<!ENTITY % text "#PCDATA | A | IMG | BR | %phrase | %font">
<!ELEMENT (%font;|%phrase) - - (%text)*>
<!ATTLIST ( TT | CODE | SAMP | KBD | VAR )
        %SDAFORM; "Lit"
        >
<!ATTLIST ( B | STRONG )
        %SDAFORM; "B"
        >
<!ATTLIST ( I | EM | CITE )
        %SDAFORM; "It"
        >
<!-- <TT>       Typewriter text
                タイプライター文                        -->
<!-- <B>        Bold text
                太字文                                  -->
<!-- <I>        Italic text
                [RUBY[斜体] [イタリック]]文                                  -->
<!-- <EM>       Emphasized phrase
                強調語句                                -->
<!-- <STRONG>   Strong emphasis
                強い強調                                -->
<!-- <CODE>     Source code phrase
                原始符号語句                            -->
<!-- <SAMP>     Sample text or characters
                例文・例文字                            -->
<!-- <KBD>      Keyboard phrase, e.g. user input
                鍵盤語句 (例: 利用者入力)               -->
<!-- <VAR>      Variable phrase or substitutable
                変数語句・置換え                        -->
<!-- <CITE>     Name or title of cited work
                引用文献の名前・題                      -->
<!ENTITY % pre.content "#PCDATA | A | HR | BR | %font | %phrase">
]]>
<!ENTITY % text "#PCDATA | A | IMG | BR">
<!ELEMENT BR    - O EMPTY>
<!ATTLIST BR
        %SDAPREF; "&#RE;"
        >
<!-- <BR>       Line break      
                改行            -->
<!--========= Link Markup ======================-->
<!ENTITY % linkType "NAMES">
<!ENTITY % linkExtraAttributes
        "REL %linkType #IMPLIED
        REV %linkType #IMPLIED
        URN CDATA #IMPLIED
        TITLE CDATA #IMPLIED
        METHODS NAMES #IMPLIED
        ">
<![ %HTML.Recommended [
        <!ENTITY % A.content   "(%text)*"
        -- <H1><a name="xxx">Heading</a></H1>
                is preferred to
                の方が
           <a name="xxx"><H1>Heading</H1></a>
                よりもよさげです
        -->
]]>
<!ENTITY % A.content   "(%heading|%text)*">
<!ELEMENT A     - - %A.content -(A)>
<!ATTLIST A
        HREF CDATA #IMPLIED
        NAME CDATA #IMPLIED
        %linkExtraAttributes;
        %SDAPREF; "'''<'''Anchor: #AttList'''>'''"
        >
<!-- <A>                Anchor; source/destination of link
                        アンカー。リンクの始点・終点            -->
<!-- <A NAME="...">     Name of this anchor
                        このアンカーの名前                      -->
<!-- <A HREF="...">     Address of link destination
                        リンク終点の番地                        -->
<!-- <A URN="...">      Permanent address of destination
                        終点の持続番地                          -->
<!-- <A REL=...>        Relationship to destination
                        終点への関係                            -->
<!-- <A REV=...>        Relationship of destination to this
                        終点からこちらへの関係                  -->
<!-- <A TITLE="...">    Title of destination (advisory)
                        終点の題 (ヒント)                       -->
<!-- <A METHODS="...">  Operations on destination (advisory)
                        終点についての演算 (ヒント)             -->
<!--========== Images ==========================-->
<!ELEMENT IMG    - O EMPTY>
<!ATTLIST IMG
        SRC CDATA  #REQUIRED
        ALT CDATA #IMPLIED
        ALIGN (top|middle|bottom) #IMPLIED
        ISMAP (ISMAP) #IMPLIED
        %SDAPREF; "<Fig><?SDATrans Img: #AttList>#AttVal(Alt)</Fig>"
        >
<!-- <IMG>              Image; icon, glyph or illustration
                        画像。小さな絵、図標識、イラスト        -->
<!-- <IMG SRC="...">    Address of image object
                        画像物体の番地                          -->
<!-- <IMG ALT="...">    Textual alternative
                        文章の代替                              -->
<!-- <IMG ALIGN=...>    Position relative to text
                        文章に対する位置                        -->
<!-- <IMG ISMAP>        Each pixel can be a link
                        各画素がリンクたり得る                  -->
<!--========== Paragraphs=======================-->
<!ELEMENT P     - O (%text)*>
<!ATTLIST P
        %SDAFORM; "Para"
        >
<!-- <P>        Paragraph
                段落            -->
<!--========== Headings, Titles, Sections ===============-->
<!ELEMENT HR    - O EMPTY>
<!ATTLIST HR
        %SDAPREF; "&#RE;&#RE;"
        >
<!-- <HR>       Horizontal rule
                水平罫          -->
<!ELEMENT ( %heading )  - -  (%text;)*>
<!ATTLIST H1
        %SDAFORM; "H1"
        >
<!ATTLIST H2
        %SDAFORM; "H2"
        >
<!ATTLIST H3
        %SDAFORM; "H3"
        >
<!ATTLIST H4
        %SDAFORM; "H4"
        >
<!ATTLIST H5
        %SDAFORM; "H5"
        >
<!ATTLIST H6
        %SDAFORM; "H6"
        >
<!-- <H1>       Heading, level 1
                見出し 水準 1    -->
<!-- <H2>       Heading, level 2
                見出し 水準 2    -->
<!-- <H3>       Heading, level 3
                見出し 水準 3    -->
<!-- <H4>       Heading, level 4
                見出し 水準 4    -->
<!-- <H5>       Heading, level 5
                見出し 水準 5    -->
<!-- <H6>       Heading, level 6
                見出し 水準 6    -->
<!--========== Text Flows ======================-->
<![ %HTML.Forms [
        <!ENTITY % block.forms "BLOCKQUOTE | FORM | ISINDEX">
]]>
<!ENTITY % block.forms "BLOCKQUOTE">
<![ %HTML.Deprecated [
        <!ENTITY % preformatted "PRE | XMP | LISTING">
]]>
<!ENTITY % preformatted "PRE">
<!ENTITY % block "P | %list | DL
        | %preformatted
        | %block.forms">
<!ENTITY % flow "(%text|%block)*">
<!ENTITY % pre.content "#PCDATA | A | HR | BR">
<!ELEMENT PRE - - (%pre.content)*>
<!ATTLIST PRE
        WIDTH NUMBER #implied
        %SDAFORM; "Lit"
        >
<!-- <PRE>              Preformatted text
                        整形済み文                      -->
<!-- <PRE WIDTH=...>    Maximum characters per line
                        行あたり最大文字数              -->
<![ %HTML.Deprecated [
<!ENTITY % literal "CDATA"
        -- historical, non-conforming parsing mode where
           the only markup signal is the end tag
           in full
 
           歴史的事情により、完全な終了タグだけがマーク信号
           の非適合解析モード
        -->
<!ELEMENT (XMP|LISTING) - -  %literal>
<!ATTLIST XMP
        %SDAFORM; "Lit"
        %SDAPREF; "Example:&#RE;"
        >
<!ATTLIST LISTING
        %SDAFORM; "Lit"
        %SDAPREF; "Listing:&#RE;"
        >
<!-- <XMP>              Example section
                        例示節                  -->
<!-- <LISTING>          Computer listing
                        計算機並び              -->
<!ELEMENT PLAINTEXT - O %literal>
<!-- <PLAINTEXT>        Plain text passage
                        平文移行                -->
<!ATTLIST PLAINTEXT
        %SDAFORM; "Lit"
        >
]]>
<!--========== Lists ==================-->
<!ELEMENT DL    - -  (DT | DD)+>
<!ATTLIST DL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "Definition List:"
        >
<!ELEMENT DT    - O (%text)*>
<!ATTLIST DT
        %SDAFORM; "Term"
        >
<!ELEMENT DD    - O %flow>
<!ATTLIST DD
        %SDAFORM; "LItem"
        >
<!-- <DL>               Definition list, or glossary
                        定義並び、用語集                -->
<!-- <DL COMPACT>       Compact style list
                        簡潔様式並び                    -->
<!-- <DT>               Term in definition list
                        定義並びの用語                  -->
<!-- <DD>               Definition of term
                        定義並びの定義                  -->
<!ELEMENT (OL|UL) - -  (LI)+>
<!ATTLIST OL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        >
<!ATTLIST UL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        >
<!-- <UL>               Unordered list
                        非順序並び                      -->
<!-- <UL COMPACT>       Compact list style
                        簡潔並び様式                    -->
<!-- <OL>               Ordered, or numbered list
                        順序 (番号付き) 並び            -->
<!-- <OL COMPACT>       Compact list style
                        簡潔並び様式                    -->
<!ELEMENT (DIR|MENU) - -  (LI)+ -(%block)>
<!ATTLIST DIR
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "<LHead>Directory</LHead>"
        >
<!ATTLIST MENU
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "<LHead>Menu</LHead>"
        >
<!-- <DIR>              Directory list 
                        ディレクトリ並び                -->
<!-- <DIR COMPACT>      Compact list style
                        簡潔並び様式                    -->
<!-- <MENU>             Menu list
                        メニュー並び                    -->
<!-- <MENU COMPACT>     Compact list style
                        簡潔並び様式                    -->
<!ELEMENT LI    - O %flow>
<!ATTLIST LI
        %SDAFORM; "LItem"
        >
<!-- <LI>               List item                       -->
<!--========== Document Body ===================-->
<![ %HTML.Recommended [
        <!ENTITY % body.content "(%heading|%block|HR|ADDRESS|IMG)*"
        -- <h1>Heading</h1>
           <p>Text ...
                is preferred to
                の方が
           <h1>Heading</h1>
           Text ...
                よりよさげです
        -->
]]>
<!ENTITY % body.content "(%heading | %text | %block |
                                 HR | ADDRESS)*">
<!ELEMENT BODY O O  %body.content>
<!-- <BODY>     Document body   -->
<!ELEMENT BLOCKQUOTE - - %body.content>
<!ATTLIST BLOCKQUOTE
        %SDAFORM; "BQ"
        >
<!-- <BLOCKQUOTE>       Quoted passage
                        引用物         -->
<!ELEMENT ADDRESS - - (%text|P)*>
<!ATTLIST  ADDRESS
        %SDAFORM; "Lit"
        %SDAPREF; "Address:&#RE;"
        >
<!-- <ADDRESS>  Address, signature, or byline
                番地、署名、筆者名              -->
<!--======= Forms ====================-->
<![ %HTML.Forms [
<!ELEMENT FORM - - %body.content -(FORM) +(INPUT|SELECT|TEXTAREA)>
<!ATTLIST FORM
        ACTION CDATA #IMPLIED
        METHOD (%HTTP-Method) GET
        ENCTYPE %Content-Type; "application/x-www-form-urlencoded"
        %SDAPREF; "<Para>Form:</Para>"
        %SDASUFF; "<Para>Form End.</Para>"
        >
<!-- <FORM>                     Fill-out or data-entry form
                                記入欄、データ項目フォーム      -->
<!-- <FORM ACTION="...">        Address for completed form
                                フォーム完了の番地              -->
<!-- <FORM METHOD=...>          Method of submitting form
                                フォーム提出の method           -->
<!-- <FORM ENCTYPE="...">       Representation of form data
                                フォーム・データの表現          -->
<!ENTITY % InputType "(TEXT | PASSWORD | CHECKBOX |
                        RADIO | SUBMIT | RESET |
                        IMAGE | HIDDEN )">
<!ELEMENT INPUT - O EMPTY>
<!ATTLIST INPUT
        TYPE %InputType TEXT
        NAME CDATA #IMPLIED
        VALUE CDATA #IMPLIED
        SRC CDATA #IMPLIED
        CHECKED (CHECKED) #IMPLIED
        SIZE CDATA #IMPLIED
        MAXLENGTH NUMBER #IMPLIED
        ALIGN (top|middle|bottom) #IMPLIED
        %SDAPREF; "Input: "
        >
<!-- <INPUT>                    Form input datum
                                フォーム・データ入力            -->
<!-- <INPUT TYPE=...>           Type of input interaction
                                入力対話の型                    -->
<!-- <INPUT NAME=...>           Name of form datum
                                フォーム・データの名前          -->
<!-- <INPUT VALUE="...">        Default/initial/selected value
                                既定・初期・選択値              -->
<!-- <INPUT SRC="...">          Address of image
                                画像の番地                      -->
<!-- <INPUT CHECKED>            Initial state is "on"
                                初期状態は「入」                -->
<!-- <INPUT SIZE=...>           Field size hint
                                欄寸法ヒント                    -->
<!-- <INPUT MAXLENGTH=...>      Data length maximum
                                データ最大長                    -->
<!-- <INPUT ALIGN=...>          Image alignment
                                画像配置                 -->
<!ELEMENT SELECT - - (OPTION+) -(INPUT|SELECT|TEXTAREA)>
<!ATTLIST SELECT
        NAME CDATA #REQUIRED
        SIZE NUMBER #IMPLIED
        MULTIPLE (MULTIPLE) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF;
        "<LHead>Select #AttVal(Multiple)</LHead>"
        >
<!-- <SELECT>                   Selection of option(s)
                                選択肢から選択                  -->
<!-- <SELECT NAME=...>          Name of form datum
                                フォーム・データの名前          -->
<!-- <SELECT SIZE=...>          Options displayed at a time
                                一度に表示する選択肢            -->
<!-- <SELECT MULTIPLE>          Multiple selections allowed
                                複数選択認可                    -->
<!ELEMENT OPTION - O (#PCDATA)*>
<!ATTLIST OPTION
        SELECTED (SELECTED) #IMPLIED
        VALUE CDATA #IMPLIED
        %SDAFORM; "LItem"
        %SDAPREF;
        "Option: #AttVal(Value) #AttVal(Selected)"
        >
<!-- <OPTION>                   A selection option
                                選択肢                          -->
<!-- <OPTION SELECTED>          Initial state
                                初期状態                        -->
<!-- <OPTION VALUE="...">       Form datum value for this option
                                この選択肢のフォーム・データ値  -->
<!ELEMENT TEXTAREA - - (#PCDATA)* -(INPUT|SELECT|TEXTAREA)>
<!ATTLIST TEXTAREA
        NAME CDATA #REQUIRED
        ROWS NUMBER #REQUIRED
        COLS NUMBER #REQUIRED
        %SDAFORM; "Para"
        %SDAPREF; "Input Text -- #AttVal(Name): "
        >
<!-- <TEXTAREA>                 An area for text input
                                文章入力領域                    -->
<!-- <TEXTAREA NAME=...>        Name of form datum
                                フォーム・データの名前          -->
<!-- <TEXTAREA ROWS=...>        Height of area
                                領域の高さ                      -->
<!-- <TEXTAREA COLS=...>        Width of area
                                領域の幅                        -->
]]>
<!--======= Document Head ======================-->
<![ %HTML.Recommended [
        <!ENTITY % head.extra "">
]]>
<!ENTITY % head.extra "& NEXTID?">
<!ENTITY % head.content "TITLE & ISINDEX? & BASE? %head.extra">
<!ELEMENT HEAD O O  (%head.content) +(META|LINK)>
<!-- <HEAD>     Document head
                文書頭部        -->
<!ELEMENT TITLE - -  (#PCDATA)*  -(META|LINK)>
<!ATTLIST TITLE
        %SDAFORM; "Ti"    >
<!-- <TITLE>    Title of document
                文書の題          -->
<!ELEMENT LINK - O EMPTY>
<!ATTLIST LINK
        HREF CDATA #REQUIRED
        %linkExtraAttributes;
        %SDAPREF; "Linked to : #AttVal (TITLE) (URN) (HREF)>"    >
<!-- <LINK>             Link from this document
                        この文書からのリンク                    -->
<!-- <LINK HREF="...">  Address of link destination
                        リンク終点の番地                        -->
<!-- <LINK URN="...">   Lasting name of destination
                        終点の究極名                            -->
<!-- <LINK REL=...>     Relationship to destination
                        終点への関係                            -->
<!-- <LINK REV=...>     Relationship of destination to this
                        終点のこちらへの関係                    -->
<!-- <LINK TITLE="..."> Title of destination (advisory)
                        終点の題 (ヒント)                       -->
<!-- <LINK METHODS="..."> Operations allowed (advisory)
                        認められる演算 (ヒント)                 -->
<!ELEMENT ISINDEX - O EMPTY>
<!ATTLIST ISINDEX
        %SDAPREF;
   "<Para>[Document is indexed/searchable.]</Para>">
<!-- <ISINDEX>          Document is a searchable index
                        文書は検索可能索引です                  -->
<!ELEMENT BASE - O EMPTY>
<!ATTLIST BASE
        HREF CDATA #REQUIRED     >
<!-- <BASE>             Base context document
                        基底文脈文書                            -->
<!-- <BASE HREF="...">  Address for this document
                        この文書の番地                          -->
<!ELEMENT NEXTID - O EMPTY>
<!ATTLIST NEXTID
        N CDATA #REQUIRED     >
<!-- <NEXTID>           Next ID to use for link name
                        リンク名に使用する次の番地              -->
<!-- <NEXTID N=...>     Next ID to use for link name
                        リンク名に使用する次の番地              -->
<!ELEMENT META - O EMPTY>
<!ATTLIST META
        HTTP-EQUIV  NAME    #IMPLIED
        NAME        NAME    #IMPLIED
        CONTENT     CDATA   #REQUIRED    >
<!-- <META>                     Generic Meta-information
                                一般メタ情報                    -->
<!-- <META HTTP-EQUIV=...>      HTTP response header name
                                HTTP 応答頭名                   -->
<!-- <META NAME=...>            Meta-information name
                                メタ情報名                      -->
<!-- <META CONTENT="...">       Associated information
                                関連付けられた情報              -->
<!--======= Document Structure =================-->
<![ %HTML.Deprecated [
        <!ENTITY % html.content "HEAD, BODY, PLAINTEXT?">
]]>
<!ENTITY % html.content "HEAD, BODY">
<!ELEMENT HTML O O  (%html.content)>
<!ENTITY % version.attr "VERSION CDATA #FIXED '%HTML.Version;'">
<!ATTLIST HTML
        %version.attr;
        %SDAFORM; "Book"
        >
<!-- <HTML>                     HTML Document
                                HTML 文書       -->
** 9.2. Strict HTML DTD
>   This document type declaration refers to the HTML DTD with the
`HTML.Recommended' entity defined as `INCLUDE' rather than IGNORE;
that is, it refers to the more structurally rigid definition of HTML.
この文書型宣言は HTML DTD を
[CODE(SGML)[HTML.Recommended]] 実体を [CODE(SGML)[[[IGNORE]]]]
ではなく [CODE(SGML)[[[INCLUDE]]]] で定義して参照します。
つまり、 HTML のより構造的に厳密な定義を参照します。
[CODE(SGML)[]]
<!--    html-s.dtd
        Document Type Definition for the HyperText Markup Language
        with strict validation (HTML Strict DTD).
        $Id: html-s.dtd,v 1.3 1995/06/02 18:55:46 connolly Exp $
        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->
<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Strict//EN"
        -- Typical usage:
            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Strict//EN">
            <html>
            ...
            </html>
        --
        >
<!-- Feature Test Entities -->
<!ENTITY % HTML.Recommended "INCLUDE">
<!ENTITY % html PUBLIC "-//IETF//DTD HTML 2.0//EN">
%html;
]PRE]


** 9.3. Level 1 HTML DTD

> This document type declaration refers to the HTML DTD with the
`HTML.Forms' entity defined as `IGNORE' rather than `INCLUDE'.
Documents which contain <FORM> elements do not conform to this DTD,
and must use the level 2 DTD.

この文書型宣言は HTML DTD を
[CODE(SGML)[HTML.Forms]] 実体を [CODE(SGML)[[[INCLUDE]]]]
ではなく [CODE(SGML)[[[IGNORE]]]] で定義して参照します。
[CODE(HTMLe)[form]] 要素を含む文書はこの DTD
に適合せず、水準 2 DTD を使用しなければなりません。

[PRE(SGML)[
<!--    html-1.dtd
        Document Type Definition for the HyperText Markup Language
        with Level 1 Extensions (HTML Level 1 DTD).
        $Id: html-1.dtd,v 1.2 1995/03/29 18:53:10 connolly Exp $
        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://info.cern.ch/hypertext/WWW/MarkUp/MarkUp.html
-->
<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Level 1//EN"
        -- Typical usage:
            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Level 1//EN">
            <html>
            ...
            </html>
        --
        >
<!-- Feature Test Entities -->
<!ENTITY % HTML.Forms "IGNORE">
<!ENTITY % html PUBLIC "-//IETF//DTD HTML 2.0//EN">
%html;
]PRE]


** 9.4. Strict Level 1 HTML DTD

> This document type declaration refers to the level 1 HTML DTD with
the `HTML.Recommended' entity defined as `INCLUDE' rather than
IGNORE; that is, it refers to the more structurally rigid definition
of HTML.

この文書型宣言は水準 1 HTML DTD に
[CODE(SGML)[HTML.Recommended]] 実体を [CODE(SGML)[[[IGNORE]]]]
ではなく [CODE(SGML)[[[INCLUDE]]]] と定義して参照します。
つまり、 HTML のより構造的に厳密な定義を参照します。

[PRE(HTML)[
<!--    html-1s.dtd
        Document Type Definition for the HyperText Markup Language
        Struct Level 1
        $Id: html-1s.dtd,v 1.3 1995/06/02 18:55:43 connolly Exp $
        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->
<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Strict Level 1//EN"
        -- Typical usage:
            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Strict Level 1//EN">
            <html>
            ...
            </html>
        --
        >
<!-- Feature Test Entities -->
<!ENTITY % HTML.Recommended "INCLUDE">
<!ENTITY % html-1 PUBLIC "-//IETF//DTD HTML 2.0 Level 1//EN">
%html-1;
]PRE]


** 9.5. SGML Declaration for HTML

> This is the SGML Declaration for HyperText Markup Language.

これはハイパーテキスト・マーク付け言語の SGML 宣言です。

[PRE(SGML)[
<!SGML  "ISO 8879:1986"
--
        SGML Declaration for HyperText Markup Language (HTML).
--
CHARSET
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version
                   (IRV)//ESC 2/5 4/0"
         DESCSET  0   9   UNUSED
                  9   2   9
                  11  2   UNUSED
                  13  1   13
                  14  18  UNUSED
                  32  95  32
                  127 1   UNUSED
     BASESET   "ISO Registration Number 100//CHARSET
                ECMA-94 Right Part of
                Latin Alphabet Nr. 1//ESC 2/13 4/1"
         DESCSET  128  32   UNUSED
                  160  96    32
CAPACITY        SGMLREF
                TOTALCAP        150000
                GRPCAP          150000
                ENTCAP          150000
SCOPE    DOCUMENT
SYNTAX
         SHUNCHAR CONTROLS 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
                 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 127
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version
                   (IRV)//ESC 2/5 4/0"
         DESCSET  0 128 0
         FUNCTION
                  RE          13
                  RS          10
                  SPACE       32
                  TAB SEPCHAR  9
         NAMING   LCNMSTRT ""
                  UCNMSTRT ""
                  LCNMCHAR ".-"
                  UCNMCHAR ".-"
                  NAMECASE GENERAL YES
                           ENTITY  NO
         DELIM    GENERAL  SGMLREF
                  SHORTREF SGMLREF
         NAMES    SGMLREF
         QUANTITY SGMLREF
                  ATTSPLEN 2100
                  LITLEN   1024
                  NAMELEN  72    -- somewhat arbitrary; taken from
                                internet line length conventions --
                  PILEN    1024
                  TAGLVL   100
                  TAGLEN   2100
                  GRPGTCNT 150
                  GRPCNT   64
FEATURES
  MINIMIZE
    DATATAG  NO
    OMITTAG  YES
    RANK     NO
    SHORTTAG YES
  LINK
    SIMPLE   NO
    IMPLICIT NO
    EXPLICIT NO
  OTHER
    CONCUR   NO
    SUBDOC   NO
    FORMAL   YES
  APPINFO    "SDA"  -- conforming SGML Document Access application
                    --
>
<!--
        $Id: html.decl,v 1.17 1995/06/08 14:59:32 connolly Exp $
        Author: Daniel W. Connolly <connolly@@w3.org>
        See also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
 -->
]PRE]


** 9.6. Sample SGML Open Entity Catalog for HTML

> The SGML standard describes an "entity manager" as the portion or
component of an SGML system that maps SGML entities into the actual
storage model (e.g., the file system). The standard itself does not
define a particular mapping methodology or notation.

SGML 規格は SGML システムの部分または構成部品で SGML 実体を実際の蓄積模型
(例えばファイル・システム) に写像する「実体管理器」
を説明しています。 SGML 規格自体は特定の写像方式や記法を定義していません。

> To assist the interoperability among various SGML tools and systems,
the SGML Open consortium has passed a technical resolution that
defines a format for an application-independent entity catalog that
maps external identifiers and/or entity names to file names.

種々の SGML 工具・システム間の相互運用性の補助のため、
SGML Open consortium は外部識別子[及び/又は]]実体名をファイル名に写像する、
応用非依存の実体型録の書式を定義する技術解決を出しています。

> Each entry in the catalog associates a storage object identifier
(such as a file name) with information about the external entity that
appears in the SGML document. In addition to entries that associate
public identifiers, a catalog entry can associate an entity name with
a storage object identifier. For example, the following are possible
catalog entries:

型録の各項目は蓄積物体識別子 (ファイル名など) 
と SGML 文書に出現する外部実体についての情報を関連付けます。
カタログ項目は公開識別子の他、実体名も蓄積物体識別子に関連付けることができます。
例えば、次が考えられる型録項目です。

[PRE[
        -- catalog: SGML Open style entity catalog for HTML --
        -- $Id: catalog,v 1.3 1995/09/21 23:30:23 connolly Exp $ --
        -- Ways to refer to Level 2: most general to most specific --
PUBLIC  "-//IETF//DTD HTML//EN"                 html.dtd
PUBLIC  "-//IETF//DTD HTML 2.0//EN"             html.dtd
PUBLIC  "-//IETF//DTD HTML Level 2//EN"         html.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Level 2//EN"     html.dtd
        -- Ways to refer to Level 1: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Level 1//EN"         html-1.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Level 1//EN"     html-1.dtd
        -- Ways to refer to
                 Strict Level 2: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Strict//EN"                  html-s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict//EN"              html-s.dtd
PUBLIC  "-//IETF//DTD HTML Strict Level 2//EN"          html-s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict Level 2//EN"      html-s.dtd
        -- Ways to refer to
                 Strict Level 1: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Strict Level 1//EN"          html-1s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict Level 1//EN"      html-1s.dtd
        -- ISO latin 1 entity set for HTML --
PUBLIC  "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML" ISOlat1\
sgml
]PRE]


** 9.7. Character Entity Sets

> The HTML DTD defines the following entities. They represent
particular graphic characters which have special meanings in places
in the markup, or may not be part of the character set available to
the writer.

HTML DTD は次の実体を定義しています。
これらの実体はマークで特別な意味を持つ図形文字や筆者が利用できる文字集合の一部でないかもしれない図形文字を表現します。


*** 9.7.1. Numeric and Special Graphic Entity Set

> The following table lists each of the characters included from the
Numeric and Special Graphic entity set, along with its name, syntax
for use, and description. This list is derived from `ISO Standard
8879:1986//ENTITIES Numeric and Special Graphic//EN'.  However, HTML
does not include for the entire entity set -- only the entities
listed below are included.

次の表は、数値および特殊図形実体集合から取込んだ文字を、
その名前と使用する構文、説明と共に示します。
この表は [CODE(SGML)[ISO 8879:1986//ENTITIES Numeric and Special Graphic//EN]]
に由来します。しかし、 HTML はこの実体集合全体を含んでいません。
次に挙げた実体だけを含みます。

>
,GLYPH	,NAME	,SYNTAX	,DESCRIPTION
,<	,lt	,&lt;	,Less than sign
,>	,gt	,&gt;	,Greater than signn
,&	,amp	,&amp;	,Ampersand
,


*** 9.7.2. ISO Latin 1 Character Entity Set

> The following public text lists each of the characters specified in
the Added Latin 1 entity set, along with its name, syntax for use,
and description. This list is derived from ISO Standard
8879:1986//ENTITIES Added Latin 1//EN. HTML includes the entire
entity set.

次の公開文は追加 Latin 1 実体集合で規定された文字を、
その名前と使用する構文、説明と共に示します。
これは [SAMP(SGML)[ISO 8879:1986//ENTITIES Added Latin 1//EN]]
に由来し、実体集合全体を含んでいます。

>
[PRE(SGML)[
<!-- (C) International Organization for Standardization 1986
     Permission to copy in any form is granted for use with
     conforming SGML systems and applications as defined in
     ISO 8879, provided this notice is included in all copies.
-->
<!-- Character entity set. Typical invocation:
     <!ENTITY % ISOlat1 PUBLIC
       "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML">
     %ISOlat1;
-->
<!--    Modified for use in HTML
        $Id: ISOlat1.sgml,v 1.2 1994/11/30 23:45:12 connolly Exp $ -->
<!ENTITY AElig  CDATA "&#198;" -- capital AE diphthong (ligature) -->
<!ENTITY Aacute CDATA "&#193;" -- capital A, acute accent -->
<!ENTITY Acirc  CDATA "&#194;" -- capital A, circumflex accent -->
<!ENTITY Agrave CDATA "&#192;" -- capital A, grave accent -->
<!ENTITY Aring  CDATA "&#197;" -- capital A, ring -->
<!ENTITY Atilde CDATA "&#195;" -- capital A, tilde -->
<!ENTITY Auml   CDATA "&#196;" -- capital A, dieresis or umlaut mark -->
<!ENTITY Ccedil CDATA "&#199;" -- capital C, cedilla -->
<!ENTITY ETH    CDATA "&#208;" -- capital Eth, Icelandic -->
<!ENTITY Eacute CDATA "&#201;" -- capital E, acute accent -->
<!ENTITY Ecirc  CDATA "&#202;" -- capital E, circumflex accent -->
<!ENTITY Egrave CDATA "&#200;" -- capital E, grave accent -->
<!ENTITY Euml   CDATA "&#203;" -- capital E, dieresis or umlaut mark -->
<!ENTITY Iacute CDATA "&#205;" -- capital I, acute accent -->
<!ENTITY Icirc  CDATA "&#206;" -- capital I, circumflex accent -->
<!ENTITY Igrave CDATA "&#204;" -- capital I, grave accent -->
<!ENTITY Iuml   CDATA "&#207;" -- capital I, dieresis or umlaut mark -->
<!ENTITY Ntilde CDATA "&#209;" -- capital N, tilde -->
<!ENTITY Oacute CDATA "&#211;" -- capital O, acute accent -->
<!ENTITY Ocirc  CDATA "&#212;" -- capital O, circumflex accent -->
<!ENTITY Ograve CDATA "&#210;" -- capital O, grave accent -->
<!ENTITY Oslash CDATA "&#216;" -- capital O, slash -->
<!ENTITY Otilde CDATA "&#213;" -- capital O, tilde -->
<!ENTITY Ouml   CDATA "&#214;" -- capital O, dieresis or umlaut mark -->
<!ENTITY THORN  CDATA "&#222;" -- capital THORN, Icelandic -->
<!ENTITY Uacute CDATA "&#218;" -- capital U, acute accent -->
<!ENTITY Ucirc  CDATA "&#219;" -- capital U, circumflex accent -->
<!ENTITY Ugrave CDATA "&#217;" -- capital U, grave accent -->
<!ENTITY Uuml   CDATA "&#220;" -- capital U, dieresis or umlaut mark -->
<!ENTITY Yacute CDATA "&#221;" -- capital Y, acute accent -->
<!ENTITY aacute CDATA "&#225;" -- small a, acute accent -->
<!ENTITY acirc  CDATA "&#226;" -- small a, circumflex accent -->
<!ENTITY aelig  CDATA "&#230;" -- small ae diphthong (ligature) -->
<!ENTITY agrave CDATA "&#224;" -- small a, grave accent -->
<!ENTITY aring  CDATA "&#229;" -- small a, ring -->
<!ENTITY atilde CDATA "&#227;" -- small a, tilde -->
<!ENTITY auml   CDATA "&#228;" -- small a, dieresis or umlaut mark -->
<!ENTITY ccedil CDATA "&#231;" -- small c, cedilla -->
<!ENTITY eacute CDATA "&#233;" -- small e, acute accent -->
<!ENTITY ecirc  CDATA "&#234;" -- small e, circumflex accent -->
<!ENTITY egrave CDATA "&#232;" -- small e, grave accent -->
<!ENTITY eth    CDATA "&#240;" -- small eth, Icelandic -->
<!ENTITY euml   CDATA "&#235;" -- small e, dieresis or umlaut mark -->
<!ENTITY iacute CDATA "&#237;" -- small i, acute accent -->
<!ENTITY icirc  CDATA "&#238;" -- small i, circumflex accent -->
<!ENTITY igrave CDATA "&#236;" -- small i, grave accent -->
<!ENTITY iuml   CDATA "&#239;" -- small i, dieresis or umlaut mark -->
<!ENTITY ntilde CDATA "&#241;" -- small n, tilde -->
<!ENTITY oacute CDATA "&#243;" -- small o, acute accent -->
<!ENTITY ocirc  CDATA "&#244;" -- small o, circumflex accent -->
<!ENTITY ograve CDATA "&#242;" -- small o, grave accent -->
<!ENTITY oslash CDATA "&#248;" -- small o, slash -->
<!ENTITY otilde CDATA "&#245;" -- small o, tilde -->
<!ENTITY ouml   CDATA "&#246;" -- small o, dieresis or umlaut mark -->
<!ENTITY szlig  CDATA "&#223;" -- small sharp s, German (sz ligature)->
<!ENTITY thorn  CDATA "&#254;" -- small thorn, Icelandic -->
<!ENTITY uacute CDATA "&#250;" -- small u, acute accent -->
<!ENTITY ucirc  CDATA "&#251;" -- small u, circumflex accent -->
<!ENTITY ugrave CDATA "&#249;" -- small u, grave accent -->
<!ENTITY uuml   CDATA "&#252;" -- small u, dieresis or umlaut mark -->
<!ENTITY yacute CDATA "&#253;" -- small y, acute accent -->
<!ENTITY yuml   CDATA "&#255;" -- small y, dieresis or umlaut mark -->
]PRE]


* 10. Security Considerations

> Anchors, embedded images, and all other elements which contain URIs
as parameters may cause the URI to be dereferenced in response to
user input. In this case, the security considerations of [URL] apply.

アンカー、埋込み画像、その他すべての URI
をを引数として持つ要素は、利用者の入力への応答で URI
の参照解決を引起こすかもしれません。この場合、
[[RFC 1738]] の保安についての考察が適用されます。

> The widely deployed methods for submitting forms requests -- HTTP and
SMTP -- provide little assurance of confidentiality.  Information
providers who request sensitive information via forms -- especially
by way of the `PASSWORD' type input field (see 8.1.2, "Input Field:
INPUT") -- should be aware and make their users aware of the lack of
confidentiality.

フォーム要求を提出する方法として広く用いられている HTTP
や SMTP は、機密性がほとんど保証されていません。
フォームで繊細な情報を世給する情報提供者は、
特に [CODE(HTML)[password]] 型入力欄を使う場合は、
機密性なきことに注意すると共に、利用者にも注意を促すべきです。


* 11. References

[PRE[
    [URI]
            Berners-Lee, T., "Universal Resource Identifiers in WWW:
            A Unifying Syntax for the Expression of Names and
            Addresses of Objects on the Network as used in the
            World- Wide Web",  RFC 1630, CERN, June 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1630.txt>
]PRE]

[PRE[
    [URL]
            Berners-Lee, T., Masinter, L., and M. McCahill, "Uniform
            Resource Locators (URL)", RFC 1738, CERN, Xerox PARC,
            University of Minnesota, December 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1738.txt>
]PRE]

[PRE[
    [HTTP]
            Berners-Lee, T., Fielding, R., and H. Frystyk Nielsen,
            "Hypertext Transfer Protocol - HTTP/1.0", Work in
            Progress, MIT, UC Irvine, CERN, March 1995.
]PRE]

[PRE[
    [MIME]
            Borenstein, N., and N. Freed. "MIME (Multipurpose
            Internet Mail Extensions) Part One: Mechanisms for
            Specifying and Describing the Format of Internet Message
            Bodies", RFC 1521, Bellcore, Innosoft, September 1993.
            <URL:ftp://ds.internic.net/rfc/rfc1521.txt>
]PRE]

[PRE[
    [RELURL]
            Fielding, R., "Relative Uniform Resource Locators", RFC
            1808, June 1995
            <URL:ftp://ds.internic.net/rfc/rfc1808.txt>
]PRE]

[PRE[
    [GOLD90]
            Goldfarb, C., "The SGML Handbook", Y. Rubinsky, Ed.,
            Oxford University Press, 1990.
]PRE]

[PRE[
    [DEXTER]
            Frank Halasz and Mayer Schwartz, "The Dexter Hypertext
            Reference Model", Communications of the ACM, pp.
            30-39, vol. 37 no. 2, Feb 1994.
]PRE]

[PRE[
    [IMEDIA]
            Postel, J., "Media Type Registration Procedure",
            RFC 1590, USC/Information Sciences Institute, March 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1590.txt>
]PRE]

[PRE[
    [IANA]
            Reynolds, J., and J. Postel, "Assigned Numbers", STD 2,
            RFC 1700, USC/Information Sciecnes Institute, October
            1994.  <URL:ftp://ds.internic.net/rfc/rfc1700.txt>
]PRE]

[PRE[
    [SQ91]
            SoftQuad. "The SGML Primer", 3rd ed., SoftQuad Inc.,
            1991. <URL:http://www.sq.com/>
]PRE]

[PRE[
    [ISO-646]
            ISO/IEC 646:1991 Information technology -- ISO 7-bit
            coded character set for information interchange
            <URL:http://www.iso.ch/cate/d4777.html>
]PRE]

[PRE[
    [ISO-10646]
            ISO/IEC 10646-1:1993 Information technology -- Universal
            Multiple-Octet Coded Character Set (UCS) -- Part 1:
            Architecture and Basic Multilingual Plane
            <URL:http://www.iso.ch/cate/d18741.html>
]PRE]

[PRE[
    [ISO-8859-1]
            ISO 8859. International Standard -- Information
            Processing -- 8-bit Single-Byte Coded Graphic Character
            Sets -- Part 1: Latin Alphabet No. 1, ISO 8859-1:1987.
            <URL:http://www.iso.ch/cate/d16338.html>
]PRE]

[PRE[
    [SGML]
            ISO 8879. Information Processing -- Text and Office
            Systems - Standard Generalized Markup Language (SGML),
            1986. <URL:http://www.iso.ch/cate/d16387.html>
]PRE]


* 12. Acknowledgments

> The HTML document type was designed by Tim Berners-Lee at CERN as
part of the 1990 World Wide Web project. In 1992, Dan Connolly wrote
the HTML Document Type Definition (DTD) and a brief HTML
specification.

HTML 文書型は CERN の Tim Berners-Lee により
1990 World Wide Web 計画の一部として設計されました。
1992年に、 Dan Connolly が HTML 文書型定義と簡単な HTML 仕様書を書きました。

> Since 1993, a wide variety of Internet participants have contributed
to the evolution of HTML, which has included the addition of in-line
images introduced by the NCSA Mosaic software for WWW. Dave Raggett
played an important role in deriving the forms material from the
HTML+ specification.

1993年から、非常に様々なインターネット関係者が HTML
の発展に貢献してきました。 NCSA Mosaic ソフトウェアが WWW
に導入した行内画像の追加もこれに含みます。 Dave Raggett
はフォーム関係を HTML+ 仕様書から派生させるのに重要な役割を果たしました。

> Dan Connolly and Karen Olson Muldrow rewrote the HTML Specification
in 1994. The document was then edited by the HTML working group as a
whole, with updates being made by Eric Schieler, Mike Knezovich, and
Eric W. Sink at Spyglass, Inc.  Finally, Roy Fielding restructured
the entire draft into its current form.

Dan Connolly と Karen Olson Muldrow は1994年に HTML
仕様書を書き直しました。その文書はその後全体的に HTML
作業部会で編集し、 Eric Schieler, Mike Knezovich,
Spyglass, Inc. の Eric W. Sink が更新を行いました。
最後に、 Roy Fielding が原案全体を現在の形に再構築しました。

> Special thanks to the many active participants in the HTML working
group, too numerous to list individually, without whom there would be
no standards process and no standard. That this document approaches
its objective of carefully converging a description of current
practice and formalization of HTML's relationship to SGML is a
tribute to their effort.

HTML 作業部会の多くの活発な参加者には、特に感謝致します。
数が多過ぎるので個々の名前を書き連ねることはしませんが、
もし参加して下さらなければ標準化過程もこの規格もなかったことでしょう。
この文書が HTML の現状の記述を注意深くまとめ、
SGML との関係を公式化するというもくてきを達成できたのは、
ひとえにみなさまのご尽力によるものであります。


** 12.1. Authors' Addresses

>
[PRE[
   Tim Berners-Lee
   Director, W3 Consortium
   MIT Laboratory for Computer Science
   545 Technology Square
   Cambridge, MA 02139, U.S.A.
>
   Phone: +1 (617) 253 9670
   Fax: +1 (617) 258 8682
   EMail: timbl@@w3.org
]PRE]

>
[PRE[
   Daniel W. Connolly
   Research Technical Staff, W3 Consortium
   MIT Laboratory for Computer Science
   545 Technology Square
   Cambridge, MA 02139, U.S.A.
>
   Phone: +1 (617) 258 8682
   EMail: connolly@@w3.org
   URI: http://www.w3.org/hypertext/WWW/People/Connolly/
]PRE]


* 13. The HTML Coded Character Set

> This list details the code positions and characters of the HTML
document character set, specified in 9.5, "SGML Declaration for
HTML". This coded character set is based on [ISO-8859-1].

これは、 HTML 文書文字集合の符号位置と文字の詳細を並べたものです。
この符号化文字集合は [[ISO/IEC 8859]]-1 に基づいています。

>
[PRE[
    REFERENCE       DESCRIPTION
    --------------  -----------
    &#00; - &#08;   Unused
    &#09;           Horizontal tab
    &#10;           Line feed
    &#11; - &#12;   Unused
    &#13;           Carriage Return
    &#14; - &#31;   Unused
    &#32;           Space
    &#33;           Exclamation mark
    &#34;           Quotation mark
    &#35;           Number sign
    &#36;           Dollar sign
    &#37;           Percent sign
    &#38;           Ampersand
    &#39;           Apostrophe
    &#40;           Left parenthesis
    &#41;           Right parenthesis
    &#42;           Asterisk
    &#43;           Plus sign
    &#44;           Comma
    &#45;           Hyphen
    &#46;           Period (fullstop)
    &#47;           Solidus (slash)
    &#48; - &#57;   Digits 0-9
    &#58;           Colon
    &#59;           Semi-colon
    &#60;           Less than
    &#61;           Equals sign
    &#62;           Greater than
    &#63;           Question mark
    &#64;           Commercial at
    &#65; - &#90;   Letters A-Z
    &#91;           Left square bracket
    &#92;           Reverse solidus (backslash)
    &#93;           Right square bracket
    &#94;           Caret
    &#95;           Horizontal bar (underscore)
    &#96;           Acute accent
    &#97; - &#122;  Letters a-z
    &#123;          Left curly brace
    &#124;          Vertical bar
    &#125;          Right curly brace
    &#126;          Tilde
    &#127; - &#159; Unused
    &#160;          Non-breaking Space
    &#161;          Inverted exclamation
    &#162;          Cent sign
    &#163;          Pound sterling
    &#164;          General currency sign
    &#165;          Yen sign
    &#166;          Broken vertical bar
    &#167;          Section sign
    &#168;          Umlaut (dieresis)
    &#169;          Copyright
    &#170;          Feminine ordinal
    &#171;          Left angle quote, guillemotleft
    &#172;          Not sign
    &#173;          Soft hyphen
    &#174;          Registered trademark
    &#175;          Macron accent
    &#176;          Degree sign
    &#177;          Plus or minus
    &#178;          Superscript two
    &#179;          Superscript three
    &#180;          Acute accent
    &#181;          Micro sign
    &#182;          Paragraph sign
    &#183;          Middle dot
    &#184;          Cedilla
    &#185;          Superscript one
    &#186;          Masculine ordinal
    &#187;          Right angle quote, guillemotright
    &#188;          Fraction one-fourth
    &#189;          Fraction one-half
    &#190;          Fraction three-fourths
    &#191;          Inverted question mark
    &#192;          Capital A, grave accent
    &#193;          Capital A, acute accent
    &#194;          Capital A, circumflex accent
    &#195;          Capital A, tilde
    &#196;          Capital A, dieresis or umlaut mark
    &#197;          Capital A, ring
    &#198;          Capital AE dipthong (ligature)
    &#199;          Capital C, cedilla
    &#200;          Capital E, grave accent
    &#201;          Capital E, acute accent
    &#202;          Capital E, circumflex accent
    &#203;          Capital E, dieresis or umlaut mark
    &#204;          Capital I, grave accent
    &#205;          Capital I, acute accent
    &#206;          Capital I, circumflex accent
    &#207;          Capital I, dieresis or umlaut mark
    &#208;          Capital Eth, Icelandic
    &#209;          Capital N, tilde
    &#210;          Capital O, grave accent
    &#211;          Capital O, acute accent
    &#212;          Capital O, circumflex accent
    &#213;          Capital O, tilde
    &#214;          Capital O, dieresis or umlaut mark
    &#215;          Multiply sign
    &#216;          Capital O, slash
    &#217;          Capital U, grave accent
    &#218;          Capital U, acute accent
    &#219;          Capital U, circumflex accent
    &#220;          Capital U, dieresis or umlaut mark
    &#221;          Capital Y, acute accent
    &#222;          Capital THORN, Icelandic
    &#223;          Small sharp s, German (sz ligature)
    &#224;          Small a, grave accent
    &#225;          Small a, acute accent
    &#226;          Small a, circumflex accent
    &#227;          Small a, tilde
    &#228;          Small a, dieresis or umlaut mark
    &#229;          Small a, ring
    &#230;          Small ae dipthong (ligature)
    &#231;          Small c, cedilla
    &#232;          Small e, grave accent
    &#233;          Small e, acute accent
    &#234;          Small e, circumflex accent
    &#235;          Small e, dieresis or umlaut mark
    &#236;          Small i, grave accent
    &#237;          Small i, acute accent
    &#238;          Small i, circumflex accent
    &#239;          Small i, dieresis or umlaut mark
    &#240;          Small eth, Icelandic
    &#241;          Small n, tilde
    &#242;          Small o, grave accent
    &#243;          Small o, acute accent
    &#244;          Small o, circumflex accent
    &#245;          Small o, tilde
    &#246;          Small o, dieresis or umlaut mark
    &#247;          Division sign
    &#248;          Small o, slash
    &#249;          Small u, grave accent
    &#250;          Small u, acute accent
    &#251;          Small u, circumflex accent
    &#252;          Small u, dieresis or umlaut mark
    &#253;          Small y, acute accent
    &#254;          Small thorn, Icelandic
    &#255;          Small y, dieresis or umlaut mark
]PRE]


** 14. Proposed Entities

> The HTML DTD references the "Added Latin 1" entity set, which only
supplies named entities for a subset of the non-ASCII characters in
[ISO-8859-1], namely the accented characters. The following entities
should be supported so that all ISO 8859-1 characters may only be
referenced symbolically. The names for these entities are taken from
the appendixes of [SGML].

HTML DTD は「追加 Latin 1」実体集合を参照していますが、
この実体集合は ISO/IEC 8859-1 の非 ASCII の部分集合、
というかアクセント付き文字の分しか名前付き実体を用意していません。
次の実体は ISO/IEC 8859-1 
のすべての文字を記号的に参照できるようにするために対応するべきものです。
これらの実体の名前は [[ISO 8879]] の附属書から取りました。

>
[PRE(SGML)[
    <!ENTITY nbsp   CDATA "&#160;" -- no-break space -->
    <!ENTITY iexcl  CDATA "&#161;" -- inverted exclamation mark -->
    <!ENTITY cent   CDATA "&#162;" -- cent sign -->
    <!ENTITY pound  CDATA "&#163;" -- pound sterling sign -->
    <!ENTITY curren CDATA "&#164;" -- general currency sign -->
    <!ENTITY yen    CDATA "&#165;" -- yen sign -->
    <!ENTITY brvbar CDATA "&#166;" -- broken (vertical) bar -->
    <!ENTITY sect   CDATA "&#167;" -- section sign -->
    <!ENTITY uml    CDATA "&#168;" -- umlaut (dieresis) -->
    <!ENTITY copy   CDATA "&#169;" -- copyright sign -->
    <!ENTITY ordf   CDATA "&#170;" -- ordinal indicator, feminine -->
    <!ENTITY laquo  CDATA "&#171;" -- angle quotation mark, left -->
    <!ENTITY not    CDATA "&#172;" -- not sign -->
    <!ENTITY shy    CDATA "&#173;" -- soft hyphen -->
    <!ENTITY reg    CDATA "&#174;" -- registered sign -->
    <!ENTITY macr   CDATA "&#175;" -- macron -->
    <!ENTITY deg    CDATA "&#176;" -- degree sign -->
    <!ENTITY plusmn CDATA "&#177;" -- plus-or-minus sign -->
    <!ENTITY sup2   CDATA "&#178;" -- superscript two -->
    <!ENTITY sup3   CDATA "&#179;" -- superscript three -->
    <!ENTITY acute  CDATA "&#180;" -- acute accent -->
    <!ENTITY micro  CDATA "&#181;" -- micro sign -->
    <!ENTITY para   CDATA "&#182;" -- pilcrow (paragraph sign) -->
    <!ENTITY middot CDATA "&#183;" -- middle dot -->
    <!ENTITY cedil  CDATA "&#184;" -- cedilla -->
    <!ENTITY sup1   CDATA "&#185;" -- superscript one -->
    <!ENTITY ordm   CDATA "&#186;" -- ordinal indicator, masculine -->
    <!ENTITY raquo  CDATA "&#187;" -- angle quotation mark, right -->
    <!ENTITY frac14 CDATA "&#188;" -- fraction one-quarter -->
    <!ENTITY frac12 CDATA "&#189;" -- fraction one-half -->
    <!ENTITY frac34 CDATA "&#190;" -- fraction three-quarters -->
    <!ENTITY iquest CDATA "&#191;" -- inverted question mark -->
    <!ENTITY Agrave CDATA "&#192;" -- capital A, grave accent -->
    <!ENTITY Aacute CDATA "&#193;" -- capital A, acute accent -->
    <!ENTITY Acirc  CDATA "&#194;" -- capital A, circumflex accent -->
    <!ENTITY Atilde CDATA "&#195;" -- capital A, tilde -->
    <!ENTITY Auml   CDATA "&#196;" -- capital A, dieresis or umlaut mark -->
    <!ENTITY Aring  CDATA "&#197;" -- capital A, ring -->
    <!ENTITY AElig  CDATA "&#198;" -- capital AE diphthong (ligature) -->
    <!ENTITY Ccedil CDATA "&#199;" -- capital C, cedilla -->
    <!ENTITY Egrave CDATA "&#200;" -- capital E, grave accent -->
    <!ENTITY Eacute CDATA "&#201;" -- capital E, acute accent -->
    <!ENTITY Ecirc  CDATA "&#202;" -- capital E, circumflex accent -->
    <!ENTITY Euml   CDATA "&#203;" -- capital E, dieresis or umlaut mark -->
    <!ENTITY Igrave CDATA "&#204;" -- capital I, grave accent -->
    <!ENTITY Iacute CDATA "&#205;" -- capital I, acute accent -->
    <!ENTITY Icirc  CDATA "&#206;" -- capital I, circumflex accent -->
    <!ENTITY Iuml   CDATA "&#207;" -- capital I, dieresis or umlaut mark -->
    <!ENTITY ETH    CDATA "&#208;" -- capital Eth, Icelandic -->
    <!ENTITY Ntilde CDATA "&#209;" -- capital N, tilde -->
    <!ENTITY Ograve CDATA "&#210;" -- capital O, grave accent -->
    <!ENTITY Oacute CDATA "&#211;" -- capital O, acute accent -->
    <!ENTITY Ocirc  CDATA "&#212;" -- capital O, circumflex accent -->
    <!ENTITY Otilde CDATA "&#213;" -- capital O, tilde -->
    <!ENTITY Ouml   CDATA "&#214;" -- capital O, dieresis or umlaut mark -->
    <!ENTITY times  CDATA "&#215;" -- multiply sign -->
    <!ENTITY Oslash CDATA "&#216;" -- capital O, slash -->
    <!ENTITY Ugrave CDATA "&#217;" -- capital U, grave accent -->
    <!ENTITY Uacute CDATA "&#218;" -- capital U, acute accent -->
    <!ENTITY Ucirc  CDATA "&#219;" -- capital U, circumflex accent -->
    <!ENTITY Uuml   CDATA "&#220;" -- capital U, dieresis or umlaut mark -->
    <!ENTITY Yacute CDATA "&#221;" -- capital Y, acute accent -->
    <!ENTITY THORN  CDATA "&#222;" -- capital THORN, Icelandic -->
    <!ENTITY szlig  CDATA "&#223;" -- small sharp s, German (sz ligature) -->
    <!ENTITY agrave CDATA "&#224;" -- small a, grave accent -->
    <!ENTITY aacute CDATA "&#225;" -- small a, acute accent -->
    <!ENTITY acirc  CDATA "&#226;" -- small a, circumflex accent -->
    <!ENTITY atilde CDATA "&#227;" -- small a, tilde -->
    <!ENTITY auml   CDATA "&#228;" -- small a, dieresis or umlaut mark -->
    <!ENTITY aring  CDATA "&#229;" -- small a, ring -->
    <!ENTITY aelig  CDATA "&#230;" -- small ae diphthong (ligature) -->
    <!ENTITY ccedil CDATA "&#231;" -- small c, cedilla -->
    <!ENTITY egrave CDATA "&#232;" -- small e, grave accent -->
    <!ENTITY eacute CDATA "&#233;" -- small e, acute accent -->
    <!ENTITY ecirc  CDATA "&#234;" -- small e, circumflex accent -->
    <!ENTITY euml   CDATA "&#235;" -- small e, dieresis or umlaut mark -->
    <!ENTITY igrave CDATA "&#236;" -- small i, grave accent -->
    <!ENTITY iacute CDATA "&#237;" -- small i, acute accent -->
    <!ENTITY icirc  CDATA "&#238;" -- small i, circumflex accent -->
    <!ENTITY iuml   CDATA "&#239;" -- small i, dieresis or umlaut mark -->
    <!ENTITY eth    CDATA "&#240;" -- small eth, Icelandic -->
    <!ENTITY ntilde CDATA "&#241;" -- small n, tilde -->
    <!ENTITY ograve CDATA "&#242;" -- small o, grave accent -->
    <!ENTITY oacute CDATA "&#243;" -- small o, acute accent -->
    <!ENTITY ocirc  CDATA "&#244;" -- small o, circumflex accent -->
    <!ENTITY otilde CDATA "&#245;" -- small o, tilde -->
    <!ENTITY ouml   CDATA "&#246;" -- small o, dieresis or umlaut mark -->
    <!ENTITY divide CDATA "&#247;" -- divide sign -->
    <!ENTITY oslash CDATA "&#248;" -- small o, slash -->
    <!ENTITY ugrave CDATA "&#249;" -- small u, grave accent -->
    <!ENTITY uacute CDATA "&#250;" -- small u, acute accent -->
    <!ENTITY ucirc  CDATA "&#251;" -- small u, circumflex accent -->
    <!ENTITY uuml   CDATA "&#252;" -- small u, dieresis or umlaut mark -->
    <!ENTITY yacute CDATA "&#253;" -- small y, acute accent -->
    <!ENTITY thorn  CDATA "&#254;" -- small thorn, Icelandic -->
    <!ENTITY yuml   CDATA "&#255;" -- small y, dieresis or umlaut mark -->
]PRE]


* memo

[1] この RFC は [[RFC 2854]] により廃止されました。

[2]
[CITE@@en[RFC 1866 - Hypertext Markup Language - 2.0]] ([CODE[2007-01-14 13:27:28 +09:00]] 版) <http://tools.ietf.org/html/rfc1866>
([[名無しさん]])

[3]
http://www.surveyincomesystem.com/wondertext.php
([[Katie Williams]] [katiewilliams@@gmail.com] [WEAK[2007-04-06 08:32:00 +00:00]])

@


1.2
log
@auto-committed
@
text
@d5354 1
a5354 1
[CITE@@en[RFC 1866 - Hypertext Markup Language - 2.0]] ([TIME[2007-01-14 13:27:28 +09:00]] 版) <http://tools.ietf.org/html/rfc1866>
d5356 4
@


1.1
log
@auto-committed
@
text
@d1 5356
a5356 5216
'''Hypertext Markup Language - 2.0'''
- Network Working Group      
- Request for Comments: 1866 
- Category: Standards Track                                  
- T. Berners-Lee
- MIT/W3C
- D. Connolly
-                                                           November 1995

* Status of this Memo
>   This document specifies an Internet standards track protocol for the
Internet community, and requests discussion and suggestions for
improvements.  Please refer to the current edition of the "Internet
Official Protocol Standards" (STD 1) for the standardization state
and status of this protocol.  Distribution of this memo is unlimited.

* Abstract

>   The Hypertext Markup Language (HTML) is a simple markup language used
to create hypertext documents that are platform independent. HTML
documents are SGML documents with generic semantics that are
appropriate for representing information from a wide range of
domains. HTML markup can represent hypertext news, mail,
documentation, and hypermedia; menus of options; database query
results; simple structured documents with in-lined graphics; and
hypertext views of existing bodies of information.

ハイパーテキスト・マーク付け言語 (HTML) は、
ハイパーテキスト文書を作成するのに使用する、
環境過般の単純なマーク付け言語です。 HTML 文書は、
広範囲の種類の情報を表現するのに適切な一般的意味を持つ
SGML 文書です。 HTML マークはハイパーテキスト・ニュース,
メイル, 文書, ハイパー媒体 (選択肢のメニュー、
データベース照会結果、行内図形入り単純構造化文書、
既存情報本体のハイパーテキスト表示) を表現することができます。

> HTML has been in use by the World Wide Web (WWW) global information
initiative since 1990. This specification roughly corresponds to the
capabilities of HTML in common use prior to June 1994. HTML is an
application of ISO Standard 8879:1986 Information Processing Text and
Office Systems; Standard Generalized Markup Language (SGML).

HTML は 1990 年から World Wide Web (WWW)
大域情報活動で使用されています。この仕様書は大体
1994年6月までの HTML の広く使われている能力に対応します。
HTML は ISO 規格 8879:1986 情報処理文章および事務システム、
標準一般化マーク付け言語 (SGML) の応用です。

>   The "text/html" Internet Media Type (RFC 1590) and MIME Content Type
(RFC 1521) is defined by this specification.

[CODE(MIME)[text/html]] インターネット媒体型 ([[RFC 1590]])
および MIME 内容型 ([[RFC 1521]]) はこの仕様書で定義しています。

* Table of Contents
>
    1.     Introduction ........................................... 2
    1.1    Scope .................................................. 3
    1.2    Conformance ............................................ 3
    2.     Terms .................................................. 6
    3.     HTML as an Application of SGML .........................10
    3.1    SGML Documents .........................................10
    3.2    HTML Lexical Syntax ................................... 12
    3.3    HTML Public Text Identifiers .......................... 17
    3.4    Example HTML Document ................................. 17
    4.     HTML as an Internet Media Type ........................ 18
    4.1    text/html media type .................................. 18
    4.2    HTML Document Representation .......................... 19
    5.     Document Structure .................................... 20
    5.1    Document Element: HTML ................................ 21
    5.2    Head: HEAD ............................................ 21
    5.3    Body: BODY ............................................ 24
    5.4    Headings: H1 ... H6 ................................... 24
    5.5    Block Structuring Elements ............................ 25
    5.6    List Elements ......................................... 28
    5.7    Phrase Markup ......................................... 30
    5.8    Line Break: BR ........................................ 34
    5.9    Horizontal Rule: HR ................................... 34
    5.10   Image: IMG ............................................ 34
    6.     Characters, Words, and Paragraphs ..................... 35
    6.1    The HTML Document Character Set ....................... 36
    7.     Hyperlinks ............................................ 36
    7.1    Accessing Resources ................................... 37
    7.2    Activation of Hyperlinks .............................. 38
    7.3    Simultaneous Presentation of Image Resources .......... 38
    7.4    Fragment Identifiers .................................. 38
    7.5    Queries and Indexes ................................... 39
    7.6    Image Maps ............................................ 39
    8.     Forms ................................................. 40
    8.1    Form Elements ......................................... 40
    8.2    Form Submission ....................................... 45
    9.     HTML Public Text ...................................... 49
    9.1    HTML DTD .............................................. 49
    9.2    Strict HTML DTD ....................................... 61
    9.3    Level 1 HTML DTD ...................................... 62
    9.4    Strict Level 1 HTML DTD ............................... 63
    9.5    SGML Declaration for HTML ............................. 64
    9.6    Sample SGML Open Entity Catalog for HTML .............. 65
    9.7    Character Entity Sets ................................. 66
    10.    Security Considerations ............................... 69
    11.    References ............................................ 69
    12.    Acknowledgments ....................................... 71
    12.1   Authors' Addresses .................................... 71
    13.    The HTML Coded Character Set .......................... 72
    14.    Proposed Entities ..................................... 75

* 1. Introduction
>   The HyperText Markup Language (HTML) is a simple data format used to
create hypertext documents that are portable from one platform to
another. HTML documents are SGML documents with generic semantics
that are appropriate for representing information from a wide range
of domains.

ハイパーテキスト・マーク付け言語 (HTML) は、
ハイパーテキスト文書を作成するのに使用する、
環境過般の単純なデータ書式です。 HTML 文書は、
広範囲の種類の情報を表現するのに適切な一般的意味を持つ
SGML 文書です。

>   As HTML is an application of SGML, this specification assumes a
working knowledge of [SGML].

HTML は SGML の応用で、この仕様書は SGML
の知識があるものと想定しています。

** 1.1. Scope
>   HTML has been in use by the World-Wide Web (WWW) global information
initiative since 1990. Previously, informal documentation on HTML has
been available from a number of sources on the Internet. This
specification brings together, clarifies, and formalizes a set of
features that roughly corresponds to the capabilities of HTML in
common use prior to June 1994. A number of new features to HTML are
being proposed and experimented in the Internet community.

HTML は1990年から World Wide Web (WWW)
大域情報活動で使われてきました。以前は、非公式な HTML
についての文書がインターネットの数々の情報源から入手可能でした。
この仕様書は1994年6月までの HTML の広く使われている能力にまま相当する機能の集合をまとめて明確化・公式化しています。数々の HTML
の新しい機能がインターネット社会で提案・実験されています。

>   This document thus defines a HTML 2.0 (to distinguish it from the
previous informal specifications). Future (generally upwardly
compatible) versions of HTML with new features will be released with
higher version numbers.

この文書は (以前の非公式な仕様書と区別して) HTML 2.0 を定義します。
将来の (通常上位互換な) 版の新しい機能の入った HTML
はより大きな版番号で公開されることに成るでしょう。

>   HTML is an application of ISO Standard 8879:1986, "Information
Processing Text and Office Systems; Standard Generalized Markup
Language" (SGML). The HTML Document Type Definition (DTD) is a formal
definition of the HTML syntax in terms of SGML.

HTML は ISO 規格 8879:1986 [CITE[情報処理及び事務システム ― 標準一般化マーク付け言語]]
(SGML) の応用です。 HTML 文書型定義 (DTD)
は HTML 構文を SGML の言葉で公式に定義します。

>   This specification also defines HTML as an Internet Media
Type[IMEDIA] and MIME Content Type[MIME] called `text/html'. As such,
it defines the semantics of the HTML syntax and how that syntax
should be interpreted by user agents.

この仕様書は HTML を [CODE(MIME)[[[text/html]]]] というインターネット媒体型および
MIME 内容型としても定義します。
この仕様書は HTML 構文の意味と、
その構文をどう利用者エージェントが解釈するべきかを定義します。

** 1.2. Conformance
>   This specification governs the syntax of HTML documents and aspects
of the behavior of HTML user agents.

この仕様書は HTML 文書の構文と HTML
利用者エージェントの振る舞いについて規定します。

*** 1.2.1. Documents
>   A document is a conforming HTML document if:

文書は、次の条件を満たす時、適合 HTML 文書です。

>
-        * It is a conforming SGML document, and it conforms to the
HTML DTD (see 9.1, "HTML DTD").

適合 SGML 文書であって、 HTML DTD に適合すること。

>            NOTE - There are a number of syntactic idioms that
are not supported or are supported inconsistently in
some historical user agent implementations. These
idioms are identified in notes like this throughout
this specification.

備考: 古い利用者エージェント実装は対応していないか一貫せずに対応している数々の構文的語句があります。
そのような語句はこの仕様書ではこのように注記して示しています。

>        * It conforms to the application conventions in this
specification. For example, the value of the HREF attribute
of the <A> element must conform to the URI syntax.

この仕様書の応用表記法に適合すること。例えば、
[CODE(HTMLe)[a]] 要素の [CODE(HTMLa)[href]]
属性の値は URI 構文に適合しなければなりません。

>
-        * Its document character set includes [ISO-8859-1] and
agrees with [ISO-10646]; that is, each code position listed
in 13, "The HTML Coded Character Set" is included, and each
code position in the document character set is mapped to the
same character as [ISO-10646] designates for that code
position.

文書文字集合が [[ISO/IEC 8859]]-1 を含み、
[[ISO/IEC 10646]] と合致すること。すなわち、
[CITE[HTML 符号化文字集合]]に挙げた各符号位置を含み、
文書文字集合の各符号位置が ISO/IEC 10646 
がその符号位置に割当てた文字と同じ物に写像されること。

>            NOTE - The document character set is somewhat
independent of the character encoding scheme used to
represent a document. For example, the `ISO-2022-JP'
character encoding scheme can be used for HTML
documents, since its repertoire is a subset of the
[ISO-10646] repertoire. The critical distinction is
that numeric character references agree with
[ISO-10646] regardless of how the document is
encoded.

備考: 文書文字集合は文書を表現するのに使用する文字符号化方式とは独立なものです。
例えば、 [CODE(charset)[ISO-2022-JP]] 文字符号化方式は ISO/IEC 10646
レパートリの部分集合ですから、 HTML 文書に使用することができます。
大きな違いは、文書がどう符号化されているかに関わらず数値文字参照が
ISO/IEC 10646 に従うことです。

[INS[
訳注: [CODE(charset)[ISO-2022-JP]] レパートリが ISO/IEC 10646
レパートリの部分集合であることは自明ではありません
([[JIS X 0208]]-1978 などが問題)。
]INS]

*** 1.2.2. Feature Test Entities
>   The HTML DTD defines a standard HTML document type and several
variations, by way of feature test entities. Feature test entities
are declarations in the HTML DTD that control the inclusion or
exclusion of portions of the DTD.

HTML DTD は、機能試験実体を使って、標準 HTML 文書型と幾つかの変種を定義します。
機能試験実体は、 HTML DTD で宣言され、 DTD 
の部分の取込みや除外を制御するために使用します。

>
:    HTML.Recommended:
Certain features of the language are necessary for
compatibility with widespread usage, but they may
compromise the structural integrity of a document. This
feature test entity selects a more prescriptive document
type definition that eliminates those features. It is
set to `IGNORE' by default.

HTML のある機能は広く用いられている方法との互換のために必要ですが、
文書の構造的整合性を曲げてしまうかもしれません。
この機能試験実体は、そのような機能を除去したより規範的な文書型定義を選択します。
既定では [CODE(SGML)[IGNORE]] に設定されています。

>            For example, in order to preserve the structure of a
document, an editing user agent may translate HTML
documents to the recommended subset, or it may require
that the documents be in the recommended subset for import.

例えば、文書の構造を保持するために、
編集利用者エージェントは HTML 文書を推奨部分集合に翻訳して構いませんし、
輸入するためには文書が推奨部分集合によっていることを要求しても構いません。

>
:    HTML.Deprecated:
Certain features of the language are necessary for
compatibility with earlier versions of the
specification, but they tend to be used and implemented
inconsistently, and their use is deprecated. This
feature test entity enables a document type definition
that allows these features. It is set to `INCLUDE' by default.

HTML のある機能は以前の版の仕様との互換のために必要ですが、
一貫しない形で使用・実装される傾向にあり、
その使用は非推奨です。この機能試験実体はそのような機能を認める文書型定義を有効化します。
既定では [CODE(SGML)[INCLUDE]] に設定されています。

>            Documents generated by translation software or editing
software should not contain deprecated idioms.

翻訳ソフトウェアや編集ソフトウェアが生成した文書は非推奨の語彙を含むべきではありません。

*** 1.2.3. User Agents
>   An HTML user agent conforms to this specification if:

HTML 利用者エージェントは、次のとき、この仕様書に適合します。

>
-        * It parses the characters of an HTML document into data
characters and markup according to [SGML].

- HTML 文書の文字を、 SGML に従って[[データ文字]]および[[マーク]]に構文解析する。

>            NOTE - In the interest of robustness and
extensibility, there are a number of widely deployed
conventions for handling non-conforming documents.
See 4.2.1, "Undeclared Markup Error Handling" for details.

備考: 頑強性と拡張可能性の点から、種々の広く採用されている非適合文書の取扱い方法があります。
詳しくは 4.2.1 『未宣言マーク誤りの取扱い』を御覧下さい。

>
-        * It supports the `ISO-8859-1' character encoding scheme and
processes each character in the ISO Latin Alphabet No. 1 as
specified in 6.1, "The HTML Document Character Set".

[CODE(charset)[[[ISO-8859-1]]]] 文字符号化方式に対応し、
6.1 『HTML 文書文字集合』に規定するとおり、
ISO Latin Alphabet No. 1 の各文字を処理する。

>            NOTE - To support non-western writing systems, HTML
user agents are encouraged to support
`ISO-10646-UCS-2' or similar character encoding
schemes and as much of the character repertoire of
[ISO-10646] as is practical.

備考: 西洋以外の書字体系に対応するため、 HTML
利用者エージェントは [CODE(charset)[[[ISO-10646-UCS-2]]]]
や同様の文字符号化方式と [[ISO/IEC 10646]]
のできるだけ多くの[[文字レパートリ]]に対応することを推奨します。

>
-        * It behaves identically for documents whose parsed token 
sequences are identical.

-解析字句列が同一である文書に対して同じ様に振る舞う。

>        For example, comments and the whitespace in tags disappear
during tokenization, and hence they do not influence the
behavior of conforming user agents.

例えば、注釈やタグ中の空白は字句化の過程で消失しますから、
適合利用者エージェントの振舞いには影響しません。

>
-        * It allows the user to traverse (or at least attempt to
traverse, resources permitting) all hyperlinks from <A>
elements in an HTML document.

利用者が HTML 文書中の [CODE(HTML)[<[CODE(HTMLe)[[[a]]]]>]]
要素からのすべての[[ハイパーリンク]]を[[探索]]する
(あるいは少なくても探索することを試みる) のを認める。

>   An HTML user agent is a level 2 user agent if, additionally:

HTML 利用者エージェントは、加えて次のとおりであれば、
水準 2 利用者エージェントです。

>
-        * It allows the user to express all form field values
specified in an HTML document and to (attempt to) submit the
values as requests to information services.

- HTML 文書中に指定されたすべてのフォーム欄値を表現することおよびその値を情報サービスに要求として提出する
(のを試みる) ことを利用者に認める。

* 2. Terms
>
:    absolute URI:
a URI in absolute form; for example, as per [URL]

: 絶対 URI : 絶対形での URI。例えば、 [[RFC 1738]] による。

>
:    anchor:
one of two ends of a hyperlink; typically, a phrase
marked as an <A> element.

: アンカー : [[ハイパーリンク]]の2つの端点の1つ。
典型的には、 [CODE(HTMLe)[[[a]]]] 要素でマークされる語句。

>
:    base URI:
an absolute URI used in combination with a relative URI
to determine another absolute URI.

相対 URI と合わせて絶対 URI を決定するために使われる別の絶対 URI。

>
:    character:
An atom of information, for example a letter or a digit.
Graphic characters have associated glyphs, whereas
control characters have associated processing semantics.

: 文字 : 情報の原子で、例えば文字や数字。
[[図形文字]]は関連付けられた[[グリフ]]を持ち、
[[制御文字]]は関連付けられた処理意味を持つ。

    character encoding
    scheme
            A function whose domain is the set of sequences of
            octets, and whose range is the set of sequences of
            characters from a character repertoire; that is, a
            sequence of octets and a character encoding scheme
            determines a sequence of characters.

:文字符号化方式:定義域がオクテットの列の集合であり、
値域が文字レパートリ内の文字の列の集合である関数。
すなわち、オクテットの列と文字符号化方式が文字の列を決定する。

    character repertoire
            A finite set of characters; e.g. the range of a coded
            character set.

:文字レパートリ:
文字の有限集合。例えば、符号化文字集合の値域。

    code position
            An integer. A coded character set and a code position
            from its domain determine a character.

:符号位置:
整数。符号化文字集合と定義域内の符号位置が文字を決定する。

    coded character set
            A function whose domain is a subset of the integers and
            whose range is a character repertoire. That is, for some
            set of integers (usually of the form {0, 1, 2, ..., N}
            ), a coded character set and an integer in that set
            determine a character. Conversely, a character and a
            coded character set determine the character's code
            position (or, in rare cases, a few code positions).

:符号化文字集合:
定義域が整数の部分集合であり、値域が文字レパートリである関数。
すなわち、ある整数の集合 (通常は [CODE(math)[{0, 1, 2, ..., [VAR[N]]}]]
の形) について、符号化文字集合とその集合中の整数が文字を決定する。
逆に、文字と符号化文字集合が文字の符号位置
(稀な場合には幾つかの符号位置群) を決定する。

    conforming HTML user
    agent
            A user agent that conforms to this specification in its
            processing of the Internet Media Type `text/html'.

:適合 HTML 利用者エージェント:
[[インターネット媒体型]] [CODE(MIME)[text/html]] 
の処理においてこの仕様書に適合する[[利用者エージェント]]。

    data character
            Characters other than markup, which make up the content
            of elements.

:データ文字:
[[マーク]]以外の[[文字]]であって、
[[要素]]の[[内容]]を構成する。

    document character set
            a coded character set whose range includes all
            characters used in a document. Every SGML document has
            exactly one document character set. Numeric character
            references are resolved via the document character set.

:文書文字集合:
値域が[[文書]]中で使用される全ての[[文字]]を含む[[符号化文字集合]]。
各 [[SGML文書]]はちょうど一つの文書文字集合を持つ。
[[数値文字参照]]は文書文字集合について解決する。

    DTD
            document type definition. Rules that apply SGML to the
            markup of documents of a particular type, including a
            set of element and entity declarations. [SGML]

: DTD: 
[[文書型定義]]。特定の型の[[文書]]のマークに適用される規則で、
[[要素宣言]]や[[実体宣言]]の集合を含む。

    element
            A component of the hierarchical structure defined by a
            document type definition; it is identified in a document
            instance by descriptive markup, usually a start-tag and
            end-tag. [SGML]

:要素:[[文書型定義]]で定義される階層構造の構成部品。
[[記述的マーク]] (通常は[[開始タグ]]と[[終了タグ]])
により[[文書実現値]]中で識別される。

    end-tag
            Descriptive markup that identifies the end of an
            element. [SGML]

:終了タグ:[[要素]]の終了を識別する[[記述的マーク]]。

    entity
            data with an associated notation or interpretation; for
            example, a sequence of octets associated with an
            Internet Media Type. [SGML]

:実体:[[データ]]およびそれに[[関連付けられた記法]]または解釈。
例えば、[[インターネット媒体型]]に関連付けられた[[オクテット列]]。

    fragment identifier
            the portion of an HREF attribute value following the `#'
            character which modifies the presentation of the
            destination of a hyperlink.

:素片識別子:[[ハイパーリンク]]の[[終点]]の表現を修飾する、
[CODE(HTMLa)[[[href]]]] [[属性値]]の [CODE(char)[#]]
文字に続く部分。

    form data set
            a sequence of name/value pairs; the names are given by
            an HTML document and the values are given by a user.

:フォー・ムデータ集合:
[[名前]]と[[値]]の[[組]]の[[列]]。名前は HTML]]
[[要素]]により与えられ、値は[[利用者]]により与えられる。

    HTML document
            An SGML document conforming to this document type
            definition.

:HTML 文書:
この[[文書型定義]]に[[適合]]する [[SGML文書]]。

    hyperlink
            a relationship between two anchors, called the head and
            the tail. The link goes from the tail to the head. The
            head and tail are also known as destination and source,
            respectively.

:ハイパーリンク:[[頭]]および[[尾]]とよばれる二つの[[アンカー]]の間の関係。
[[リンク]]は尾から頭へと向かう。
頭と尾はそれぞれ[[終点]]および[[始点]]とも呼ぶ。

    markup
            Syntactically delimited characters added to the data of
            a document to represent its structure. There are four
            different kinds of markup: descriptive markup (tags),
            references, markup declarations, and processing
            instructions. [SGML]

:マーク(付け):[[文書]]の[[データ]]に、その構造を表現するために書き加える構造的に区切られた[[文字]]群。
マークには[[記述的マーク]] ([[タグ]]), [[参照]],
[[マーク宣言]], [[処理指令]]の4種類がある。

    may
            A document or user interface is conforming whether this
            statement applies or not.

:[VAR[〜]]してよい、構わない:
この文を適用するにせよ、しないにせよ、[[文書]]または[[利用者界面]]は[[適合]]している。

    media type
            an Internet Media Type, as per [IMEDIA].

:媒体型: [[RFC 1521]] による[[インターネット媒体型]]。

    message entity
            a head and body. The head is a collection of name/value
            fields, and the body is a sequence of octets. The head
            defines the content type and content transfer encoding
            of the body. [MIME]

:メッセージ実体:
[[頭部]]および[[本体]]。頭部は名前・値欄の集成であり、
本体は[[オクテット]]の列である。頭部は本体の[[内容型]]および[[内容転送符号化]]を定義する。

    minimally conforming
    HTML user agent
            A user agent that conforms to this specification except
            for form processing. It may only process level 1 HTML
            documents.

:最小適合 HTML 利用者エージェント:
[[フォーム]]処理を除いてこの仕様書に適合する[[利用者エージェント]]。
水準 1 [[HTML文書]]のみを処理しても構わない。

    must
            Documents or user agents in conflict with this statement
            are not conforming.

:[VAR[〜]]しなければならない:
この文に衝突する[[文書]]や[[利用者エージェント]]は適合していない。

    numeric character
    reference
            markup that refers to a character by its code position
            in the document character set.

:数値文字参照:[[文書文字集合]]中の[[符号位置]]によって[[文字]]を参照する[[マーク]]。

    SGML document
            A sequence of characters organized physically as a set
            of entities and logically into a hierarchy of elements.
            An SGML document consists of data characters and markup;
            the markup describes the structure of the information
            and an instance of that structure. [SGML]

:SGML 文書:物理的には[[実体]]の集合として、
論理的には[[要素]]の階層として組織化された[[文字]]の列。
SGML 文書は[[データ文字]]と[[マーク]]で構成される。
マークは情報の構造とその構造の[[実現値]]を記述する。

    shall
            If a document or user agent conflicts with this
            statement, it does not conform to this specification.

:[VAR[〜]]しなければならない:
[[文書]]または[[利用者エージェント]]がこの文と衝突するなら、
この仕様書に適合しない。

    should
            If a document or user agent conflicts with this
            statement, undesirable results may occur in practice
            even though it conforms to this specification.

:[VAR[〜]]するべきだ:
[[文書]]または[[利用者エージェント]]がこの文と衝突するなら、
それはこの仕様書には適合するものの、実際には望ましくない結果を引き起こすかもしれない。

    start-tag
            Descriptive markup that identifies the start of an
            element and specifies its generic identifier and
            attributes. [SGML]

:開始タグ:
[[要素]]の開始とその[[共通識別子]]および[[属性]]を指定する[[記述的マーク]]。

    syntax-reference
    character set
            A coded character set whose range includes all
            characters used for markup; e.g. name characters and
            delimiter characters.

:構文参照文字集合:
値域が[[マーク]]に使用するすべての[[文字]]、
例えば[[名前文字]]や[[区切子文字]]を含む[[符号化文字集合]]。

    tag
            Markup that delimits an element. A tag includes a name
            which refers to an element declaration in the DTD, and
            may include attributes. [SGML]

:タグ:[[要素]]を区切る[[マーク]]。タグは [[DTD]]
中の[[要素宣言]]を参照する[[名前]]を含み、
[[属性]]を含んでもよい。

    text entity
            A finite sequence of characters. A text entity typically
            takes the form of a sequence of octets with some
            associated character encoding scheme, transmitted over
            the network or stored in a file. [SGML]

:文実体:文字の有限の列。文実体は典型的には何らかの関連付けられた[[文字符号化方式]]の[[オクテット]]の列の形を取り、
[[ネットワーク]]上を転送されたり[[ファイル]]に蓄積されたりする。

    typical
            Typical processing is described for many elements. This
            is not a mandatory part of the specification but is
            given as guidance for designers and to help explain the
            uses for which the elements were intended.

:典型的:典型的処理を多くの[[要素]]について記述する。
これは仕様書の強制の部分ではないが、
設計者への指針および要素の意図する使用法を説明するのを助けるために与える。

    URI
            A Uniform Resource Identifier is a formatted string that
            serves as an identifier for a resource, typically on the
            Internet. URIs are used in HTML to identify the anchors
            of hyperlinks. URIs in common practice include Uniform
            Resource Locators (URLs)[URL] and Relative URLs
            [RELURL].

:URI:統一資源識別子は、典型的には[[インターネット]]上にある[[資源]]の識別子として供給される書式付けされた文字列である。
URI は、 [[HTML]] においては[[ハイパーリンク]]の[[アンカー]]を識別するために使用する。
URI は一般的な習慣として統一資源位置子 ([[URL]]) および[[相対URL]]
を含む。

    user agent
            A component of a distributed system that presents an
            interface and processes requests on behalf of a user;
            for example, a www browser or a mail user agent.

:利用者エージェント:
[[界面]]を提供し、[[利用者]]に代わって[[要求]]を処理する[[分散システム]]の構成部品。
例えば、 [[WWWブラウザ]]や[[メイル利用者エージェント]]。

    WWW
            The World-Wide Web is a hypertext-based, distributed
            information system created by researchers at CERN in
            Switzerland. <URL:http://www.w3.org/>

:WWW:世界規模網は[[ハイパーテキスト]]を基にした分散情報システムで、
[[スイス]]の [[CERN]] の研究者により作られた。

* 3. HTML as an Application of SGML

>  HTML is an application of ISO 8879:1986 -- Standard Generalized
Markup Language (SGML). SGML is a system for defining structured
document types and markup languages to represent instances of those
document types[SGML]. The public text -- DTD and SGML declaration --
of the HTML document type definition are provided in 9, "HTML Public Text".

HTML は [[ISO8879]]:1986 ―標準一般化マーク付け言語 ([[SGML]])
の[[応用]]です。 SGML は構造化[[文書型]]の定義とその文書型の[[実現値]]を表現するための[[マーク付け言語]]のシステムです。
HTML [[文書型定義]]の[[公開文]] ([[DTD]] と [[SGML宣言]])
は 9. HTML 公開文で提供しています。

>   The term "HTML" refers to both the document type defined here and the
markup language for representing instances of this document type.

用語「HTML」は、ここで定義する文書型およびこの文書型の実現値を表現するマーク付け言語の両方を指します。

** 3.1. SGML Documents

>   An HTML document is an SGML document; that is, a sequence of
characters organized physically into a set of entities, and logically
as a hierarchy of elements.

[[HTML文書]]は [[SGML文書]]です。すなわち、
物理的には[[実体]]の集合として、論理的には[[要素]]の階層として組織化された[[文字]]の列です。

>   In the SGML specification, the first production of the SGML syntax
grammar separates an SGML document into three parts: an SGML
declaration, a prologue, and an instance. For the purposes of this
specification, the prologue is a DTD. This DTD describes another
grammar: the start symbol is given in the doctype declaration, the
terminals are data characters and tags, and the productions are
determined by the element declarations. The instance must conform to
the DTD, that is, it must be in the language defined by this grammar.

SGML 仕様書では、 SGML 構文文法の最初の生成規則で
SGML 文書を3つの部分 ― [[SGML宣言]], [[前書き]], 実現値に分離しています。
この仕様書の目的では、前書きは [[DTD]] です。
この DTD は他の文法を記述します。開始記号は[[文書型宣言]]中に与えられ、
終端は[[データ文字]]と[[タグ]]であり、
生成規則は[[要素宣言]]で決定されます。
実現値は DTD に適合しなければなりません。すなわち、
この文法で定義された言語で書かれていなければなりません。

>   The SGML declaration determines the lexicon of the grammar. It
specifies the document character set, which determines a character
repertoire that contains all characters that occur in all text
entities in the document, and the code positions associated with
those characters.

SGML 宣言は文法の字句を決定します。
SGML 宣言は[[文書文字集合]]を指定し、文書文字集合は[[文書]]中のすべての[[文実体]]に出現するすべての[[文字]]を含む[[文字レパートリ]]とそららの文字に関連付けられた[[符号位置]]を決定します。

>   The SGML declaration also specifies the syntax-reference character
set of the document, and a few other parameters that bind the
abstract syntax of SGML to a concrete syntax. This concrete syntax
determines how the sequence of characters of the document is mapped
to a sequence of terminals in the grammar of the prologue.

SGML 宣言は文書の[[構文参照文字集合]]と、
SGML の[[抽象構文]]を[[具象構文]]に束縛する数個の他の[[引数]]も指定します。
この具象構文が文書の文字の列をどう前書きの文法中の終端の列に写像するかを決定します。

>   For example, consider the following document:

例えば、次の文書を考えてみましょう。

>
[PRE(HTML)[
<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<title>Parsing Example</title>
<p>Some text. <em>&#42;wow&#42;</em></p>
]PRE]

>   An HTML user agent should use the SGML declaration that is given in
9.5, "SGML Declaration for HTML". According to its document character
set, `&#42;' refers to an asterisk character, `*'.

HTML 利用者エージェントは、 9.5 『HTML 用 SGML 宣言』
にある SGML 宣言を使用するべきです。その[[文書文字集合]]によれば、
[SAMP(SGML)[&#42;]] は星印文字 [CODE(char)[*]] を指します。

>   The instance above is regarded as the following sequence of terminals:
=        1. start-tag: TITLE
=        2. data characters: "Parsing Example"
=        3. end-tag: TITLE
=        4. start-tag: P
=        5. data characters "Some text."
=        6. start-tag: EM
=        7. data characters: "*wow*"
=        8. end-tag: EM
=        9. end-tag: P

前述の実現値は次の終端の列と考えます。
= 開始タグ: [CODE(HTMLe)[title]]
= データ文字群: [Q[Parsing Example]]
= 終了タグ: [CODE(HTMLe)[title]]
= 開始タグ: [CODE(HTMLe)[p]]
= データ文字群: [Q[Some text.]]
= 開始タグ: [CODE(HTMLe)[em]]
= データ文字群: [Q[*wow*]]
= 終了タグ: [CODE(HTMLe)[em]]
= 終了タグ: [CODE(HTMLe)[p]]

>   The start symbol of the DTD grammar is HTML, and the productions are
given in the public text identified by `-//IETF//DTD HTML 2.0//EN'
(9.1, "HTML DTD"). The terminals above parse as:

DTD 文法の開始記号は [CODE(HTMLe)[html]] で、
生成規則群は [CODE[-//IETF//DTD HTML 2.0//EN]]
で識別される公開文で与えられます。
先の終端群は、次のように解析します。

>
[PRE[
       HTML
        |
        \-HEAD
        |  |
        |  \-TITLE
        |      |
        |      \-<TITLE>
        |      |
        |      \-"Parsing Example"
        |      |
        |      \-</TITLE>
        |
        \-BODY
          |
          \-P
            |
            \-<P>
            |
            \-"Some text. "
            |
            \-EM
            |  |
            |  \-<EM>
            |  |
            |  \-"*wow*"
            |  |
            |  \-</EM>
            |
            \-</P>
]PRE]

>   Some of the elements are delimited explicitly by tags, while the
boundaries of others are inferred. The <HTML> element contains a
<HEAD> element and a <BODY> element. The <HEAD> contains <TITLE>,
which is explicitly delimited by start- and end-tags.

いくつかの要素はタグにより陽に区切られており、
他の境界は推論しています。 [CODE(HTMLe)[html]] 要素は
[CODE(HTMLe)[head]] 要素と [CODE(HTMLe)[body]] 要素を含みます。
[CODE(HTMLe)[head]] は開始タグと終了タグで陽に区切られている
[CODE(HTMLe)[title]] を含みます。

** 3.2. HTML Lexical Syntax
>   SGML specifies an abstract syntax and a reference concrete syntax.
Aside from certain quantities and capacities (e.g. the limit on the
length of a name), all HTML documents use the reference concrete
syntax. In particular, all markup characters are in the repertoire of
[ISO-646]. Data characters are drawn from the document character set
(see 6, "Characters, Words, and Paragraphs").

SGML は[[抽象構文]]と[[具象構文]]を規定しています。
[[量]]や[[容量]] (例えば名前の長さの制限) は別として、すべての
HTML 文書は[[規格参照具象構文]]を使います。
特に、すべての[[マーク文字]]は [[ISO/IEC 646]] のレパートリ中にあります。
データ文字は文書文字集合からえらびます。

>   A complete discussion of SGML parsing, e.g. the mapping of a sequence
of characters to a sequence of tags and data, is left to the SGML
standard[SGML]. This section is only a summary.

SGML の構文解析、例えば文字の列からタグおよびデータの列への写像についての完全な議論は
SGML 規格によります。この節は要約だけです。

*** 3.2.1. Data Characters
>   Any sequence of characters that do not constitute markup (see 9.6
"Delimiter Recognition" of [SGML]) are mapped directly to strings of
data characters. Some markup also maps to data character strings.
Numeric character references map to single-character strings, via the
document character set. Each reference to one of the general entities
defined in the HTML DTD maps to a single-character string.

マークを構成しない任意の文字の列は直接データ文字の列に写像します。
いくつかのマークもデータ文字列に写像します。
数値文字参照は文書文字集合によりひとつの文字に写像します。
HTML DTD で定義された一般実体のいずれかへの参照はひとつの文字に写像します。

>   For example,

たとえば、

>
-    abc&lt;def    => "abc","<","def"
-    abc&#60;def   => "abc","<","def"

>   The terminating semicolon on entity or numeric character references
is only necessary when the character following the reference would
otherwise be recognized as part of the name (see 9.4.5 "Reference
End" in [SGML]).

実体参照や数値文字参照の終端のセミコロンは、
参照の次の文字が名前の一部と認知されてしまう場合にのみ必要です。

>
-    abc &lt def     => "abc ","<"," def"
-    abc &#60 def    => "abc ","<"," def"

>   An ampersand is only recognized as markup when it is followed by a
letter or a `#' and a digit:

アンド記号は文字 (letter) か [CODE[#]] か数字が続く時のみマークとして認知します。

>
-    abc & lt def    => "abc & lt def"
-    abc &# 60 def    => "abc &# 60 def"

>   A useful technique for translating plain text to HTML is to replace
each '<', '&', and '>' by an entity reference or numeric character
reference as follows:

平文を HTML に翻訳する有用な技法は、各 [CODE[<]], [CODE[&]],
[CODE[>]] を実体参照や数値文字参照で次のように置き換えることです。

>
,           CHARACTER ,ENTITY REFERENCE  ,NUMERIC CHAR REF ,    CHARACTER DESCRIPTION
,           --------- ,----------  ,-----------  ,---------------------
,             &       ,&amp;       ,&#38;        ,Ampersand
,             <       ,&lt;        ,&#60;        ,Less than
,             >       ,&gt;        ,&#62;        ,Greater than

>        NOTE - There are SGML mechanisms, CDATA and RCDATA
declared content, that allow most `<', `>', and `&'
characters to be entered without the use of entity
references. Because these mechanisms tend to be used and
implemented inconsistently, and because they conflict
with techniques for reducing HTML to 7 bit ASCII for
transport, they are deprecated in this version of HTML.
See 5.5.2.1, "Example and Listing: XMP, LISTING".

備考: SGML には [CODE(SGML)[[[CDATA]]]] や [CODE(SGML)[[[RCDATA]]]]
のような[[宣言内容]]の仕組みがあり、ほとんどの [CODE[<]], [CODE[>]],
[CODE[&]] の文字を実体参照を使用せずに入れることができます。
このような仕組みは一貫せずに使用・実装される傾向にあり、
HTML を輸送のため 7 ビット ASCII に削減する技法とも衝突するので、
この版の HTML では非推奨とします。

*** 3.2.2. Tags
>   Tags delimit elements such as headings, paragraphs, lists, character
highlighting, and links. Most HTML elements are identified in a
document as a start-tag, which gives the element name and attributes,
followed by the content, followed by the end tag. Start-tags are
delimited by `<' and `>'; end tags are delimited by `</' and `>'. An
example is:

タグは、要素、たとえば頭、段落、リスト、文字強調、リンクを区切ります。
ほとんどの HTML 要素は文書の中で開始タグで識別します。
開始タグは要素名と属性を与え、次に内容が続き、その次に終了タグが来ます。
開始タグは [CODE[<]] と [CODE[>]] で区切ります。終了タグは
[CODE[</]] と [CODE[>]] で区切ります。例:

>   [SAMP(HTML)[<H1>This is a Heading</H1>]]

>   Some elements only have a start-tag without an end-tag. For example,
to create a line break, use the `<BR>' tag.  Additionally, the end
tags of some other elements, such as Paragraph (`</P>'), List Item
(`</LI>'), Definition Term (`</DT>'), and Definition Description
(`</DD>') elements, may be omitted.

いくつかの要素は終了タグがなく、開始タグだけを持ちます。
例えば、改行を行うためには、 [CODE(HTML)[<[CODE(HTMLe)[br]]>]]
タグを使います。加えて、いくつかの他の要素の終了タグ、
例えば段落 ([SAMP(HTML)[</[CODE(HTMLe)[p]]>]]),
リスト項目 ([SAMP(HTML)[</[CODE(HTMLe)[li]]>]]),
定義語 ([SAMP(HTML)[</[CODE(HTMLe)[dt]]>]]),
定義記述 ([SAMP(HTML)[</[CODE(HTMLe)[dd]]>]]) の要素の終了タグは、
省略して構いません。

>   The content of an element is a sequence of data character strings and
nested elements. Some elements, such as anchors, cannot be nested.
Anchors and character highlighting may be put inside other
constructs. See the HTML DTD, 9.1, "HTML DTD" for full details.

要素の内容はデータ文字と入れ子の要素の列です。
いくつかの要素、たとえばアンカーは、入れ子にできません。
アンカーと文字強調は一方の内に他方を入れて構いません。
完全な詳細は HTML DTD を参照してください。

>      NOTE - The SGML declaration for HTML specifies SHORTTAG YES, which
means that there are other valid syntaxes for tags, such as NET
tags, `<EM/.../'; empty start tags, `<>'; and empty end-tags,
`</>'. Until support for these idioms is widely deployed, their
use is strongly discouraged.

備考: HTML の SGML 宣言は [CODE(SGML)[[[SHORTTAG]] YES]]
と指定しており、他にも妥当なタグの構文、たとえば [CODE(SGML)[[[NET]]]]
タグ [SAMP(HTML)[<[CODE(HTMLe)[em]]/.../]], 空開始タグ
[SAMP(HTML)[<>]], 空終了タグ [SAMP(HTML)[</>]] があることを意味しています。
このような表記への対応が広がるまでは、その使用は強く非推奨とします。

*** 3.2.3. Names
>   A name consists of a letter followed by letters, digits, periods, or
hyphens. The length of a name is limited to 72 characters by the
`NAMELEN' parameter in the SGML declaration for HTML, 9.5, "SGML
Declaration for HTML". Element and attribute names are not case
sensitive, but entity names are.  For example, `<BLOCKQUOTE>',
`<BlockQuote>', and `<blockquote>' are equivalent, whereas `&amp;' is
different from `&AMP;'.

名前は、文字 (ltter) とそれに続く文字、数字、句点またはハイフンで構成します。
名前の長さは HTML の SGML 宣言の [CODE(SGML)[[[NAMELEN]]]]
引数により 72 文字に制限されています。要素や属性の名前は大文字・小文字を区別しませんが、
実体名は区別します。例えば、 [SAMP(HTML)[<BLOCKQUOTE>]],
[SAMP(HTML)[<BlockQuote>]], [SAMP(HTML)[<blockquote>]]
は同等ですが、 [SAMP(HTML)[&amp;]] は [SAMP(HTML)[&AMP;]]
とは異なります。

>   In a start-tag, the element name must immediately follow the tag open
delimiter `<'.

開始タグでは、要素名はタグ開始区切子 [CODE[<]]
のすぐ後ろに続かなければなりません。

*** 3.2.4. Attributes
>   In a start-tag, white space and attributes are allowed between the
element name and the closing delimiter. An attribute specification
typically consists of an attribute name, an equal sign, and a value,
though some attribute specifications may be just a name token. White
space is allowed around the equal sign.

開始タグでは、要素名と閉じ区切子の間に空白と属性群が認められます。
属性指定は典型的に属性名、等号、値から成りますが、
いくつかの属性指定は単に名前字句だけでも構いません。
等号の回りに空白が認められます。

>   The value of the attribute may be either:

属性の値は、次のうちのいずれかです。

>
-        * A string literal, delimited by single quotes or double
quotes and not containing any occurrences of the delimiting character.

文字列表記。一重引用符または二重引用符で区切り、
区切文字を含まない。

>            NOTE - Some historical implementations consider any
occurrence of the `>' character to signal the end of
a tag. For compatibility with such implementations,
when `>' appears in an attribute value, it should be
represented with a numeric character reference. For
example, `<IMG SRC="eq1.jpg" alt="a>b">' should be
written `<IMG SRC="eq1.jpg" alt="a&#62;b">' or `<IMG
SRC="eq1.jpg" alt="a&gt;b">'.

備考: いくつかの歴史的な実装は [CODE[>]] 文字があるとタグの終了と考えます。
そのような実装との互換性のため、 [CODE[>]] が属性値中に出現するときは、
数値文字参照で表現するべきです。例えば、
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a>b">]] は
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a&#62;b">]] または
[SAMP(HTML)[<IMG SRC="eq1.jpg" alt="a&gt;b">]] とするべきです。

>
-        * A name token (a sequence of letters, digits, periods, or
hyphens). Name tokens are not case sensitive.

名前字句 (文字、数字、句点またはハイフンの列)。
名前字句は大文字・小文字を区別しません。

>            NOTE - Some historical implementations allow any
character except space or `>' in a name token.

備考: いくつかの歴史的実装は生枝路駆虫に空白や [CODE[>]]
を除く任意の文字を認めます。

>   In this example, <img> is the element name, src is the attribute
name, and `http://host/dir/file.gif' is the attribute value:

この例では、 [SAMP(HTMLe)[img]] は要素名で、
[SAMP(HTMLa)[src]] は属性名で、 [SAMP[http://host/dir/file.gif]]
は属性値です。

>
-   [SAMP(HTML)[<img src='http://host/dir/file.gif'>]]

>   A useful technique for computing an attribute value literal for a
given string is to replace each quote and white space character by an
entity reference or numeric character reference as follows:

ある文字列の属性値表記を計算する有用な技法は、
各引用符と空白文字を実体参照や数値文字参照で次のとおり置換することです。

>
[PRE[
                     ENTITY      NUMERIC
           CHARACTER REFERENCE   CHAR REF     CHARACTER DESCRIPTION
           --------- ----------  -----------  ---------------------
             HT                  &#9;         Tab
             LF                  &#10;        Line Feed
             CR                  &#13;        Carriage Return
             SP                  &#32;        Space
             "       &quot;      &#34;        Quotation mark
             &       &amp;       &#38;        Ampersand
]PRE]

>   For example:

たとえば、

>   [SAMP(HTML)[<IMG SRC="image.jpg" alt="First &quot;real&quot; example">]]

>   The `NAMELEN' parameter in the SGML declaration (9.5, "SGML
Declaration for HTML") limits the length of an attribute value to
1024 characters.

SGML 宣言の [CODE(SGML)[[[NAMELEN]]]] 引数は属性値の長さを 1024
文字に制限しています。

>   Attributes such as ISMAP and COMPACT may be written using a minimized
syntax (see 7.9.1.2 "Omitted Attribute Name" in [SGML]). The markup:

[CODE(HTMLa)[[[ismap]]]] や [CODE(HTMLa)[[[compatct]]]
のような属性は最小化構文を使って書いて構いません。
マーク

-   [SAMP(HTML)[<UL COMPACT="compact">]]

>   can be written using a minimized syntax:

は最小化構文を使って

-   [SAMP(HTML)[<UL COMPACT>]]

と書くことができます。

>   NOTE - Some historical implementations only understand the minimized syntax.

備考: いくつかの歴史的実装は最小化構文のみを理解します。

*** 3.2.5. Comments
>   To include comments in an HTML document, use a comment declaration. A
comment declaration consists of `<!' followed by zero or more
comments followed by `>'. Each comment starts with `--' and includes
all text up to and including the next occurrence of `--'. In a
comment declaration, white space is allowed after each comment, but
not before the first comment.  The entire comment declaration is ignored.

注釈を HTML 文書に含めるためには、注釈宣言を使用します。
注釈宣言は [CODE[<!]] とそれに続く零個以上の注釈、
それに続く [CODE[>]] から成ります。注釈は [CODE[--]]
ではじまり、次に [CODE[--]] が現れるまでのすべての文を含みます。
注釈宣言では、空白が各注釈の後に認められますが、
最初の注釈の前には認められません。注釈宣言全体が無視されます。

>      NOTE - Some historical HTML implementations incorrectly consider
any `>' character to be the termination of a comment.

備考: いくつかの歴史的 HTML 実装は誤って任意の [CODE[>]]
文字を注釈の終端と考えます。

>   For example:
[PRE(HTML)[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HEAD>
    <TITLE>HTML Comment Example</TITLE>
    <!-- Id: html-sgml.sgm,v 1.5 1995/05/26 21:29:50 connolly Exp  -->
    <!-- another -- -- comment -->
    <!>
    </HEAD>
    <BODY>
    <p> <!- not a comment, just regular old data characters ->
]PRE]

**3.3. HTML Public Text Identifiers
>   To identify information as an HTML document conforming to this
specification, each document must start with one of the following
document type declarations.

情報をこの仕様書に適合する HTML 文書と識別するために、
各文書は次の文書型宣言のいずれかで始めなければなりません。

>[CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">]]

>   This document type declaration refers to the HTML DTD in 9.1, "HTML DTD".

この文書型宣言は 9.1 の HTML DTD を参照します。

>      NOTE - If the body of a `text/html' message entity does not begin
with a document type declaration, an HTML user agent should infer
the above document type declaration.

備考: [CODE(MIME)[[[text/html]]]] メッセージ実体の本体が文書型宣言で始まらなければ、
HTML 利用者エージェントはこの文書型宣言と推論するべきです。

>   [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Level 2//EN">]]

>   This document type declaration also refers to the HTML DTD which
appears in 9.1, "HTML DTD".

この文書型宣言も 9.1 にある HTML DTD を参照します。

>   [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Level 1//EN">]]

>   This document type declaration refers to the level 1 HTML DTD in 9.3,
"Level 1 HTML DTD". Form elements must not occur in level 1 documents.

この文書型宣言は 9.3 にある水準 1 HTML DTD を参照します。
フォーム要素群は水準 1 文書に出現してはなりません。

>   [CODE[<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Strict//EN">]]
>   [CODE{<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0 Strict Level 1//EN">]]

>   These two document type declarations refer to the HTML DTD in 9.2,
"Strict HTML DTD" and 9.4, "Strict Level 1 HTML DTD". They refer to
the more structurally rigid definition of HTML.

これらの二つの文書型宣言は 9.2 と 9.4 にある HTML DTD
を参照します。これらはより構造的に厳密な HTML の定義を参照します。

>   HTML user agents may support other document types. In particular,
they may support other formal public identifiers, or other document
types altogether. They may support an internal declaration subset
with supplemental entity, element, and other markup declarations.

HTML 利用者エージェントは他の文書型にも対応して構いません。
特に、他の[[公式公開識別子]]や他の文書型にあわせて対応して構いません。
HTML 利用者エージェントは補遺実体・要素・他のマーク宣言の含まれた内部宣言部分集合に対応して構いません。

[INS[
訳注: HTML UA は SGML に従って構文解析しなければならないのだから、
内部部分集合には対応しなければならないはずだが。
構文解析はできなければならないが、それを適用する必要はないということか。
]INS]

** 3.4. Example HTML Document
>
[PRE[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HTML>
    <!-- Here's a good place to put a comment. -->
    <HEAD>
    <TITLE>Structural Example</TITLE>
    </HEAD><BODY>
    <H1>First Header</H1>
    <P>This is a paragraph in the example HTML file. Keep in mind
    that the title does not appear in the document text, but that
    the header (defined by H1) does.</P>
    <OL>
    <LI>First item in an ordered list.
    <LI>Second item in an ordered list.
      <UL COMPACT>
      <LI> Note that lists can be nested;
      <LI> Whitespace may be used to assist in reading the
           HTML source.
      </UL>
    <LI>Third item in an ordered list.
    </OL>
    <P>This is an additional paragraph. Technically, end tags are
    not required for paragraphs, although they are allowed. You can
    include character highlighting in a paragraph. <EM>This sentence
    of the paragraph is emphasized.</EM> Note that the &lt;/P&gt;
    end tag has been omitted.
    <P>
    <IMG SRC ="triangle.xbm" alt="Warning: ">
    Be sure to read these <b>bold instructions</b>.
    </BODY></HTML>
]PRE]

[PRE[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <HTML>
    <!-- ここは注釈を入れるのにいい場所だ -->
    <HEAD>
    <TITLE>構造的な例</TITLE>
    </HEAD><BODY>
    <H1>最初の見出し</H1>
    <P>これは例の HTML ファイル中の段落です。
    題は文書文中に出現しないものの、見出し ([CODE(HTML)[h1]] により定義)
    は出現することに注意してください。</P>
    <OL>
    <LI>順序付きリスとの最初の項目
    <LI>順序付きリストの二番目の項目
      <UL COMPACT>
      <LI> リストは入れ子にできることに注意
      <LI> HTML 原文を読む助けに
           空白を入れて構いません
      </UL>
    <LI>順序付きリストの三番目の項目
    </OL>
    <P>これは追加の段落です。典型的に、終了タグは段落には必須ではありません。
    とはいうものの認められてはいます。段落中に文字強調を含めることができます。
    <EM>段落のこの文は強調します。</EM> &lt;/P&gt;
    終了タグが省略されていることに注意されたし。
    <P>
    <IMG SRC ="triangle.xbm" alt="警告: ">
    <b>太字の指示</b>を読むように。
    </BODY></HTML>
]PRE]

* 4. HTML as an Internet Media Type
>  An HTML user agent allows users to interact with resources which have
HTML representations. At a minimum, it must allow users to examine
and navigate the content of HTML level 1 documents. HTML user agents
should be able to preserve all formatting distinctions represented in
an HTML document, and be able to simultaneously present resources
referred to by IMG elements (they may ignore some formatting
distinctions or IMG resources at the request of the user). Level 2
HTML user agents should support form entry and submission.

[[HTML利用者エージェント]]を使うと[[利用者]]は HTML
[[表現]]を持つ[[資源]]と対話できます。少なくても、
HTML 利用者エージェントは利用者が HTML [[水準]] 1 
文書の内容を検査して誘導できなければなりません。
HTML 利用者エージェントは HTML 文書で表現されているすべての書式付け上の区別を保存することができるべきであり、
[CODE(HTMLe)[[[img]]]] 要素で参照された資源を同時に表示できるべきです
(HTML 利用者エージェントは利用者の要求により書式付け上の区別や
[CODE(HTMLe)[img]] 資源を無視しても構いません)。水準 2
HTML 利用者エージェントはフォーム項目とフォーム提出に対応するべきです。

**4.1. text/html media type
>   This specification defines the Internet Media Type [IMEDIA] (formerly
referred to as the Content Type [MIME]) called `text/html'. The
following is to be registered with [IANA].

この仕様書は [DFN[[CODE(MIME)[[[text/html]]]]]]
というインターネット媒体型 (従来内容型と呼ばれてきたもの。)
を定義します。次の通り IANA に登録します。

>
:    Media Type name:
text
:    Media subtype name:
html
:    Required parameters:
none
:    Optional parameters:
level, charset
:    Encoding considerations:
any encoding is allowed
:    Security considerations:
see 10, "Security Considerations"

>    The optional parameters are defined as follows:

省略可能な引数は次の通り定義します。

>
:    Level:
The level parameter specifies the feature set used in
the document. The level is an integer number, implying
that any features of same or lower level may be present
in the document. Level 1 is all features defined in this
specification except those that require the <FORM>
element. Level 2 includes form processing. Level 2 is
the default.

[CODE(MIME)[level]] ([[水準]]) 
引数は[[文書]]で使用される機能の集合を指定します。
水準は整数で、それ以下の水準の機能が出現し得ることを示します。
水準 1 は、この仕様書で定義するすべての機能から
[CODE(HTMLe)[[[form]]]] 要素に必要な機能を除いたものです。
水準 2 はフォーム処理を含みます。水準 2 が既定値です。

>
:    Charset:
The charset parameter (as defined in section 7.1.1 of
RFC 1521[MIME]) may be given to specify the character
encoding scheme used to represent the HTML document as a
sequence of octets. The default value is outside the
scope of this specification; but for example, the
default is `US-ASCII' in the context of MIME mail, and
`ISO-8859-1' in the context of HTTP [HTTP].

Charset 引数 ([[RFC 1521]] 7.1.1 節で定義。) は HTML 文書を[[オクテット]]の列として表現するために使用する[[文字符号化方式]]を指定することができます。
既定値はこの仕様書の適用範囲外とします。
例えば [[MIME]] メイルの文脈では [CODE(charset)[[[US-ASCII]]]]
が既定値です。 [[HTTP]] の文脈では [CODE(charset)[[[ISO-8859-1]]]]
が既定値です。

**4.2. HTML Document Representation
>   A message entity with a content type of `text/html' represents an
HTML document, consisting of a single text entity. The `charset'
parameter (whether implicit or explicit) identifies a character
encoding scheme. The text entity consists of the characters
determined by this character encoding scheme and the octets of the
body of the message entity.

内容型 [CODE(MIME)[text/html]] のメッセージ表現は、
ひとつの文実体からなる HTML 文書を表します。
[CODE(MIME)[[[charset]]]] 引数は、 (暗示であれ明示であれ)
文字符号化方式を識別します。文実体はこの文字符号化方式によって決定される文字とメッセージ実体の本体のオクテットから成ります。

***4.2.1. Undeclared Markup Error Handling
>   To facilitate experimentation and interoperability between
implementations of various versions of HTML, the installed base of
HTML user agents supports a superset of the HTML 2.0 language by
reducing it to HTML 2.0: markup in the form of a start-tag or end-tag, whose generic identifier is not declared is mapped to nothing
during tokenization. Undeclared attributes are treated similarly. The
entire attribute specification of an unknown attribute (i.e., the
unknown attribute and its value, if any) should be ignored. On the
other hand, references to undeclared entities should be treated as
data characters.

実験と種々の版の [[HTML]] の実装の間の相互運用性の向上のため、
実際に使用されている [[HTML利用者エージェント]]は [[HTML 2.0]]
言語の[[超集合]]を HTML 2.0 に削減することで対応しています。
つまり、[[開始タグ]]や[[終了タグ]]の形の[[マーク]]で、
その[[共通識別子]]が宣言されていないものは、
字句化の過程で何にも写像しません。
未宣言の属性も同様に扱います。未知の属性の[[属性指定]]全体
(つまり、未知の属性とその値があれば両方) を無視するべきです。
他方、未宣言の[[実体]]への[[参照]]は[[データ文字]]として扱うべきです。

>   For example:
    <div class=chapter><h1>foo</h1><p>...</div>
      => <H1>,"foo",</H1>,<P>,"..."
    xxx <P ID=z23> yyy
      => "xxx ",<P>," yyy
    Let &alpha; &amp; &beta; be finite sets.
      => "Let &alpha; & &beta; be finite sets."

>   Support for notifying the user of such errors is encouraged.

このような[[誤り]]を利用者に通知する機能への対応を推奨します。

>   Information providers are warned that this convention is not binding:
unspecified behavior may result, as such markup does not conform to
this specification.

この慣習は束縛ではないことを情報提供者に警告しておきます。
この仕様書に適合しないマークは未規定の結果となり得ます。

*** 4.2.2. Conventional Representation of Newlines
>   SGML specifies that a text entity is a sequence of records, each
beginning with a record start character and ending with a record end
character (code positions 10 and 13 respectively) (section 7.6.1,
"Record Boundaries" in [SGML]).

[[SGML]] は[[文実体]]を[[記録]]の列で、
各記録は[[記録開始]]文字で始まり、[[記録終了]]文字で終わる
(それぞれ[[符号位置]] [CODE(char)[10]] と [CODE(char)[13]])
と規定しています。

>   [MIME] specifies that a body of type `text/*' is a sequence of lines,
each terminated by CRLF, that is, octets 13, 10.

[[MIME]] は型 [CODE(MIME)[[[text/[VAR[*]]]]]]
の[[本体]]を[[行]]の列として、
各行は [CODE(ABNF)[[[CRLF]]]]、すなわちオクテット [CODE(char)[13]],
[CODE(char)[10]] で終端と規定しています。

>   In practice, HTML documents are frequently represented and
transmitted using an end of line convention that depends on the
conventions of the source of the document; frequently, that
representation consists of CR only, LF only, or a CR LF sequence.
Hence the decoding of the octets will often result in a text entity
with some missing record start and record end characters.

実際には、 HTML 文書はよく文書源の慣習依存の行末表現を使って表現・
転送されます。行末は [CODE(char)[[[CR]]]] だけ、
[CODE(char)[[[LF]]]] だけまたは [CODE(char)[CR]] [CODE(char)[LF]]
列でよく表現されます。ですから、オクテットを復号するとしばしば文実体の記録開始や記録終了が欠けたものによくなります。

>   Since there is no ambiguity, HTML user agents are encouraged to infer
the missing record start and end characters.

曖昧性はありませんから、 HTML 利用者エージェントは欠けた記録開始・
記録終了文字を補うことを推奨します。

>   An HTML user agent should treat end of line in any of its variations
as a word space in all contexts except preformatted text. Within
preformatted text, an HTML user agent should treat any of the three
common representations of end-of-line as starting a new line.

HTML 利用者エージェントは、整形済み文以外のどの文脈でも、
すべての種類の行末を語間隔として扱うべきです。
整形済み文では、 HTML 利用者エージェントは3種類すべての共通な行末表現を新しい行の開始として扱うべきです。

* 5. Document Structure
>   An HTML document is a tree of elements, including a head and body,
headings, paragraphs, lists, etc. Form elements are discussed in 8,
"Forms".

HTML [[文書]]は[[要素]]の[[木]]で、
[[頭部]]と[[本体]] (身体), [[見出し]],
[[段落]], [[並び]], その他を含みます。
[[フォーム]]要素は8章で議論します。

** 5.1. Document Element: HTML
>   The HTML document element consists of a head and a body, much like a
memo or a mail message. The head contains the title and optional
elements. The body is a text flow consisting of paragraphs, lists,
and other elements.

[CODE(HTMLe)[[[html]]]] [[文書要素]]は、
メモや[[メイル]]のメッセージのように[[頭部]]と[[本体]] (身体)
から成ります。頭部は題と省略可能な要素を含みます。
本体は段落、並び、その他の要素から成る文章の流れです。

** 5.2. Head: HEAD
>   The head of an HTML document is an unordered collection of
information about the document. For example:

HTML 文書の [CODE(HTMLe)[[[head]]]] (頭部) は、
文書についての情報の非順序集成です。例:

>
[PRE(HTML)[
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HEAD>
<TITLE>Introduction to HTML</TITLE>
</HEAD>
...
]PRE]

*** 5.2.1. Title: TITLE
>   Every HTML document must contain a <TITLE> element.

すべての HTML 文書は [CODE(HTMLe)[title]] (題)
要素を含まなければなりません。

>   The title should identify the contents of the document in a global
context. A short title, such as "Introduction" may be meaningless out
of context. A title such as "Introduction to HTML Elements" is more
appropriate.

題は大域文脈での文書の内容を識別するべきです。
「紹介」のような短い題は文脈外では意味を成さないかもしれません。
「HTML 要素の紹介」のような題の方が適切です。

>      NOTE - The length of a title is not limited; however, long titles
may be truncated in some applications. To minimize this
possibility, titles should be fewer than 64 characters.

備考: 題の長さは制限しません。しかし、
長い題は応用によっては切られるかもしれません。
この虞を最小化するため、題は64文字より短くするべきです。

>   A user agent may display the title of a document in a history list or
as a label for the window displaying the document. This differs from
headings (5.4, "Headings: H1 ... H6"), which are typically displayed
within the body text flow.

利用者エージェントは文書の題を履歴一覧に表示したり、
文書を表示する窓の札として表示したりして構いません。
これが通常本体 ([[body]]) の文章の流れに表示する見出しとの違いです。

*** 5.2.2. Base Address: BASE
>   The optional <BASE> element provides a base address for interpreting
relative URLs when the document is read out of context (see 7,
"Hyperlinks"). The value of the HREF attribute must be an absolute URI.

省略可能な [CODE(HTMLe)[base]] 要素は、
文書を文脈外で読む時に相対 URL 
を解釈するための基底番地を提供します。
[CODE(HTMLa)[href]] 属性の値は絶対 URL
でなければなりません。

*** 5.2.3. Keyword Index: ISINDEX
>   The <ISINDEX> element indicates that the user agent should allow the
user to search an index by giving keywords. See 7.5, "Queries and
Indexes" for details.

[CODE(HTMLe)[isindex]] 要素は、
利用者エージェントが利用者が鍵語を与えて索引を検索できるようにするべきことを示します。

*** 5.2.4. Link: LINK
>   The <LINK> element represents a hyperlink (see 7, "Hyperlinks").  Any
number of LINK elements may occur in the <HEAD> element of an HTML
document. It has the same attributes as the <A> element (see 5.7.3,
"Anchor: A").

[CODE(HTMLe)[link]] 要素はハイパーリンクを表現します。
任意の数の [CODE(HTMLe)[link]] 要素が HTML の [CODE(HTMLe)[[[head]]]]
要素の中に出現できます。 [CODE(HTMLe)[link]] 要素は
[CODE(HTMLe)[[[a]]]] 要素と同じ属性を持ちます。

>   The <LINK> element is typically used to indicate authorship, related
indexes and glossaries, older or more recent versions, document
hierarchy, associated resources such as style sheets, etc.

[CODE(HTMLe)[link]] 要素は普通著者、関係する索引・用語集、
古い版や新しい版、文書階層、スタイル・シートなど関連付ける資源、
その他を示すために使います。

*** 5.2.5. Associated Meta-information: META
>   The <META> element is an extensible container for use in identifying
specialized document meta-information.  Meta-information has two main
functions:

[CODE(HTMLe)[meta]] 要素は特化した文書のメタ情報を識別するために使用する拡張可能な包含子です。
メタ情報は2つの機能を持ちます。

>
-        * to provide a means to discover that the data set exists
and how it might be obtained or accessed; and
-        * to document the content, quality, and features of a data
set, indicating its fitness for use.

- データ集合が存在することとこれをどう得たり access
したりできるかを発見する手段を提供
- データ集合の内容、品質、特徴 (使用の合致性を示す) を文書化

>   Each <META> element specifies a name/value pair. If multiple META
elements are provided with the same name, their combined contents--
concatenated as a comma-separated list--is the value associated with
that name.

それぞれの [CODE(HTMLe)[meta]] 要素が名前と値の組を指定します。
複数の [CODE(HTMLe)[meta]] 要素が同じ名前で提供されていれば、
結合した内容 (読点分離並びとして連結) がその名前に関連付けられた値です。

>        NOTE - The <META> element should not be used where a
specific element, such as <TITLE>, would be more
appropriate. Rather than a <META> element with a URI as
the value of the CONTENT attribute, use a <LINK>
element.

備考: [CODE(HTMLe)[meta]] 要素は特定の要素、
例えば [CODE(HTMLe)[[[title]]]] がより適切な時には使用するべきではありません。
[CODE(HTMLa)[content]] 属性の値が URI の [CODE(HTMLe)[meta]]
要素よりも、 [CODE(HTMLe)[[[link]]]] 要素を使って下さい。

>   HTTP servers may read the content of the document <HEAD> to generate
header fields corresponding to any elements defining a value for the
attribute HTTP-EQUIV.

HTTP 鯖は文書の [CODE(HTMLe)[[[head]]]] を読んで 
[CODE(HTMLa)[http-equiv]] 属性に対して値を定義する要素に対応する頭欄を生成しても構いません。

>        NOTE - The method by which the server extracts document
meta-information is unspecified and not mandatory. The
<META> element only provides an extensible mechanism for
identifying and embedding document meta-information --
how it may be used is up to the individual server
implementation and the HTML user agent.

備考: 鯖が文書のメタ情報を取出す方法は規定しませんし、
強制もしません。 [CODE(HTMLe)[meta]] 要素は文書のメタ情報を識別・
埋込みする拡張可能な仕組みだけを提供します。
これをどう使用するかは個々の鯖実装と HTML
利用者エージェント次第です。

>    Attributes of the META element:

[CODE(HTMLe)[meta]] 要素の属性:

>
:    HTTP-EQUIV:
binds the element to an HTTP header field. An HTTP
server may use this information to process the document.
In particular, it may include a header field in the
responses to requests for this document: the header name
is taken from the HTTP-EQUIV attribute value, and the
header value is taken from the value of the CONTENT
attribute. HTTP header names are not case sensitive.

要素を HTTP 頭欄に束縛します。 HTTP
鯖はこの情報を文書の処理に使用して構いません。
特に、この文書に対する要求への応答に頭欄を含めても構いません。
その頭名は [CODE(HTMLa)[http-equiv]] 属性値から取り、
頭値は [CODE(HTMLa)[content]] 属性の値から取ります。
HTTP 頭欄名は大文字・小文字を区別しません。

>
:    NAME:
specifies the name of the name/value pair. If not
present, HTTP-EQUIV gives the name.

名前・値の組の名前を指定します。
存在しなければ、 [CODE(HTMLa)[http-equiv]] が名前を与えます。

>
:    CONTENT:
specifies the value of the name/value pair.

名前・値の組の値を指定します。

>    Examples

例

>    If the document contains:

文書が

>
[PRE(HTML)[
    <META HTTP-EQUIV="Expires"
          CONTENT="Tue, 04 Dec 1993 21:29:02 GMT">
    <meta http-equiv="Keywords" CONTENT="Fred">
    <META HTTP-EQUIV="Reply-to"
          content="fielding@@ics.uci.edu (Roy Fielding)">
    <Meta Http-equiv="Keywords" CONTENT="Barney">
]PRE]

>    then the server may include the following header fields:

を含んでいれば、鯖は次の頭欄をこの文書への
[CODE(HTTP)[[[GET]]]] や [CODE(HTTP)[[[HEAD]]]]
の要求に対する HTTP 応答の一部として含めて構いません。

[PRE(HTTP)[
Expires: Tue, 04 Dec 1993 21:29:02 GMT
Keywords: Fred, Barney
Reply-to: fielding@@ics.uci.edu (Roy Fielding)
]PRE]

>    as part of the HTTP response to a `GET' or `HEAD' request for
that document.

>    An HTTP server must not use the <META> element to form an HTTP
response header unless the HTTP-EQUIV attribute is present.

HTTP 鯖は [CODE(HTMLa)[http-equiv]] 属性が存在しない限り
[CODE(HTMLe)[meta]] 要素を HTTP 応答頭を形成するために使用してはなりません。

>    An HTTP server may disregard any <META> elements that specify
information controlled by the HTTP server, for example `Server',
`Date', and `Last-modified'.

HTTP 鯖は HTTP 鯖が制御する情報、例えば [CODE(HTTP)[[[Server]]]],
[CODE(HTTP)[[[Date]]]], [CODE(HTTP)[[[Last-Modified]]]]
を指定する [CODE(HTMLe)[meta]] 要素を捨てても構いません。

*** 5.2.6. Next Id: NEXTID
>   The <NEXTID> element is included for historical reasons only.  HTML
documents should not contain <NEXTID> elements.

[CODE(HTMLe)[nextid]] 要素は歴史的理由のためのみで含まれています。
HTML 文書は [CODE(HTMLe)[nextid]] 要素を含むべきではありません。

>   The <NEXTID> element gives a hint for the name to use for a new <A>
element when editing an HTML document. It should be distinct from all
NAME attribute values on <A> elements. For example:

[CODE(HTMLe)[nextid]] 要素は HTML 文書を編集する時に新しい [CODE(HTMLe)[[[a]]]]
要素で使用する名前のヒントを与えます。これは [CODE(HTMLe)[a]]
要素すべての [CODE(HTMLa)[name]] 属性値とは違うものであるべきです。
例:

>   <NEXTID N=Z27>

** 5.3. Body: BODY
>   The <BODY> element contains the text flow of the document, including
headings, paragraphs, lists, etc.

[CODE(HTMLe)[body]] 要素は文書の文章の流れを含みます。
見出し、段落、並びなどが含まれます。

>   For example:
[PRE(HTML)[
<BODY>
<h1>Important Stuff</h1>
<p>Explanation about important stuff...
</BODY>
]PRE]

** 5.4. Headings: H1 ... H6
>   The six heading elements, <H1> through <H6>, denote section headings.
Although the order and occurrence of headings is not constrained by
the HTML DTD, documents should not skip levels (for example, from H1
to H3), as converting such documents to other representations is
often problematic.

6種類の見出し要素 [CODE(HTMLe)[[[h1]]]] 〜 [CODE(HTMLe)[[[h6]]]]
は、章見出しを示します。見出しの順序や出現は HTML DTD
で制約していませんが、文書は水準を飛ばす
(例えば [CODE(HTMLe)[h1]] から [CODE(HTMLe)[h3]] へ飛ぶ) 
べきではありません。
そのような文書を他の表現に変換する時にしばしば問題に成ります。

>   Example of use:
[PRE(HTML)[
    <H1>This is a heading</H1>
    Here is some text
    <H2>Second level heading</H2>
    Here is some more text.
]PRE]

>    Typical renderings are:

典型レンダリング:

>
:    H1:
Bold, very-large font, centered. One or two blank lines above and below.
:    H2:
Bold, large font, flush-left. One or two blank lines above and below.
:    H3:
Italic, large font, slightly indented from the left
margin. One or two blank lines above and below.
:    H4:
Bold, normal font, indented more than H3. One blank line above and below.
:    H5:
Italic, normal font, indented as H4. One blank line above.
:    H6:
Bold, indented same as normal text, more than H5. One blank line above.

:[CODE(HTMLe)[h1]]:太字、特大フォント、中央寄せ。上下に余白1,2行。
:[CODE(HTMLe)[h2]]:太字、大フォント、左揃え。上下に余白1,2行。
:[CODE(HTMLe)[h3]]:斜体、大フォント、左余白から激しく字下げ。上下に余白1,2行。
:[CODE(HTMLe)[h4]]:太字、通常フォント、 [CODE(HTMLe)[h3]] 以上に字下げ。上下に1行余白。
:[CODE(HTMLe)[h5]]:斜体、通常フォント、 [CODE(HTMLe)[h4]] 程度字下げ。上に1行余白。
:[CODE(HTMLe)[h6]]:太字、通常の文章くらい、 [CODE(HTMLe)[h5]] 以上に字下げ。上に1行余白。

** 5.5. Block Structuring Elements
>   Block structuring elements include paragraphs, lists, and block
quotes. They must not contain heading elements, but they may contain
phrase markup, and in some cases, they may be nested.

ブロック構造要素は段落、並び、ブロック引用を含みます。
これらは見出し要素を含むことはできませんが、
語句マークを含んで構いませんし、場合によっては入れ子にしても構いません。

*** 5.5.1. Paragraph: P
>   The <P> element indicates a paragraph. The exact indentation, leading
space, etc. of a paragraph is not specified and may be a function of
other tags, style sheets, etc.

[CODE(HTMLe)[p]] 要素は段落を示します。段落の正確な字下げ、
先導する間隔、その他は指定しません。他のタグ、スタイル・シートその他の機能となるかもしれません。

>   Typically, paragraphs are surrounded by a vertical space of one line
or half a line. The first line in a paragraph is indented in some cases.

普通、段落は一行か半行の垂直間隔で囲まれます。
段落の最初の行は場合によっては字下げされます。

>   Example of use:
[PRE(HTML)[
    <H1>This Heading Precedes the Paragraph</H1>
    <P>This is the text of the first paragraph.
    <P>This is the text of the second paragraph. Although you do not
    need to start paragraphs on new lines, maintaining this
    convention facilitates document maintenance.</P>
    <P>This is the text of a third paragraph.</P>
]PRE]

*** 5.5.2. Preformatted Text: PRE
>   The <PRE> element represents a character cell block of text and is
suitable for text that has been formatted for a monospaced font.

[CODE(HTMLe)[pre]] 要素は文章の文字こまブロックを表し、
固定幅フォント用に書式付けされた文章に適当です。

>   The <PRE> tag may be used with the optional WIDTH attribute. The
WIDTH attribute specifies the maximum number of characters for a line
and allows the HTML user agent to select a suitable font and
indentation.

[CODE(HTMLe)[pre]] 要素には省略可能な [CODE(HTMLa)[[[width]]]]
属性を指定できます。 [CODE(HTMLa)[width]] 属性は一行の文字の最大数を指定し、
HTML 利用者エージェントは適切なフォントと字下げを選ぶことができます。

>   Within preformatted text:

整形済み文章中では、

>
-        * Line breaks within the text are rendered as a move to the
beginning of the next line.

文章中の改行は次の行のはじめへの移動としてレンダリングされます。

>            NOTE - References to the "beginning of a new line"
do not imply that the renderer is forbidden from
using a constant left indent for rendering
preformatted text. The left indent may be
constrained by the width required.

備考: [Q[新しい行のはじめ]]という言い回しは、
レンダリング器が整形済み文章をレンダリングする時に一定量の左字下げを取ることを禁止することを暗示してはいません。
左字下げは必要な幅により制約されるかもしれません。

>
-        * Anchor elements and phrase markup may be used.

他の要素や語句マークを使って構いません。

>            NOTE - Constraints on the processing of <PRE>
content may limit or prevent the ability of the HTML
user agent to faithfully render phrase markup.

備考: [CODE(HTMLe)[pre]] 内容の処理の制約のため HTML
利用者エージェントが語句マークを正しくレンダリングすることができなかったり制限されたりするかもしれません。

>
-        * Elements that define paragraph formatting (headings,
address, etc.) must not be used.

段落書式付けを定義する要素 (見出し、番地など)
は使用してはなりません。

>            NOTE - Some historical documents contain <P> tags in
<PRE> elements. User agents are encouraged to treat
this as a line break. A <P> tag followed by a
newline character should produce only one line
break, not a line break plus a blank line.

備考: 幾つかの古の文書は [CODE(HTMLe)[p]] タグを
[CODE(HTMLe)[pre]] 要素内で使っています。
利用者エージェントはこれを改行として扱うことを推奨します。
改行文字が直後に来る [CODE(HTMLe)[p]] タグは改行と改行ではなく
1つだけの改行とするべきです。

>
-        * The horizontal tab character (code position 9 in the HTML
document character set) must be interpreted as the smallest
positive nonzero number of spaces which will leave the
number of characters so far on the line as a multiple of 8.
Documents should not contain tab characters, as they are not
supported consistently.

水平タブ文字 (HTML 文書文字集合では符号位置 [CODE(char)[9]])
はその行の8の倍数文字目となるような最小の正の非零数分の間隔として解釈しなければなりません。
タブ文字は一貫して対応されてはいませんから、
文書はタブ文字を含むべきではありません。

>    Example of use:
[PRE(HTML)[
    <PRE>
    Line 1.
           Line 2 is to the right of line 1.     <a href="abc">abc</a>
           Line 3 aligns with line 2.            <a href="def">def</a>
    </PRE>
]PRE]

**** 5.5.2.1. Example and Listing: XMP, LISTING
>   The <XMP> and <LISTING> elements are similar to the <PRE> element,
but they have a different syntax. Their content is declared as CDATA,
which means that no markup except the end-tag open delimiter-in-context is recognized (see 9.6 "Delimiter Recognition" of [SGML]).

[CODE(HTMLe)[xmp]] 要素と [CODE(HTMLe)[listing]] 要素は
[CODE(HTMLe)[pre]] 要素と似ていますが、異なる構文を持っています。
これらの内容は [CODE(SGML)[[[CDATA]]]] として宣言されています。
つまり、終了タグ開き文脈依存区切子を除いてマークが認知されません。

>      NOTE - In a previous draft of the HTML specification, the syntax
of <XMP> and <LISTING> elements allowed closing tags to be treated
as data characters, as long as the tag name was not <XMP> or
<LISTING>, respectively.

備考: 以前の HTML 仕様書案では、 [CODE(HTMLe)[xmp]] 要素と
[CODE(HTMLe)[listing]] 要素の構文で閉じタグを、
それぞれ [CODE(HTMLe)[xmp]] と [CODE(HTMLe)[listing]]
がタグ名でない限り、データ文字として扱うことを認めていました。

>   Since CDATA declared content has a number of unfortunate interactions
with processing techniques and tends to be used and implemented
inconsistently, HTML documents should not contain <XMP> nor <LISTING>
elements -- the <PRE> tag is more expressive and more consistently
supported.

[CODE(SGML)[CDATA]] 宣言内容は処理技術と数々の不幸な相互作用があり、
一貫せずに使用・実装される傾向にありますから、 HTML
文書は [CODE(HTMLe)[xmp]] 要素も [CODE(HTMLe)[listing]]
要素も含むべきではありません。 [CODE(HTMLe)[pre]]
タグはより表現力があり、一貫して対応されています。

>   The <LISTING> element should be rendered so that at least 132
characters fit on a line. The <XMP> element should be rendered so
that at least 80 characters fit on a line but is otherwise identical
to the <LISTING> element.

[CODE(HTMLe)[listing]] 要素は一行に最低132文字が入るようにレンダリングするべきです。
[CODE(HTMLe)[xmp]] 要素は一行に最低80文字が入るようにレンダリングするべきですが、
その他は [CODE(HTMLe)[listing]] 要素と同じです。

>      NOTE - In a previous draft, HTML included a <PLAINTEXT> element
that is similar to the <LISTING> element, except that there is no
closing tag: all characters after the <PLAINTEXT> start-tag are data.

備考: 以前の原案では、 HTML は [CODE(HTMLe)[[[plaintext]]]]
要素を [CODE(HTMLe)[[[listing]]]] 要素と同様ながら閉じタグがない
([CODE(HTMLe)[plaintext]] 開始タグの後すべての文字がデータである)
ものとして含めていました。

*** 5.5.3. Address: ADDRESS
>   The <ADDRESS> element contains such information as address, signature
and authorship, often at the beginning or end of the body of a
document.

[CODE(HTMLe)[address]] 要素は住所、
署名、著者のような情報を含み、しばしば文書の本体の最初や終わりに置かれます。

>   Typically, the <ADDRESS> element is rendered in an italic typeface
and may be indented.

普通、 [CODE(HTMLe)[address]] 要素は[RUBY[斜体][イタリック]]書体でレンダリングされ、
字下げもされるかもしれません。

>   Example of use:
[PRE(HTML)[
    <ADDRESS>
    Newsletter editor<BR>
    J.R. Brown<BR>
    JimquickPost News, Jimquick, CT 01234<BR>
    Tel (123) 456 7890
    </ADDRESS>
]PRE]

*** 5.5.4. Block Quote: BLOCKQUOTE
>   The <BLOCKQUOTE> element contains text quoted from another source.

[CODE(HTMLe)[blockquote]] 要素は他の出典から引用した文章を含みます。

>   A typical rendering might be a slight extra left and right indent,
and/or italic font. The <BLOCKQUOTE> typically provides space above
and below the quote.

普通レンダリングは幾分左右に字下げしたり、
[RUBY[斜体][イタリック]]フォントにしたり、その両方にしたりします。
[CODE(HTMLe)[blockquote]] は普通引用の上下に間隔を置きます。

>   Single-font rendition may reflect the quotation style of Internet
mail by putting a vertical line of graphic characters, such as the
greater than symbol (>), in the left margin.

単一フォントのレンダリングでは、インターネット・メイルの引用法のように左余白に垂直棒な図形文字、
例えば大なり記号 ([CODE(char)[>]]) を置くかもしれません。

>   Example of use:
[PRE(HTML)[
    I think the play ends
    <BLOCKQUOTE>
    <P>Soft you now, the fair Ophelia. Nymph, in thy orisons, be all
    my sins remembered.
    </BLOCKQUOTE>
    but I am not sure.
]PRE]

** 5.6. List Elements
>   HTML includes a number of list elements. They may be used in
combination; for example, a <OL> may be nested in an <LI> element of
a <UL>.

HTML は数々の並び要素を含みます。並び要素は組合せて使って構いません。
例えば、 [CODE(HTMLe)[ol]] は [CODE(HTMLe)[ul]] の中の [CODE(HTMLe)[li]]
要素中に入れ子にして構いません。

>   The COMPACT attribute suggests that a compact rendering be used.

[CODE(HTMLe)[compact]] 属性は小さ目にレンダリングすることを提案します。

*** 5.6.1. Unordered List: UL, LI
>   The <UL> represents a list of items -- typically rendered as a
bulleted list.

[CODE(HTMLe)[ul]] は項目の並びを表現します。
普通印つき並びとしてレンダリングします。

>   The content of a <UL> element is a sequence of <LI> elements.  For
example:

[CODE(HTMLe)[ul]] 要素の内容は [CODE(HTMLe)[[[li]]]] 要素です。
例:

[PRE(HTML)[
    <UL>
    <LI>First list item
    <LI>Second list item
     <p>second paragraph of second item
    <LI>Third list item
    </UL>
]PRE]

*** 5.6.2. Ordered List: OL
>   The <OL> element represents an ordered list of items, sorted by
sequence or order of importance. It is typically rendered as a
numbered list.

[CODE(HTMLe)[ol]] 要素は、順番や重要度で並べた項目の順序並びを表現します。
普通番号付き並びとしてレンダリングします。

>   The content of a <OL> element is a sequence of <LI> elements.  For
example:

[CODE(HTMLe)[ol]] 要素の無い様は [CODE(HTMLe)[li]] 要素の並びです。例:

[PRE(HTML)[
    <OL>
    <LI>Click the Web button to open URI window.
    <LI>Enter the URI number in the text field of the Open URI
    window. The Web document you specified is displayed.
      <ol>
       <li>substep 1
       <li>substep 2
      </ol>
    <LI>Click highlighted text to move from one link to another.
    </OL>
]PRE]

*** 5.6.3. Directory List: DIR
>   The <DIR> element is similar to the <UL> element. It represents a
list of short items, typically up to 20 characters each. Items in a
directory list may be arranged in columns, typically 24 characters
wide.

[CODE(HTMLe)[dir]] 要素は [CODE(HTMLe)[ul]] 要素と似ています。
普通は20文字未満くらいの短い項目の並びを表現します。
ディレクトリ並びの項目は、普通24文字幅の列にして並べて構いません。

>   The content of a <DIR> element is a sequence of <LI> elements.
Nested block elements are not allowed in the content of <DIR>
elements. For example:

[CODE(HTMLe)[dir]] 要素の内容は [CODE(HTMLe)[li]] 要素の列です。
[CODE(HTMLe)[dir]] 要素の内容では入れ子のブロック要素は認められていません。例:

[PRE(HTML)[
    <DIR>
    <LI>A-H<LI>I-M
    <LI>M-R<LI>S-Z
    </DIR>
]PRE]

*** 5.6.4. Menu List: MENU
>   The <MENU> element is a list of items with typically one line per
item. The menu list style is typically more compact than the style of
an unordered list.

[CODE(HTMLe)[menu]] 要素は普通項目ごとに一行取る項目の並びです。
メニュー並び様式は普通非順序並びの様式よりも小さ目です。

>   The content of a <MENU> element is a sequence of <LI> elements.
Nested block elements are not allowed in the content of <MENU>
elements. For example:

[CODE(HTMLe)[menu]] 要素の内容は [CODE(HTMLe)[li]]
要素の列です。 [CODE(HTMLe)[menu]] 要素の内容では入れ子のブロック要素は認められません。
例:

[PRE(HTML)[
    <MENU>
    <LI>First item in the list.
    <LI>Second item in the list.
    <LI>Third item in the list.
    </MENU>
]PRE]

*** 5.6.5. Definition List: DL, DT, DD
>   A definition list is a list of terms and corresponding definitions.
Definition lists are typically formatted with the term flush-left and
the definition, formatted paragraph style, indented after the term.

定義並びは用語と対応する定義の並びです。
定義並びは普通用語を左揃えに書式付けして、
用語の後に字下げして定義を段落様式で書式付けします。

>   The content of a <DL> element is a sequence of <DT> elements and/or
<DD> elements, usually in pairs. Multiple <DT> may be paired with a
single <DD> element. Documents should not contain multiple
consecutive <DD> elements.

[CODE(HTMLe)[dl]] 要素の内容は [CODE(HTMLe)[[[dt]]]]
要素[[及び/又は]] [CODE(HTMLe)[[[dd]]]] 要素の列で、通常組で使います。
複数の [CODE(HTMLe)[dt]] を1つの [CODE(HTMLe)[dd]]
要素と組にしても構いません。文書は複数の連続した [CODE(HTMLe)[[[dd]]]]
要素を含むべきではありません。

>   Example of use:
[PRE(HTML)[
    <DL>
    <DT>Term<DD>This is the definition of the first term.
    <DT>Term<DD>This is the definition of the second term.
    </DL>
]PRE]

>   If the DT term does not fit in the DT column (typically one third of
the display area), it may be extended across the page with the DD
section moved to the next line, or it may be wrapped onto successive
lines of the left hand column.

[CODE(HTMLe)[dt]] 用語が [CODE(HTMLe)[dt]] 列
(普通表示領域の三分の一) に収まらなければ、
境界を跨いで [CODE(HTMLe)[dd]] 節を次の行に移動させたり、
左の列の次の行に折返したりしても構いません。

>   The optional COMPACT attribute suggests that a compact rendering be
used, because the list items are small and/or the entire list is
large.

省略可能な [CODE(HTMLa)[compact]] 属性は、
並び項目が小さいか、並び全体が大きいか、その両方かで小さ目にレンダリングすることを提案します。

>   Unless the COMPACT attribute is present, an HTML user agent may leave
white space between successive DT, DD pairs. The COMPACT attribute
may also reduce the width of the left-hand (DT) column.

[CODE(HTMLa)[compact]] 属性が存在しなければ、 HTML
利用者エージェントは次の [CODE(HTMLe)[dt]]・[CODE(HTMLe)[dd]]
の組と間を置いても構いません。 [CODE(HTMLa)[compact]]
属性は左側 ([CODE(HTMLe)[dt]]) の列の幅も削減して構いません。

[PRE(HTML)[
    <DL COMPACT>
    <DT>Term<DD>This is the first definition in compact format.
    <DT>Term<DD>This is the second definition in compact format.
    </DL>
]PRE]

** 5.7. Phrase Markup
>   Phrases may be marked up according to idiomatic usage, typographic
appearance, or for use as hyperlink anchors.

語句は語法、植字的表現やハイパーリンク・アンカーとしての使用のためにマーク付けすることができます。

>   User agents must render highlighted phrases distinctly from plain
text. Additionally, <EM> content must be rendered as distinct from
<STRONG> content, and <B> content must rendered as distinct from <I>
content.

利用者エージェントは強調字句を平文とは違ってレンダリングしなければなりません。
加えて、 [CODE(HTMLe)[[[em]]]] 内容は [CODE(HTMLe)[[[strong]]]]
内容と違ってレンダリングしなければなりませんし、
[CODE(HTMLe)[[[b]]]] 内容は [CODE(HTMLe)[[[i]]]] 内容と違ってレンダリングしなければなりません。

>   Phrase elements may be nested within the content of other phrase
elements; however, HTML user agents may render nested phrase elements
indistinctly from non-nested elements:

語句要素は他の語句要素の内容として入れ子にして構いません。
しかし、 HTML 利用者エージェントは入れ子の語句要素を非入れ子要素と同じようにレンダリングしても構いません。

[PRE(HTML)[
   plain <B>bold <I>italic</I></B> may be rendered
   the same as plain <B>bold </B><I>italic</I>
]PRE]

*** 5.7.1. Idiomatic Elements
>   Phrases may be marked up to indicate certain idioms.

語句は特定の語法を示すためにマーク付けして構いません。

>      NOTE - User agents may support the <DFN> element, not included in
this specification, as it has been deployed to some extent. It is
used to indicate the defining instance of a term, and it is
typically rendered in italic or bold italic.

備考: 利用者エージェントは、この仕様書に含まれていない
[CODE(HTMLe)[[[dfn]]]] 要素がある程度使用されているので、
これに対応しても構いません。これは用語を定義する実現値を示すために使い、
普通[RUBY[斜体][イタリック]]や太字[RUBY[斜体][イタリック]]でレンダリングします。

**** 5.7.1.1. Citation: CITE
>      The <CITE> element is used to indicate the title of a book or
other citation. It is typically rendered as italics. For example:

[CODE(HTMLe)[cite]] 要素は本の題名や他の引用を示します。
普通[RUBY[斜体][イタリック]]でレンダリングします。例:

[PRE(HTML)[
He just couldn't get enough of <cite>The Grapes of Wrath</cite>.
]PRE]

**** 5.7.1.2. Code: CODE
>      The <CODE> element indicates an example of code, typically
rendered in a mono-spaced font. The <CODE> element is intended for
short words or phrases of code; the <PRE> block structuring
element (5.5.2, "Preformatted Text: PRE") is more appropriate
for multiple-line listings. For example:

[CODE(HTMLe)[code]] 要素は符号の例を示し、
普通固定幅フォントでレンダリングします。 [CODE(HTMLe)[code]]
要素は符号の短い語や語句を想定しています。 [CODE(HTMLe)[[[pre]]]]
ブロック構造要素が複数行並びにはより適切です。例:

[PRE(HTML)[
      The expression <code>x += 1</code>
      is short for <code>x = x + 1</code>.
]PRE]

**** 5.7.1.3. Emphasis: EM
>      The <EM> element indicates an emphasized phrase, typically
rendered as italics. For example:

[CODE(HTMLe)[em]] 要素は強調語句を表し、
普通[RUBY[斜体][イタリック]]でレンダリングします。例:

[PRE(HTML)[
      A singular subject <em>always</em> takes a singular verb.
]PRE]

**** 5.7.1.4. Keyboard: KBD
>      The <KBD> element indicates text typed by a user, typically
rendered in a mono-spaced font. This is commonly used in
instruction manuals. For example:

[CODE(HTMLe)[kbd]] 要素は利用者が打鍵する文章を示し、
普通固定幅フォントでレンダリングします。
これは取扱説明書でよく使われます。例:

[PRE(HTML)[
      Enter <kbd>FIND IT</kbd> to search the database.
]PRE]

**** 5.7.1.5. Sample: SAMP
>      The <SAMP> element indicates a sequence of literal characters,
typically rendered in a mono-spaced font. For example:

[CODE(HTMLe)[samp]] 要素は[RUBY[表記][リテラル]]文字の列を示し、
普通固定長フォントでレンダリングします。例:

[PRE(HTML)[
      The only word containing the letters <samp>mt</samp> is dreamt.
]PRE]

**** 5.7.1.6. Strong Emphasis: STRONG
>      The <STRONG> element indicates strong emphasis, typically rendered
in bold. For example:

[CODE(HTMLe)[strong]] 要素は強い強調を示し、
普通太字でレンダリングします。例:

[PRE(HTML)[
      <strong>STOP</strong>, or I'll say "<strong>STOP</strong>" again!
]PRE]

**** 5.7.1.7. Variable: VAR
>      The <VAR> element indicates a placeholder variable, typically
rendered as italic. For example:

[CODE(HTMLe)[var]] 要素は場所取り変数を示し、
普通[RUBY[斜体][イタリック]]でレンダリングします。例:

[PRE(HTML)[
      Type <SAMP>html-check <VAR>file</VAR> | more</SAMP>
      to check <VAR>file</VAR> for markup errors.
]PRE]

*** 5.7.2. Typographic Elements
>      Typographic elements are used to specify the format of marked
text.

活字要素はマークした文章の書式を指定するために使います。

>      Typical renderings for idiomatic elements may vary between user
agents. If a specific rendering is necessary -- for example, when
referring to a specific text attribute as in "The italic parts are
mandatory" -- a typographic element can be used to ensure that the
intended typography is used where possible.

語法要素の普通のレンダリングは利用者エージェントによって色々かもしれません。
特定のレンダリングが必要なら、例えば[Q[[RUBY[斜体][イタリック]]の部分は必須です]]のように特定の文章を指したいなら、
意図した活字を使うことができれば使わせるために活字要素を使用できます。

>      NOTE - User agents may support some typographic elements not
included in this specification, as they have been deployed to some
extent. The <STRIKE> element indicates horizontal line through the
characters, and the <U> element indicates an underline.

備考: 利用者エージェントはこの仕様書に含まれていない活字要素もある程度使われているので、それにに対応しても構いません。
[CODE(HTMLe)[strike]] 要素は文字上の水平線を示し、
[CODE(HTMLe)[u]] 要素は下線を示します。

**** 5.7.2.1. Bold: B
>   The <B> element indicates bold text. Where bold typography is
unavailable, an alternative representation may be used.

[CODE(HTMLe)[b]] 要素は太字文を示します。
太字の活字が利用できなければ、代替表現を使っても構いません。

**** 5.7.2.2. Italic: I
>   The <I> element indicates italic text. Where italic typography is
unavailable, an alternative representation may be used.

[CODE(HTMLe)[i]] 要素は[RUBY[斜体][イタリック]]文を示します。
[RUBY[斜体][イタリック]]の活字が利用できなければ、
代替表現を使っても構いません。

**** 5.7.2.3. Teletype: TT
>   The <TT> element indicates teletype (monospaced )text. Where a
teletype font is unavailable, an alternative representation may be
used.

[CODE(HTMLe)[tt]] 要素はテレタイプ (単一幅) 文を示します。
テレタイプ・フォントが利用できなければ、
代替表現を使っても構いません。

*** 5.7.3. Anchor: A
>   The <A> element indicates a hyperlink anchor (see 7, "Hyperlinks").
At least one of the NAME and HREF attributes should be present.
Attributes of the <A> element:

[CODE(HTMLe)[a]] 要素はハイパーリンク・アンカーを示します。
[CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[href]] 属性の最低1つが存在するべきです。
[CODE(HTMLe)[a]] 要素の属性:

>
:    HREF:
gives the URI of the head anchor of a hyperlink.

ハイパーリンクの終点アンカーの URI を与えます。

>
:    NAME:
gives the name of the anchor, and makes it available as
a head of a hyperlink.

アンカーに名前を付け、ハイパーリンクの終点として利用できるようにします。

>
:    TITLE:
suggests a title for the destination resource --
advisory only. The TITLE attribute may be used:

終点資源の題を参考までに提案します。
[CODE(HTMLa)[title]] 属性は、

>
-                * for display prior to accessing the destination
resource, for example, as a margin note or on a
small box while the mouse is over the anchor, or
while the document is being loaded;

終点資源に access する前に、例えば余白のメモとして、
あるいは鼠をアンカーの上に置いている間の小さな箱に、
もしくは文書の読込中に表示しても構いません。

>
-                * for resources that do not include a title, such as
graphics, plain text and Gopher menus, for use as a
window title.

題を含まない資源、例えば図形、平文、 Gopher メニューで窓の題に使用しても構いません。

>
:    REL:
The REL attribute gives the relationship(s) described by
the hyperlink. The value is a whitespace separated list
of relationship names. The semantics of link
relationships are not specified in this document.

[CODE(HTMLa)[rel]] 属性はハイパーリンクが記述する関係を与えます。
値は関係名を間隔で分離した並びです。リンク関係の意味はこの文書では規定しません。

>
:    REV:
same as the REL attribute, but the semantics of the
relationship are in the reverse direction. A link from A
to B with REL="X" expresses the same relationship as a
link from B to A with REV="X". An anchor may have both
REL and REV attributes.

[CODE(HTMLa)[rel]] 属性と同じですが、関係の意味が逆方向です。
[CODE(HTML)[[CODE(HTMLa)[rel]]="X"]] の [VAR[A]] から [VAR[B]]
へのリンクは [CODE(HTML)[[CODE(HTMLa)[rev]]="X"]] の [VAR[B]]
から [VAR[A]] へのリンクと同じ関係を表現します。
アンカーは [CODE(HTMLa)[rel]] 属性と [CODE(HTMLa)[rev]]
属性の両方を持っても構いません。

>
:    URN:
specifies a preferred, more persistent identifier for
the head anchor of the hyperlink. The syntax and
semantics of the URN attribute are not yet specified.

ハイパーリンクの終点アンカーのより好ましい、
より持続的な識別子を指定します。
[CODE(HTMLa)[urn]] 属性の構文と意味はまだ規定されていません。

>
:    METHODS:
specifies methods to be used in accessing the
destination, as a whitespace-separated list of names.
The set of applicable names is a function of the scheme
of the URI in the HREF attribute. For similar reasons as
for the TITLE attribute, it may be useful to include the
information in advance in the link. For example, the
HTML user agent may chose a different rendering as a
function of the methods allowed; for example, something
that is searchable may get a different icon.

終点の access に使う method を、空白分離の名前の並びで指定します。
適用可能な名前の集合は [CODE(HTMLa)[href]] 属性の URI
の scheme の関数です。 [CODE(HTMLa)[title]] 属性同様の理由により、
リンクにあらかじめ有用な情報を含めるのに有用です。
例えば、 HTML 利用者エージェントは認められている method
の関数として異なるレンダリングを選ぶかもしれません。
例えば、何か検索可能なものには異なる絵をつけるかもしれません。

** 5.8. Line Break: BR
>   The <BR> element specifies a line break between words (see 6,
"Characters, Words, and Paragraphs"). For example:

[CODE(HTMLe)[br]] 要素は語間の改行を指定します。例:

[PRE(HTML)[
    <P> Pease porridge hot<BR>
    Pease porridge cold<BR>
    Pease porridge in the pot<BR>
    Nine days old.
]PRE]

** 5.9. Horizontal Rule: HR
>   The <HR> element is a divider between sections of text; typically a
full width horizontal rule or equivalent graphic.  For example:

[CODE(HTMLe)[br]] 要素は文章の章間の区切りです。
普通幅一杯の水平罫か同じような図形です。例:

[PRE(HTML)[
    <HR>
    <ADDRESS>February 8, 1995, CERN</ADDRESS>
    </BODY>
]PRE]

** 5.10. Image: IMG
>   The <IMG> element refers to an image or icon via a hyperlink (see
7.3, "Simultaneous Presentation of Image Resources").

[CODE(HTMLe)[img]] 要素はハイパーリンクを通して画像や小さな絵を指します。

>   HTML user agents may process the value of the ALT attribute as an
alternative to processing the image resource indicated by the SRC
attribute.

HTML 利用者エージェントは [CODE(HTMLa)[src]] 属性で示された画像資源を処理する代わりに
[CODE(HTMLa)[alt]] 属性の値を処理しても構いません。

>      NOTE - Some HTML user agents can process graphics linked via
anchors, but not <IMG> graphics. If a graphic is essential, it
should be referenced from an <A> element rather than an <IMG>
element. If the graphic is not essential, then the <IMG> element
is appropriate.

備考: HTML 利用者エージェントには、アンカーを介してリンクされた図形を処理できても
[CODE(HTMLe)[img]] 図形を処理できないものもあります。
図形が重要であるなら、 [CODE(HTMLe)[img]] 要素よりも [CODE(HTMLe)[a]]
要素で参照するべきです。図形が重要ではないなら、
[CODE(HTMLe)[img]] 要素が適切です。

>   Attributes of the <IMG> element:

[CODE(HTMLe)[img]] 要素の属性:

>
:    ALIGN:
alignment of the image with respect to the text
baseline.

文の基線に対する画像の揃え位置。

>
-                * `TOP' specifies that the top of the image aligns
with the tallest item on the line containing the
image.

[CODE(HTML)[top]] は画像の上を画像を含む行の一番高い項目に揃えると指定します。

>
-                * `MIDDLE' specifies that the center of the image
aligns with the baseline of the line containing the
image.

[CODE(HTML)[middle]] は画像の中央を画像を含む行の基線に揃えると指定します。

>
-                * `BOTTOM' specifies that the bottom of the image
aligns with the baseline of the line containing the
image.

[CODE(HTML)[bottom]] は画像の下を画像を含む行の基線に揃えると指定します。

>
:    ALT:
text to use in place of the referenced image resource,
for example due to processing constraints or user
preference.

参照された画像資源の代わりに使う文章。
例えば処理の制約や利用者の好みにより使います。

>
:    ISMAP:
indicates an image map (see 7.6, "Image Maps").

画像写像を示します。

>
:    SRC:
specifies the URI of the image resource.

画像資源の URI を指定します。

>                NOTE - In practice, the media types of image
resources are limited to a few raster graphic
formats: typically `image/gif', `image/jpeg'. In
particular, `text/html' resources are not
intended to be used as image resources.

備考: 実際には画像資源の媒体型はいくつかの raster 図形書式に限定されます。
普通 [CODE(MIME)[[[image/gif]]]], [CODE(MIME)[[[image/jpeg]]]] です。
特に、 [CODE(MIME)[[[text/html]]]] 資源は画像資源として使用することを想定していません。

>    Examples of use:
[PRE(HTML)[
    <IMG SRC="triangle.xbm" ALT="Warning:"> Be sure
    to read these instructions.
]PRE]
[PRE(HTML)[
    <a href="http://machine/htbin/imagemap/sample">
    <IMG SRC="sample.xbm" ISMAP>
    </a>
]PRE]

[INS[
訳注: 直前の NOTE の後に堂々と XBM を例に出す神経がまた素晴らしい。
]INS]

* 6. Characters, Words, and Paragraphs
>   An HTML user agent should present the body of an HTML document as a
collection of typeset paragraphs and preformatted text.  Except for
preformatted elements (<PRE>, <XMP>, <LISTING>, <TEXTAREA>), each
block structuring element is regarded as a paragraph by taking the
data characters in its content and the content of its descendant
elements, concatenating them, and splitting the result into words,
separated by space, tab, or record end characters (and perhaps hyphen
characters). The sequence of words is typeset as a paragraph by
breaking it into lines.

HTML 利用者エージェントは HTML 文書の本体を植字段落と整形済み文の集まりとして示すべきです。
各ブロック構造要素は、
整形済み要素 ([CODE(HTMLe)[pre]], [CODE(HTMLe)[xmp]],
[CODE(HTMLe)[listing]], [CODE(HTMLe)[textarea]]) を除き、
その内容と子孫要素の内容のデータ文字を取り、
それを間隔、タブ、記録終了文字 (とたぶんハイフン文字) で語に分割し、
段落とみなします。語の列は行に分けて段落として植字します。

** 6.1. The HTML Document Character Set
>   The document character set specified in 9.5, "SGML Declaration for
HTML" must be supported by HTML user agents. It includes the graphic
characters of Latin Alphabet No. 1, or simply Latin-1.  Latin-1
comprises 191 graphic characters, including the alphabets of most
Western European languages.

[CITE[HTML 用 SGML 宣言]]で規定する文書文字集合に HTML
利用者エージェントは対応しなければなりません。 HTML
文書文字集合にはラテン字母その1 (Latin-1) の図形文字が含まれます。
Latin-1 は191個の図形文字から成り、ほとんどの西洋言語の字母が含まれます。

>      NOTE - Use of the non-breaking space and soft hyphen indicator
characters is discouraged because support for them is not widely
deployed.

備考: 非改行間隔と軟ハイフンは、あまり実装されていないので、
使用することは非推奨とします。

>      NOTE - To support non-western writing systems, a larger character
repertoire will be specified in a future version of HTML. The
document character set will be [ISO-10646], or some subset that
agrees with [ISO-10646]; in particular, all numeric character
references must use code positions assigned by [ISO-10646].

備考: 非西洋書記法に対応するため、将来の版の HTML
ではより大きな文字レパートリを規定することになるでしょう。
文書文字集合は ISO/IEC 10646 か、その部分集合となるでしょう。
特に、すべての数値文字参照は ISO/IEC 10646
で割当てられた符号位置を使わなければなりません。

>   In SGML applications, the use of control characters is limited in
order to maximize the chance of successful interchange over
heterogeneous networks and operating systems. In the HTML document
character set only three control characters are allowed: Horizontal
Tab, Carriage Return, and Line Feed (code positions 9, 13, and 10).

SGML 応用では、異種のネットワークやオペレーティング・システムで情報交換が成功する機会を最大化するために制御文字の使用を制限しています。
HTML 文書文字集合は水平タブ、復帰、改行 (符号位置 [CODE(char)[9]],
[CODE(char)[13]], [CODE(char)[10]]) の3つの制御文字だけが認められます。

>   The HTML DTD references the Added Latin 1 entity set, to allow
mnemonic representation of selected Latin 1 characters using only the
widely supported ASCII character repertoire. For example:

HTML DTD は、広く対応されている ASCII 文字レパートリだけを使って選定
Latin 1 文字を略称表現できるように、追加 Latin 1
実体集合を参照しています。例:

[PRE(HTML)[
   Kurt G&ouml;del was a famous logician and mathematician.
]PRE]

>   See 9.7.2, "ISO Latin 1 Character Entity Set" for a table of the
"Added Latin 1" entities, and 13, "The HTML Coded Character Set" for
a table of the code positions of [ISO 8859-1] and the control
characters in the HTML document character set.

「追加 Latin 1」実体の表は [CITE[ISO Latin 1 文字実体集合]]を、
ISO/IEC 8859-1 の符号位置の表と HTML 文書文字集合の制御文字は
[CITE[HTML 文書文字集合]]を見て下さい。

* 7. Hyperlinks
>   In addition to general purpose elements such as paragraphs and lists,
HTML documents can express hyperlinks. An HTML user agent allows the
user to navigate these hyperlinks.

HTML 文書は、段落や並びのような一般目的の要素に加えて、
ハイパーリンクを表現できます。 HTML 利用者エージェントを使って利用者はハイパーリンクを飛び回れます。

>   A hyperlink is a relationship between two anchors, called the head
and the tail of the hyperlink[DEXTER]. Anchors are identified by an
anchor address: an absolute Uniform Resource Identifier (URI),
optionally followed by a '#' and a sequence of characters called a
fragment identifier. For example:

ハイパーリンクは2つのアンカーの関係で、
それぞれのアンカーをハイパーリンクの頭と尾といいます。
アンカーはアンカー番地で識別します。
アンカー番地は絶対統一資源識別子 (URI) とそれに続く省略可能な
[CODE(URI)[#]] と[[素片識別子]]という文字列です。例:

>
-   [SAMP(URI)[http://www.w3.org/hypertext/WWW/TheProject.html]]
-   [SAMP(URI)[http://www.w3.org/hypertext/WWW/TheProject.html#z31]]

>   In an anchor address, the URI refers to a resource; it may be used in
a variety of information retrieval protocols to obtain an entity that
represents the resource, such as an HTML document. The fragment
identifier, if present, refers to some view on, or portion of the
resource.

アンカー番地では、 URI が資源を指します。
URI は資源を表現する実体、例えば HTML 文書を得るための種々の情報取出しプロトコルを使うことができます。
素片識別子は、存在する場合、資源の何らかの視点や一部分を指します。

>   Each of the following markup constructs indicates the tail anchor of
a hyperlink or set of hyperlinks:

次のマーク構造がそれぞれハイパーリンクの尾またはハイパーリンクの集合を示します。

>
-        * <A> elements with HREF present.
-        * <LINK> elements.
-        * <IMG> elements.
-        * <INPUT> elements with the SRC attribute present.
-        * <ISINDEX> elements.
-        * <FORM> elements with `METHOD=GET'.

- [CODE(HTMLa)[[[href]]]] 属性のある [CODE(HTMLe)[[[a]]]] 要素
- [CODE(HTMLe)[[[link]]]] 要素
- [CODE(HTMLe)[[[img]]]] 要素
- [CODE(HTMLa)[[[src]]]] 属性のある [CODE(HTMLe)[[[input]]]] 要素
- [CODE(HTMLe)[[[isindex]]]] 要素
- [CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[GET]]]] の
[CODE(HTMLe)[[[form]]]] 要素

>   These markup constructs refer to head anchors by a URI, either
absolute or relative, or a fragment identifier, or both.

これらのマーク構造は絶対 URI または相対 URI か素片識別子かその両方で頭アンカーを指します。

>   In the case of a relative URI, the absolute URI in the address of the
head anchor is the result of combining the relative URI with a base
absolute URI as in [RELURL]. The base document is taken from the
document's <BASE> element, if present; else, it is determined as in
[RELURL].

相対 URI の場合、頭アンカーの番地の絶対 URI はその相対 URI
を [[RFC 1808]] の通り基底絶対 URI と結合した結果です。
基底文書はその文書に [CODE(HTMLe)[[[base]]]]
要素があればそこから取ります。なければ RFC 1808
の通り決定します。

** 7.1. Accessing Resources
>   Once the address of the head anchor is determined, the user agent may
obtain a representation of the resource.

一度頭アンカーの番地が決定されれば、利用者エージェントは資源の表現を得ることができます。

>   For example, if the base URI is `http://host/x/y.html' and the
document contains:

例えば、基底 URI が [SAMP(URI)[http://host/x/y.html]] で、
文書が

[PRE(HTML)[
   <img src="../icons/abc.gif">
]PRE]

>   then the user agent uses the URI `http://host/icons/abc.gif' to
access the resource, as in [URL]..

を含んでいれば、利用者エージェントは資源に access するために
URI [SAMP(URI)[http://host/icons/abc.gif]] を [[RFC 1738]]
の通り使います。

** 7.2. Activation of Hyperlinks
>   An HTML user agent allows the user to navigate the content of the
document and request activation of hyperlinks denoted by <A>
elements. HTML user agents should also allow activation of <LINK>
element hyperlinks.

HTML 利用者エージェントによって利用者は文書の内容をまわって 
[CODE(HTMLe)[a]] 要素で示されるハイパーリンクの活性化を要求できます。
HTML 利用者エージェントは [CODE(HTMLe)[link]] 
要素ハイパーリンクの活性化もできるべきです。

>   To activate a link, the user agent obtains a representation of the
resource identified in the address of the head anchor. If the
representation is another HTML document, navigation may begin again
with this new document.

利用者エージェントは、リンクを活性化するため、
頭アンカーの番地で識別される資源の表現を得ます。
表現が他の HTML 文書なら、閲覧はまたこの新しい文書から始まります。

** 7.3. Simultaneous Presentation of Image Resources
>   An HTML user agent may activate hyperlinks indicated by <IMG> and
<INPUT> elements concurrently with processing the document; that is,
image hyperlinks may be processed without explicit request by the
user. Image resources should be embedded in the presentation at the
point of the tail anchor, that is the <IMG> or <INPUT> element.

HTML 利用者エージェントは [CODE(HTMLe)[[[img]]]] 要素や
[CODE(HTMLe)[[[input]]]] 要素によって示されるハイパーリンクを文書の処理中すぐに活性化して構いません。
つまり、画像ハイパーリンクは利用者の明示的な要求なしで処理して構いません。
画像資源は尾アンカーの場所、つまり [CODE(HTMLe)[img]] 要素または
[CODE(HTMLe)[input]] 要素の場所の表現に埋め込むべきです。

>   <LINK> hyperlinks may also be processed without explicit user
request; for example, style sheet resources may be processed before
or during the processing of the document.

[CODE(HTMLe)[link]] ハイパーリンクも利用者の明示的な要求なしで処理して構いません。
例えば、スタイル・シート資源は文書の処理中か処理前に処理して構いません。

** 7.4. Fragment Identifiers
>   Any characters following a `#' character in a hypertext address
constitute a fragment identifier. In particular, an address of the
form `#fragment' refers to an anchor in the same document.

ハイパーテキスト番地の [CODE(URI)[#]] 文字に続く文字はすべて素片識別子を構成します。
特に、 [SAMP(URI)[#fragment]] の形の番地は同じ文書中のアンカーを指します。

>   The meaning of fragment identifiers depends on the media type of the
representation of the anchor's resource. For `text/html'
representations, it refers to the <A> element with a NAME attribute
whose value is the same as the fragment identifier.  The matching is
case sensitive. The document should have exactly one such element.
The user agent should indicate the anchor element, for example by
scrolling to and/or highlighting the phrase.

素片識別子の意味はアンカーの資源の表現の媒体型に依存します。
例えば、 [CODE(MIME)[text/html]] 資源では、素片識別子は
値が素片識別子と同じ [CODE(HTMLa)[[[name]]]] 属性の
[CODE(HTMLe)[[[a]]]] 要素を指します。
一致は大文字・小文字を区別します。文書はそのような要素を丁度1つ持つべきです。
利用者エージェントは、例えば scroll したり語句を強調したりして、
そのアンカー要素を示すべきです。

>   For example, if the base URI is `http://host/x/y.html' and the user
activated the link denoted by the following markup:

例えば、基底 URI が [SAMP(URI)[http://host/x/y.html]] で、
利用者が次のマークで表されるリンクを活性化したとします。

[PRE(HTML)[
   <p> See: <a href="app1.html#bananas">appendix 1</a>
   for more detail on bananas.
]PRE]

>   Then the user agent accesses the resource identified by
`http://host/x/app1.html'. Assuming the resource is represented using
the `text/html' media type, the user agent must locate the <A>
element whose NAME attribute is `bananas' and begin navigation there.

この時利用者エージェントは [SAMP(URI)[http://host/x/app1.html]]
で識別される資源に access します。資源が [CODE(MIME)[text/html]]
媒体型を使って表現されると仮定すると、利用者エージェントは
[CODE(HTMLa)[name]] 属性が [SAMP[bananas]] の [CODE(HTMLe)[a]]
要素を探し、そこから navigation
を始めなければなりません。

** 7.5. Queries and Indexes
>   The <ISINDEX> element represents a set of hyperlinks. The user can
choose from the set by providing keywords to the user agent.  The
user agent computes the head URI by appending `?' and the keywords to
the base URI. The keywords are escaped according to [URL] and joined
by `+'. For example, if a document contains:

[CODE(HTMLe)[isindex]] 要素はハイパーリンクの集合を表現します。
利用者は利用者エージェントに鍵語を与えることによって集合からハイパーリンクを選ぶことができます。
利用者エージェントは基底 URI に [SAMP(URI)[?]] と鍵語を加えることによって頭
URI を計算します。鍵語は [[RFC 1738]] に従って escape
し、 [SAMP(URI)[+]] でつなげます。例えば、文書が

[PRE(HTML)[
    <BASE HREF="http://host/index">
    <ISINDEX>
]PRE]

>    and the user provides the keywords `apple' and `berry', then the
user agent must access the resource
`http://host/index?apple+berry'.

を含み、利用者が鍵語 [SAMP[apple]] と [SAMP[berry]]
を指定したとすると、利用者エージェントは資源
[SAMP(URI)[http://host/index?apple+berry]] に access
しなければなりません。

>    <FORM> elements with `METHOD=GET' also represent sets of
hyperlinks. See 8.2.2, "Query Forms: METHOD=GET" for details.

[CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[GET]]]]]]
の [CODE(HTMLe)[form]] 要素もハイパーリンクの集合を表現します。

** 7.6. Image Maps
>   If the ISMAP attribute is present on an <IMG> element, the <IMG>
element must be contained in an <A> element with an HREF present.
This construct represents a set of hyperlinks. The user can choose
from the set by choosing a pixel of the image. The user agent
computes the head URI by appending `?' and the x and y coordinates of
the pixel to the URI given in the <A> element.  For example, if a
document contains:

[CODE(HTMLe)[img]] 要素に [CODE(HTMLa)[ismap]] 属性が存在すれば、
その [CODE(HTMLe)[img]] 要素は [CODE(HTMLa)[href]]
属性の存在する [CODE(HTMLe)[a]] 要素に含まれていなければなりません。
この構造はハイパーリンクの集合を表現します。
利用者は画像の画素を選ぶことで集合からハイパーリンクを選ぶことができます。
利用者エージェントは [CODE(HTMLe)[a]] 要素に与えられた URI
に [SAMP(URI)[?]] と画素の [VAR(math)[x]] 座標と [VAR(math)[y]]
座標を加えることで頭 URI を計算します。例えば、文書が

[PRE(HTML)[
   <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
   <head><title>ImageMap Example</title>
   <BASE HREF="http://host/index"></head>
   <body>
   <p> Choose any of these icons:<br>
   <a href="/cgi-bin/imagemap"><img ismap src="icons.gif"></a>
]PRE]

>   and the user chooses the upper-leftmost pixel, the chosen
hyperlink is the one with the URI
`http://host/cgi-bin/imagemap?0,0'.

を含んでいて、利用者が一番左上の画素を選んだとすると、
選んだハイパーリンクは URI が
[SAMP(URI)[http://host/cgi-bin/imagemap?0,0]] のものです。

* 8. Forms
>   A form is a template for a form data set and an associated
method and action URI. A form data set is a sequence of
name/value pair fields. The names are specified on the NAME
attributes of form input elements, and the values are given
initial values by various forms of markup and edited by the
user. The resulting form data set is used to access an
information service as a function of the action and method.

フォームは、フォーム・データ集合の雛形および関連付けられた method
と動作 URI です。フォーム・データ集合は名前と値の組の欄の列です。
名前はフォーム入力要素の [CODE(HTMLa)[name]]
属性で指定し、値は種々の形態のマークで初期値を指定して利用者が編集します。
結果のフォーム・データ集合は動作と method
の関数として情報サービスに access するために使います。

>   Forms elements can be mixed in with document structuring
elements. For example, a <PRE> element may contain a <FORM>
element, or a <FORM> element may contain lists which contain
<INPUT> elements. This gives considerable flexibility in
designing the layout of forms.

フォーム要素は文書構造化要素と混ぜて使うことができます。
例えば、 [CODE(HTMLe)[[[pre]]]] 要素は [CODE(HTMLe)[[[form]]]]
要素を含むことができますし、 [CODE(HTMLe)[form]]
要素は並びを含むことができますし、並びは
[CODE(HTMLe)[[[input]]]] 要素を含むことができます。
これはフォームの配置の設計にかなりの柔軟性を与えます。

>   Form processing is a level 2 feature.

フォーム処理は水準 2 の機能です。

** 8.1. Form Elements
*** 8.1.1. Form: FORM
>   The <FORM> element contains a sequence of input elements, along
with document structuring elements. The attributes are:

[CODE(HTMLe)[form]] 要素は入力要素の列を、
文書構造化要素と共に含みます。属性:

>
:    ACTION:
specifies the action URI for the form. The action URI of
a form defaults to the base URI of the document (see 7,
"Hyperlinks").

フォームの動作 URI を指定します。フォームの動作 URI
はその文書の基底 URI が既定となります。

>
:    METHOD:
selects a method of accessing the action URI. The set of
applicable methods is a function of the scheme of the
action URI of the form. See 8.2.2, "Query Forms:
METHOD=GET" and 8.2.3, "Forms with Side-Effects:
METHOD=POST".

動作 URI に access する方式を選択します。適用可能な method
の集合はフォームの動作 URI の scheme の関数です。

>
:    ENCTYPE:
specifies the media type used to encode the name/value
pairs for transport, in case the protocol does not
itself impose a format. See 8.2.1, "The form-urlencoded
Media Type".

名前・値の組を輸送時にプロトコル自体が書式を決めていない場合に符号化するために使われる媒体型を指定します。

*** 8.1.2. Input Field: INPUT
>   The <INPUT> element represents a field for user input. The TYPE
attribute discriminates between several variations of fields.

[CODE(HTMLe)[input]] 要素は利用者入力欄を表現します。
[CODE(HTMLa)[type]] 属性が欄の種類を区別します。

>   The <INPUT> element has a number of attributes. The set of applicable
attributes depends on the value of the TYPE attribute.

[CODE(HTMLe)[input]] 要素は数々の属性を持っています。
適用可能な属性の集合は [CODE(HTMLa)[type]] 属性の値に依存します。

**** 8.1.2.1. Text Field: INPUT TYPE=TEXT
>   The default value of the TYPE attribute is `TEXT', indicating a
single line text entry field. (Use the <TEXTAREA> element for multi-
line text fields.)

[CODE(HTMLa)[type]] 属性の既定値は ODE(HTML)[text]] で、
単一行文章入力欄を示します。 (複数行文章欄には [CODE(HTMLe)[[[textarea]]]]
要素を使って下さい。)

>   Required attributes are:

必須属性:

>
:    NAME:
name for the form field corresponding to this element.

この要素に対応するフォーム欄の名前。

>    The optional attributes are:

省略可能な属性:

>
:    MAXLENGTH:
constrains the number of characters that can be entered
into a text input field. If the value of MAXLENGTH is
greater the the value of the SIZE attribute, the field
should scroll appropriately. The default number of
characters is unlimited.

文章入力欄に入力できる文字の数を制約します。
[CODE(HTMLa)[maxlength]] 値が [CODE(HTMLa)[size]]
属性の値よりも大きければ、欄は適当に scroll するべきです。
既定の文字数は無制限です。

>
:    SIZE:
specifies the amount of display space allocated to this
input field according to its type. The default depends
on the user agent.

この入力欄に割当てる表示空間の量をその型に従って指定します。
既定値は利用者エージェントに依存します。

>
:    VALUE:
The initial value of the field.

欄の初期値。

>    For example:
[PRE(HTML)[
<p>Street Address: <input name=street><br>
Postal City code: <input name=city size=16 maxlength=16><br>
Zip Code: <input name=zip size=10 maxlength=10 value="99999-9999"><br>
]PRE]

**** 8.1.2.2. Password Field: INPUT TYPE=PASSWORD
>   An <INPUT> element with `TYPE=PASSWORD' is a text field as above,
except that the value is obscured as it is entered. (see also: 10,
"Security Considerations").

[CODE(HTML)[[CODE(HTMLa)[type]]=password]] の [CODE(HTMLe)[input]]
要素は前述の文章欄ですが、その値は入力しても隠されます。

>   For example:
[PRE(HTML)[
<p>Name: <input name=login> Password: <input type=password name=passwd>
]PRE]

**** 8.1.2.3. Check Box: INPUT TYPE=CHECKBOX
>   An <INPUT> element with `TYPE=CHECKBOX' represents a boolean choice.
A set of such elements with the same name represents an n-of-many
choice field. Required attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=checkbox]] の [CODE(HTMLe)[input]]
要素は真偽の選択を表現します。同じ名前のこの種の要素の集合は
[Q[複数の選択肢から [VAR[n]] 個]]の欄を表現します。
必須の属性:

>
:    NAME:
symbolic name for the form field corresponding to this
element or group of elements.

この要素またはこの要素群に対応するフォーム欄の記号名。

>
:    VALUE:
The portion of the value of the field contributed by
this element.

この要素が貢献する欄の値の一部分。

>    Optional attributes are:

省略可能な属性:

>
:    CHECKED:
indicates that the initial state is on.

初期状態が入であることを示します。

>    For example:
[PRE(HTML)[
  <p>What flavors do you like?
  <input type=checkbox name=flavor value=vanilla>Vanilla<br>
  <input type=checkbox name=flavor value=strawberry>Strawberry<br>
  <input type=checkbox name=flavor value=chocolate checked>Chocolate<br>
]PRE]

**** 8.1.2.4. Radio Button: INPUT TYPE=RADIO
>   An <INPUT> element with `TYPE=RADIO' represents a boolean choice. A
set of such elements with the same name represents a 1-of-many choice
field. The NAME and VALUE attributes are required as for check boxes.
Optional attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=radio]] の [CODE(HTMLe)[input]]
要素は真偽の選択を表現します。同じ名前のこの種の要素の集合は、
[Q[複数の選択肢から1個]]の欄を表現します。
チェック箱同様に [CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[value]]
属性が必須です。省略可能な属性:

>
:    CHECKED:
indicates that the initial state is on.

初期状態が入であることを示します。

>   At all times, exactly one of the radio buttons in a set is checked.
If none of the <INPUT> elements of a set of radio buttons specifies
`CHECKED', then the user agent must check the first radio button of
the set initially.

集合中のラジオ・ボタンは、いつも丁度1つがチェックされます。
ラジオ・ボタンの集合の [CODE(HTMLe)[input]]
要素のどれも [CODE(HTMLa)[checked]] が指定されていなければ、
利用者エージェントは初期状態として集合の最初のラジオ・ボタンをチェックしなければなりません。

>   For example:
[PRE(HTML)[
    <p>Which is your favorite?
    <input type=radio name=flavor value=vanilla>Vanilla<br>
    <input type=radio name=flavor value=strawberry>Strawberry<br>
    <input type=radio name=flavor value=chocolate>Chocolate<br>
]PRE]

**** 8.1.2.5. Image Pixel: INPUT TYPE=IMAGE
>   An <INPUT> element with `TYPE=IMAGE' specifies an image resource to
display, and allows input of two form fields: the x and y coordinate
of a pixel chosen from the image. The names of the fields are the
name of the field with `.x' and `.y' appended.  `TYPE=IMAGE' implies
`TYPE=SUBMIT' processing; that is, when a pixel is chosen, the form
as a whole is submitted.

[CODE(HTML)[[CODE(HTMLa)[type]]=image]] の [CODE(HTMLe)[input]]
要素は表示する画像資源を指定すると共に、画像から選んだ画素の
[VAR(math)[x]] 座標と [VAR(math)[y]] 座標の2つのフォーム欄の入力を認めます。
2つの欄の名前は、欄の名前に [CODE(HTML)[.x]] と [CODE(HTML)[,y]]
を付加したものです。 [CODE(HTML)[[CODE(HTMLa)[type]]=image]]
は [CODE(HTML)[[CODE(HTMLa)[type]]=submit]] 処理を暗示します。
つまり、画素が選ばれた時、フォーム全体が提出されます。

>   The NAME attribute is required as for other input fields. The SRC
attribute is required and the ALIGN is optional as for the <IMG>
element (see 5.10, "Image: IMG").

他の入力欄同様に [CODE(HTMLa)[name]] 属性が必須です。
ODE(HTMLe)[[[img]]]] 要素同様に [CODE(HTMLa)[[[src]]]]
属性が必須で [CODE(HTMLa)[[[align]]]] 属性が省略可能です。

>   For example:
[PRE(HTML)[
    <p>Choose a point on the map:
    <input type=image name=point src="map.gif">
]PRE]

**** 8.1.2.6. Hidden Field: INPUT TYPE=HIDDEN
>   An <INPUT> element with `TYPE=HIDDEN' represents a hidden field.The
user does not interact with this field; instead, the VALUE attribute
specifies the value of the field. The NAME and VALUE attributes are
required.

[CODE(HTML)[[CODE(HTMLa)[type]]=hidden]] の [CODE(HTMLe)[input]]
要素は隠し欄を表現します。利用者はこの欄と対話しません。
代わりに、 [CODE(HTMLa)[value]] 属性がこの欄の値を指定します。
[CODE(HTMLa)[name]] 属性と [CODE(HTMLa)[value]]
属性が必須です。

>   For example:
[PRE(HTML)[
   <input type=hidden name=context value="l2k3j4l2k3j4l2k3j4lk23">
]PRE]

**** 8.1.2.7. Submit Button: INPUT TYPE=SUBMIT
>   An <INPUT> element with `TYPE=SUBMIT' represents an input option,
typically a button, that instructs the user agent to submit the form.
Optional attributes are:

[CODE(HTML)[[CODE(HTMLa)[type]]=submit]] の [CODE(HTMLe)[input]]
要素は、利用者エージェントにフォームを提出するよう指示する入力選択肢、
普通はボタンを表現します。省略可能な属性:

>
:    NAME:
indicates that this element contributes a form field
whose value is given by the VALUE attribute. If the NAME
attribute is not present, this element does not
contribute a form field.

この要素がフォーム欄に貢献することを示し、
その値は [CODE(HTMLa)[value]] で与えられます。
[CODE(HTMLa)[name]] 属性が存在しなければ、
この要素はフォーム欄に貢献しません。

>
:    VALUE:
indicates a label for the input (button).

入力 (ボタン) の札を示します。

[PRE(HTML)[
    You may submit this request internally:
    <input type=submit name=recipient value=internal><br>
    or to the external world:
    <input type=submit name=recipient value=world>
]PRE]

**** 8.1.2.8. Reset Button: INPUT TYPE=RESET
>   An <INPUT> element with `TYPE=RESET' represents an input option,
typically a button, that instructs the user agent to reset the form's
fields to their initial states. The VALUE attribute, if present,
indicates a label for the input (button).

[CODE(HTML)[[CODE(HTMLa)[type]]=reset]] の [CODE(HTMLe)[input]]
要素は、利用者エージェントにフォームの欄を初期状態に再設定するよう指示する入力選択肢、
普通はボタンを表現します。 [CODE(HTMLa)[value]] 属性が存在すれば、
入力 (ボタン) の札を示します。

[PRE(HTML)[
When you are finished, you may submit this request:
<input type=submit><br>
You may clear the form and start over at any time: <input type=reset>
]PRE]

*** 8.1.3. Selection: SELECT
>   The <SELECT> element constrains the form field to an enumerated list
of values. The values are given in <OPTION> elements.  Attributes
are:

[CODE(HTMLe)[select]] 要素はフォーム欄を値の列挙並びに制約します。
値は [CODE(HTMLe)[option]] 要素で与えます。属性:

>
:    MULTIPLE:
indicates that more than one option may be included in
the value.

複数の選択肢を値に含められることを示します。

>
:    NAME:
specifies the name of the form field.

フォーム欄の名前を指定します。

>
:    SIZE:
specifies the number of visible items. Select fields of
size one are typically pop-down menus, whereas select
fields with size greater than one are typically lists.

可視項目の数を指定します。寸法が一の選択欄は普通ポップ・ダウン・メニューで、
寸法が一より大きな選択欄は普通並びです。

>    For example:
[PRE(HTML)[
    <SELECT NAME="flavor">
    <OPTION>Vanilla
    <OPTION>Strawberry
    <OPTION value="RumRasin">Rum and Raisin
    <OPTION selected>Peach and Orange
    </SELECT>
]PRE]

>   The initial state has the first option selected, unless a SELECTED
attribute is present on any of the <OPTION> elements.

初期状態は、 [CODE(HTMLe)[option]] 要素のどれかに [CODE(HTMLa)[selected]]
属性が存在しなければ、最初の選択肢を選んだ状態です。

**** 8.1.3.1. Option: OPTION
>   The Option element can only occur within a Select element. It
represents one choice, and has the following attributes:

[CODE(HTMLe)[option]] 要素は [CODE(HTMLe)[select]]
要素内にのみ出現できます。 [CODE(HTMLe)[option]]
要素は一つの選択肢を表現し、次の属性を持ちます。

>
:    SELECTED:
Indicates that this option is initially selected.

この選択肢が初期状態で選択されていることを示します。

>
:    VALUE:
indicates the value to be returned if this option is
chosen. The field value defaults to the content of the
<OPTION> element.

この選択肢が選ばれた時に返される値を示します。
欄値の既定値は [CODE(HTMLe)[option]] 要素の内容です。

>   The content of the <OPTION> element is presented to the user to
represent the option. It is used as a returned value if the VALUE
attribute is not present.

[CODE(HTMLe)[option]] 要素の内容は利用者に選択肢として提示されます。
また、 [CODE(HTMLa)[value]] 属性が存在しない時に返す値として使われます。

*** 8.1.4. Text Area: TEXTAREA
>   The <TEXTAREA> element represents a multi-line text field.
Attributes are:

[CODE(HTMLe)[textarea]] 要素は複数行文章欄を表現します。
属性:

>
:    COLS:
the number of visible columns to display for the text
area, in characters.

文章欄を表示する可視列の数を文字数で。

>
:    NAME:
Specifies the name of the form field.

フォーム欄の名前を指定します。

>
:    ROWS:
The number of visible rows to display for the text area,
in characters.

文章欄を表示する可視行の数を文字数で。

>    For example:
[PRE(HTML)[
    <TEXTAREA NAME="address" ROWS=6 COLS=64>
    HaL Computer Systems
    1315 Dell Avenue
    Campbell, California 95008
    </TEXTAREA>
]PRE]

>   The content of the <TEXTAREA> element is the field's initial value.

[CODE(HTMLe)[textarea]] 要素の内容は欄の初期値です。

>   Typically, the ROWS and COLS attributes determine the visible
dimension of the field in characters. The field is typically rendered
in a fixed-width font. HTML user agents should allow text to extend
beyond these limits by scrolling as needed.

普通、 [CODE(HTMLa)[rows]] 属性と [CODE(HTMLa)[cols]]
属性が欄の可視次元を文字数で決定します。
欄は普通固定幅フォントでレンダリングします。
HTML 利用者エージェントは文章がこれらの制限を超えても必要に応じて
scroll することで伸ばせるべきです。

** 8.2. Form Submission
>   An HTML user agent begins processing a form by presenting the
document with the fields in their initial state. The user is allowed
to modify the fields, constrained by the field type etc.  When the
user indicates that the form should be submitted (using a submit
button or image input), the form data set is processed according to
its method, action URI and enctype.

HTML 利用者エージェントは、欄を初期状態にして文書を提示することでフォーム処理を始めます。
利用者は欄の種類その他の制約の元で欄を集成できます。
利用者がフォームを提出せよと (提出ボタンや画像入力を使って) 示した時、
フォーム・データ集合を method と行動 URI と enctype
に従って処理します。

>   When there is only one single-line text input field in a form, the
user agent should accept Enter in that field as a request to submit
the form.

利用者エージェントは、フォームに1つの単一行文章入力欄しかない時には、
その欄での [KEY[Enter]] をフォームの提出の要求として受付けるべきです。

*** 8.2.1. The form-urlencoded Media Type
>   The default encoding for all forms is `application/x-www-form-urlencoded'. A form data set is represented in this media type as
follows:

すべてのフォームの既定の符号化は [CODE(MIME)[application/x-www-form-urlencoded]]
です。フォーム・データ集合はこの媒体型で次の通り表現します。

>
=        1. The form field names and values are escaped: space
characters are replaced by `+', and then reserved characters
are escaped as per [URL]; that is, non-alphanumeric
characters are replaced by `%HH', a percent sign and two
hexadecimal digits representing the ASCII code of the
character. Line breaks, as in multi-line text field values,
are represented as CR LF pairs, i.e. `%0D%0A'.
=        2. The fields are listed in the order they appear in the
document with the name separated from the value by `=' and
the pairs separated from each other by `&'. Fields with null
values may be omitted. In particular, unselected radio
buttons and checkboxes should not appear in the encoded
data, but hidden fields with VALUE attributes present should.

= フォーム欄名と値を escape します。間隔文字は [CODE(URI)[+]]
で置換してから、 [[RFC 1738]] の通り予約文字を escape します。
つまり、非英数文字は [SAMP(URI)[%[VAR[HH]]]] (百分率記号と2つの16進数字で文字の
ASCII 符号を表現したもの) で置換します。複数行文章欄の値の改行は、
[CODE(char)[CR]] [CODE(char)[LF]] 組で、つまり [SAMP(URI)[%0D%0A]]
で表現します。
= 欄は文書に出現する順序に並べて名前と値は [SAMP(URI)[=]] で区切り、
各組は [CODE(URI)[&]] で区切ります。 Null 値の欄は省略して構いません。
特に、未選択のラジオ・ボタンとチェック箱は符号化データに出現するべきではありませんが、
[CODE(HTMLa)[value]] 属性の存在する隠し欄は出現するべきです。

>            NOTE - The URI from a query form submission can be
used in a normal anchor style hyperlink.
Unfortunately, the use of the `&' character to
separate form fields interacts with its use in SGML
attribute values as an entity reference delimiter.
For example, the URI `http://host/?x=1&y=2' must be
written `<a href="http://host/?x=1&#38;y=2"' or `<a
href="http://host/?x=1&amp;y=2">'.

備考: 照会フォーム提出による URI は通常のアンカー式のハイパーリンクで使うこともできます。
残念ながら、 [CODE(char)[&]] 文字をフォーム欄の区切りに使うのは
[[SGML]] の[[属性値]]では[[実体参照]]区切子になってしまいます。
例えば、 URI [SAMP(URI)[http://host/?x=1&y=2]] は
[SAMP(HTML)[<a href="http://host/?x=1&#38;y=2"]] または
[SAMP(HTML)[<a href="http://host/?x=1&amp;y=2">]]
と書かなければなりません。

>            HTTP server implementors, and in particular, CGI
implementors are encouraged to support the use of
`;' in place of `&' to save users the trouble of
escaping `&' characters this way.

HTTP 鯖実装者と、特に CGI 実装者は、このように [SAMP(char)[&]]
文字を escape する問題から利用者をまもるために [SAMP(URI)[&]]
の場所で [SAMP(URI)[;]] を使うのを支援することを推奨します。

*** 8.2.2. Query Forms: METHOD=GET
>   If the processing of a form is idempotent (i.e. it has no lasting
observable effect on the state of the world), then the form method
should be `GET'. Many database searches have no visible side-effects
and make ideal applications of query forms.

フォームの処理が[[同効]] (世界の状態に目立った影響がなければ)、
フォームの method は [CODE(HTTP)[[[GET]]]] とするべきです。
多くのデータベース検索は目に見える副作用が無く、
照会フォームの理想的な応用です。

>   To process a form whose action URL is an HTTP URL and whose method is
`GET', the user agent starts with the action URI and appends a `?'
and the form data set, in `application/x-www-form-urlencoded' format
as above. The user agent then traverses the link to this URI just as
if it were an anchor (see 7.2, "Activation of Hyperlinks").

利用者エージェントは、行動 URL が HTTP URL で method が [CODE(HTTP)[GET]] 
のフォームを処理する場合、まず行動 URI を用意し、
ODE(URI)[?]] を付加し、更にフォーム・データ集合を前述の
[CODE(MIME)[[[application/x-www-form-urlencoded]]]] 書式で付加します。
利用者エージェントはそれからこの URI
へのリンクをアンカーの場合と同じように探索します。

>      NOTE - The URL encoding may result in very long URIs, which cause
some historical HTTP server implementations to exhibit defective
behavior. As a result, some HTML forms are written using
`METHOD=POST' even though the form submission has no side-effects.

備考: URL 符号化によって非常に長い URL となって、
古い HTTP 鯖実装がいかれた動作をしめすことがあります。
ですから、フォーム提出による副作用が無くても 
[CODE(HTML)[[CODE(HTMLa)[method]]=[CODE(HTTP)[[[POST]]]]]]
を使って書かれた HTML フォームもあります。

*** 8.2.3. Forms with Side-Effects: METHOD=POST
>   If the service associated with the processing of a form has side
effects (for example, modification of a database or subscription to a
service), the method should be `POST'.

フォームの処理に関連付けられたサービスが副作用を持っているなら
(例えばデータベースの修正やサービスへの登録が行われるなら)、
method は [CODE(HTTP)[[[POST]]]] とするべきです。

>   To process a form whose action URL is an HTTP URL and whose method is
`POST', the user agent conducts an HTTP POST transaction using the
action URI, and a message body of type `application/x-www-form-urlencoded' format as above. The user agent should display the
response from the HTTP POST interaction just as it would display the
response from an HTTP GET above.

利用者エージェントは、行動 URL が HTTP URL で method が [CODE(HTTP)[[[POST]]]]
のフォームを処理する場合、 HTTP POST 取引を動作 URI
と型が上述の [CODE(MIME)[[[application/x-www-form-urlencoded]]]] 
書式のメッセージ本体とします。利用者エージェントは HTTP POST
対話の応答を前述の HTTP GET 応答と同様に表示するべきです・

*** 8.2.4. Example Form Submission: Questionnaire Form
>   Consider the following document:

次の文書を考えてみます。

[PRE(HTML)[
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    <title>Sample of HTML Form Submission</title>
    <H1>Sample Questionnaire</H1>
    <P>Please fill out this questionnaire:
    <FORM METHOD="POST" ACTION="http://www.w3.org/sample">
    <P>Your name: <INPUT NAME="name" size="48">
    <P>Male <INPUT NAME="gender" TYPE=RADIO VALUE="male">
    <P>Female <INPUT NAME="gender" TYPE=RADIO VALUE="female">
    <P>Number in family: <INPUT NAME="family" TYPE=text>
    <P>Cities in which you maintain a residence:
    <UL>
    <LI>Kent <INPUT NAME="city" TYPE=checkbox VALUE="kent">
    <LI>Miami <INPUT NAME="city" TYPE=checkbox VALUE="miami">
    <LI>Other <TEXTAREA NAME="other" cols=48 rows=4></textarea>
    </UL>
    Nickname: <INPUT NAME="nickname" SIZE="42">
    <P>Thank you for responding to this questionnaire.
    <P><INPUT TYPE=SUBMIT> <INPUT TYPE=RESET>
    </FORM>
]PRE]

>    The initial state of the form data set is:

フォーム・データ集合の初期状態:

>
:    name:            ""
:    gender:            "male"
:    family:            ""
:    other:            ""
:    nickname:            ""

>    Note that the radio input has an initial value, while the
checkbox has none.

ラジオ入力ボタンは初期値を持ちますが、
チェック箱は持たないことに注意して下さい。

>    The user might edit the fields and request that the form be
submitted. At that point, suppose the values are:

利用者は欄を編集してフォームの提出を要求することができます。
その時点で、

>
:    name:            "John Doe"
:    gender:            "male"
:    family:            "5"
:    city:            "kent"
:    city:            "miami"
:    other:            "abc\ndefk"
:    nickname:            "J&D"

>   The user agent then conducts an HTTP POST transaction using the URI
`http://www.w3.org/sample'. The message body would be (ignore the
line break):

という値を仮定します。利用者エージェントは URI
AMP(URI)[http://www.w3.org/sample]] を使った HTTP POST
取引を行います。メッセージ本体は

>
   name=John+Doe&gender=male&family=5&city=kent&city=miami&
   other=abc%0D%0Adef&nickname=J%26D

となります (改行は無視して下さい)。

* 9. HTML Public Text
** 9.1. HTML DTD
>   This is the Document Type Definition for the HyperText Markup
Language, level 2.

これはハイパーテキスト・マーク付け言語水準 2 の文書型定義です。

[INS[
訳注: 日本語訳を適宜付加しています。真の DTD は原文を参照して下さい。
]INS]

[PRE(SGML)[
<!--    html.dtd

        Document Type Definition for the HyperText Markup Language
        ハイパーテキスト・マーク付け言語の文書型定義
                 (HTML DTD)

        $Id: html.dtd,v 1.30 1995/09/21 23:30:19 connolly Exp $

        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: html.decl, html-1.dtd
          http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->

<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0//EN"

        -- Typical usage:
           典型的使用法:

            <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
            <html>
            ...
            </html>
        --
        >


<!--============ Feature Test Entities ========================-->

<!ENTITY % HTML.Recommended "IGNORE"
        -- Certain features of the language are necessary for
           compatibility with widespread usage, but they may
           compromise the structural integrity of a document.
           This feature test entity enables a more prescriptive
           document type definition that eliminates
           those features.
           
           HTML のある種の機能は広く行われている用法との互換性
           のため必要ですが、文書の構造的整合性を曲げることになる
           かもしれません。この機能試験実体はそうした機能を除去
           したより規範的な文書型定義を有効にします。
        -->

<![ %HTML.Recommended [
        <!ENTITY % HTML.Deprecated "IGNORE">
]]>

<!ENTITY % HTML.Deprecated "INCLUDE"
        -- Certain features of the language are necessary for
           compatibility with earlier versions of the specification,
           but they tend to be used and implemented inconsistently,
           and their use is deprecated. This feature test entity
           enables a document type definition that eliminates
           these features.

           HTML のある種の機能は以前の版の仕様書との互換性のために
           必要ですが、一貫して使用・実装されない傾向にあります。
           このような機能の使用は非推奨です。この機能試験実体は
           そうした機能を除去した文書型定義を有効にします。
        -->

<!ENTITY % HTML.Highlighting "INCLUDE"
        -- Use this feature test entity to validate that a
           document uses no highlighting tags, which may be
           ignored on minimal implementations.

           強調タグは最小実装では無視されるかもしれませんが、
           文書が強調タグを使っていないことを検証するには
           この機能試験実体を使って下さい。
        -->

<!ENTITY % HTML.Forms "INCLUDE"
        -- Use this feature test entity to validate that a document
           contains no forms, which may not be supported in minimal
           implementations

           フォームは最小実装では対応していないかもしれませんが、
           文書がフォームを含まないことを検証するにはこの機能試験実体
           を使って下さい。
        -->

<!--============== Imported Names ==============================-->

<!ENTITY % Content-Type "CDATA"
        -- meaning an internet media type
           (aka MIME content type, as per RFC1521)

           インターネット媒体型 (MIME 内容型) を意味します
        -->

<!ENTITY % HTTP-Method "GET | POST"
        -- as per HTTP specification, in progress

           HTTP 仕様書によります
        -->

<!--========= DTD "Macros" =====================-->

<!ENTITY % heading "H1|H2|H3|H4|H5|H6">

<!ENTITY % list " UL | OL | DIR | MENU " >


<!--======= Character mnemonic entities =================-->

<!ENTITY % ISOlat1 PUBLIC
  "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML">
%ISOlat1;

<!ENTITY amp CDATA "&#38;"     -- ampersand          -->



Berners-Lee & Connolly      Standards Track                    [Page 50]

RFC 1866            Hypertext Markup Language - 2.0        November 1995


<!ENTITY gt CDATA "&#62;"      -- greater than       -->
<!ENTITY lt CDATA "&#60;"      -- less than          -->
<!ENTITY quot CDATA "&#34;"    -- double quote       -->


<!--========= SGML Document Access (SDA) Parameter Entities =====-->

<!-- HTML 2.0 contains SGML Document Access (SDA) fixed attributes
in support of easy transformation to the International Committee
for Accessible Document Design (ICADD) DTD
         "-//EC-USA-CDA/ICADD//DTD ICADD22//EN".

HTML 2.0 は access 可能文書設計国際委員会 (ICADD) DTD
         "-//EC-USA-CDA/ICADD//DTD ICADD22//EN"
に簡単に変換できるように SGML 文書 access (SDA)
固定属性を含んでいます。

ICADD applications are designed to support usable access to
structured information by print-impaired individuals through
Braille, large print and voice synthesis.  For more information on
SDA & ICADD:

ICADD 応用は視覚障害者が点字、大きな印刷、音声合成を通じて構造化情報
への有用な access を支援するために設計されています。 SDA
および ICADD の詳細:

        - ISO 12083:1993, Annex A.8, Facilities for Braille,
          large print and computer voice
        - ICADD ListServ
          <ICADD%ASUACAD.BITNET@@ARIZVM1.ccit.arizona.edu>
        - Usenet news group bit.listserv.easi
        - Recording for the Blind, +1 800 221 4792
-->

<!ENTITY % SDAFORM  "SDAFORM  CDATA  #FIXED"
          -- one to one mapping
             一対一対応                -->
<!ENTITY % SDARULE  "SDARULE  CDATA  #FIXED"
          -- context-sensitive mapping
             文脈依存対応              -->
<!ENTITY % SDAPREF  "SDAPREF  CDATA  #FIXED"
          -- generated text prefix
             生成文接頭辞              -->
<!ENTITY % SDASUFF  "SDASUFF  CDATA  #FIXED"
          -- generated text suffix
             生成文接尾辞              -->
<!ENTITY % SDASUSP  "SDASUSP  NAME   #FIXED"
          -- suspend transform process
             変換処理中断              -->


<!--========== Text Markup =====================-->

<![ %HTML.Highlighting [

<!ENTITY % font " TT | B | I ">

<!ENTITY % phrase "EM | STRONG | CODE | SAMP | KBD | VAR | CITE ">

<!ENTITY % text "#PCDATA | A | IMG | BR | %phrase | %font">

<!ELEMENT (%font;|%phrase) - - (%text)*>
<!ATTLIST ( TT | CODE | SAMP | KBD | VAR )
        %SDAFORM; "Lit"
        >
<!ATTLIST ( B | STRONG )
        %SDAFORM; "B"
        >
<!ATTLIST ( I | EM | CITE )
        %SDAFORM; "It"
        >

<!-- <TT>       Typewriter text
                タイプライター文                        -->
<!-- <B>        Bold text
                太字文                                  -->
<!-- <I>        Italic text
                [RUBY[斜体][イタリック]]文                                  -->

<!-- <EM>       Emphasized phrase
                強調語句                                -->
<!-- <STRONG>   Strong emphasis
                強い強調                                -->
<!-- <CODE>     Source code phrase
                原始符号語句                            -->
<!-- <SAMP>     Sample text or characters
                例文・例文字                            -->
<!-- <KBD>      Keyboard phrase, e.g. user input
                鍵盤語句 (例: 利用者入力)               -->
<!-- <VAR>      Variable phrase or substitutable
                変数語句・置換え                        -->
<!-- <CITE>     Name or title of cited work
                引用文献の名前・題                      -->

<!ENTITY % pre.content "#PCDATA | A | HR | BR | %font | %phrase">

]]>

<!ENTITY % text "#PCDATA | A | IMG | BR">

<!ELEMENT BR    - O EMPTY>
<!ATTLIST BR
        %SDAPREF; "&#RE;"
        >

<!-- <BR>       Line break      
                改行            -->


<!--========= Link Markup ======================-->

<!ENTITY % linkType "NAMES">

<!ENTITY % linkExtraAttributes
        "REL %linkType #IMPLIED
        REV %linkType #IMPLIED
        URN CDATA #IMPLIED
        TITLE CDATA #IMPLIED
        METHODS NAMES #IMPLIED
        ">

<![ %HTML.Recommended [
        <!ENTITY % A.content   "(%text)*"
        -- <H1><a name="xxx">Heading</a></H1>
                is preferred to
                の方が
           <a name="xxx"><H1>Heading</H1></a>
                よりもよさげです
        -->
]]>

<!ENTITY % A.content   "(%heading|%text)*">

<!ELEMENT A     - - %A.content -(A)>
<!ATTLIST A
        HREF CDATA #IMPLIED
        NAME CDATA #IMPLIED
        %linkExtraAttributes;
        %SDAPREF; "'''<'''Anchor: #AttList'''>'''"
        >
<!-- <A>                Anchor; source/destination of link
                        アンカー。リンクの始点・終点            -->
<!-- <A NAME="...">     Name of this anchor
                        このアンカーの名前                      -->
<!-- <A HREF="...">     Address of link destination
                        リンク終点の番地                        -->
<!-- <A URN="...">      Permanent address of destination
                        終点の持続番地                          -->
<!-- <A REL=...>        Relationship to destination
                        終点への関係                            -->
<!-- <A REV=...>        Relationship of destination to this
                        終点からこちらへの関係                  -->
<!-- <A TITLE="...">    Title of destination (advisory)
                        終点の題 (ヒント)                       -->
<!-- <A METHODS="...">  Operations on destination (advisory)
                        終点についての演算 (ヒント)             -->


<!--========== Images ==========================-->

<!ELEMENT IMG    - O EMPTY>
<!ATTLIST IMG
        SRC CDATA  #REQUIRED
        ALT CDATA #IMPLIED
        ALIGN (top|middle|bottom) #IMPLIED
        ISMAP (ISMAP) #IMPLIED
        %SDAPREF; "<Fig><?SDATrans Img: #AttList>#AttVal(Alt)</Fig>"
        >

<!-- <IMG>              Image; icon, glyph or illustration
                        画像。小さな絵、図標識、イラスト        -->
<!-- <IMG SRC="...">    Address of image object
                        画像物体の番地                          -->
<!-- <IMG ALT="...">    Textual alternative
                        文章の代替                              -->
<!-- <IMG ALIGN=...>    Position relative to text
                        文章に対する位置                        -->
<!-- <IMG ISMAP>        Each pixel can be a link
                        各画素がリンクたり得る                  -->

<!--========== Paragraphs=======================-->

<!ELEMENT P     - O (%text)*>
<!ATTLIST P
        %SDAFORM; "Para"
        >

<!-- <P>        Paragraph
                段落            -->


<!--========== Headings, Titles, Sections ===============-->

<!ELEMENT HR    - O EMPTY>
<!ATTLIST HR
        %SDAPREF; "&#RE;&#RE;"
        >

<!-- <HR>       Horizontal rule
                水平罫          -->

<!ELEMENT ( %heading )  - -  (%text;)*>
<!ATTLIST H1
        %SDAFORM; "H1"
        >
<!ATTLIST H2
        %SDAFORM; "H2"
        >
<!ATTLIST H3
        %SDAFORM; "H3"
        >
<!ATTLIST H4
        %SDAFORM; "H4"
        >
<!ATTLIST H5
        %SDAFORM; "H5"
        >
<!ATTLIST H6
        %SDAFORM; "H6"
        >

<!-- <H1>       Heading, level 1
                見出し 水準 1    -->
<!-- <H2>       Heading, level 2
                見出し 水準 2    -->
<!-- <H3>       Heading, level 3
                見出し 水準 3    -->
<!-- <H4>       Heading, level 4
                見出し 水準 4    -->
<!-- <H5>       Heading, level 5
                見出し 水準 5    -->
<!-- <H6>       Heading, level 6
                見出し 水準 6    -->


<!--========== Text Flows ======================-->

<![ %HTML.Forms [
        <!ENTITY % block.forms "BLOCKQUOTE | FORM | ISINDEX">
]]>

<!ENTITY % block.forms "BLOCKQUOTE">

<![ %HTML.Deprecated [
        <!ENTITY % preformatted "PRE | XMP | LISTING">
]]>

<!ENTITY % preformatted "PRE">

<!ENTITY % block "P | %list | DL
        | %preformatted
        | %block.forms">

<!ENTITY % flow "(%text|%block)*">

<!ENTITY % pre.content "#PCDATA | A | HR | BR">
<!ELEMENT PRE - - (%pre.content)*>
<!ATTLIST PRE
        WIDTH NUMBER #implied
        %SDAFORM; "Lit"
        >

<!-- <PRE>              Preformatted text
                        整形済み文                      -->
<!-- <PRE WIDTH=...>    Maximum characters per line
                        行あたり最大文字数              -->

<![ %HTML.Deprecated [

<!ENTITY % literal "CDATA"
        -- historical, non-conforming parsing mode where
           the only markup signal is the end tag
           in full
 
           歴史的事情により、完全な終了タグだけがマーク信号
           の非適合解析モード
        -->

<!ELEMENT (XMP|LISTING) - -  %literal>
<!ATTLIST XMP
        %SDAFORM; "Lit"
        %SDAPREF; "Example:&#RE;"
        >
<!ATTLIST LISTING
        %SDAFORM; "Lit"
        %SDAPREF; "Listing:&#RE;"
        >

<!-- <XMP>              Example section
                        例示節                  -->
<!-- <LISTING>          Computer listing
                        計算機並び              -->

<!ELEMENT PLAINTEXT - O %literal>
<!-- <PLAINTEXT>        Plain text passage
                        平文移行                -->

<!ATTLIST PLAINTEXT
        %SDAFORM; "Lit"
        >
]]>

<!--========== Lists ==================-->

<!ELEMENT DL    - -  (DT | DD)+>
<!ATTLIST DL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "Definition List:"
        >

<!ELEMENT DT    - O (%text)*>
<!ATTLIST DT
        %SDAFORM; "Term"
        >

<!ELEMENT DD    - O %flow>
<!ATTLIST DD
        %SDAFORM; "LItem"
        >

<!-- <DL>               Definition list, or glossary
                        定義並び、用語集                -->
<!-- <DL COMPACT>       Compact style list
                        簡潔様式並び                    -->
<!-- <DT>               Term in definition list
                        定義並びの用語                  -->
<!-- <DD>               Definition of term
                        定義並びの定義                  -->

<!ELEMENT (OL|UL) - -  (LI)+>
<!ATTLIST OL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        >
<!ATTLIST UL
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        >
<!-- <UL>               Unordered list
                        非順序並び                      -->
<!-- <UL COMPACT>       Compact list style
                        簡潔並び様式                    -->
<!-- <OL>               Ordered, or numbered list
                        順序 (番号付き) 並び            -->
<!-- <OL COMPACT>       Compact list style
                        簡潔並び様式                    -->


<!ELEMENT (DIR|MENU) - -  (LI)+ -(%block)>
<!ATTLIST DIR
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "<LHead>Directory</LHead>"
        >

<!ATTLIST MENU
        COMPACT (COMPACT) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF; "<LHead>Menu</LHead>"
        >

<!-- <DIR>              Directory list 
                        ディレクトリ並び                -->
<!-- <DIR COMPACT>      Compact list style
                        簡潔並び様式                    -->
<!-- <MENU>             Menu list
                        メニュー並び                    -->
<!-- <MENU COMPACT>     Compact list style
                        簡潔並び様式                    -->

<!ELEMENT LI    - O %flow>
<!ATTLIST LI
        %SDAFORM; "LItem"
        >

<!-- <LI>               List item                       -->

<!--========== Document Body ===================-->

<![ %HTML.Recommended [
        <!ENTITY % body.content "(%heading|%block|HR|ADDRESS|IMG)*"
        -- <h1>Heading</h1>
           <p>Text ...
                is preferred to
                の方が
           <h1>Heading</h1>
           Text ...
                よりよさげです
        -->
]]>

<!ENTITY % body.content "(%heading | %text | %block |
                                 HR | ADDRESS)*">

<!ELEMENT BODY O O  %body.content>

<!-- <BODY>     Document body   -->

<!ELEMENT BLOCKQUOTE - - %body.content>
<!ATTLIST BLOCKQUOTE
        %SDAFORM; "BQ"
        >

<!-- <BLOCKQUOTE>       Quoted passage
                        引用物         -->

<!ELEMENT ADDRESS - - (%text|P)*>
<!ATTLIST  ADDRESS
        %SDAFORM; "Lit"
        %SDAPREF; "Address:&#RE;"
        >

<!-- <ADDRESS>  Address, signature, or byline
                番地、署名、筆者名              -->


<!--======= Forms ====================-->

<![ %HTML.Forms [

<!ELEMENT FORM - - %body.content -(FORM) +(INPUT|SELECT|TEXTAREA)>
<!ATTLIST FORM
        ACTION CDATA #IMPLIED
        METHOD (%HTTP-Method) GET
        ENCTYPE %Content-Type; "application/x-www-form-urlencoded"
        %SDAPREF; "<Para>Form:</Para>"
        %SDASUFF; "<Para>Form End.</Para>"
        >

<!-- <FORM>                     Fill-out or data-entry form
                                記入欄、データ項目フォーム      -->
<!-- <FORM ACTION="...">        Address for completed form
                                フォーム完了の番地              -->
<!-- <FORM METHOD=...>          Method of submitting form
                                フォーム提出の method           -->
<!-- <FORM ENCTYPE="...">       Representation of form data
                                フォーム・データの表現          -->

<!ENTITY % InputType "(TEXT | PASSWORD | CHECKBOX |
                        RADIO | SUBMIT | RESET |
                        IMAGE | HIDDEN )">
<!ELEMENT INPUT - O EMPTY>
<!ATTLIST INPUT
        TYPE %InputType TEXT
        NAME CDATA #IMPLIED
        VALUE CDATA #IMPLIED
        SRC CDATA #IMPLIED
        CHECKED (CHECKED) #IMPLIED
        SIZE CDATA #IMPLIED
        MAXLENGTH NUMBER #IMPLIED
        ALIGN (top|middle|bottom) #IMPLIED
        %SDAPREF; "Input: "
        >

<!-- <INPUT>                    Form input datum
                                フォーム・データ入力            -->
<!-- <INPUT TYPE=...>           Type of input interaction
                                入力対話の型                    -->
<!-- <INPUT NAME=...>           Name of form datum
                                フォーム・データの名前          -->
<!-- <INPUT VALUE="...">        Default/initial/selected value
                                既定・初期・選択値              -->
<!-- <INPUT SRC="...">          Address of image
                                画像の番地                      -->
<!-- <INPUT CHECKED>            Initial state is "on"
                                初期状態は「入」                -->
<!-- <INPUT SIZE=...>           Field size hint
                                欄寸法ヒント                    -->
<!-- <INPUT MAXLENGTH=...>      Data length maximum
                                データ最大長                    -->
<!-- <INPUT ALIGN=...>          Image alignment
                                画像配置                 -->

<!ELEMENT SELECT - - (OPTION+) -(INPUT|SELECT|TEXTAREA)>
<!ATTLIST SELECT
        NAME CDATA #REQUIRED
        SIZE NUMBER #IMPLIED
        MULTIPLE (MULTIPLE) #IMPLIED
        %SDAFORM; "List"
        %SDAPREF;
        "<LHead>Select #AttVal(Multiple)</LHead>"
        >

<!-- <SELECT>                   Selection of option(s)
                                選択肢から選択                  -->
<!-- <SELECT NAME=...>          Name of form datum
                                フォーム・データの名前          -->
<!-- <SELECT SIZE=...>          Options displayed at a time
                                一度に表示する選択肢            -->
<!-- <SELECT MULTIPLE>          Multiple selections allowed
                                複数選択認可                    -->

<!ELEMENT OPTION - O (#PCDATA)*>
<!ATTLIST OPTION
        SELECTED (SELECTED) #IMPLIED
        VALUE CDATA #IMPLIED
        %SDAFORM; "LItem"
        %SDAPREF;
        "Option: #AttVal(Value) #AttVal(Selected)"
        >

<!-- <OPTION>                   A selection option
                                選択肢                          -->
<!-- <OPTION SELECTED>          Initial state
                                初期状態                        -->
<!-- <OPTION VALUE="...">       Form datum value for this option
                                この選択肢のフォーム・データ値  -->

<!ELEMENT TEXTAREA - - (#PCDATA)* -(INPUT|SELECT|TEXTAREA)>
<!ATTLIST TEXTAREA
        NAME CDATA #REQUIRED
        ROWS NUMBER #REQUIRED
        COLS NUMBER #REQUIRED
        %SDAFORM; "Para"
        %SDAPREF; "Input Text -- #AttVal(Name): "
        >

<!-- <TEXTAREA>                 An area for text input
                                文章入力領域                    -->
<!-- <TEXTAREA NAME=...>        Name of form datum
                                フォーム・データの名前          -->
<!-- <TEXTAREA ROWS=...>        Height of area
                                領域の高さ                      -->
<!-- <TEXTAREA COLS=...>        Width of area
                                領域の幅                        -->

]]>


<!--======= Document Head ======================-->

<![ %HTML.Recommended [
        <!ENTITY % head.extra "">
]]>
<!ENTITY % head.extra "& NEXTID?">

<!ENTITY % head.content "TITLE & ISINDEX? & BASE? %head.extra">

<!ELEMENT HEAD O O  (%head.content) +(META|LINK)>

<!-- <HEAD>     Document head
                文書頭部        -->

<!ELEMENT TITLE - -  (#PCDATA)*  -(META|LINK)>
<!ATTLIST TITLE
        %SDAFORM; "Ti"    >

<!-- <TITLE>    Title of document
                文書の題          -->

<!ELEMENT LINK - O EMPTY>
<!ATTLIST LINK
        HREF CDATA #REQUIRED
        %linkExtraAttributes;
        %SDAPREF; "Linked to : #AttVal (TITLE) (URN) (HREF)>"    >

<!-- <LINK>             Link from this document
                        この文書からのリンク                    -->
<!-- <LINK HREF="...">  Address of link destination
                        リンク終点の番地                        -->
<!-- <LINK URN="...">   Lasting name of destination
                        終点の究極名                            -->
<!-- <LINK REL=...>     Relationship to destination
                        終点への関係                            -->
<!-- <LINK REV=...>     Relationship of destination to this
                        終点のこちらへの関係                    -->
<!-- <LINK TITLE="..."> Title of destination (advisory)
                        終点の題 (ヒント)                       -->
<!-- <LINK METHODS="..."> Operations allowed (advisory)
                        認められる演算 (ヒント)                 -->

<!ELEMENT ISINDEX - O EMPTY>
<!ATTLIST ISINDEX
        %SDAPREF;
   "<Para>[Document is indexed/searchable.]</Para>">

<!-- <ISINDEX>          Document is a searchable index
                        文書は検索可能索引です                  -->

<!ELEMENT BASE - O EMPTY>
<!ATTLIST BASE
        HREF CDATA #REQUIRED     >

<!-- <BASE>             Base context document
                        基底文脈文書                            -->
<!-- <BASE HREF="...">  Address for this document
                        この文書の番地                          -->

<!ELEMENT NEXTID - O EMPTY>
<!ATTLIST NEXTID
        N CDATA #REQUIRED     >

<!-- <NEXTID>           Next ID to use for link name
                        リンク名に使用する次の番地              -->
<!-- <NEXTID N=...>     Next ID to use for link name
                        リンク名に使用する次の番地              -->

<!ELEMENT META - O EMPTY>
<!ATTLIST META
        HTTP-EQUIV  NAME    #IMPLIED
        NAME        NAME    #IMPLIED
        CONTENT     CDATA   #REQUIRED    >

<!-- <META>                     Generic Meta-information
                                一般メタ情報                    -->
<!-- <META HTTP-EQUIV=...>      HTTP response header name
                                HTTP 応答頭名                   -->
<!-- <META NAME=...>            Meta-information name
                                メタ情報名                      -->
<!-- <META CONTENT="...">       Associated information
                                関連付けられた情報              -->

<!--======= Document Structure =================-->

<![ %HTML.Deprecated [
        <!ENTITY % html.content "HEAD, BODY, PLAINTEXT?">
]]>
<!ENTITY % html.content "HEAD, BODY">

<!ELEMENT HTML O O  (%html.content)>
<!ENTITY % version.attr "VERSION CDATA #FIXED '%HTML.Version;'">

<!ATTLIST HTML
        %version.attr;
        %SDAFORM; "Book"
        >

<!-- <HTML>                     HTML Document
                                HTML 文書       -->

** 9.2. Strict HTML DTD
>   This document type declaration refers to the HTML DTD with the
`HTML.Recommended' entity defined as `INCLUDE' rather than IGNORE;
that is, it refers to the more structurally rigid definition of HTML.

この文書型宣言は HTML DTD を
[CODE(SGML)[HTML.Recommended]] 実体を [CODE(SGML)[[[IGNORE]]]]
ではなく [CODE(SGML)[[[INCLUDE]]]] で定義して参照します。
つまり、 HTML のより構造的に厳密な定義を参照します。

[PRE(SGML)[
<!--    html-s.dtd

        Document Type Definition for the HyperText Markup Language
        with strict validation (HTML Strict DTD).

        $Id: html-s.dtd,v 1.3 1995/06/02 18:55:46 connolly Exp $

        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->

<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Strict//EN"

        -- Typical usage:

            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Strict//EN">
            <html>
            ...
            </html>
        --
        >

<!-- Feature Test Entities -->
<!ENTITY % HTML.Recommended "INCLUDE">

<!ENTITY % html PUBLIC "-//IETF//DTD HTML 2.0//EN">
%html;
]PRE]

** 9.3. Level 1 HTML DTD
>   This document type declaration refers to the HTML DTD with the
`HTML.Forms' entity defined as `IGNORE' rather than `INCLUDE'.
Documents which contain <FORM> elements do not conform to this DTD,
and must use the level 2 DTD.

この文書型宣言は HTML DTD を
[CODE(SGML)[HTML.Forms]] 実体を [CODE(SGML)[[[INCLUDE]]]]
ではなく [CODE(SGML)[[[IGNORE]]]] で定義して参照します。
[CODE(HTMLe)[form]] 要素を含む文書はこの DTD
に適合せず、水準 2 DTD を使用しなければなりません。

[PRE(SGML)[
<!--    html-1.dtd

        Document Type Definition for the HyperText Markup Language
        with Level 1 Extensions (HTML Level 1 DTD).

        $Id: html-1.dtd,v 1.2 1995/03/29 18:53:10 connolly Exp $

        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://info.cern.ch/hypertext/WWW/MarkUp/MarkUp.html

-->

<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Level 1//EN"

        -- Typical usage:

            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Level 1//EN">
            <html>
            ...
            </html>
        --
        >

<!-- Feature Test Entities -->
<!ENTITY % HTML.Forms "IGNORE">

<!ENTITY % html PUBLIC "-//IETF//DTD HTML 2.0//EN">
%html;
]PRE]

** 9.4. Strict Level 1 HTML DTD
>   This document type declaration refers to the level 1 HTML DTD with
the `HTML.Recommended' entity defined as `INCLUDE' rather than
IGNORE; that is, it refers to the more structurally rigid definition
of HTML.

この文書型宣言は水準 1 HTML DTD に
[CODE(SGML)[HTML.Recommended]] 実体を [CODE(SGML)[[[IGNORE]]]]
ではなく [CODE(SGML)[[[INCLUDE]]]] と定義して参照します。
つまり、 HTML のより構造的に厳密な定義を参照します。

[PRE(HTML)[
<!--    html-1s.dtd

        Document Type Definition for the HyperText Markup Language
        Struct Level 1

        $Id: html-1s.dtd,v 1.3 1995/06/02 18:55:43 connolly Exp $

        Author: Daniel W. Connolly <connolly@@w3.org>
        See Also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
-->

<!ENTITY % HTML.Version
        "-//IETF//DTD HTML 2.0 Strict Level 1//EN"

        -- Typical usage:

            <!DOCTYPE HTML PUBLIC
                "-//IETF//DTD HTML Strict Level 1//EN">
            <html>
            ...
            </html>
        --
        >

<!-- Feature Test Entities -->


<!ENTITY % HTML.Recommended "INCLUDE">

<!ENTITY % html-1 PUBLIC "-//IETF//DTD HTML 2.0 Level 1//EN">
%html-1;
]PRE]

** 9.5. SGML Declaration for HTML
>   This is the SGML Declaration for HyperText Markup Language.

これはハイパーテキスト・マーク付け言語の SGML 宣言です。

[PRE(SGML)[
<!SGML  "ISO 8879:1986"
--
        SGML Declaration for HyperText Markup Language (HTML).

--

CHARSET
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version
                   (IRV)//ESC 2/5 4/0"
         DESCSET  0   9   UNUSED
                  9   2   9
                  11  2   UNUSED
                  13  1   13
                  14  18  UNUSED
                  32  95  32
                  127 1   UNUSED
     BASESET   "ISO Registration Number 100//CHARSET
                ECMA-94 Right Part of
                Latin Alphabet Nr. 1//ESC 2/13 4/1"

         DESCSET  128  32   UNUSED
                  160  96    32

CAPACITY        SGMLREF
                TOTALCAP        150000
                GRPCAP          150000
                ENTCAP          150000

SCOPE    DOCUMENT
SYNTAX
         SHUNCHAR CONTROLS 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
                 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 127
         BASESET  "ISO 646:1983//CHARSET
                   International Reference Version
                   (IRV)//ESC 2/5 4/0"
         DESCSET  0 128 0
         FUNCTION
                  RE          13
                  RS          10
                  SPACE       32
                  TAB SEPCHAR  9
         NAMING   LCNMSTRT ""
                  UCNMSTRT ""
                  LCNMCHAR ".-"
                  UCNMCHAR ".-"
                  NAMECASE GENERAL YES
                           ENTITY  NO
         DELIM    GENERAL  SGMLREF
                  SHORTREF SGMLREF
         NAMES    SGMLREF
         QUANTITY SGMLREF
                  ATTSPLEN 2100
                  LITLEN   1024
                  NAMELEN  72    -- somewhat arbitrary; taken from
                                internet line length conventions --
                  PILEN    1024
                  TAGLVL   100
                  TAGLEN   2100
                  GRPGTCNT 150
                  GRPCNT   64

FEATURES
  MINIMIZE
    DATATAG  NO
    OMITTAG  YES
    RANK     NO
    SHORTTAG YES
  LINK
    SIMPLE   NO
    IMPLICIT NO
    EXPLICIT NO
  OTHER
    CONCUR   NO
    SUBDOC   NO
    FORMAL   YES
  APPINFO    "SDA"  -- conforming SGML Document Access application
                    --
>
<!--
        $Id: html.decl,v 1.17 1995/06/08 14:59:32 connolly Exp $

        Author: Daniel W. Connolly <connolly@@w3.org>

        See also: http://www.w3.org/hypertext/WWW/MarkUp/MarkUp.html
 -->
]PRE]

** 9.6. Sample SGML Open Entity Catalog for HTML
>   The SGML standard describes an "entity manager" as the portion or
component of an SGML system that maps SGML entities into the actual
storage model (e.g., the file system). The standard itself does not
define a particular mapping methodology or notation.

SGML 規格は SGML システムの部分または構成部品で SGML 実体を実際の蓄積模型
(例えばファイル・システム) に写像する「実体管理器」
を説明しています。 SGML 規格自体は特定の写像方式や記法を定義していません。

>   To assist the interoperability among various SGML tools and systems,
the SGML Open consortium has passed a technical resolution that
defines a format for an application-independent entity catalog that
maps external identifiers and/or entity names to file names.

種々の SGML 工具・システム間の相互運用性の補助のため、
SGML Open consortium は外部識別子[及び/又は]]実体名をファイル名に写像する、
応用非依存の実体型録の書式を定義する技術解決を出しています。

>   Each entry in the catalog associates a storage object identifier
(such as a file name) with information about the external entity that
appears in the SGML document. In addition to entries that associate
public identifiers, a catalog entry can associate an entity name with
a storage object identifier. For example, the following are possible
catalog entries:

型録の各項目は蓄積物体識別子 (ファイル名など) 
と SGML 文書に出現する外部実体についての情報を関連付けます。
カタログ項目は公開識別子の他、実体名も蓄積物体識別子に関連付けることができます。
例えば、次が考えられる型録項目です。

[PRE[
        -- catalog: SGML Open style entity catalog for HTML --
        -- $Id: catalog,v 1.3 1995/09/21 23:30:23 connolly Exp $ --

        -- Ways to refer to Level 2: most general to most specific --
PUBLIC  "-//IETF//DTD HTML//EN"                 html.dtd
PUBLIC  "-//IETF//DTD HTML 2.0//EN"             html.dtd
PUBLIC  "-//IETF//DTD HTML Level 2//EN"         html.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Level 2//EN"     html.dtd

        -- Ways to refer to Level 1: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Level 1//EN"         html-1.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Level 1//EN"     html-1.dtd

        -- Ways to refer to
                 Strict Level 2: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Strict//EN"                  html-s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict//EN"              html-s.dtd
PUBLIC  "-//IETF//DTD HTML Strict Level 2//EN"          html-s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict Level 2//EN"      html-s.dtd

        -- Ways to refer to
                 Strict Level 1: most general to most specific --
PUBLIC  "-//IETF//DTD HTML Strict Level 1//EN"          html-1s.dtd
PUBLIC  "-//IETF//DTD HTML 2.0 Strict Level 1//EN"      html-1s.dtd

        -- ISO latin 1 entity set for HTML --
PUBLIC  "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML" ISOlat1\
sgml
]PRE]

** 9.7. Character Entity Sets
>   The HTML DTD defines the following entities. They represent
particular graphic characters which have special meanings in places
in the markup, or may not be part of the character set available to
the writer.

HTML DTD は次の実体を定義しています。
これらの実体はマークで特別な意味を持つ図形文字や筆者が利用できる文字集合の一部でないかもしれない図形文字を表現します。

*** 9.7.1. Numeric and Special Graphic Entity Set
>   The following table lists each of the characters included from the
Numeric and Special Graphic entity set, along with its name, syntax
for use, and description. This list is derived from `ISO Standard
8879:1986//ENTITIES Numeric and Special Graphic//EN'.  However, HTML
does not include for the entire entity set -- only the entities
listed below are included.

次の表は、数値および特殊図形実体集合から取込んだ文字を、
その名前と使用する構文、説明と共に示します。
この表は [CODE(SGML)[ISO 8879:1986//ENTITIES Numeric and Special Graphic//EN]]
に由来します。しかし、 HTML はこの実体集合全体を含んでいません。
次に挙げた実体だけを含みます。

>
,    GLYPH   ,NAME    ,SYNTAX  ,DESCRIPTION
,    <       ,lt      ,&lt;    ,Less than sign
,    >       ,gt      ,&gt;    ,Greater than signn
,    &       ,amp     ,&amp;   ,Ampersand
,    "       ,quot    ,&quot;  ,Double quote sign

*** 9.7.2. ISO Latin 1 Character Entity Set
>   The following public text lists each of the characters specified in
the Added Latin 1 entity set, along with its name, syntax for use,
and description. This list is derived from ISO Standard
8879:1986//ENTITIES Added Latin 1//EN. HTML includes the entire
entity set.

次の公開文は追加 Latin 1 実体集合で規定された文字を、
その名前と使用する構文、説明と共に示します。
これは [SAMP(SGML)[ISO 8879:1986//ENTITIES Added Latin 1//EN]]
に由来し、実体集合全体を含んでいます。

>
[PRE(SGML)[
<!-- (C) International Organization for Standardization 1986
     Permission to copy in any form is granted for use with
     conforming SGML systems and applications as defined in
     ISO 8879, provided this notice is included in all copies.
-->
<!-- Character entity set. Typical invocation:
     <!ENTITY % ISOlat1 PUBLIC
       "ISO 8879-1986//ENTITIES Added Latin 1//EN//HTML">
     %ISOlat1;
-->
<!--    Modified for use in HTML
        $Id: ISOlat1.sgml,v 1.2 1994/11/30 23:45:12 connolly Exp $ -->
<!ENTITY AElig  CDATA "&#198;" -- capital AE diphthong (ligature) -->
<!ENTITY Aacute CDATA "&#193;" -- capital A, acute accent -->
<!ENTITY Acirc  CDATA "&#194;" -- capital A, circumflex accent -->
<!ENTITY Agrave CDATA "&#192;" -- capital A, grave accent -->
<!ENTITY Aring  CDATA "&#197;" -- capital A, ring -->
<!ENTITY Atilde CDATA "&#195;" -- capital A, tilde -->
<!ENTITY Auml   CDATA "&#196;" -- capital A, dieresis or umlaut mark -->
<!ENTITY Ccedil CDATA "&#199;" -- capital C, cedilla -->
<!ENTITY ETH    CDATA "&#208;" -- capital Eth, Icelandic -->
<!ENTITY Eacute CDATA "&#201;" -- capital E, acute accent -->
<!ENTITY Ecirc  CDATA "&#202;" -- capital E, circumflex accent -->
<!ENTITY Egrave CDATA "&#200;" -- capital E, grave accent -->
<!ENTITY Euml   CDATA "&#203;" -- capital E, dieresis or umlaut mark -->
<!ENTITY Iacute CDATA "&#205;" -- capital I, acute accent -->
<!ENTITY Icirc  CDATA "&#206;" -- capital I, circumflex accent -->
<!ENTITY Igrave CDATA "&#204;" -- capital I, grave accent -->
<!ENTITY Iuml   CDATA "&#207;" -- capital I, dieresis or umlaut mark -->
<!ENTITY Ntilde CDATA "&#209;" -- capital N, tilde -->
<!ENTITY Oacute CDATA "&#211;" -- capital O, acute accent -->
<!ENTITY Ocirc  CDATA "&#212;" -- capital O, circumflex accent -->
<!ENTITY Ograve CDATA "&#210;" -- capital O, grave accent -->
<!ENTITY Oslash CDATA "&#216;" -- capital O, slash -->
<!ENTITY Otilde CDATA "&#213;" -- capital O, tilde -->
<!ENTITY Ouml   CDATA "&#214;" -- capital O, dieresis or umlaut mark -->
<!ENTITY THORN  CDATA "&#222;" -- capital THORN, Icelandic -->
<!ENTITY Uacute CDATA "&#218;" -- capital U, acute accent -->
<!ENTITY Ucirc  CDATA "&#219;" -- capital U, circumflex accent -->
<!ENTITY Ugrave CDATA "&#217;" -- capital U, grave accent -->
<!ENTITY Uuml   CDATA "&#220;" -- capital U, dieresis or umlaut mark -->
<!ENTITY Yacute CDATA "&#221;" -- capital Y, acute accent -->
<!ENTITY aacute CDATA "&#225;" -- small a, acute accent -->
<!ENTITY acirc  CDATA "&#226;" -- small a, circumflex accent -->
<!ENTITY aelig  CDATA "&#230;" -- small ae diphthong (ligature) -->
<!ENTITY agrave CDATA "&#224;" -- small a, grave accent -->
<!ENTITY aring  CDATA "&#229;" -- small a, ring -->
<!ENTITY atilde CDATA "&#227;" -- small a, tilde -->
<!ENTITY auml   CDATA "&#228;" -- small a, dieresis or umlaut mark -->
<!ENTITY ccedil CDATA "&#231;" -- small c, cedilla -->
<!ENTITY eacute CDATA "&#233;" -- small e, acute accent -->
<!ENTITY ecirc  CDATA "&#234;" -- small e, circumflex accent -->
<!ENTITY egrave CDATA "&#232;" -- small e, grave accent -->
<!ENTITY eth    CDATA "&#240;" -- small eth, Icelandic -->
<!ENTITY euml   CDATA "&#235;" -- small e, dieresis or umlaut mark -->
<!ENTITY iacute CDATA "&#237;" -- small i, acute accent -->
<!ENTITY icirc  CDATA "&#238;" -- small i, circumflex accent -->
<!ENTITY igrave CDATA "&#236;" -- small i, grave accent -->
<!ENTITY iuml   CDATA "&#239;" -- small i, dieresis or umlaut mark -->
<!ENTITY ntilde CDATA "&#241;" -- small n, tilde -->
<!ENTITY oacute CDATA "&#243;" -- small o, acute accent -->
<!ENTITY ocirc  CDATA "&#244;" -- small o, circumflex accent -->
<!ENTITY ograve CDATA "&#242;" -- small o, grave accent -->
<!ENTITY oslash CDATA "&#248;" -- small o, slash -->
<!ENTITY otilde CDATA "&#245;" -- small o, tilde -->
<!ENTITY ouml   CDATA "&#246;" -- small o, dieresis or umlaut mark -->
<!ENTITY szlig  CDATA "&#223;" -- small sharp s, German (sz ligature)->
<!ENTITY thorn  CDATA "&#254;" -- small thorn, Icelandic -->
<!ENTITY uacute CDATA "&#250;" -- small u, acute accent -->
<!ENTITY ucirc  CDATA "&#251;" -- small u, circumflex accent -->
<!ENTITY ugrave CDATA "&#249;" -- small u, grave accent -->
<!ENTITY uuml   CDATA "&#252;" -- small u, dieresis or umlaut mark -->
<!ENTITY yacute CDATA "&#253;" -- small y, acute accent -->
<!ENTITY yuml   CDATA "&#255;" -- small y, dieresis or umlaut mark -->
]PRE]

* 10. Security Considerations
>   Anchors, embedded images, and all other elements which contain URIs
as parameters may cause the URI to be dereferenced in response to
user input. In this case, the security considerations of [URL] apply.

アンカー、埋込み画像、その他すべての URI
をを引数として持つ要素は、利用者の入力への応答で URI
の参照解決を引起こすかもしれません。この場合、
[[RFC 1738]] の保安についての考察が適用されます。

>   The widely deployed methods for submitting forms requests -- HTTP and
SMTP -- provide little assurance of confidentiality.  Information
providers who request sensitive information via forms -- especially
by way of the `PASSWORD' type input field (see 8.1.2, "Input Field:
INPUT") -- should be aware and make their users aware of the lack of
confidentiality.

フォーム要求を提出する方法として広く用いられている HTTP
や SMTP は、機密性がほとんど保証されていません。
フォームで繊細な情報を世給する情報提供者は、
特に [CODE(HTML)[password]] 型入力欄を使う場合は、
機密性なきことに注意すると共に、利用者にも注意を促すべきです。

* 11. References

    [URI]
            Berners-Lee, T., "Universal Resource Identifiers in WWW:
            A Unifying Syntax for the Expression of Names and
            Addresses of Objects on the Network as used in the
            World- Wide Web",  RFC 1630, CERN, June 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1630.txt>

    [URL]
            Berners-Lee, T., Masinter, L., and M. McCahill, "Uniform
            Resource Locators (URL)", RFC 1738, CERN, Xerox PARC,
            University of Minnesota, December 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1738.txt>

    [HTTP]
            Berners-Lee, T., Fielding, R., and H. Frystyk Nielsen,
            "Hypertext Transfer Protocol - HTTP/1.0", Work in
            Progress, MIT, UC Irvine, CERN, March 1995.

    [MIME]
            Borenstein, N., and N. Freed. "MIME (Multipurpose
            Internet Mail Extensions) Part One: Mechanisms for
            Specifying and Describing the Format of Internet Message
            Bodies", RFC 1521, Bellcore, Innosoft, September 1993.
            <URL:ftp://ds.internic.net/rfc/rfc1521.txt>

    [RELURL]
            Fielding, R., "Relative Uniform Resource Locators", RFC
            1808, June 1995
            <URL:ftp://ds.internic.net/rfc/rfc1808.txt>

    [GOLD90]
            Goldfarb, C., "The SGML Handbook", Y. Rubinsky, Ed.,
            Oxford University Press, 1990.

    [DEXTER]
            Frank Halasz and Mayer Schwartz, "The Dexter Hypertext
            Reference Model", Communications of the ACM, pp.
            30-39, vol. 37 no. 2, Feb 1994.

    [IMEDIA]
            Postel, J., "Media Type Registration Procedure",
            RFC 1590, USC/Information Sciences Institute, March 1994.
            <URL:ftp://ds.internic.net/rfc/rfc1590.txt>

    [IANA]
            Reynolds, J., and J. Postel, "Assigned Numbers", STD 2,
            RFC 1700, USC/Information Sciecnes Institute, October
            1994.  <URL:ftp://ds.internic.net/rfc/rfc1700.txt>

    [SQ91]
            SoftQuad. "The SGML Primer", 3rd ed., SoftQuad Inc.,
            1991. <URL:http://www.sq.com/>

    [ISO-646]
            ISO/IEC 646:1991 Information technology -- ISO 7-bit
            coded character set for information interchange
            <URL:http://www.iso.ch/cate/d4777.html>

    [ISO-10646]
            ISO/IEC 10646-1:1993 Information technology -- Universal
            Multiple-Octet Coded Character Set (UCS) -- Part 1:
            Architecture and Basic Multilingual Plane
            <URL:http://www.iso.ch/cate/d18741.html>

    [ISO-8859-1]
            ISO 8859. International Standard -- Information
            Processing -- 8-bit Single-Byte Coded Graphic Character
            Sets -- Part 1: Latin Alphabet No. 1, ISO 8859-1:1987.
            <URL:http://www.iso.ch/cate/d16338.html>

    [SGML]
            ISO 8879. Information Processing -- Text and Office
            Systems - Standard Generalized Markup Language (SGML),
            1986. <URL:http://www.iso.ch/cate/d16387.html>

* 12. Acknowledgments
>   The HTML document type was designed by Tim Berners-Lee at CERN as
part of the 1990 World Wide Web project. In 1992, Dan Connolly wrote
the HTML Document Type Definition (DTD) and a brief HTML
specification.

HTML 文書型は CERN の Tim Berners-Lee により
1990 World Wide Web 計画の一部として設計されました。
1992年に、 Dan Connolly が HTML 文書型定義と簡単な HTML 仕様書を書きました。

>   Since 1993, a wide variety of Internet participants have contributed
to the evolution of HTML, which has included the addition of in-line
images introduced by the NCSA Mosaic software for WWW. Dave Raggett
played an important role in deriving the forms material from the
HTML+ specification.

1993年から、非常に様々なインターネット関係者が HTML
の発展に貢献してきました。 NCSA Mosaic ソフトウェアが WWW
に導入した行内画像の追加もこれに含みます。 Dave Raggett
はフォーム関係を HTML+ 仕様書から派生させるのに重要な役割を果たしました。

>   Dan Connolly and Karen Olson Muldrow rewrote the HTML Specification
in 1994. The document was then edited by the HTML working group as a
whole, with updates being made by Eric Schieler, Mike Knezovich, and
Eric W. Sink at Spyglass, Inc.  Finally, Roy Fielding restructured
the entire draft into its current form.

Dan Connolly と Karen Olson Muldrow は1994年に HTML
仕様書を書き直しました。その文書はその後全体的に HTML
作業部会で編集し、 Eric Schieler, Mike Knezovich,
Spyglass, Inc. の Eric W. Sink が更新を行いました。
最後に、 Roy Fielding が原案全体を現在の形に再構築しました。

>   Special thanks to the many active participants in the HTML working
group, too numerous to list individually, without whom there would be
no standards process and no standard. That this document approaches
its objective of carefully converging a description of current
practice and formalization of HTML's relationship to SGML is a
tribute to their effort.

HTML 作業部会の多くの活発な参加者には、特に感謝致します。
数が多過ぎるので個々の名前を書き連ねることはしませんが、
もし参加して下さらなければ標準化過程もこの規格もなかったことでしょう。
この文書が HTML の現状の記述を注意深くまとめ、
SGML との関係を公式化するというもくてきを達成できたのは、
ひとえにみなさまのご尽力によるものであります。

** 12.1. Authors' Addresses
>
   Tim Berners-Lee
   Director, W3 Consortium
   MIT Laboratory for Computer Science
   545 Technology Square
   Cambridge, MA 02139, U.S.A.
>
   Phone: +1 (617) 253 9670
   Fax: +1 (617) 258 8682
   EMail: timbl@@w3.org

>
   Daniel W. Connolly
   Research Technical Staff, W3 Consortium
   MIT Laboratory for Computer Science
   545 Technology Square
   Cambridge, MA 02139, U.S.A.
>
   Phone: +1 (617) 258 8682
   EMail: connolly@@w3.org
   URI: http://www.w3.org/hypertext/WWW/People/Connolly/

* 13. The HTML Coded Character Set
>   This list details the code positions and characters of the HTML
document character set, specified in 9.5, "SGML Declaration for
HTML". This coded character set is based on [ISO-8859-1].

これは、 HTML 文書文字集合の符号位置と文字の詳細を並べたものです。
この符号化文字集合は [[ISO/IEC 8859]]-1 に基づいています。

>
    REFERENCE       DESCRIPTION
    --------------  -----------
    &#00; - &#08;   Unused
    &#09;           Horizontal tab
    &#10;           Line feed
    &#11; - &#12;   Unused
    &#13;           Carriage Return
    &#14; - &#31;   Unused
    &#32;           Space
    &#33;           Exclamation mark
    &#34;           Quotation mark
    &#35;           Number sign
    &#36;           Dollar sign
    &#37;           Percent sign
    &#38;           Ampersand
    &#39;           Apostrophe
    &#40;           Left parenthesis
    &#41;           Right parenthesis
    &#42;           Asterisk
    &#43;           Plus sign
    &#44;           Comma
    &#45;           Hyphen
    &#46;           Period (fullstop)
    &#47;           Solidus (slash)
    &#48; - &#57;   Digits 0-9
    &#58;           Colon
    &#59;           Semi-colon
    &#60;           Less than
    &#61;           Equals sign
    &#62;           Greater than
    &#63;           Question mark
    &#64;           Commercial at
    &#65; - &#90;   Letters A-Z
    &#91;           Left square bracket
    &#92;           Reverse solidus (backslash)
    &#93;           Right square bracket
    &#94;           Caret
    &#95;           Horizontal bar (underscore)
    &#96;           Acute accent
    &#97; - &#122;  Letters a-z
    &#123;          Left curly brace
    &#124;          Vertical bar
    &#125;          Right curly brace
    &#126;          Tilde
    &#127; - &#159; Unused
    &#160;          Non-breaking Space
    &#161;          Inverted exclamation
    &#162;          Cent sign
    &#163;          Pound sterling
    &#164;          General currency sign
    &#165;          Yen sign
    &#166;          Broken vertical bar
    &#167;          Section sign
    &#168;          Umlaut (dieresis)
    &#169;          Copyright
    &#170;          Feminine ordinal
    &#171;          Left angle quote, guillemotleft
    &#172;          Not sign
    &#173;          Soft hyphen
    &#174;          Registered trademark
    &#175;          Macron accent
    &#176;          Degree sign
    &#177;          Plus or minus
    &#178;          Superscript two
    &#179;          Superscript three
    &#180;          Acute accent
    &#181;          Micro sign
    &#182;          Paragraph sign
    &#183;          Middle dot
    &#184;          Cedilla
    &#185;          Superscript one
    &#186;          Masculine ordinal
    &#187;          Right angle quote, guillemotright
    &#188;          Fraction one-fourth
    &#189;          Fraction one-half
    &#190;          Fraction three-fourths
    &#191;          Inverted question mark
    &#192;          Capital A, grave accent
    &#193;          Capital A, acute accent
    &#194;          Capital A, circumflex accent
    &#195;          Capital A, tilde
    &#196;          Capital A, dieresis or umlaut mark
    &#197;          Capital A, ring
    &#198;          Capital AE dipthong (ligature)
    &#199;          Capital C, cedilla
    &#200;          Capital E, grave accent
    &#201;          Capital E, acute accent
    &#202;          Capital E, circumflex accent
    &#203;          Capital E, dieresis or umlaut mark
    &#204;          Capital I, grave accent
    &#205;          Capital I, acute accent
    &#206;          Capital I, circumflex accent
    &#207;          Capital I, dieresis or umlaut mark
    &#208;          Capital Eth, Icelandic
    &#209;          Capital N, tilde
    &#210;          Capital O, grave accent
    &#211;          Capital O, acute accent
    &#212;          Capital O, circumflex accent
    &#213;          Capital O, tilde
    &#214;          Capital O, dieresis or umlaut mark
    &#215;          Multiply sign
    &#216;          Capital O, slash
    &#217;          Capital U, grave accent
    &#218;          Capital U, acute accent
    &#219;          Capital U, circumflex accent
    &#220;          Capital U, dieresis or umlaut mark
    &#221;          Capital Y, acute accent
    &#222;          Capital THORN, Icelandic
    &#223;          Small sharp s, German (sz ligature)
    &#224;          Small a, grave accent
    &#225;          Small a, acute accent
    &#226;          Small a, circumflex accent
    &#227;          Small a, tilde
    &#228;          Small a, dieresis or umlaut mark
    &#229;          Small a, ring
    &#230;          Small ae dipthong (ligature)
    &#231;          Small c, cedilla
    &#232;          Small e, grave accent
    &#233;          Small e, acute accent
    &#234;          Small e, circumflex accent
    &#235;          Small e, dieresis or umlaut mark
    &#236;          Small i, grave accent
    &#237;          Small i, acute accent
    &#238;          Small i, circumflex accent
    &#239;          Small i, dieresis or umlaut mark
    &#240;          Small eth, Icelandic
    &#241;          Small n, tilde
    &#242;          Small o, grave accent
    &#243;          Small o, acute accent
    &#244;          Small o, circumflex accent
    &#245;          Small o, tilde
    &#246;          Small o, dieresis or umlaut mark
    &#247;          Division sign
    &#248;          Small o, slash
    &#249;          Small u, grave accent
    &#250;          Small u, acute accent
    &#251;          Small u, circumflex accent
    &#252;          Small u, dieresis or umlaut mark
    &#253;          Small y, acute accent
    &#254;          Small thorn, Icelandic
    &#255;          Small y, dieresis or umlaut mark

** 14. Proposed Entities
>   The HTML DTD references the "Added Latin 1" entity set, which only
supplies named entities for a subset of the non-ASCII characters in
[ISO-8859-1], namely the accented characters. The following entities
should be supported so that all ISO 8859-1 characters may only be
referenced symbolically. The names for these entities are taken from
the appendixes of [SGML].

HTML DTD は「追加 Latin 1」実体集合を参照していますが、
この実体集合は ISO/IEC 8859-1 の非 ASCII の部分集合、
というかアクセント付き文字の分しか名前付き実体を用意していません。
次の実体は ISO/IEC 8859-1 
のすべての文字を記号的に参照できるようにするために対応するべきものです。
これらの実体の名前は [[ISO 8879]] の附属書から取りました。

>
[PRE(SGML)[
    <!ENTITY nbsp   CDATA "&#160;" -- no-break space -->
    <!ENTITY iexcl  CDATA "&#161;" -- inverted exclamation mark -->
    <!ENTITY cent   CDATA "&#162;" -- cent sign -->
    <!ENTITY pound  CDATA "&#163;" -- pound sterling sign -->
    <!ENTITY curren CDATA "&#164;" -- general currency sign -->
    <!ENTITY yen    CDATA "&#165;" -- yen sign -->
    <!ENTITY brvbar CDATA "&#166;" -- broken (vertical) bar -->
    <!ENTITY sect   CDATA "&#167;" -- section sign -->
    <!ENTITY uml    CDATA "&#168;" -- umlaut (dieresis) -->
    <!ENTITY copy   CDATA "&#169;" -- copyright sign -->
    <!ENTITY ordf   CDATA "&#170;" -- ordinal indicator, feminine -->
    <!ENTITY laquo  CDATA "&#171;" -- angle quotation mark, left -->
    <!ENTITY not    CDATA "&#172;" -- not sign -->
    <!ENTITY shy    CDATA "&#173;" -- soft hyphen -->
    <!ENTITY reg    CDATA "&#174;" -- registered sign -->
    <!ENTITY macr   CDATA "&#175;" -- macron -->
    <!ENTITY deg    CDATA "&#176;" -- degree sign -->
    <!ENTITY plusmn CDATA "&#177;" -- plus-or-minus sign -->
    <!ENTITY sup2   CDATA "&#178;" -- superscript two -->
    <!ENTITY sup3   CDATA "&#179;" -- superscript three -->
    <!ENTITY acute  CDATA "&#180;" -- acute accent -->
    <!ENTITY micro  CDATA "&#181;" -- micro sign -->
    <!ENTITY para   CDATA "&#182;" -- pilcrow (paragraph sign) -->
    <!ENTITY middot CDATA "&#183;" -- middle dot -->
    <!ENTITY cedil  CDATA "&#184;" -- cedilla -->
    <!ENTITY sup1   CDATA "&#185;" -- superscript one -->
    <!ENTITY ordm   CDATA "&#186;" -- ordinal indicator, masculine -->
    <!ENTITY raquo  CDATA "&#187;" -- angle quotation mark, right -->
    <!ENTITY frac14 CDATA "&#188;" -- fraction one-quarter -->
    <!ENTITY frac12 CDATA "&#189;" -- fraction one-half -->
    <!ENTITY frac34 CDATA "&#190;" -- fraction three-quarters -->
    <!ENTITY iquest CDATA "&#191;" -- inverted question mark -->
    <!ENTITY Agrave CDATA "&#192;" -- capital A, grave accent -->
    <!ENTITY Aacute CDATA "&#193;" -- capital A, acute accent -->
    <!ENTITY Acirc  CDATA "&#194;" -- capital A, circumflex accent -->
    <!ENTITY Atilde CDATA "&#195;" -- capital A, tilde -->
    <!ENTITY Auml   CDATA "&#196;" -- capital A, dieresis or umlaut mark -->
    <!ENTITY Aring  CDATA "&#197;" -- capital A, ring -->
    <!ENTITY AElig  CDATA "&#198;" -- capital AE diphthong (ligature) -->
    <!ENTITY Ccedil CDATA "&#199;" -- capital C, cedilla -->
    <!ENTITY Egrave CDATA "&#200;" -- capital E, grave accent -->
    <!ENTITY Eacute CDATA "&#201;" -- capital E, acute accent -->
    <!ENTITY Ecirc  CDATA "&#202;" -- capital E, circumflex accent -->
    <!ENTITY Euml   CDATA "&#203;" -- capital E, dieresis or umlaut mark -->
    <!ENTITY Igrave CDATA "&#204;" -- capital I, grave accent -->
    <!ENTITY Iacute CDATA "&#205;" -- capital I, acute accent -->
    <!ENTITY Icirc  CDATA "&#206;" -- capital I, circumflex accent -->
    <!ENTITY Iuml   CDATA "&#207;" -- capital I, dieresis or umlaut mark -->
    <!ENTITY ETH    CDATA "&#208;" -- capital Eth, Icelandic -->
    <!ENTITY Ntilde CDATA "&#209;" -- capital N, tilde -->
    <!ENTITY Ograve CDATA "&#210;" -- capital O, grave accent -->
    <!ENTITY Oacute CDATA "&#211;" -- capital O, acute accent -->
    <!ENTITY Ocirc  CDATA "&#212;" -- capital O, circumflex accent -->
    <!ENTITY Otilde CDATA "&#213;" -- capital O, tilde -->
    <!ENTITY Ouml   CDATA "&#214;" -- capital O, dieresis or umlaut mark -->
    <!ENTITY times  CDATA "&#215;" -- multiply sign -->
    <!ENTITY Oslash CDATA "&#216;" -- capital O, slash -->
    <!ENTITY Ugrave CDATA "&#217;" -- capital U, grave accent -->
    <!ENTITY Uacute CDATA "&#218;" -- capital U, acute accent -->
    <!ENTITY Ucirc  CDATA "&#219;" -- capital U, circumflex accent -->
    <!ENTITY Uuml   CDATA "&#220;" -- capital U, dieresis or umlaut mark -->
    <!ENTITY Yacute CDATA "&#221;" -- capital Y, acute accent -->
    <!ENTITY THORN  CDATA "&#222;" -- capital THORN, Icelandic -->
    <!ENTITY szlig  CDATA "&#223;" -- small sharp s, German (sz ligature) -->
    <!ENTITY agrave CDATA "&#224;" -- small a, grave accent -->
    <!ENTITY aacute CDATA "&#225;" -- small a, acute accent -->
    <!ENTITY acirc  CDATA "&#226;" -- small a, circumflex accent -->
    <!ENTITY atilde CDATA "&#227;" -- small a, tilde -->
    <!ENTITY auml   CDATA "&#228;" -- small a, dieresis or umlaut mark -->
    <!ENTITY aring  CDATA "&#229;" -- small a, ring -->
    <!ENTITY aelig  CDATA "&#230;" -- small ae diphthong (ligature) -->
    <!ENTITY ccedil CDATA "&#231;" -- small c, cedilla -->
    <!ENTITY egrave CDATA "&#232;" -- small e, grave accent -->
    <!ENTITY eacute CDATA "&#233;" -- small e, acute accent -->
    <!ENTITY ecirc  CDATA "&#234;" -- small e, circumflex accent -->
    <!ENTITY euml   CDATA "&#235;" -- small e, dieresis or umlaut mark -->
    <!ENTITY igrave CDATA "&#236;" -- small i, grave accent -->
    <!ENTITY iacute CDATA "&#237;" -- small i, acute accent -->
    <!ENTITY icirc  CDATA "&#238;" -- small i, circumflex accent -->
    <!ENTITY iuml   CDATA "&#239;" -- small i, dieresis or umlaut mark -->
    <!ENTITY eth    CDATA "&#240;" -- small eth, Icelandic -->
    <!ENTITY ntilde CDATA "&#241;" -- small n, tilde -->
    <!ENTITY ograve CDATA "&#242;" -- small o, grave accent -->
    <!ENTITY oacute CDATA "&#243;" -- small o, acute accent -->
    <!ENTITY ocirc  CDATA "&#244;" -- small o, circumflex accent -->
    <!ENTITY otilde CDATA "&#245;" -- small o, tilde -->
    <!ENTITY ouml   CDATA "&#246;" -- small o, dieresis or umlaut mark -->
    <!ENTITY divide CDATA "&#247;" -- divide sign -->
    <!ENTITY oslash CDATA "&#248;" -- small o, slash -->
    <!ENTITY ugrave CDATA "&#249;" -- small u, grave accent -->
    <!ENTITY uacute CDATA "&#250;" -- small u, acute accent -->
    <!ENTITY ucirc  CDATA "&#251;" -- small u, circumflex accent -->
    <!ENTITY uuml   CDATA "&#252;" -- small u, dieresis or umlaut mark -->
    <!ENTITY yacute CDATA "&#253;" -- small y, acute accent -->
    <!ENTITY thorn  CDATA "&#254;" -- small thorn, Icelandic -->
    <!ENTITY yuml   CDATA "&#255;" -- small y, dieresis or umlaut mark -->
]PRE]

* memo

[1] この RFC は [[RFC 2854]] により廃止されました。
@

