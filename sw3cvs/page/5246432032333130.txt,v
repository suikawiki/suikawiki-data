head	1.1;
access;
symbols
	suikawiki3-final:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2004.07.27.02.04.48;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@auto-committed
@
text
@#?SuikaWiki/0.9 page-icon="HTTP"
'''The Safe Response Header Field [INS[[CODE(HTTP)[Safe]] 応答頭欄]]'''
-Network Working Group                                         
-Request for Comments: 2310                                           
-Category: Experimental                                        
- K. Holtman
- TUE
- April 1998

*Status of this Memo
> This memo defines an Experimental Protocol for the Internet
community.  It does not specify an Internet standard of any kind.
Discussion and suggestions for improvement are requested.
Distribution of this memo is unlimited.

*Copyright Notice
> Copyright (C) The Internet Society (1998).  All Rights Reserved.

*Abstract
> This document defines a HTTP response header field called Safe, which
can be used to indicate that repeating a HTTP request is safe.  Such
an indication will allow user agents to handle retries of some safe
requests, in particular safe POST requests, in a more user-friendly way.

この文書は、 [CODE(HTTP)[Safe]] という HTTP 応答頭欄を定義します。
この頭欄は、 HTTP 要求を繰り返しても安全であることを示すために使うことができます。
この表示があれば、利用者エージェントは安全な要求、
とりわけ安全な [CODE(HTTP)[POST]] 要求を、より利用者に親しい方法で再試行することができます。

*1 Introduction
> This document defines a HTTP response header field called Safe, which
can be used to indicate that repeating a HTTP request is safe.  Such
an indication will allow user agents to handle retries of some safe
requests, in particular safe POST requests, in a more user-friendly way.

この文書は、 [CODE(HTTP)[[[Safe]]]] という [[HTTP]] [[応答頭欄]]を定義します。
この頭欄は、 HTTP [[要求]]を繰り返しても[[安全]]であることを示すために使うことができます。
この表示があれば、[[利用者エージェント]]は安全な要求、
とりわけ安全な [CODE(HTTP)[[[POST]]]] 要求を、より[[利用者]]に親しい方法で再試行することができます。

* 2 Terminology and Notation
> This document uses the HTTP terminology and BNF notation defined in [1].  It uses the key words in RFC 2119 for defining the significance
of each particular requirement.

この文書は、 [[RFC2068]] で定義されている HTTP 用語および [[BNF]]
記法を使います。また、それぞれの要件の重要度を定義するために [[RFC2119]]
の見出し語を使います。

* 3 Rationale
> According to Section 9.1.1 (Safe Methods) of the HTTP/1.1
specification [1], POST requests are assumed to be `unsafe' by
default.  `Unsafe' means `causes side effects for which the user will
be held accountable'.

HTTP/1.1 仕様書の 9.1.1節 (安全な[RUBYB[方式] [method]])
によれば、 [CODE(HTTP)[POST]] 要求は既定では「安全でない」
とみなされます。「安全でない」とは、
「利用者が責任を負うこととなる副作用を起こす」ことを意味します。

> It is sometimes necessary for a user agent to repeat a POST request.
Examples of such cases are

時々、利用者エージェントは [CODE(HTTP)[POST]] 要求を繰り返す必要があります。
その例としては、

>
- when retrying a POST request which gave an indeterminate error
result in the previous attempt
- when the user presses the RELOAD button while a POST result is displayed
- when the history function is used to redisplay a POST result
which is no longer in the history buffer.

- 以前の試行で不確定誤り結果を得た [CODE(HTTP)[POST]] 要求を再試行する時
- [CODE(HTTP)[POST]] 結果が表示されているところで利用者が「再試行」ボタンを押した時
- 履歴機能を使って、既に履歴緩衝にない [CODE(HTTP)[POST]]
結果を再表示する時

が挙げられます。

> If the POST request is unsafe, HTTP requires explicit user
confirmation is before the request is repeated.  The confirmation
dialog often takes the form of a `repost form data?'  dialog box.
This dialog is confusing to many users, and slows down navigation in any case.

[CODE(HTTP)[POST]] 要求が安全でない場合には、要求を繰り返す前に陽に利用者に確認することを
HTTP は要求しています。確認対話は、しばしば「フォーム・データを再投函しますか?」
対話箱の形を取ります。この対話は多くの利用者を混乱させますし、
とにかく誘導がのろくなります。

> If the repeated POST request is safe, the user-unfriendly
confirmation dialog can be omitted.  However plain HTTP/1.1 [1] has
no mechanism by which agents can tell if POST requests are safe, and
they must be assumed unsafe by default.  This document adds a
mechanism to HTTP, the Safe header field, for telling if a POST
request is safe.

繰り返される [CODE(HTTP)[POST]] 要求が安全であれば、
利用者に親しくない確認対話は省略できます。しかし、素の HTTP/1.1
はエージェントが [CODE(HTTP)[POST]] 要求は安全であるかを知らせることができる仕組みを持っていませんし、
既定では安全ではないと仮定しなければなりません。
この文書は、 [CODE(HTTP)[POST]] 要求が安全であるかを知らせる仕組み、
[CODE(HTTP)[Safe]] 頭欄を HTTP に付け加えます。

> Using the Safe header field, web applications which require the use
of a safe POST request, rather than a GET request, for the submission
of web forms, can be made more user-friendly.  The use of a POST
request may be required for a number of reasons, including

[CODE(HTTP)[Safe]] 頭欄を使うと、ウェブ・[[フォーム]]の[[提出]]のために 
[CODE(HTTP)[[[GET]]]] 要求ではなく安全な
[CODE(HTTP)[POST]] 要求を使う必要のある[[ウェブ応用]]はより利用者に親しくすることができます。
[CODE(HTTP)[POST]] 要求を使う必要があるかもしれない理由は沢山ありますが、たとえば

>
- the contents of the form are potentially very large
- the form is used to upload a file (see [2])
- the application needs some internationalization features
(see [3]) which are only available if the form contents are
transmitted in a request body the information in the form cannot
be encoded in a GET request URL because of security considerations. [INS[原文まま]]

- フォームの内容が非常に大きくなり得る
- フォームは[[ファイル]]を[[うp]]するために使う
- 応用はフォーム内容が[[要求本体]]として転送される時にのみ利用可能な[[国際化]]機能が必要
- フォーム中の情報は安全性に関係で [CODE(HTTP)[GET]] 要求 [[URL]] に符号化できない

といったものがあります。

* 4 The Safe response header field
> The Safe response header field is defined as an addition to the
HTTP/1.x protocol suite.

[CODE(HTTP)[Safe]] 応答頭欄は、 HTTP/1.[VAR[x]] プロトコル集への追加として定義します。

> The Safe response header field is used by origin servers to indicate
whether repeating the received HTTP request is safe in the sense of
Section 9.1.1 (Safe Methods) of the HTTP/1.1 specification [1].  For
the purpose of this specification, a HTTP request is considered to be
a repetition of a previous request if both requests

[CODE(HTTP)[Safe]] 応答頭欄は、[[起源鯖]]が、
受信した HTTP 要求を繰り返しても HTTP/1.1 仕様書 9.1.1 節 (安全な方式)
での意味で安全であるかどうかを示すために使用します。
この仕様書の目的では、ある HTTP 要求は、以前の要求と

>
- are issued by the same user agent, and
- apply to the same resource, and
- have the same request method, and
- both have no request body, or both have request bodies which are
byte-wise identical after decoding of any content and transfer codings.

- 同じ利用者エージェントにより発行され、かつ
- 同じ[[資源]]に適用され、かつ
- 同じ要求[[方式]]であり、かつ
- 両者共に要求本体を持たないか、または両者の要求本体がすべての[[内容符号化]]・[[転送符号化]]を復号した後にバイト的に同一である

場合に、以前の要求の繰り返しと考えます。

> The Safe header field has the following syntax.

[CODE(HTTP)[Safe]] 頭欄は、次の構文を持ちます。

>
-     Safe        = "Safe" ":" safe-nature
-     safe-nature = "yes" | "no"

> An example of the header field is:

頭欄の例:

>
-     Safe: yes

> If a Safe header field is absent in the response, the corresponding
request MUST be considered unsafe, unless it is a GET or HEAD
request.  As GET and HEAD requests are safe by definition, user
agents SHOULD ignore a `Safe: no' header field in GET and HEAD responses.

[CODE(HTTP)[Safe]] 頭欄が応答になければ、
対応する要求は、それが [CODE(HTTP)[GET]] 要求または [CODE(HTTP)[[[HEAD]]]]
要求で無い限り、安全でないと考えなければ'''なりません'''。
[CODE(HTTP)[GET]] 要求や [CODE(HTTP)[HEAD]] 要求は定義上安全なので、
利用者エージェントは [CODE(HTTP)[GET]] や [CODE(HTTP)[HEAD]]
の応答の [CODE(HTTP)[Safe: no]] 頭欄を無視する'''べきです'''。

> If, according to a received Safe header field, the repeating of a
request is safe, the request MAY be repeated automatically without
asking for user confirmation.

受信した [CODE(HTTP)[Safe]] 頭欄によれば要求の繰り返しが安全であるとするなら、
要求を利用者の確認を取らずに自動的に繰り返しても'''構いません'''。

* 5 Security Considerations
> For a discussion of the security considerations connected to HTTP
form submission, see [1].  The Safe header field introduces no new
security risks.

HTTP フォーム提出に関する安全についての考慮の議論は RFC 2068 を参照してください。
[CODE(HTTP)[Safe]] 頭欄は新しい安全上の危険をもたらしてはいません。

> The use of GET requests for form submission has some security risks
which are absent for submission with other HTTP methods.  By taking
away a counter-incentive to the use of GET requests for form
submission, the Safe header field may improve overall security.

フォーム提出で [CODE(HTTP)[GET]] 要求を使うことは、
他の HTTP 方式での提出時にはない安全上の危険があります。
フォーム提出に [CODE(HTTP)[GET]] 要求を使うことの逆要因を減らすことで、
[CODE(HTTP)[Safe]] 頭欄は全体的な安全を向上させるかもしれません。

* 6 References
>
[1] Fielding, R., Gettys, J., Mogul, J., Frystyk, H., and
T. Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1",  RFC
2068, January 1997.
>
[2] Nebel, E., and L. Masinter, "Form-based File Upload in HTML",
RFC 1867, November 1995.
>
[3] Yergeau, F., Nicol, G., Adams, G., and M. Duerst,
"Internationalization of the Hypertext Markup Language", RFC
2070, January 1997.

* 7 Author's Address
>
[PRE[
   Koen Holtman
   Technische Universiteit Eindhoven
   Postbus 513
   Kamer HG 6.57
   5600 MB Eindhoven (The Netherlands)

   EMail: koen@@win.tue.nl
]PRE]

* 8.  Full Copyright Statement
> Copyright (C) The Internet Society (1998).  All Rights Reserved.

(全文は [[RFCのライセンス]]を参照。)

* メモ
@
