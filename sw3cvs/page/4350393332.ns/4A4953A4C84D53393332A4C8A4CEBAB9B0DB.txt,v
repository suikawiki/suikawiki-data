head	1.2;
access;
symbols
	suikawiki3-final:1.2
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.06.27.02.06.38;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.44;	author make;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-committed
@
text
@#?SuikaWiki/0.9
[1] [[JIS]] が規定する[[シフトJIS]]と [[M$]] の CP932 の差異の話。

[2] リクエストに応じて作りますた。

関連: [[WindowsCodePage]>>30],
[[TYPOの表に基づくCP932とUnicodeの対応]]

[4] MS932 とは [[Windows標準キャラクターセット]]のことをいいます。
単に CP932 というと、 [[IBM]] CP932 
とかを指して紛らわしいこともあるので、こういいます。

*文字集合としての差異

[3] MS932 は [[JISX0208]]:1997 附属書1 
''シフト符号化表現''に次を追加したものです。
-[5] NEC 特殊文字 (13区)
-[6] NEC 選択 IBM 拡張文字
-[7] 末端利用者定義文字 ([[EUDC]]; 0xF040-0xF9FC)
-[8] IBM 拡張文字 (0xFA40-0xFBFC)

>>6 と >>8 は基本的には同じ物です。
これを含めて重複文字が沢山あります。特に >>5
には JIS で既に定義されている文字と重複しているものがあります。

(このため、 MS932 は JIS X 0208:1997 に適合'''しません'''。)

[12] MS は >>6 より >>8 の方を推奨しているらしいです。
また、 >>5 と >>8 の重複分は >>5 の使用を、これらと JIS
の重複分は JIS を使うことを推奨しているようです。
(もっとも、独自拡張分の使用はそれ自体推奨できるものではないと思うのですが。)

実際、 UCS との変換表でもそうなっています。 (>>13)

*UCS 変換表の差異

[9] JIS X 0208:1997 の規定する[[名前]]と同じ名前を持つ
[[UCS]] の文字の対応関係の表を、以下では JIS
の規定する変換表といいます。

また、 MS932 の変換表とは [[Windows]] の MultiByteToWideChar,
WideCharToMultiByte 両 API 
の変換結果による対応を原則として指します。

[10] MS932 の変換表については >>2 からたどってください。
これを見ると MS932 は多くの UCS -> JIS
の一方通行の対応を持っていることが分かります。

これは UCS => JIS 変換で出来るだけ多くの情報を保持しようというものですから、
(その是非は場面や人により意見が異なるでしょうが、)
間違ったことではないでしょう。

(但し、 JIS と UCS が厳密には一対一対応しない問題への解決策として考えると、余計なものが入っていたり逆に必要なものが足りなかったりします。特に漢字についてのこの種の対応は全くありません。)

[11] 更に、 >>3 に示した文字集合の違いのために MS932
変換表の方が多くの対応関係を持っています。 (当然ですね。)

[13] 重複分については、 UCS -> JIS 変換では必ず MS の推奨優先順
(>>12) で戻って来ます。

(これが原因で、 NEC 選択 IBM 拡張文字 (>>6)
を使っていると同じ文字列のはずなのに一致しないという問題が起こっています。
([[ローマ数字]]の[[小文字]]を含むファイル名が開けないなどの問題はこれです。))

[14] EUDC (>>7) は U+E000 から順に対応させられています。

**非漢字の対応

[15] 非漢字の対応関係が円問題 (>>16) と並んで MS932 
変換表の最大の問題となっています。

[17] まず、1バイトの 0x21-0x7E ([[JISX0201]] ラテン文字集合)
で定義されているのと同じ名前の2バイト (JIS X 0208)
の文字は、 JIS が規定する代替文字名称を使ったものに相当します。
また、 0xA1-0xDF (JIS X 0201 片仮名集合) の文字も JIS
の規定による代替文字名称に相当します。これらは問題ありません。

[18] しかし次の表に挙げる文字は JIS と MS932 で対応が異なります。
これらはすべて MS932 が間違っていて、 JIS に'''反します'''。

最初の JIS の UCS との対応の規定がある [[JISX0221]]-1995
が初期の MS932 
変換表に間に合わなかったとしても、その後既に数年が経過しています。
MS にはこの''不具合''を修正する気はないらしいです。
(''仕様''なんだってさ。)
,シフトJIS,名前               ,UCS (JIS),Unicode (MS932)
,0x815C,EM DASH             ,U+2014   ,U+2015 ([WEAK[HORIZONTAL BAR]])
,0x815F,REVERSE SOLIDUS    ,U+005C   ,U+FF3C ([WEAK[FULLWIDTH REVERSE SOLIDUS]])
,0x8160,WAVE DASH           ,U+301C,U+FF5E ([WEAK[FULLWIDTH TILDE]])
,0x8161,DOUBLE VERTICAL LINE,U+2016,U+2225 ([WEAK[PARALLEL TO]])
,0x817C,MINUS SIGN          ,U+2212,U+FF0D ([WEAK[FULLWIDTH HYPHEN-MINUS]])
,0x8192,POUND SIGN          ,U+00A3,U+FFE1 ([WEAK[FULLWIDTH POUND SIGN]])
,0x819C,CENT SIGN           ,U+00A2,U+FFE0 ([WEAK[FULLWIDTH CENT SIGN]])
,0x81CA,NOT SIGN            ,U+00AC,U+FFE2 ([WEAK[FULLWIDTH NOT SIGN]])

「〜」や「―」の表示がおかしいことがある問題はこれです。

**円問題

[16] [[シフトJIS]]の1バイト部分が JIS X 0201
であることは成立過程から見ても明らかです。しかし MS932
では 0x5C (YEN SIGN), 0x7E (OVER LINE) をそれぞれ
U+005C (REVERSE SOLIUDS), U+007E (TILDE) に対応させています。

これは Windows の path のディレクトリ区切子 "\" (0x5C)
が英語版では''逆斜線''で、日本語版では''円''になるというあの問題です。

たとえば ''sprintf "\\%d\n", amount'' という例
(よく取り上げられますね。) を考えてください。
''amount'' が 100 なら "\100(改行)" と出力されます。
ここで1文字目 "\" は 0x5C ですが、 MS932 では''円''です。
従って「百円」だと書いてあるのです。

"\n" (0x5C + 'n') は、''改行''を表しますが、おそらく全ての実装で、
1文字目が''逆斜線''か''円''かは気にせずに、 0x5C + 'n'
が''改行''と判断します。最初の ''\\'' は、 0x5C
がこのように解釈される特殊文字なので、2つ重ねてその文字自体を表します。

ここで 0x5C -> U+00A5 (YEN SIGN) という対応を採用すると、先程の例は
''sprintf "￥￥%d￥n", amount'' になります。これを実行すると、
''￥￥100￥n'' となるでしょう。 0x5C でない YEN SIGN
は、特殊な意味を持たなくなりました。

[17] プログラムの code の中ではなくて、普通の文書中なら、
"\100" を "￥100" に置き換えても良いのでしょうから、複数の変換表を用意するという解決策もありますが、その''普通の文書''の中にプログラムの
code の断片やファイルの path が含まれていたらお手上げです。

[18] MS932 の話だったのに円問題の解説になってしまった。まあいいや。

[19] ということで円問題は必ずしも MS 
の愚策とはいえない、深い問題ではあります。

なお、 0x7E "~" でも同じ問題が発生しますが、こちらは "\"
のように特殊な意味にはあまり使われないので問題が意識されていません。
([[HTTP]] [[URI]] にはしばしば登場しますが...)

*参考
-JIS記号の UCS BMP へのマッピングの問題および MS漢字とシフトJISの違い <http://www.asahi-net.or.jp/~ez3k-msym/charsets/jis2ucs.htm>
*メモ
@


1.1
log
@auto-commited
@
text
@d88 1
a88 1
,0x815F,REVERSED SOLIDUS    ,U+005C   ,U+FF3C ([WEAK[FULLWIDTH REVERSED SOLIDUS]])
d103 1
a103 1
U+005C (REVERSED SOLIUDS), U+007E (TILDE) に対応させています。
@

