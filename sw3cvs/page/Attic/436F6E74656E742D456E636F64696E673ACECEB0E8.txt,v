head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2003.07.26.07.42.55;	author wakaba;	state dead;
branches;
next	1.4;

1.4
date	2003.01.26.04.49.32;	author w;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.29.09.23.12;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.16.10.48.51;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.12.01.57;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.5
log
@semi-auto committed
@
text
@*RFC 2616 の3.5 Content Codings

   Content coding values indicate an encoding transformation that has
   been or can be applied to an entity. Content codings are primarily
   used to allow a document to be compressed or otherwise usefully
   transformed without losing the identity of its underlying media type
   and without loss of information. Frequently, the entity is stored in
   coded form, transmitted directly, and only decoded by the recipient.

-content-coding   = token

   All content-coding values are case-insensitive. HTTP/1.1 uses
   content-coding values in the Accept-Encoding (section 14.3) and
   Content-Encoding (section 14.11) header fields. Although the value
   describes the content-coding, what is more important is that it
   indicates what decoding mechanism will be required to remove the
   encoding.

   The Internet Assigned Numbers Authority (IANA) acts as a registry for
   content-coding value tokens. Initially, the registry contains the
   following tokens:

   gzip An encoding format produced by the file compression program
        "gzip" (GNU zip) as described in RFC 1952 [25]. This format is a
        Lempel-Ziv coding (LZ77) with a 32 bit CRC.

ファイル圧縮プログラム「gzip」(GNU zip) で生成される符号化形式で、
RFC 1952 で説明されているもの。この形式は Lempel-Ziv 符号化 (LZ77)
と 32ビット [[CRC]] を使っています。

   compress
        The encoding format produced by the common UNIX file compression
        program "compress". This format is an adaptive Lempel-Ziv-Welch
        coding (LZW).

共通 UNIX ファイル圧縮プログラム「compress」で生成される符号化形式。
この形式は Lempel-Ziv-Welch 符号化 (LZW) の一応用です。

        Use of program names for the identification of encoding formats
        is not desirable and is discouraged for future encodings. Their
        use here is representative of historical practice, not good
        design. For compatibility with previous implementations of HTTP,
        applications SHOULD consider "x-gzip" and "x-compress" to be
        equivalent to "gzip" and "compress" respectively.

符号化形式にプログラム名を使うのは望ましいことではなく、
将来の符号化方式には推奨されません。ここで使っているのは
歴史的習慣表現であって、良い設計とはいえません。
HTTP の古い実装との互換性のため、応用は "x-gzip" と "x-compress"
をそれぞれ "gzip" および "compress" と同様に解釈するのが
'''望ましい'''です。

   deflate
        The "zlib" format defined in RFC 1950 [31] in combination with
        the "deflate" compression mechanism described in RFC 1951 [29].

RFC 1950 で定義された「zlib」形式と RFC 1951 で説明されている
「deflate」 (収縮) 形式を組み合わせたものです。

   identity
        The default (identity) encoding; the use of no transformation
        whatsoever. This content-coding is used only in the Accept-
        Encoding header, and SHOULD NOT be used in the Content-Encoding
        header.

規定 (同等) 符号化方式。無変形に使います。この内容符号化は
Accept-Encoding (承認符号化方式) 頭にのみ使われ、
Content-Encoding (内容符号化方式) 頭に使う'''べきではありません'''。

   New content-coding value tokens SHOULD be registered; to allow
   interoperability between clients and servers, specifications of the
   content coding algorithms needed to implement a new value SHOULD be
   publicly available and adequate for independent implementation, and
   conform to the purpose of content coding defined in this section.

*HTTP/1.0 (RFC 1945) から抜粋

       content-coding = "x-gzip" | "x-compress" | token

       Note: For future compatibility, HTTP/1.0 applications should
       consider "gzip" and "compress" to be equivalent to "x-gzip"
       and "x-compress", respectively.


*値

'"bzip"       ,[[bzip]]
,"bzip2"      ,[[bzip]]2  
,"compress"   ,Un*x ファイル圧縮 (「compress」プログラム) ,[[HTTP/1.1]]
,"deflate"    ,「zlib」形式の収縮 (deflate) 圧縮          ,[[HTTP]]
,"gzip"       ,GNU Zip 圧縮 (「gzip」プログラム)          ,[[HTTP/1.1]]
,"identity"   ,無変換                                     ,[[HTTP]]
,"x-compress" ,"compress" と同じ                          ,[[HTTP/1.0]]
,"x-gzip"     ,"gzip" と同じ                              ,[[HTTP/1.0]]

"x-compress", "x-gzip" は、 HTTP/1.1 相手には使うべきではありません。
逆に "compress", "gzip" は、 HTTP/1.0 相手に使うべきではありません。

"compress" は、特許問題のある [[LZW圧縮法]] を使う (というかほぼそのものな)
ので、使用するべきではありません。

"bzip" / "bzip2" は HTTP RFC では規定されていませんが、使用されている
ことがあるみたいです。

*See also
-<http://www.iana.org/assignments/http-parameters>
-[[符号化]]
--[[転送符号化]]
--[[圧縮]]
--[[RFC822と仲間達の頭領域名]]
---[[Accept-Encoding:領域]]
---[[Content-Transfer-Encoding:領域]]
---[[Transfer-Encoding:領域]]
---[[TE:領域]]
---[[Content-Type:領域]]

*ライセンス

See [[RFCのライセンス]]
- [1] [[Accept-Encoding:]] 欄に 7bit, 8bit, binary とか書く UA があるらしい。なんか勘違いしているような気がする。
- [2] 古い [[HTTP/1.0]] server/UA は [CODE[x-zip]] という値を [CODE[compress]] の意味で使っていました。
- [3] >>2 また、 ";" と "," が未分化の時代には ";" が区切りに使われたりしました。
@


1.4
log
@auto-commited
@
text
@@


1.3
log
@*** empty log message ***
@
text
@d121 2
@


1.2
log
@*** empty log message ***
@
text
@d120 1
@


1.1
log
@Updated.
@
text
@d85 1
a85 1
*取り得る値
d87 8
a94 6
:"compress":   Un*x ファイル圧縮 (「compress」プログラム)
:"deflate":    「zlib」形式の収縮 (deflate) 圧縮
:"gzip":       GNU Zip 圧縮 (「gzip」プログラム)
:"identity":   無変換
:"x-compress": "compress" と同じ (HTTP/1.0)
:"x-gzip":     "gzip" と同じ (HTTP/1.0)
d96 2
a97 2
x-compress, x-gzip は、 HTTP/1.1 相手には使うべきではありません。
逆に compress, gzip は、 HTTP/1.0 相手に使うべきではありません。
d99 1
a99 1
compress は、特許問題のある [[LZW圧縮法]] を使う (というかほぼそのものな)
d101 3
@

