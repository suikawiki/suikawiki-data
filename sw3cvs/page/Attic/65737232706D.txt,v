head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2003.06.06.12.26.30;	author make;	state dead;
branches;
next	1.2;

1.2
date	2002.10.13.09.24.39;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.13.06.24.28;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-commited
@
text
@SuikaWiki/0.9

[[Encode::Table]] は perl の文字列を変換表を使って一度に大量に
置き換える枠組みを提供します。これと他の Encode モジュールを
組み合わせることで、例えば [[UCS]] と他の[[文字コード]]の間の
変換表問題に対処するために、構造は他の文字コードの処理を
流用しつつ変換表は取り替えた Encode モジュールを定義出来ます。

あるいは、 [[ISO/IEC2022]] に基づいた[[文字コード]]では、
同じ文字に複数の表現があり得ますが、標準の変換処理では
一般的と思われる優先順位を適当に決めています。しかし
言語や地域や適用業務によってはこの既定値が不適当なことが
あります。この場合も、比較的簡単な処理の組合せで
実現できます。

しかし実際にそうしてみると、同じ様な処理を持つものの統一する
のには辛い code を幾つも書くことになります。これは最初に書く労力
を考えても維持管理の労力を考えても無駄なことです。

そこで、 esr2pm は、簡単な書式の text file (これを esr file
と呼びます。) を書くだけで、それから Perl モジュール (pm file)
を生成します。文字コード変換に関わる処理に特化していますから
自由度はそれほど高くありませんが、多くの場合これで十分でしょう。

esr2pm は [[Encodeモジュール改善プロジェクト]]の成果物です。
Encode/Table/tool/esr2pm.pl 
<http://suika.fam.cx/gate/cvs/perl/lib/Encode/Table/tool/esr2pm.pl>
がそれです。

*書式

実例を見ていただければ一目瞭然だと思います。例えば
Encode::ISO2022::JISCompatible の元である 
Encode/ISO2022/JISCompatible.esr
<http://suika.fam.cx/gate/cvs/perl/lib/Encode/ISO2022/JISCompatible.esr>
をご覧下さい。

esr file の最初の行は、 esr file でることを示す magic,
"#?PESRC/1.0" だけで構成されます。この版番号 "1.0"
は、将来もし esr file の構造に非互換な変更が行われたら
それにあわせて変更されます。

esr file 内では "#" で始まる行は注釈になります。

esr file の内容は Makefile に少し似たような構造をしています。
節の最初の行は、節の名前のすぐ後に ":" と改行が来る行です。
次の節の最初の行が現れるか、塊の最初の行が現れるまで
が一つの節です。

節の中で意味を持つ行は、最初の一文字が [[TAB]] のものだけで、
他は未定義とします。

塊は、 "{" だけの行から始まり、 "}" だけの行で終わります。
塊の中身は外側と同様、任意個の節です。塊は今の所入れ子には
出来ません。

塊1個が1つの[[文字コード]]に対応します。ですから、塊が
n 個あれば n 種類の[[文字コード]]を定義したことになります。

**塊の外の節

現在定義されている節の名前は次に示すとおりで、これ以外の
節の意味は未定義とします。
,Name                  ,モジュールの名前。これの頭に "Encode" がつく。
,POD:DESCRIPTION       ,[[pod]] で DESCRIPTION として出力
,POD:ENCODING:PREAMBLE ,pod で ENCODINGS の一覧の前に出力
,POD:ENCODING:POSTAMBLE,pod で ENCODINGS の一覧の後に出力
,POD:EXAMPLE           ,pod で EXAMPLE として出力
,POD:TO DO             ,pod で TO DO として出力
,POD:SEE ALSO          ,pod で SEE ALSO として出力
,POD:AUTHORS           ,pod で AUTHORS として出力
,POD:LICENSE           ,pod で LICENSE として出力

節の内容はモジュール全体の属性・説明となります。

POD:EXAMPLE 以下の POD:* の内容には %% 置換が使えます。

Name と POD:LICENSE は必須です。

**塊の外の節

現在定義されている節の名前は次に示すとおりで、これ以外の
節の意味は未定義とします。
,Name              ,名前
,Alias             ,別名を SP で区切った表
,Description       ,説明。 pod で ENCODINGS 中の説明になる
,Encode            ,符号化処理
,Decode            ,復号処理
節の内容はその[[文字コード]]の属性・説明となります。

Name と Encode と Decode は必須です。

**符号化処理・復号処理の記述

一行ごとに一処理書きます。処理には次のものが定義されています。

*** "->", "<-"

すぐあとに続けて、[[文字コード]]の名前 ([[Encode]] が認識
するもの。) を書きます。例:

  ->euc-jp-1997

"->" は符号化 (encode) で、 "<-" が復号 (decode) です。

[[Encode::ISO2022]] 系の[[文字コード]]などで、
符号化・復号に当たって組み込み変換表が使われるものは、
この時は''使用されません''。変換方法は必要に
応じて "<=" や "=>" で指定する必要があります。

*** "=>", "<="

直ぐ後に続けて、変換表の名前 ([[Encode::Table]] で使うもの。)
を SP で区切った表を書きます。例:

  =>ucs_to_ascii ucs_to_jisx0208_1997

左側ほど優先順が高くなります。

"=>" と "<=" は分かりやすさのために二種類用意しただけで、
行われる処理に違いはありません。 "=>" は符号化に、
"<=" は復号に使うと良いでしょう。

***"utf8:off", "utf8:on"

処理中の文字列の UTF-8 旗を降ろしたり揚げたりします。
この処理で UTF-8 
にするために何らかの文字コード変換が行われるわけではありません。

***"use:table:"

すぐ後に変換表の名前 ([[Encode::Table]] で使われるもの。)
を書きます。その変換表を読み込むことを指示します。
既に読み込まれているときは、何もしません。

***"use:"

すぐ後にモジュールの名前を書いて、そのモジュールを [[use]]
します。 Perl の code で "use モジュール名;" と書くのと
透過ですが、 $モジュール名::VERSION が真なら、
既に読み込まれていると見なして何もしません。

**%% 置換

上記で使えると記した場所では、 %%ItemName%% と書くと
ItemName で定義された定型文に置換されます。
例えば、 %%PerlLicense%% と書けば「Perl と同じライセンスです」
という英文が出力されます。使える名前の一覧は esr2pm.pl
を見て下さい。

*この文書の license

他の [[SuikaWiki]] の一般的な Wiki page と同じです。
[[寄稿文のライセンス]]をご覧下さい。但し、この文書を
[[perlと同じライセンス]]のソフトウェアなどと同時に配布する時は、
[[perlと同じライセンス]]が適用されるものと見なしても構いません。

*その他
@


1.2
log
@Updated.
@
text
@@


1.1
log
@Updated.
@
text
@a2 5
esr2pm script は [[Encodeモジュール改善プロジェクト]]の成果物です。
Encode/Table/tool/esr2pm.pl 
<http://suika.fam.cx/gate/cvs/perl/lib/Encode/Table/tool/esr2pm.pl>
がそれです。

d9 8
a16 1
しかし実際にそうしてみると、同じ様な処理を持つのが統一する
d24 5
@

