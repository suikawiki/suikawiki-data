head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.06.06.12.26.17;	author make;	state dead;
branches;
next	1.1;

1.1
date	2002.10.21.09.25.01;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-commited
@
text
@#?SuikaWiki/0.9
[1] [[電子メイル]]で使われる [[Content-Type:欄]]の最新の定義は、
[[MIME]] [[RFC]]s の1つ目、 [[RFC2045]] <urn:ietf:rfc:2045>
にあります。

*RFC 2045 5.  Content-Type Header Field

>The purpose of the Content-Type field is to describe the data
contained in the body fully enough that the receiving user agent can
pick an appropriate agent or mechanism to present the data to the
user, or otherwise deal with the data in an appropriate manner. The
value in this field is called a media type.

Content-Type (内容型) 欄の目的は、受信した[[利用者エージェント]]が適切なエージェントやデータを利用者に提示する方法を選ぶか、その他適切な方法でデータを処理するのに十に分なだけ[[本体]]のデータを説明することにあります。この欄の値は[[媒体型]]と呼びます。

>HISTORICAL NOTE:  The Content-Type header field was first defined in
RFC 1049.  RFC 1049 used a simpler and less powerful syntax, but one
that is largely compatible with the mechanism given here.

歴史について: CT 頭欄は最初 RFC 1049 で定義されました。
RFC 1049 はより簡単であまり強力ではない構文でしたが、これはここに示す仕組みとかなり互換性があります。

[INS[
[2] 訳注: ほんとか? と思ったら、 
[[RFC1049のContent-Type:領域の定義]]を参照。
]INS]

>The Content-Type header field specifies the nature of the data in the
body of an entity by giving media type and subtype identifiers, and
by providing auxiliary information that may be required for certain
media types.  After the media type and subtype names, the remainder
of the header field is simply a set of parameters, specified in an
attribute=value notation.  The ordering of parameters is not
significant.

   In general, the top-level media type is used to declare the general
   type of data, while the subtype specifies a specific format for that
   type of data.  Thus, a media type of "image/xyz" is enough to tell a
   user agent that the data is an image, even if the user agent has no
   knowledge of the specific image format "xyz".  Such information can
   be used, for example, to decide whether or not to show a user the raw
   data from an unrecognized subtype -- such an action might be
   reasonable for unrecognized subtypes of text, but not for
   unrecognized subtypes of image or audio.  For this reason, registered
   subtypes of text, image, audio, and video should not contain embedded
   information that is really of a different type.  Such compound
   formats should be represented using the "multipart" or "application"
   types.

   Parameters are modifiers of the media subtype, and as such do not
   fundamentally affect the nature of the content.  The set of
   meaningful parameters depends on the media type and subtype.  Most
   parameters are associated with a single specific subtype.  However, a
   given top-level media type may define parameters which are applicable
   to any subtype of that type.  Parameters may be required by their
   defining content type or subtype or they may be optional. MIME
   implementations must ignore any parameters whose names they do not
   recognize.

   For example, the "charset" parameter is applicable to any subtype of
   "text", while the "boundary" parameter is required for any subtype of
   the "multipart" media type.

   There are NO globally-meaningful parameters that apply to all media
   types.  Truly global mechanisms are best addressed, in the MIME
   model, by the definition of additional Content-* header fields.

   An initial set of seven top-level media types is defined in RFC 2046.
   Five of these are discrete types whose content is essentially opaque
   as far as MIME processing is concerned.  The remaining two are
   composite types whose contents require additional handling by MIME
   processors.

   This set of top-level media types is intended to be substantially
   complete.  It is expected that additions to the larger set of
   supported types can generally be accomplished by the creation of new
   subtypes of these initial types.  In the future, more top-level types
   may be defined only by a standards-track extension to this standard.
   If another top-level type is to be used for any reason, it must be
   given a name starting with "X-" to indicate its non-standard status
   and to avoid a potential conflict with a future official name.

**5.1.  Syntax of the Content-Type Header Field
**5.1. Content-Type 頭領域の構文

In the Augmented BNF notation of RFC 822, a Content-Type header field
value is defined as follows:

RFC 822 の拡張 BNF 記法により、 Content-Type 頭領域値は
次のように定義します。

     content := "Content-Type" ":" type "/" subtype
                *(";" parameter)
                ; Matching of media type and subtype
                ; is ALWAYS case-insensitive.

; 媒体型及び亜型の照合は''常に''大文字・小文字を区別しません。

     type := discrete-type / composite-type

     discrete-type := "text" / "image" / "audio" / "video" /
                      "application" / extension-token

     composite-type := "message" / "multipart" / extension-token

     extension-token := ietf-token / x-token

     ietf-token := <An extension token defined by a
                    standards-track RFC and registered
                    with IANA.>

; <標準化過程 RFC で定義され、 IANA に登録された拡張 token>

     x-token := <The two characters "X-" or "x-" followed, with
                 no intervening white space, by any token>

; <2文字「X-」または「x-」に、空白間隔を挟まずに続く token>

     subtype := extension-token / iana-token

     iana-token := <A publicly-defined extension token. Tokens
                    of this form must be registered with IANA
                    as specified in RFC 2048.>

; <公式に定義された拡張 token。この形式の token は RFC 2048 で規定された
通りに IANA に登録されなければならない。>

     parameter := attribute "=" value

     attribute := token
                  ; Matching of attributes
                  ; is ALWAYS case-insensitive.

; 属性の照合は''常に''大文字・小文字を区別しない。

     value := token / quoted-string

     token := 1*<any (US-ASCII) CHAR except SPACE, CTLs,
                 or tspecials>

     tspecials :=  "(" / ")" / "<" / ">" / "@@" /
                   "," / ";" / ":" / "\" / <">
                   "/" / "[" / "]" / "?" / "="
                   ; Must be in quoted-string,
                   ; to use within parameter values

; parameter value 内で使うには常に quoted-string 内でなければならない

Note that the definition of "tspecials" is the same as the RFC 822
definition of "specials" with the addition of the three characters
"/", "?", and "=", and the removal of ".".

なお、「tspecials」の定義は RFC 822 の「specials」定義から
3文字 "/", "?", "=" を加えて「.」を除いたものです。

Note also that a subtype specification is MANDATORY -- it may not be
omitted from a Content-Type header field.  As such, there are no
default subtypes.

また、 subtype 指定は''絶対必要''です。 Content-Type 頭領域から
省略してはいけません。ですから、規定の亜型はありません。

The type, subtype, and parameter names are not case sensitive.  For
example, TEXT, Text, and TeXt are all equivalent top-level media
types.  Parameter values are normally case sensitive, but sometimes
are interpreted in a case-insensitive fashion, depending on the
intended use.  (For example, multipart boundaries are case-sensitive,
but the "access-type" parameter for message/External-body is not
case-sensitive.)

type, subtype, parameter 名は大文字・小文字を区別しません。
例えば、 TEXT, Text, TeXt は全て同じ上位媒体型です。
parameter 値は一般に大文字・小文字を区別しますが、
その用途により区別せずに解釈されることもあります。
(例えば、 multipart 区切りは大文字・小文字を区別しますが、
message/External-body の「access-type」 parameter は
区別しません。)

Note that the value of a quoted string parameter does not include the
quotes.  That is, the quotation marks in a quoted-string are not a
part of the value of the parameter, but are merely used to delimit
that parameter value.  In addition, comments are allowed in
accordance with RFC 822 rules for structured header fields.  Thus the
following two forms

なお、引用符で囲まれた文字列の parameter の値は引用符を含みません。
これは、 quoted-string の引用符は parameter の value の一部ではなく、
単に parameter value の区切りとして使われているということです。
更に、 RFC 822 の構造化頭領域の規則に則り注釈を入れることが出来ます。
従って次の2例は完全に同等です。

     Content-type: text/plain; charset=us-ascii (Plain text)

     Content-type: text/plain; charset="us-ascii"

are completely equivalent.

Beyond this syntax, the only syntactic constraint on the definition
of subtype names is the desire that their uses must not conflict.
That is, it would be undesirable to have two different communities
using "Content-Type: application/foobar" to mean two different
things.  The process of defining new media subtypes, then, is not
intended to be a mechanism for imposing restrictions, but simply a
mechanism for publicizing their definition and usage.  There are,
therefore, two acceptable mechanisms for defining new media subtypes:


    (1)   Private values (starting with "X-") may be defined
          bilaterally between two cooperating agents without
          outside registration or standardization. Such values
          cannot be registered or standardized.

    (2)   New standard values should be registered with IANA as
          described in RFC 2048.

   The second document in this set, RFC 2046, defines the initial set of
   media types for MIME.


**5.2.  Content-Type Defaults  Content-Type 既定値

>Default RFC 822 messages without a MIME Content-Type header are taken
by this protocol to be plain text in the US-ASCII character set,
which can be explicitly specified as:

MIME CT 頭がない既定の RFC 822 メッセージはこのプロトコルでは
US-ASCII [[文字集合]]の[[平文]]とみなされ、陽に示すと次のようになります。

>>Content-type: text/plain; charset=us-ascii

>This default is assumed if no Content-Type header field is specified.
It is also recommend that this default be assumed when a
syntactically invalid Content-Type header field is encountered. In
the presence of a MIME-Version header field and the absence of any
Content-Type header field, a receiving User Agent can also assume
that plain US-ASCII text was the sender's intent.  Plain US-ASCII
text may still be assumed in the absence of a MIME-Version or the
presence of an syntactically invalid Content-Type header field, but
the sender's intent might have been otherwise.

この既定値は CT 頭欄が指定されていない時に仮定されます。構文的に不正な
CT 頭欄が現れた時にもこの既定値を仮定することを推奨します。
MIME-Version 頭欄があって CT 頭欄がない時は、受信した[[利用者エージェント]]は
US-ASCII の平文が送信者の意図であるとも仮定出来ます。
MIME-Version 頭欄がないか構文的に不正な CT
頭欄があるときにも US-ASCII の平文を依然仮定して構いませんが、送信者の意図は違ったかもしれません。

[INS[
[3] 訳注: Draft でない現在の [[MIME]] にとって RFC 1049
の CT: 欄というのは[CITE[構文的に不正]<urn:ietf:rfc:2045>]なんだけど、それを
[[US-ASCII]] 平文と解釈するんじゃあ、 >>2
と言ってることが矛盾していませんか。
]INS]

**RFC の部分の LICENSE

See [[RFCのライセンス]]

*メモ
@


1.1
log
@Updated.
@
text
@@

