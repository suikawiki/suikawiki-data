head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.09.24.07.19.38;	author wakaba;	state dead;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.17;	author make;	state Exp;
branches;
next	;


desc
@@


1.2
log
@semi-auto committed
@
text
@
[[MIME]] [[実体]]の頭領域で、実体に使われている
内容転送符号化 ― CTE を示します。 CTE が使われていない時は、
使っているオクテット種を示します。

*RFC 2045 BNF

=encoding := "Content-Transfer-Encoding" ":" mechanism
=mechanism := "7bit" / "8bit" / "binary" / "quoted-printable" / "base64" / ietf-token / x-token

値の大文字・小文字は区別しません。

MIME での既定値は "7bit" です。
[[HTTP]] には (RFC になった最終仕様には) CTE は存在しませんが、
相当する既定値的なものは "binary" です。

See also [[RFC-2045のCTE:の定義]]

*"7bit", "8bit" 転送符号化

符号化無し。一行998オクテット以下 ([[SMTP]]の制限)で、
行区切は CRLF。7ビットでは値 128 以上は出現しない。

値 0 (NULL) は出現しない。 13 (CR) と 10 (LF) は CRLF
以外としては出現しない。 

*"binary" 転送符号化

符号化無し、制限無しのオクテット列。 [[SMTP]] 電子メイル
では使用不可。

*ietf-token 転送符号化

ietf-token の登録簿は
<http://www.iana.org/assignments/transfer-encodings>。
追加名は登録されていない。 MIME RFC は、相互通信性の観点から
新しい CTE は定義するべきじゃないって言ってる。

*x-token 転送符号化

MIME 以前から使われて来た、 [[uuencode]] 用に、 x-uuencode
とか x-uue とか x-uu とかが使われてる。

x-gzip64 は、 gzip で圧縮して base64 したもの。
Perl だと MIME::Decoder::Gzip64 てのがあるみたい。

圧縮 CTE が MIME で標準化されてない理由みたいなもの
<http://www.mew.org/ml/mew-dist-1.94/msg07639.html>。なるほど。
納得できないけど理解はできるな。

,"7bit"     ,%x01-09 / %x0B-0C / %x0E-7F / CRLF  ,[[MIME]]
,"8bit"     ,%x01-09 / %x0B-0C / %x0E-FF / CRLF  ,[[MIME]]
,"base64"   ,64進数 [[Base64]]                   ,[[MIME]]
,"binary"   ,%x00-FF                             ,[[MIME]]
,"quoted-string" ,"=" 2HEXDIGIT /...             ,[[MIME]]
,"x-gzip64" ,GNU Zip + Base64
,"x-uu"     ,[[uuencode]]
,"x-uue"    ,uuencode
,"x-uuencode",uuencode
,"x-uuencoded",uuencode

*See also
-[[MIME]]
--[[MIME用語の定義]]
-[[RFC822と仲間達の頭領域名]]
--[[Content-Type:領域]]
--[[Content-Encoding:領域]]
-[[HTTP]]
-[[符号化]]
--[[転送符号化]]
--[[Base64]]
--[[Quoted-Printable]]
--[[URI符号化]]

[[#searched:CTE]]
@


1.1
log
@auto-commited
@
text
@@

