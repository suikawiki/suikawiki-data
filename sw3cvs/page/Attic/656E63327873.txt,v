head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2003.06.06.12.26.30;	author make;	state dead;
branches;
next	1.3;

1.3
date	2002.10.13.01.53.31;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.29.09.24.20;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.27.13.25.12;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@auto-commited
@
text
@SuikaWiki/0.9
*enc2xs の説明とその訳

**NAME

enc2xs -- Perl Encode Module Generator

Perl Encode モジュール生成器

**SYNOPSIS

  enc2xs -[options]
  enc2xs -M ModName mapfiles...
  enc2xs -C

**DESCRIPTION

F<enc2xs> builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use F<enc2xs> to add your own encoding to perl.
No knowledge of XS is necessary.

enc2xs は、Unicode 文字写像ファイル (.ucm) か Tcl
符号化ファイル (.enc) のどっちかから、 Encode で使う
Perl 拡張を組み立てます。 Encode モジュールの組み立て過程の中で
内部的に使われる他に、新しい符号化を perl に追加するのに
enc2xs を使うことも出来ます。 [[XS]] についての知識は必要ありません。

**Quick Guide

If you want to know as little about Perl as possible but need to
add a new encoding, just read this chapter and forget the rest.

新しい符号化を追加する必要があるけど Perl について学ぶのは
最小限にしときたいなら、この章だけを読んで後は忘れてちょ。

***0.

Have a .ucm file ready.  You can get it from somewhere or you can write
your own from scratch or you can grab one from the Encode distribution
and customize it.  For the UCM format, see the next Chapter.  In the
example below, I'll call my theoretical encoding myascii, defined
in I<my.ucm>.  C<$> is a shell prompt.

.ucm ファイルを用意します。どっかからとってきてもいいし
一から書いてもいいし、 Encode 配布物の中からパチってきてもいいです。
UCM 形式については、次の章をみてちょ。下の例では、
ある勝手な符号化のことを myascii と呼んで、 my.ucm
で定義します。 $ は[[シェル]]・プロンプトとします。

  $ ls -F
  my.ucm

***1.

Issue a command as follows;

次の命令してちょ。

  $ enc2xs -M My my.ucm
  generating Makefile.PL
  generating My.pm
  generating README
  generating Changes

Now take a look at your current directory.  It should look like this.

現在ディレクトリをみてちょ。こなげなはず。

  $ ls -F
  Makefile.PL   My.pm         my.ucm        t/

The following files were created.

次のファイルが作られました。

,Makefile.PL ,MakeMaker script  ,[[MakeMaker]] script
,My.pm       ,Encode submodule  ,Encode 小モジュール
,t/My.t      ,test file         ,検査ファイル

****1.1.

If you want *.ucm installed together with the modules, do as follows;

で、 *.ucm をモジュールと一緒に導入したいなら、次のようにしてちょ。

  $ mkdir Encode
  $ mv *.ucm Encode
  $ enc2xs -M My Encode/*ucm

***2.

Edit the files generated.  You don't have to if you have no time AND no
intention to give it to someone else.  But it is a good idea to edit
the pod and to add more tests.

生成されたファイルを編集します。時間がなくて''しっかも''
誰かに渡すつもりなんだったら別にいいけど。でも [[pod]]
を編集して検査を追加するんはいい考えだぞ。

***3.

Now issue a command all Perl Mongers love:

で、 Perl Monger がみなこよなく愛する次の命令をする。

  $ perl Makefile.PL
  Writing Makefile for Encode::My

***4.

Now all you have to do is make.

で、次は make なのねん。

  $ make
  cp My.pm blib/lib/Encode/My.pm
  /usr/local/bin/perl /usr/local/bin/enc2xs -Q -O \
    -o encode_t.c -f encode_t.fnm
  Reading myascii (myascii)
  Writing compiled form
  128 bytes in string tables
  384 bytes (25%) saved spotting duplicates
  1 bytes (99.2%) saved using substrings
  ....
  chmod 644 blib/arch/auto/Encode/My/My.bs
  $

The time it takes varies depending on how fast your machine is and
how large your encoding is.  Unless you are working on something big
like euc-tw, it won't take too long.

掛かる時間は機械の速さと符号化の大きさによります。
euc-tw みたいにでっかなのをやってるんでなけりゃあ、
そんなに長くかかりません。

***5.

You can "make install" already but you should test first.

"make install" できますけど、最初に検査しときましょ。

  $ make test
  PERL_DL_NONLAZY=1 /usr/local/bin/perl -Iblib/arch -Iblib/lib \
    -e 'use Test::Harness  qw(&runtests $verbose); \
    $verbose=0; runtests @@ARGV;' t/*.t
  t/My....ok
  All tests successful.
  Files=1, Tests=2,  0 wallclock secs
   ( 0.09 cusr + 0.01 csys = 0.09 CPU)

***6.

If you are content with the test result, just "make install"

結果に満足なら "make install" しましょ。

***7.

If you want to add your encoding to Encode's demand-loading list
(so you don't have to "use Encode::YourEncoding"), run

Encode の要求時読込表に符号化を追加したい
("use Encode::YourEncoding" なーんてしたくない) ときには、

  enc2xs -C

to update Encode::ConfigLocal, a module that controls local settings.
After that, "use Encode;" is enough to load your encodings on demand.

して local 設定を司るモジュール, Encode::ConfigLocal を更新します。
こーすれば、 "use Encode" だけで必要に応じて新しい符号化を
読み込めます。

**The Unicode Character Map

Encode uses the Unicode Character Map (UCM) format for source character
mappings.  This format is used by IBM's ICU package and was adopted
by Nick Ing-Simmons for use with the Encode module.  Since UCM is
more flexible than Tcl's Encoding Map and far more user-friendly,
this is the recommended formet for Encode now.

Encode は Unicode 文字写像 (UCM) 形式を文字写像の原典に使います。
この形式は [[IBM]] の [[ICU]] 箱で使われてたもので、
Nick Ing-Simmons が Encode モジュールで使うのに採用しました。
UCM は Tcl の符号化写像より柔軟で人に優しいんで、現在の
Encode の推奨形式になってます。

A UCM file looks like this.

UCM ファイルはこんな感じ。

  #
  # Comments 注釈
  #
  <code_set_name> "US-ascii" # Required 必須
  <code_set_alias> "ascii"   # Optional 省略可能
  <mb_cur_min> 1             # Required; usually 1  必須 (普通は 1)
  <mb_cur_max> 1             # Max. # of bytes/char 最大 (バイト毎字の)
  <subchar> \x3F             # Substitution char 置換文字
  #
  CHARMAP
  <U0000> \x00 |0 # <control>
  <U0001> \x01 |0 # <control>
  <U0002> \x02 |0 # <control>
  ....
  <U007C> \x7C |0 # VERTICAL LINE
  <U007D> \x7D |0 # RIGHT CURLY BRACKET
  <U007E> \x7E |0 # TILDE
  <U007F> \x7F |0 # <control>
  END CHARMAP

***

Anything that follows C<#> is treated as a comment.

「#」の後はぜーんぶ注釈。

***

The header section continues until a line containing the word
CHARMAP. This section has a form of I<E<lt>keywordE<gt> value>, one
pair per line.  Strings used as values must be quoted. Barewords are
treated as numbers.  I<\xXX> represents a byte.

語 CHARMAP の行までは頭節。この節は 「<keyword> 値」
形式をとっていて、1行ごとに1組にします。値に使う文字列は
引用符で囲まないといけません。裸語は数値と見なします。
「\xXX」はバイトを表現します。

Most of the keywords are self-explanatory. I<subchar> means
substitution character, not subcharacter.  When you decode a Unicode
sequence to this encoding but no matching character is found, the byte
sequence defined here will be used.  For most cases, the value here is
\x3F; in ASCII, this is a question mark.

Keyword のほとんどは名前みりゃーわかるでしょう。 subchar
は代替文字で、 subcharacter じゃありません。 Unicode 列から
この符号化に復号する時で一致する文字がない時は、
ここで定義したバイト列を使います。ほとんどの場合、この値は \x3F
で、 [[ASCII]] の疑問符になります。

[INS[
訳注: 定義する符号化→[[Unicode]] で写像文字がない時の指定は
出来ないみたい。中途半端だなあ。
]INS]

***

CHARMAP starts the character map section.  Each line has a form as
follows:

CHARMAP で文字写像節は始まります。各行は次の形式をとります。

  <UXXXX> \xXX.. |0 # comment 注釈
    ^     ^      ^
    |     |      +- Fallback flag
    |     +-------- Encoded byte sequence 符号化バイト列
    +-------------- Unicode Character ID in hex 16進数での Unicode 文字 ID

The format is roughly the same as a header section except for the
fallback flag: | followed by 0..3.   The meaning of the possible
values is as follows:

形式は fallback 旗を除いて概ね頭節とおんなじです。
fallback 旗は | の後に 0..3 が来ます。意味は次のとおり。

****|0 

Round trip safe.  A character decoded to Unicode encodes back to the
same byte sequence.  Most characters have this flag.

往復変換安全。 Unicode に復号した文字は安全に同じバイト列に
符号化して戻って来ます。ほとんどの文字はこの旗をもちます。

****|1

Fallback for unicode -> encoding.  When seen, enc2xs adds this
character for the encode map only.

Unicode →符号化の fallback。この時、 enc2xs はこの文字を
符号化写像にだけ加えます。

****|2 

Skip sub-char mapping should there be no code point.

符号位置がないんで sub-char 写像を飛ばします。

****|3 

Fallback for encoding -> unicode.  When seen, enc2xs adds this
character for the decode map only.

符号化→ Unicode fallback。この時、 enc2xs はこの文字を
復号写像にのみ追加します。

***

And finally, END OF CHARMAP ends the section.

最後に、 END OF CHARMAP で節は終わります。

When you are manually creating a UCM file, you should copy ascii.ucm
or an existing encoding which is close to yours, rather than write
your own from scratch.

手書きで UCM ファイルを作る時、完全に一から書くより
ascii.ucm か新しい符号化に近い既存のやつを複製するのがいいでしょう。

When you do so, make sure you leave at least B<U0000> to B<U0020> as
is, unless your environment is EBCDIC.

そうする時、 U0000 から U0020 を、 [[EBCDIC]] 環境でない時には
最低限そのままにしときます。

B<CAVEAT>: not all features in UCM are implemented.  For example,
icu:state is not used.  Because of that, you need to write a perl
module if you want to support algorithmical encodings, notably
the ISO-2022 series.  Such modules include L<Encode::JP::2022_JP>,
L<Encode::KR::2022_KR>, and L<Encode::TW::HZ>.

注意: UCM の全機能が実装されてはいません。例えば、 icu:state
は使われません。そのため、算法的符号化、とりわけ
ISO-2022 系列に対応したい時には perl module を書く必要があります。
そういうモジュールには Encode::JP::2022_JP  とか...が含まれます。

***Coping with duplicate mappings 重複写像への対処

When you create a map, you SHOULD make your mappings round-trip safe.
That is, C<encode('your-encoding', decode('your-encoding', $data)) eq
$data> stands for all characters that are marked as C<|0>.  Here is
how to make sure:

写像表を作る時に、写像が往復変換安全になるように''します''。
つまり、 encode('新符号化', decode('sinfugouka', $data)
eq $data が "|0" になってる全ての文字について成り立つようにします。
こうするには、

****

Sort your map in Unicode order.

写像を Unicode 順に並べる。

****

When you have a duplicate entry, mark either one with '|1' or '|3'.
  
重複項目があるときは、どれか一つを '|1' か '|3' にする。

****

And make sure the '|1' or '|3' entry FOLLOWS the '|0' entry.

'|1' か '|3' の項が '0' の項の''後''にくるようにする。

Here is an example from big5-eten.

これは big5-eten の例です。

  <U2550> \xF9\xF9 |0
  <U2550> \xA2\xA4 |3

Internally Encoding -> Unicode and Unicode -> Encoding Map looks like
this;

内部的には符号化→ Unicode と Unicode →符号化の写像表はそれぞれ
こなげになってます。

,E to U               ,U to E
,\xF9\xF9 => U2550    ,U2550 => \xF9\xF9
,\xA2\xA4 => U2550
 
So it is round-trip safe for \xF9\xF9.  But if the line above is upside
down, here is what happens.

ですから \xF9\xF9 について往復変換安全です。
しかし上の行が逆なら、こうなります。

,E to U               ,U to E
,\xA2\xA4 => U2550    ,U2550 => \xF9\xF9

(\xF9\xF9 => U2550 is now overwritten! 上書きされた!)

The Encode package comes with F<ucmlint>, a crude but sufficient
utility to check the integrity of a UCM file.  Check under the
Encode/bin directory for this.

Encode package には ucmlint が入ってまして、
雑だけど UCM ファイルの完全性を確認するには十分でしょう。
Encode/bin ディレクトリにあるんで見て下さい。

**Bookmarks 栞
-ICU Home Page  <http://oss.software.ibm.com/icu/>
-ICU Character Mapping Tables <http://oss.software.ibm.com/icu/charset/>
-ICU:Conversion Data <http://oss.software.ibm.com/icu/userguide/conversion-data.html>

**SEE ALSO
-[[Encode]]
-<perlmod>
-<perlpod>

**

# -Q to disable the duplicate codepoint test
# -S make mapping errors fatal
# -q to remove comments written to output files
# -O to enable the (brute force) substring optimiser
# -o <output> to specify the output file name (else it's the first arg)
# -f <inlist> to give a file with a list of input files (else use the args)
# -n <name> to name the encoding (else use the basename of the input file.

,-Q,重複符号位置検査を省く
,-S,写像エラーを致命的エラーにする
,-q,出力ファイルに注釈を出さない
,-O,(力技で) substring 最適化をする
,-o <output>,出力ファイル名を指定 (なければ最初の引数)
,-f <inlist>,入力ファイルの表 (なければ引数から)
,-n <name>,符号化の名前 (なければ入力ファイルの基底名)

With %seen holding array refs:

      865.66 real        28.80 user         8.79 sys
      7904  maximum resident set size
      1356  average shared memory size
     18566  average unshared data size
       229  average unshared stack size
     46080  page reclaims
     33373  page faults

With %seen holding simple scalars:

      342.16 real        27.11 user         3.54 sys
      8388  maximum resident set size
      1394  average shared memory size
     14969  average unshared data size
       236  average unshared stack size
     28159  page reclaims
      9839  page faults

Yes, 5 minutes is faster than 15. Above is for CP936 in CN. Only difference is
how %seen is storing things its seen. So it is pathalogically bad on a 16M
RAM machine, but it's going to help even on modern machines.
Swapping is bad, m'kay :-)

**License

この文章の取り扱いは、もとの enc2xs と同じとします。
[[perlと同じライセンス]]です。

*その他
- 2002-09-27 (Fri) 21:47:34 ''[[名無しさん]]'' : UCM の一体どこが user-friendly なの? 特に fallback の数字は意味不明
@


1.3
log
@.cvsignore: New file.
@
text
@@


1.2
log
@Updated.
@
text
@d244 4
a247 2
(訳注: 定義する符号化→Unicode で写像文字がない時の指定は
出来ないみたい。中途半端だなあ。)
d260 1
a260 1
    +-------------- Unicode Character ID in hex 16進数での Unicode 文字識別子
d401 1
a401 1
-<Encode>
d451 1
@


1.1
log
@Updated.
@
text
@d1 1
d24 1
a24 1
enc2xs は、Unicode 文字対応ファイル (.ucm) か Tcl
d184 1
a184 1
Encode は Unicode 文字対応 (UCM) 形式を文字対応の原典に使います。
d187 1
a187 1
UCM は Tcl の符号化対応より柔軟で人に優しいんで、現在の
d244 1
a244 1
(訳注: 定義する符号化→Unicode で対応文字がない時の指定は
d252 1
a252 1
CHARMAP で文字対応節は始まります。各行は次の形式をとります。
d281 1
a281 1
符号化対応にだけ加えます。
d287 1
a287 1
符号位置がないんで sub-char 対応を飛ばします。
d295 1
a295 1
復号対応にのみ追加します。
d327 1
a327 1
***Coping with duplicate mappings 重複対応への対処
d334 1
a334 1
対応を作る時に、対応が往復変換安全になるように''します''。
d343 1
a343 1
対応を Unicode 順に並べる。
d367 1
a367 1
内部的には符号化→ Unicode と Unicode →符号化の対応はそれぞれ
d414 1
a414 1
,-S,対応エラーを致命的エラーにする
d451 1
a451 2
- 2002-09-27 (Fri) 21:47:34 ''[[名無しさん]]'' : UCM の一体どこが user-friendly なの? 特に fallback の数字は意味不明
[[#comment]]@

