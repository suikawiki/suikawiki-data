head	1.2;
access;
symbols
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2005.11.23.02.22.51;	author wakaba;	state dead;
branches;
next	1.1;

1.1
date	2003.12.03.02.03.40;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-committed
@
text
@#?SuikaWiki/0.9 page-icon="HTTP"
[[#comment]]
* 仕様書から
** RFC 2068・2616 (HTTP/1.1) 9.1.2 Idempotent Methods
> Methods [DEL[may]] [INS[can]] also have the property of "idempotence" in that (aside
from error or expiration issues) the side-effects of N > 0 identical
requests is the same as for a single request. The methods GET, HEAD,
PUT and DELETE share this property. [INS[Also, the methods OPTIONS and TRACE SHOULD NOT have side effects, and so are inherently idempotent.]]

各方式は、「同効」
という、 (誤りや満期の問題は別として)
[CODE(math)[[VAR[N]] > 0]] 個の同じ要求の副作用が単一の要求のものと同じであるかの特性も持っています。[INS[また、方式 [CODE(HTTP)[[[OPTIONS]]]] 及び [CODE(HTTP)[[[TRACE]]]] は副作用をもつ'''べきではなく'''、生来同効です。]]

[INS[
> However, it is possible that a sequence of several requests is non-idempotent, even if all of the methods executed in that sequence are
idempotent. (A sequence is idempotent if a single execution of the
entire sequence always yields a result that is not changed by a
reexecution of all, or part, of that sequence.) For example, a
sequence is non-idempotent if its result depends on a value that is
later modified in the same sequence.

しかし、幾つかの要求の列が、たとえその列中で実行する方式がすべて同効であったとしても、列としては非同効である可能性があります。
(列全体を一度実行することが、常にその列のすべてまたは一部を再実行することで代わることのない結果を生じるのであれば、その列は同効です。)
たとえば、その結果が同じ列の後方で修正される値に依存するのであれば、列は非同効です。

> A sequence that never has side effects is idempotent, by definition
(provided that no concurrent operations are being executed on the
same set of resources).

決して副作用を持たない列は、定義上、同効です
(同じ資源の集合に同時に操作が行われないとして)。
]INS]

** RFC の部分の License
[[RFCのライセンス]]
* メモ
@


1.1
log
@auto-committed
@
text
@@

