head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.3;
locks; strict;
comment	@# @;


1.3
date	2003.09.13.02.01.46;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.18.00.11.08;	author w;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.28.10.14.21;	author make;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@#?SuikaWiki/0.9

- [1] [[SGML]] と [[XML]] は同じように見えて (実際同じだけど) 思想的方向性が随分違うような気がします。 SGML は当時の多種多様な環境でなんとかうまくやっていけるように、でっかくて汎用的なメタ規格になろうとした。 XML では規格は [WEAK[(選択の幅を)]] 小さくして同じものを実装させて統一するような。
- [2] [[XLink]] とか。メタであってメタではないような。言葉にしがたいのだけども。
- [3] XML family (謎) は結局 [[TEI]] の焼き直しになるんじゃないかな。[WEAK[語彙的には W3C はまだまだ TEI に及んでいないとはいえ。]]
- [4] ''ビジネスとしてのSGML/XML'' <http://www.jagat.or.jp/column/1999/i906moj.htm>
- [5] >>3 そうなるかならないかの鍵を握るのが [[RDF]] だと思うね。 [[TimBL]] なんかも [[SemanticWeb]] だごるぁーって頑張ってるわけなんだけど、 RDF は別に XML を必要としていない。 [[RDF/XML]] は確かに便利だけど、まともに RDF を使おうとしたら、素の XML ([[DOM]] とかの family も含めて。) ってかなり RDF と相性が悪い。っていうか面倒くさい。だから RDF 専用はやっぱり要る。
- [6] >>5 の後半で話がずれちゃったけど、 RDF 的には XML は絶対じゃなくて、 [[N3]] もあるし、グラフ表現が本質に近いし、極端な話実体は抽象的に''そこに存在''しているのであって、 XML であることはほんとにどうでもいいんですね。
- [7] で、 RDF の重要な考え方の一つが、「人間の知識と同じように機械の知識にも限界がある。分かる範囲でがんがれよ!」なんだな。
- [8] SGML の時代は、 SGML というでっかな大元があって、それと個々の関係。個々同士は無関係。 XML は骨組みが与えてあって、それにどう肉付けするかで「個々」ができる。 RDF は個々それぞれの関係でなんとなく全体ができあがる。まあ SGML/XML と RDF を同列に比較するのは無茶苦茶なんだけど。
@


1.2
log
@auto-commited
@
text
@d7 4
@


1.1
log
@auto-commited
@
text
@d6 1
@

