head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2004.03.13.03.27.27;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@auto-committed
@
text
@#?SuikaWiki/0.9 page-icon="HTTP"
[[#comment]]
* 仕様書から
**RFC 3230 (実現値要約) 4.2 Instance digests
>   An instance digest is the representation of the output of a digest
algorithm, together with an indication of the algorithm used (and any
parameters).

[[実現値要約]]は、[[要約]]算法の出力の表現に、
使用している算法の標示 (と引数) を添えたものです。

>
-       instance-digest = [[digest-algorithm]] "="
<encoded digest output [INS[符号化要約出力]]>

>   The digest is computed on the entire instance associated with the
message.  The instance is a snapshot of the resource prior to the
application of of any instance manipulation or transfer-coding (see
section 3).  The byte order used to compute the digest is the
transmission byte order defined for the content-type of the instance.

要約はメッセージに関連付けられた[[実現値]]全体について計算します。
実現値は[[実現値操作]]や[[転送符号化]]を適用する前の[[資源]]のスナップ写真です
(3章参照)。要約を計算するのに使用する[[バイト順]]は実現値の[[内容型]]で定義されている転送バイト順です。

>      Note: the digest is computed before the application of any
instance manipulation.  If a range or a delta-coding [9] is used,
the computation of the digest after the computation of the range
or delta would not provide a digest useful for checking the
integrity of the reassembled instance.

注意: 算法は実現値操作の適用の前に計算します。
範囲または[[差分符号化]]を使用する時は、
範囲や差分を計算した後に要約を計算するのであっては再組み立てした実現値の整合性を検査するために有用な要約を提供しません。

>   The encoded digest output uses the encoding format defined for the
specific digest-algorithm.  For example, if the digest-algorithm is
"MD5", the encoding is base64; if the digest-algorithm is "UNIXsum",
the encoding is an ASCII string of decimal digits.

符号化要約出力は指定 [CODE(ABNF)[digest-algorithm]]
で定義された符号化書式を使用します。例えば、
[CODE(ABNF)[digest-algorithm]] が [SAMP(HTTP)[MD5]]
なら、符号化は base64 です。 [CODE(ABNF)[digest-algorithm]]
が [SAMP(ABNF)[UNIXsum]] なら、符号化は十進数の [[ASCII]] 文字列です。

>   Examples:
-      MD5=HUXZLQLMuI/KZ5KDcJPcOA==
-      sha=thvDyvhfIqlvFe+A9MYgxAfm1q5=
-      UNIXsum=30637
** RFC の部分の License
[[RFCのライセンス]]
* メモ
@
