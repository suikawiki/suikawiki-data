head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.2;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2008.10.08.03.17.38;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.03.02.00.23;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.18.02.07.17;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@
[1] [[ISO/IEC10646]] ([[UCS]]) ≒ [[Unicode]]
には同じ“文字”を表現するための方法が複数種類あることがあります。
[WEAK[[[図形文字]]の[[一意な符号化]]原則はどこへやらと言いたいところですが、そんなものは [[ISO/IEC646]] の昔から幻想なので仕方がないと言えば仕方がない。]]
しかし、それでは様々な場面 (たとえば二つの文字列が同じであるかの判断) で不都合が生じるので、
Unicode は幾つかの[DFN[[RUBY[[[正規化形]]] [normalization forms]]]]を規定しています。

[2] Unicode Standard 本体と
''UAX #15: Unicode Normalization'' <http://www.unicode.org/reports/tr15/>
では、次の4つの正規化形を規定しています。

,名称	,略称	,概要
,正規化形 D	,[[NFD]]	,[[正準分解]]
,正規化形 C	,[[NFC]]	,正準分解→[[正準合成]]
,正規化形 KD	,[[NFKD]]	,[[互換分解]]
,正規化形 KC	,[[NFKC]]	,互換分解→正準合成

D 系は、複数の表現が可能なときに、
長い ([[基底文字]] + [[結合文字]]による) 表現を採用します。
C 系は、逆に短い ([[合成済文字]] = [[分解可能文字]]による)
表現を採用します (中途半端に短い表現にならないように、一度完全に分解してから再結合します)。

正準分解・正準結合の操作は、その前後で意味的に等価です
(情報の劣化はありません)。互換分解は
(本来文字コードが持つべきではない) 書式情報を落としてしまうので、
意味的には等価ではありません。
[WEAK[(たとえば、[[全角]]と[[半角]]の別が失われます。)]]

(ただし、意味的に等価というのは、あくまで Unicode
の規格上の話です。たとえば、正準分解・結合であっても
[[CJK互換漢字]]に適用してしまうのは
[WEAK[(呪われているので)]] 危険です。)

[3] >>2 の4つの正規化形は、いずれも、文字列の分割には''閉じて''いますが、連結には''閉じて''いません。
<http://www.unicode.org/reports/tr15/#Concatenation>

つまり、正規化形の文字列を二つ用意して、
両文字列を連結した結果も正規化形であることは保障されません。
(これは [[NFD]] であってもです。[[結合文字]]の出現順序が正規化形でないことがあり得ます。)

[4]
''Corrigendum #3: U+F951 Normalization'' <http://www.unicode.org/versions/corrigendum3.html>
([[名無しさん]])

[5]
>>4 の変更があるので、 Unicode 3.1.0 以前と Unicode 3.1.1 以後の正規化は非互換です。
(というか、 Unicode 3.1.0 以前の[[正準分解]]はデータを破壊してしまう危険性があります。)

Unicode Consortium は一度割当てた文字は変更しないとか正規化結果は安定だとか言っておりますが、このように非互換な変更は過去に何度も行われておりますので、過信は禁物であります。
([[名無しさん]] [sage])

[6]
[CITE[UnicodeNormalizerをリリースしました。 - やればできる子の日記]] ([CODE[2008-10-05 11:32:19 +09:00]] 版) <http://d.hatena.ne.jp/matsuza/20080605/1212678746>
([[名無しさん]])

[7]
[CITE@@ja[Unicode正規化]] ([[Tomoyuki SADAHIRO]] 著, [CODE[2008-09-06 10:14:23 +09:00]] 版) <http://homepage1.nifty.com/nomenclator/unicode/normalization.htm>
([[名無しさん]])


[8]
[CITE@@en-us[Canonical Equivalence in Applications]] ([TIME[2008-10-03 04:03:57 +09:00]] 版) <http://unicode.org/notes/tn5/>
([[名無しさん]])

@


1.2
log
@auto-committed
@
text
@a0 1
#?SuikaWiki/0.9
d45 3
a48 4
[5]
>>4 の変更があるので、 Unicode 3.1.0 以前と Unicode 3.1.1 以後の正規化は非互換です。
(というか、 Unicode 3.1.0 以前の[[正準分解]]はデータを破壊してしまう危険性があります。)

d51 13
@


1.1
log
@auto-committed
@
text
@d1 53
a53 40
#?SuikaWiki/0.9
[1] [[ISO/IEC10646]] ([[UCS]]) ≒ [[Unicode]]
には同じ“文字”を表現するための方法が複数種類あることがあります。
[WEAK[[[図形文字]]の[[一意な符号化]]原則はどこへやらと言いたいところですが、そんなものは [[ISO/IEC646]] の昔から幻想なので仕方がないと言えば仕方がない。]]
しかし、それでは様々な場面 (たとえば二つの文字列が同じであるかの判断) で不都合が生じるので、
Unicode は幾つかの[DFN[[RUBY[[[正規化形]]] [normalization forms]]]]を規定しています。

[2] Unicode Standard 本体と
''UAX #15: Unicode Normalization'' <http://www.unicode.org/reports/tr15/>
では、次の4つの正規化形を規定しています。

,名称,略称,概要
,正規化形 D,[[NFD]],[[正準分解]]
,正規化形 C,[[NFC]],正準分解→[[正準合成]]
,正規化形 KD,[[NFKD]],[[互換分解]]
,正規化形 KC,[[NFKC]],互換分解→正準合成

D 系は、複数の表現が可能なときに、
長い ([[基底文字]] + [[結合文字]]による) 表現を採用します。
C 系は、逆に短い ([[合成済文字]] = [[分解可能文字]]による)
表現を採用します (中途半端に短い表現にならないように、一度完全に分解してから再結合します)。

正準分解・正準結合の操作は、その前後で意味的に等価です
(情報の劣化はありません)。互換分解は
(本来文字コードが持つべきではない) 書式情報を落としてしまうので、
意味的には等価ではありません。
[WEAK[(たとえば、[[全角]]と[[半角]]の別が失われます。)]]

(ただし、意味的に等価というのは、あくまで Unicode
の規格上の話です。たとえば、正準分解・結合であっても
[[CJK互換漢字]]に適用してしまうのは
[WEAK[(呪われているので)]] 危険です。)

[3] >>2 の4つの正規化形は、いずれも、文字列の分割には''閉じて''いますが、連結には''閉じて''いません。
<http://www.unicode.org/reports/tr15/#Concatenation>

つまり、正規化形の文字列を二つ用意して、
両文字列を連結した結果も正規化形であることは保障されません。
(これは [[NFD]] であってもです。[[結合文字]]の出現順序が正規化形でないことがあり得ます。)

@

