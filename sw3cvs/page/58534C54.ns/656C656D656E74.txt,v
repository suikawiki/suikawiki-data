head	1.2;
access;
symbols
	suikawiki3-final:1.2
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2004.06.08.02.10.12;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.03.02.02.14;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-committed
@
text
@#?SuikaWiki/0.9

[1] [CODE(XSLTe)[[VAR[xslt:]]element]]
要素は、 [[XSLTスタイル・シート]]による[[結果木]]に[[要素節]]を接木するのに[[雛形]]中で使うことが出来ます。
<http://www.w3.org/TR/xslt#element-element>

単に要素節が欲しいだけなら[[表記結果要素]]の方が圧倒的に楽なので普段はそうしますが、
[[要素型名]]を動的に操作したいときはそうもいきません。
そんなときにこの要素型が活躍します。
普段は無害無益です:-)

[2] 属性:
,[CODE(XSLTa)[[[attribute-sets]]]]	,[[qnames]]	,(なし)	,属性集合
,[CODE(XSLTa)[[[name]]]]	,{[[QName]]}	,(必須)	,要素型名
,[CODE(XSLTa)[[[namespace]]]]	,{[[URI参照]]}	,([CODE(XSLTa)[name]] 属性による値)	,名前空間 URI

この要素は雛形中の禁止されていない任意の場所に置けます。
この要素の内容は、結果木中でこの要素に対応して生成される要素の内容の雛形とします。

[3] 要素型名の決定は、次のようにします。
= まず、[[局部名]]を決定します。
== [CODE(XSLTa)[name]] 属性は[[属性値雛形]]なので、これを評価します。
== 評価結果は QName になっているはずです。
--- なっている場合は、その局部名を要素の局部名とします。
--- なっていない場合は誤りとします。
この誤りは通知するか、またはこの 
[CODE(XSLTa)[[VAR[xslt:]]element]] 
要素がなかったものとして扱わなければなりません。
(子属性節は適当に無視します。それ以外の節は親節に直接つなげます。)
= 次に、名前空間 URI を決定します。
== [CODE(XSLTa)[namespace]] 属性が存在する場合、
=== この属性値も属性値雛形なので、これを評価します。
=== 評価結果を名前空間 URI とします。
空文字列になった場合は、 null 名前空間とします。
構文的に不正な URI 参照となっても、見逃します。
== [CODE(XSLTa)[namespace]] 属性が存在しない場合、
[CODE(XSLTa)[name]] 属性の修飾名の名前空間 URI
を採用します。接頭辞なしの場合は null 名前空間です。

なお、結果木で使われる接頭辞は 
[CODE(XSLTa)[name]] 属性に与えられたものを使っても構いませんし、
そうでなくても構いません。


[4]
>>3 では[[名前空間接頭辞]]はどうなるのか:
仕様書に明記されていませんが、
実装依存の模様です。

''はてなダイアリー - Hatena::agenda - 2004-06-04'' <http://d.hatena.ne.jp/jintrick/20040604>
([[名無しさん]])

@


1.1
log
@auto-committed
@
text
@d1 48
a48 4
#?SuikaWiki/0.9
[1] [CODE(XSLTe)[[VAR[xslt:]]element]]
要素は、 [[XSLTスタイル・シート]]による[[結果木]]に[[要素節]]を接木するのに[[雛形]]中で使うことが出来ます。
<http://www.w3.org/TR/xslt#element-element>
d50 3
a52 36
単に要素節が欲しいだけなら[[表記結果要素]]の方が圧倒的に楽なので普段はそうしますが、
[[要素型名]]を動的に操作したいときはそうもいきません。
そんなときにこの要素型が活躍します。
普段は無害無益です:-)

[2] 属性:
,[CODE(XSLTa)[[[attribute-sets]],[[qnames]],(なし),属性集合
,[CODE(XSLTa)[[[name]]]],{[[QName]]},(必須),要素型名
,[CODE(XSLTa)[[[namespace]]]],{[[URI参照]]},([CODE(XSLTa)[name]] 属性による値),名前空間 URI

この要素は雛形中の禁止されていない任意の場所に置けます。
この要素の内容は、結果木中でこの要素に対応して生成される要素の内容の雛形とします。

[3] 要素型名の決定は、次のようにします。
= まず、[[局部名]]を決定します。
== [CODE(XSLTa)[name]] 属性は[[属性値雛形]]なので、これを評価します。
== 評価結果は QName になっているはずです。
==- なっている場合は、その局部名を要素の局部名とします。
==- なっていない場合は誤りとします。
この誤りは通知するか、またはこの 
[CODE(XSLTa)[[VAR[xslt:]]element]] 
要素がなかったものとして扱わなければなりません。
(子属性節は適当に無視します。それ以外の節は親節に直接つなげます。)
= 次に、名前空間 URI を決定します。
== [CODE(XSLTa)[namespace]] 属性が存在する場合、
=== この属性値も属性値雛形なので、これを評価します。
=== 評価結果を名前空間 URI とします。
空文字列になった場合は、 null 名前空間とします。
構文的に不正な URI 参照となっても、見逃します。
== [CODE(XSLTa)[namespace]] 属性が存在しない場合、
[CODE(XSLTa)[name]] 属性の修飾名の名前空間 URI
を採用します。接頭辞なしの場合は null 名前空間です。

なお、結果木で使われる接頭辞は 
[CODE(XSLTa)[name]] 属性に与えられたものを使っても構いませんし、
そうでなくても構いません。
@

