head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2003.09.24.07.19.43;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@semi-auto committed
@
text
@#?SuikaWiki/0.9
[1] [[XSLT]] で[[一致]]をみるときに使われるのが[DFN[パターン]]
(pattern) です。パターンは[[式]]の部分集合です。
<http://www.w3.org/TR/xslt#patterns>

[2] 
- [CODE(ABNF)[パターン := 位置経路パターン *("|" 位置経路パターン)]]
- [CODE(ABNF)[位置経路パターン := (*WSP "/" / *WSP "//" / id 関数 / key 関数) [相対経路パターン] / 相対経路パターン ]]
- [CODE(ABNF)[id 関数 := *WSP 'id' *WSP "(" [[表記]] ")" *WSP ]]
- [CODE(ABNF)[key 関数 := *WSP 'key' *WSP "(" 表記 "," 表記 ")" *WSP ]]
- [CODE(ABNF)[相対経路パターン := 段階パターン *(("/" / "//") 段階パターン)]]
- [CODE(ABNF)[段階パターン := 子軸又は属性軸指定子 [[節検査]] *[[述語]] ]]
- [CODE(ABNF)[子軸又は属性軸指定子 := *WSP ('child' / 'attribute') *WSP "::" *WSP / *WSP "@@" *WSP ]]

[3] [CODE(XSLT)[[[descendant-or-self]]]]
が使えないくせに [CODE(XSLT)[//]] が使えたりします。

[4] 簡易 XPath 評価器だけで済むのかと思いきや、
[[述語式]]は完全な XPath 式ですので、
結局完全な XPath 評価能力が必要です。

簡易版なのは、普通の XPath 式は前から後ろに評価していくのに対し、
ある節がその式に一致するかどうかを検査するのには後ろから前に検査していく方が効率がいいからです。

[5] パターンが[DFN[一致]] (match) するとは、
ある文脈があって、そこでそのパターンを式として評価した時の結果[[節集合]]の構成節の1つとして目的の節が含まれていることを意味します。





@
