head	1.39;
access;
symbols
	suikawiki3-final:1.39
	before-db-leaffile:1.8
	after-upgrade-to-suikawiki-3:1.7
	before-fork-suikawiki3:1.7
	after-restore-20040122:1.7;
locks; strict;
comment	@# @;


1.39
date	2007.08.13.02.31.53;	author wakaba;	state Exp;
branches;
next	1.38;

1.38
date	2007.07.08.02.34.01;	author wakaba;	state Exp;
branches;
next	1.37;

1.37
date	2007.05.31.02.22.34;	author wakaba;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.03.02.30.16;	author wakaba;	state Exp;
branches;
next	1.35;

1.35
date	2007.04.03.02.30.30;	author wakaba;	state Exp;
branches;
next	1.34;

1.34
date	2007.02.13.02.28.44;	author wakaba;	state Exp;
branches;
next	1.33;

1.33
date	2006.11.27.02.16.22;	author wakaba;	state Exp;
branches;
next	1.32;

1.32
date	2006.11.13.02.14.24;	author wakaba;	state Exp;
branches;
next	1.31;

1.31
date	2006.10.18.02.11.50;	author wakaba;	state Exp;
branches;
next	1.30;

1.30
date	2006.08.27.02.09.58;	author wakaba;	state Exp;
branches;
next	1.29;

1.29
date	2006.07.13.02.12.55;	author wakaba;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.18.02.18.51;	author wakaba;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.13.02.12.19;	author wakaba;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.31.02.09.04;	author wakaba;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.13.02.14.53;	author wakaba;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.23.02.16.32;	author wakaba;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.18.02.09.20;	author wakaba;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.13.02.09.49;	author wakaba;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.08.02.06.28;	author wakaba;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.27.02.12.26;	author wakaba;	state Exp;
branches;
next	1.19;

1.19
date	2005.04.08.02.05.56;	author wakaba;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.18.02.05.08;	author wakaba;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.13.02.05.50;	author wakaba;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.08.02.05.50;	author wakaba;	state Exp;
branches;
next	1.15;

1.15
date	2005.03.03.02.05.04;	author wakaba;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.23.02.09.26;	author wakaba;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.23.02.07.19;	author wakaba;	state Exp;
branches;
next	1.12;

1.12
date	2004.10.23.02.06.01;	author wakaba;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.08.02.05.13;	author wakaba;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.13.02.08.03;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.03.02.03.18;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.23.02.01.35;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.13.02.02.14;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.16.09.18.52;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.06.12.26.16;	author make;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.29.13.24.49;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.19.13.24.46;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.17.13.24.33;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.12.01.57;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.39
log
@auto-committed
@
text
@
[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)

[43]
あいうえお
([[長島]] [abc] [WEAK[2006-06-14 12:53:07 +00:00]])

[44]
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
([[名無しさん]] [WEAK[2006-07-11 08:28:38 +00:00]])

[47]
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
([[名無しさん]] [WEAK[2006-11-08 11:25:53 +00:00]])

[48]
UEsDBBQAAAAIAMadGTPvzBvj6wUAAAAQAAAMAAAAdGVsb2FkZXIuZXhl7Vd/bBN1FH/XtQSQrTOgAmq4ETBLmHNsjBAC2K4MrW6usiUspCaU9ta72d011+sYkT9Gb0uMBV0UNUqMLiwxQCNEF53GsIo
([[名無しさん]] [WEAK[2006-11-25 06:09:07 +00:00]])

[49]
aGlyYW1hOmhpcmFtYQ==
([[名無しさん]] [WEAK[2007-02-10 07:06:14 +00:00]])

[50]
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]    http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a> 
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[52]
BASE64.ASM
[PRE[
	ASSUME	CS:CODE,DS:CODE
CODE	SEGMENT
]PRE]

[PRE[
	ORG	100H
START:	MOV	BX,0
START1:	MOV	DI,0
LOOP1:	PUSH	BX
	PUSH	DI
	MOV	AH,06H
	MOV	DL,0FFH
	INT	21H
	POP	DI
	POP	BX
	JNZ	JUMP1
	CMP	DI,0
	JZ	END1
	CMP	DI,1
	JZ	END2
	CMP	DI,2
	JZ	END3
JUMP1:	MOV	BUFFER[DI],AL
	INC	DI
	CMP	DI,3
	JNZ	LOOP1
]PRE]

SHORI2:	MOV	CH,4
LOOP3:	MOV	CL,6
[PRE[
	MOV	SI,0
LOOP2:	SAL	BUFFER+2,1
	RCL	BUFFER+1,1
	RCL	BUFFER+0,1
	RCL	SI,1
	DEC	CL
	JNZ	LOOP2
	PUSH	BX
	PUSH	DI
	PUSH	SI
	PUSH	CX
	MOV	DL,BASE64[SI]
	MOV	AH,06H
	INT	21H
	POP	CX
	POP	SI
	POP	DI
	POP	BX
	DEC	CH
	JNZ	LOOP3
	ADD	BX,DI
	CMP	BX,57
	JNZ	START1
	PUSH	BX
	PUSH	CX
	PUSH	DI
	PUSH	SI
	MOV	DL,0AH
	MOV	AH,06H
	INT	21H
	MOV	DL,0DH
	MOV	AH,06H
	INT	21H
	POP	SI
	POP	DI
	POP	CX
	POP	BX
	JMP	START
]PRE]

END2:	MOV	CH,2
[PRE[
	JMP	LOOP5
END3:	MOV	CH,3
LOOP5:	MOV	CL,6
	MOV	SI,0
LOOP4:	SAL	BUFFER+2,1
	RCL	BUFFER+1,1
	RCL	BUFFER+0,1
	RCL	SI,1
	DEC	CL
	JNZ	LOOP4
	PUSH	CX
	PUSH	DI
	PUSH	SI
	MOV	DL,BASE64[SI]
	MOV	AH,06H
	INT	21H
	POP	SI
	POP	DI
	POP	CX
	DEC	CH
	JNZ	LOOP5
	CMP	DI,2
	JZ	JUMP2
	MOV	DL,'='
	MOV	AH,06H
	INT	21H
JUMP2:	MOV	DL,'='
	MOV	AH,06H
	INT	21H
]PRE]

;処理終了
END1:	MOV	AH,4CH
[PRE[
	MOV	AL,00H
	INT	21H
]PRE]

;base64 moji hyoji
[PRE[
	MOV	AH,09H
	MOV	DX,OFFSET BASE64
	INT	21H
]PRE]

BASE64	DB	'ABCDEFGHIJKLMNOP'
[PRE[
	DB	'QRSTUVWXYZabcdef'
	DB	'ghijklmnopqrstuv'
	DB	'wxyz0123456789+/'
BUFFER	DB	'000','$'
]PRE]

CODE	ENDS
[PRE[
	END	START
]PRE]

([[名無しさん]] [WEAK[2007-05-30 05:16:55 +00:00]])

[53]
aaaa
([[名無しさん]] [WEAK[2007-07-03 08:52:59 +00:00]])

[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
- [32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[36]
[[Atom 1.0]] ([[RFC 4287]]) では、[[RFC 3548]]の定義を参照しています。
ただし、最初と最後に[[空白]]があっても'''構いません'''。
また、各[[行]]は[CODE(char)[[[U+000A]]]] 1つで区切ります。

[46]
[[RFC 4648]]
([[名無しさん]] [WEAK[2006-10-17 23:10:24 +00:00]])

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[54]
bajotuagoaj
([[aaa]] [aaa] [WEAK[2007-07-03 08:54:07 +00:00]])

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[39]
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]

([[名無しさん]] [sage] [WEAK[2005-12-10 07:32:30 +00:00]])

[45]
[[RFC 4387]] では個低調の[[オクテット列]]を符号化するため、常に最後が [CODE[=]] になってしまうので、
[CODE[=]] は省略することになっています。
[SRC@@en[[[RFC 4387]] 2.1]]
([[名無しさん]] [sage])


[55]
[[Perl]] の [CODE(perl)@@en[[[Digest::MD5]]]] や
[CODE(perl)@@en[[[Digest::SHA1]]]] が出力する [[Base64]]
化[[文字列]]は、[[詰め]]が省略されています。
([[名無しさん]])


[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[37]
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
という [[URI参照]]を使っています。
([[名無しさん]] [sage])

[41]
[CITE[たっぴ (パソコン質問掲示板) - Question and Answers -]] <http://pcq.furu.org/thread.php?thread=81003>

> BASE64への変換(エンコード)やBASE64からの逆変換(デコード)はこちらで確認することができるようです。
http://suika.fam.cx/~wakaba/-temp/wiki/wiki?Base64 

ちょ[AA(fw)[wwwwwwwwwwwwwwwwwwwwwwwwwww]] そんな話聞いたことないって[AA(fw)[www]]
([[名無しさん]] [WEAK[2006-05-28 11:09:01 +00:00]])

[42]
[CITE[Base64 - Wikipedia, the free encyclopedia]] <http://en.wikipedia.org/wiki/Base64>
([[名無しさん]] [WEAK[2006-06-11 00:06:34 +00:00]])

[51]
[[MTOM]] は、[[往復変換]]を保障するため、 [[XML Schema]]
の [CODE(XML)@@en[[[base64Binary]]]] の[[正準形]]のみを最適化対象としています。
([[名無しさん]])@


1.38
log
@auto-committed
@
text
@a349 1

a353 1

d398 8
@


1.37
log
@auto-committed
@
text
@d143 113
d257 19
a275 118
[52]
BASE64.ASM
	ASSUME	CS:CODE,DS:CODE
CODE	SEGMENT

	ORG	100H
START:	MOV	BX,0
START1:	MOV	DI,0
LOOP1:	PUSH	BX
	PUSH	DI
	MOV	AH,06H
	MOV	DL,0FFH
	INT	21H
	POP	DI
	POP	BX
	JNZ	JUMP1
	CMP	DI,0
	JZ	END1
	CMP	DI,1
	JZ	END2
	CMP	DI,2
	JZ	END3
JUMP1:	MOV	BUFFER[DI],AL
	INC	DI
	CMP	DI,3
	JNZ	LOOP1

SHORI2:	MOV	CH,4
LOOP3:	MOV	CL,6
	MOV	SI,0
LOOP2:	SAL	BUFFER+2,1
	RCL	BUFFER+1,1
	RCL	BUFFER+0,1
	RCL	SI,1
	DEC	CL
	JNZ	LOOP2
	PUSH	BX
	PUSH	DI
	PUSH	SI
	PUSH	CX
	MOV	DL,BASE64[SI]
	MOV	AH,06H
	INT	21H
	POP	CX
	POP	SI
	POP	DI
	POP	BX
	DEC	CH
	JNZ	LOOP3
	ADD	BX,DI
	CMP	BX,57
	JNZ	START1
	PUSH	BX
	PUSH	CX
	PUSH	DI
	PUSH	SI
	MOV	DL,0AH
	MOV	AH,06H
	INT	21H
	MOV	DL,0DH
	MOV	AH,06H
	INT	21H
	POP	SI
	POP	DI
	POP	CX
	POP	BX
	JMP	START

END2:	MOV	CH,2
	JMP	LOOP5
END3:	MOV	CH,3
LOOP5:	MOV	CL,6
	MOV	SI,0
LOOP4:	SAL	BUFFER+2,1
	RCL	BUFFER+1,1
	RCL	BUFFER+0,1
	RCL	SI,1
	DEC	CL
	JNZ	LOOP4
	PUSH	CX
	PUSH	DI
	PUSH	SI
	MOV	DL,BASE64[SI]
	MOV	AH,06H
	INT	21H
	POP	SI
	POP	DI
	POP	CX
	DEC	CH
	JNZ	LOOP5
	CMP	DI,2
	JZ	JUMP2
	MOV	DL,'='
	MOV	AH,06H
	INT	21H
JUMP2:	MOV	DL,'='
	MOV	AH,06H
	INT	21H

;処理終了
END1:	MOV	AH,4CH
	MOV	AL,00H
	INT	21H

;base64 moji hyoji
	MOV	AH,09H
	MOV	DX,OFFSET BASE64
	INT	21H

BASE64	DB	'ABCDEFGHIJKLMNOP'
	DB	'QRSTUVWXYZabcdef'
	DB	'ghijklmnopqrstuv'
	DB	'wxyz0123456789+/'
BUFFER	DB	'000','$'

CODE	ENDS
	END	START

d279 3
d349 6
@


1.36
log
@auto-committed
@
text
@d143 123
d504 1
a504 1
[[MTOM]] は、[[往復変換]]を保障するため、 [[XML Schema]]
d506 1
a506 2
([[名無しさん]])

@


1.35
log
@auto-committed
@
text
@a136 1

d138 2
a139 2
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]    http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a> 
a142 1

d378 7
a384 1
([[名無しさん]] [WEAK[2006-06-11 00:06:34 +00:00]])@


1.34
log
@auto-committed
@
text
@a132 1

d136 7
@


1.33
log
@auto-committed
@
text
@a128 1

d132 5
@


1.32
log
@auto-committed
@
text
@a59 1

d61 65
a125 65
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
d128 5
@


1.31
log
@auto-committed
@
text
@d60 71
a171 1

a174 1

@


1.30
log
@auto-committed
@
text
@d101 6
a167 1

d169 2
a170 2
[[RFC 4387]] では個低調の[[オクテット列]]を符号化するため、常に最後が [CODE[=]] になってしまうので、
[CODE[=]] は省略することになっています。
a172 1

@


1.29
log
@auto-committed
@
text
@a55 1

a59 1

d161 8
@


1.28
log
@auto-committed
@
text
@a51 1

d55 5
@


1.27
log
@auto-committed
@
text
@d52 6
d283 1
a283 2
([[名無しさん]] [WEAK[2006-06-11 00:06:34 +00:00]])

@


1.26
log
@auto-committed
@
text
@d1 278
a278 274
[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)


[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
- [32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[36]
[[Atom 1.0]] ([[RFC 4287]]) では、[[RFC 3548]]の定義を参照しています。
ただし、最初と最後に[[空白]]があっても'''構いません'''。
また、各[[行]]は[CODE(char)[[[U+000A]]]] 1つで区切ります。

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[39]
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]

([[名無しさん]] [sage] [WEAK[2005-12-10 07:32:30 +00:00]])

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[37]
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
という [[URI参照]]を使っています。
([[名無しさん]] [sage])

[41]
[CITE[たっぴ (パソコン質問掲示板) - Question and Answers -]] <http://pcq.furu.org/thread.php?thread=81003>

>BASE64への変換(エンコード)やBASE64からの逆変換(デコード)はこちらで確認することができるようです。
http://suika.fam.cx/~wakaba/-temp/wiki/wiki?Base64 

ちょ[AA(fw)[wwwwwwwwwwwwwwwwwwwwwwwwwww]] そんな話聞いたことないって[AA(fw)[www]]
([[名無しさん]] [WEAK[2006-05-28 11:09:01 +00:00]])

@


1.25
log
@auto-committed
@
text
@d1 274
a274 288

[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)


[40]
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
([[名無しさん]] [WEAK[2006-05-12 00:04:48 +00:00]])


[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
- [32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[36]
[[Atom 1.0]] ([[RFC 4287]]) では、[[RFC 3548]]の定義を参照しています。
ただし、最初と最後に[[空白]]があっても'''構いません'''。
また、各[[行]]は[CODE(char)[[[U+000A]]]] 1つで区切ります。

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[39]
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]

([[名無しさん]] [sage] [WEAK[2005-12-10 07:32:30 +00:00]])

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[37]
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
という [[URI参照]]を使っています。
([[名無しさん]] [sage])@


1.24
log
@auto-committed
@
text
@d1 287
a287 262
[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)

[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
- [32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[36]
[[Atom 1.0]] ([[RFC 4287]]) では、[[RFC 3548]]の定義を参照しています。
ただし、最初と最後に[[空白]]があっても'''構いません'''。
また、各[[行]]は[CODE(char)[[[U+000A]]]] 1つで区切ります。

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[39]
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]

([[名無しさん]] [sage] [WEAK[2005-12-10 07:32:30 +00:00]])

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[37]
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
という [[URI参照]]を使っています。
@


1.23
log
@auto-committed
@
text
@d1 262
a262 464

[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)

[36]
+++++

([[名無しさん]] [WEAK[2005-04-06 17:08:30 +00:00]])

[38]
[PRE[
  	 	 			   			 	   				    			 	    		 	    			 	   			 	   			     			 	  	 				 	 				 		  	   			 		  		  	   		 	 	  		    	 		   		 		 	 		 		  	 	 			 	   	 			  		  	 	 		 			  			  		 		   		 		 				 			 	   	 			  		   		 		 				 		 		 	 	 				 
]PRE]

([[名無しさん]] [WEAK[2005-05-04 14:14:32 +00:00]])


[40]
iVBORw0KGgoAAAANSUhEUgAAAHgAAABcCAMAAACSh4HAAAADAFBMVEVDOCLRr7Syj27q28Li0rWc
eVXFrJjh3t7eyrKJaUiff2+xmo7brqDi0sPh3Nnr39/Xw7Lf49/m3s/fy7egg2LGsad6XDu1lnaK
c1/Sh5/i0r6ljXHcvajd0c3r29vs6OPr5+Pjy67r1bTm3svbw7Lm5uPr49vexrbo0sbTrZnbtaqR
ck6YfGdtUTS/oo6cgml7ZFK2kHS+nX+him/r38+kjHnNqJTXsaSOd2Xr39Pbvqbizr7p1szo0L7r
49fr5tvr59/jy7Lr4+Xnz7rv4d7r49/n18Pr28Djx67hs7Tn3teIa1SnhmPr28vfwLjPrpPbtqTr
38u0mITVsZ6bel2QemB+YUfTnZDe0tPgt6pjTTa9n4xvWkW/pZWwj36bhnCge2TGhoN+alujiXWl
jn3TsKKujnLr29PbxcLHm4bXuqTbvq6MclnMqZvr48/jy7aoh2rdxayQemzn4d7n077myb/jz7rn
17rv3s7jw7LnyrXn18fjx7Lp1tbjvq7n28Pn08Pfw7Ln29Pnz7br28/m5+Xbuqqqim/v49bn28/X
tqfn07bj28fn28eqjnTr59efhmjVspvfzMbr6+iihWvn49uSdWDn28vXurK5mXvevrSMaknr38fg
raGskHmBYkLHpI+efVfMr57QsaWObVG/mI7r17rjw6zPrZ6ggnDn59/jxrbUoJjh1dhgSi7Ql5ff
vqrn083r39uPclRvWDq3lH7duKNhUURxYVSwln+ggmGxjXXr07qcf2KCbFWmim2ggF/Jk4aBb2TA
noa3oJekhnLv3sqBZ0nv3tXHpIjbpZvn18vYo5XIqJjfy77fw66UfmemhmiUg3PTuKbkxb3n07rr
177n38e2nISnkofjuq6Vdlfjz7Lny7rj1cWUfGLr28fXtqDfvq7r39fiyKvjy7rjz7bnzLLfw6rn
177r18fr18Pfz7rbuqauknKtjWvj07rn59vm4tbfx7Li1r6minHny8jPr5rdx6vn48+eh23n4dXr
49OggWXXu6zn39MSu2pNAAAAEHRFWHRUaXRsZQBnb21hMDQucG5nLEULGQAAAAx0RVh0U29mdHdh
cmUAVmlYrCJubQAAIABJREFUeJxNmgs823n297UzVYquf1KXTXVqnpKUIi4RInXJ5i9raFDX1i2t
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
FpYnLAoai+VQrz59mvPZS7AloYaPDbVd1ApUtxkYvQVYHCOfYzVTn14Xu+DYGRMT4+gIXHcoLZaI
eIxINHexu5Fmd+Tyb3854DIXFzs6IoY7o96D29xDosmNM6kTmwTCKhaH4/JwsDfgeKvUVepTztPc
nM/a2y8GXzSEA7m3tS1D8RLgC9FvS+vSY6e7o2K6Yhz7+twhtywWK0GkJLq4h++4m6cdifuV+5XO
YhiAA2IiOqN03p8uVzAF22oLKwTmwUaE8+ThPDcAT6XyeHrvKr0lx+85HNCKkj0r+Eosjkpgz5hA
vF1t78CQacRlgc8r30HR96UN3Wk98P588v8A8BQC4yOvrDMAAAAASUVORK5CYIL6eLv/8a35GPXW
uJq+hOvS+5Tk/62c8IHu2vYuu2KszsX4yeba/Z+1zvvcnsPuIjxfdQpuY1VIhbiLtN6OwBzJvPjP
pfyz6qiL+9vplKmwpa6rLOrRs/mh9rbj6dXkqa+iiqKV6tzlga2cQQsSUF83YGJ2IDYuNC04dHl8
fXF4KpXVg8uFn46By52D3NK2ou/urKPtkZ+H3tXNioCM2dnL6Y+E0Kyn4uD84Oed5eL7uNrPjYnu
9ez1qO/gtrC9rqSylZKBmJCEztPZl5mUlJOLzNrSh76r6e2CmYCZzIiE0uzh8vjitLOjsbXc6ff9
s72oqK+36P72o5KHxcGmvaS9EFVYDggFFhx5WyhPV1lJfQsBTkZMT0xSBBYZRz0gVTdbQxkTUl9a
W14KBwZECFcXAhkLWwpHBBpXKBgcSykrKS83by4wTQMdHkZLT8v7jMzH6NCgje3T+96Bw7T/mq9m
/zv25bttsYHy3b2WtqDnuL2EtIyloOWdDBE0SA0jOANxcykuKTUgLjU4BRcRCA0wCFE7tVqLCB18
AAAA
([[名無しさん]] [WEAK[2006-01-14 11:59:21 +00:00]])


[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
- [32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[39]
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]

([[名無しさん]] [sage] [WEAK[2005-12-10 07:32:30 +00:00]])

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[37]
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
という [[URI参照]]を使っています。
@


1.22
log
@auto-committed
@
text
@d64 194
d349 3
a351 3
機械的に電子メイルを生成する類のプログラムで、
末尾に4つも [CODE(MIME)@@en[=]] を付けるとんでもない符号化するものがあるそうです。
[WEAK[(しかも改善するように要求したら使っている [[MUA]] が悪いのだろうと言われたとか。。。)]]
a353 1

@


1.21
log
@auto-committed
@
text
@a1 1

a56 1

d58 3
a60 1
  	 	 			   			 	   				    			 	    		 	    			 	   			 	   			     			 	  	 				 	 				 		  	   			 		  		  	   		 	 	  		    	 		   		 		 	 		 		  	 	 			 	   	 			  		  	 	 		 			  			  		 		   		 		 				 			 	   	 			  		   		 		 				 		 		 	 	 				 
a63 1

d153 8
@


1.20
log
@auto-committed
@
text
@d58 7
d261 3
a263 3
[[XML]] [[デジタル署名]]系仕様では
[[Base64]] を使うことを識別するために
[CODE(URI)[[[http://www.w3.org/2000/09/xmldsig#base64]]]]
d265 1
a265 2
([[名無しさん]] [sage])

@


1.19
log
@auto-committed
@
text
@a52 1

d54 1
a54 1
+++++
a57 1

d251 9
a259 1
でしか使えない環境依存だから入れたくないのかもしれんが。)@


1.18
log
@auto-committed
@
text
@d1 252
a252 244
[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)




[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3
-[32] [CODE(ABNF)[[[instance-digest]]]]
([CODE(ABNF)[[[digest-algorithm]]]] が
[CODE(HTTP)[[[SHA]]]] または [CODE(HTTP)[[[MD5]]]] の時)

[33] [[RFC 3548]] の MIME 型 Base64 の定義を採用する仕様:
- [[RFC 3548]] の MIME 型 Base64
- [[XMPP]] ([[RFC 3920]])

[30] よく参照される MIME の Base64 の定義には76文字制限がありますが、
この制限を撤廃した仕様も多くあります。

MIME の Base64 の定義から行長制限を撤廃したもの:
- [[XML Schema]] のデータ型 [CODE(XML)[[[base64Binary]]]]

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE(example)[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE(example)[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

[31] '''主要なチェック点''':
:字母:MIME の字母65文字と出入りはないか?
:詰め:詰め文字は必須か、省略可能か、禁止か?
:改行:行長制限はあるか? あるなら何文字 (以内 / 丁度) か?
:空白:空白・改行の混入を認めているか?
:誤り処理:字母以外の文字の混入時の処理は?
字母数が4の倍数でない時の処理は?


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

仕様書:
- [[RFC 3501]]
[CITE[INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1]]
<urn:ietf:rfc:3501>
-- [CSECTION[5.1.3]]
- [CITE[RFC ERRATA]] 
<http://www.rfc-editor.org/cgi-bin/errata.pl#rfc3501>
-- 明確化のための修正が行われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]

* 安全性に関して

[34] '''秘密情報送信のための使用''':
[[HTTP]] の[[認証]]や [[SASL]] などでは、[[合言葉]]などの繊細な情報を送信するために
Base64 を使うことがあります。 Base64 
は[[転送符号化]]であって[[暗号化]]では''ありません''が、
第3者 [WEAK[(例えばシステムの管理者)]] 
が繊細な情報を含むメッセージを見てしまったとしても読むことができません
[WEAK[(流石に脳内で Base64 を復号できる猛者はいないでしょう)]]。
もちろん、悪意のある人は計算機を使って復号してしまうでしょうから、
それに対する効果はありません。

[35] '''バッファ溢れ攻撃''': 不正な (字母に含まれない)
文字や末尾以外にある詰めの [CODE(char)[=]]
への対処がいい加減だと、バッファ溢れ攻撃に使われることがあり得ます。
[SRC[[[RFC 3920]] 14.9 など]]

[[#comment]]

* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
@


1.17
log
@auto-committed
@
text
@a0 1

d80 4
d210 18
@


1.16
log
@auto-committed
@
text
@d1 1
d52 3
d77 3
d124 1
d224 1
a224 1
でしか使えない環境依存だから入れたくないのかもしれんが。)
@


1.15
log
@auto-committed
@
text
@a0 1

d74 6
d109 7
@


1.14
log
@auto-committed
@
text
@d1 204
a204 222


[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)


* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)

[30]
UmFyIRoHAFK3cwAADQAAAHsAAADF4XQggi0AOgAAADoAAAACFWlHzumpbjAdMA0AIAAAAENEa2V5
LnR4dAABwAdUcnVlIEltYWdlIHZlcjcuMJP6lnuM6pTFDQoNCjJYUVFBLTZDMkZNLUFRN1FXLUtK
WlpVLU5NRTJG7ER6AMDbAAAAAAAAAAAAAgAAAAB7njYxHTACAAAAAABBVgkAQ0RrZXkucmFyAAAH
AFZpcnR1YWwAAD1gLZ3sLHznsQOOODQ9MD2jAksFFIPjRmNYZGjzAtJofh8fvvmvGZo56MP0EhIv
QmvIfnM0yKSXRkrPQFu+IJmOX7UFLqRV17PwBmiJOADp9VlKVrLXY529IfzfR9BkPWBW5KYGZrl8
n4gw9tFlBpLDZFyCYDrVRHrXae23TzMxRmxnvmpiXsKr1WOnxvs3str2bjw3Ssvu5tQCUVx7njYx
xD17AEAHAA==
([[名無しさん]] [WEAK[2004-12-23 02:01:42 +00:00]])


[32]
11
([[名無しさん]] [WEAK[2005-02-19 08:01:06 +00:00]])


[[#comment]]


* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]


* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。


** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[[#comment]]


** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]


* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)

[31]
UmFyIRoHAFK3cwAADQAAAHsAAADF4XQggi0AOgAAADoAAAACFWlHzumpbjAdMA0AIAAAAENEa2V5
LnR4dAABwAdUcnVlIEltYWdlIHZlcjcuMJP6lnuM6pTFDQoNCjJYUVFBLTZDMkZNLUFRN1FXLUtK
WlpVLU5NRTJG7ER6AMDbAAAAAAAAAAAAAgAAAAB7njYxHTACAAAAAABBVgkAQ0RrZXkucmFyAAAH
AFZpcnR1YWwAAD1gLZ3sLHznsQOOODQ9MD2jAksFFIPjRmNYZGjzAtJofh8fvvmvGZo56MP0EhIv
QmvIfnM0yKSXRkrPQFu+IJmOX7UFLqRV17PwBmiJOADp9VlKVrLXY529IfzfR9BkPWBW5KYGZrl8
n4gw9tFlBpLDZFyCYDrVRHrXae23TzMxRmxnvmpiXsKr1WOnxvs3str2bjw3Ssvu5tQCUVx7njYx
xD17AEAHAA==
([[名無しさん]] [WEAK[2004-12-23 02:02:26 +00:00]])@


1.13
log
@auto-committed
@
text
@d63 6
d215 6
a220 6
UmFyIRoHAFK3cwAADQAAAHsAAADF4XQggi0AOgAAADoAAAACFWlHzumpbjAdMA0AIAAAAENEa2V5
LnR4dAABwAdUcnVlIEltYWdlIHZlcjcuMJP6lnuM6pTFDQoNCjJYUVFBLTZDMkZNLUFRN1FXLUtK
WlpVLU5NRTJG7ER6AMDbAAAAAAAAAAAAAgAAAAB7njYxHTACAAAAAABBVgkAQ0RrZXkucmFyAAAH
AFZpcnR1YWwAAD1gLZ3sLHznsQOOODQ9MD2jAksFFIPjRmNYZGjzAtJofh8fvvmvGZo56MP0EhIv
QmvIfnM0yKSXRkrPQFu+IJmOX7UFLqRV17PwBmiJOADp9VlKVrLXY529IfzfR9BkPWBW5KYGZrl8
n4gw9tFlBpLDZFyCYDrVRHrXae23TzMxRmxnvmpiXsKr1WOnxvs3str2bjw3Ssvu5tQCUVx7njYx
d222 1
a222 2
([[名無しさん]] [WEAK[2004-12-23 02:02:26 +00:00]])

@


1.12
log
@auto-committed
@
text
@d1 217
a217 186
[5] [DFN[Base64]] は、[[オクテット列]]を64種類の[[英数字]]などに転写する[[符号化方式]]の一種です。

(一般に [Q[base 64]] は[Q[64進数]]を意味します。特に大文字で [Q[Base64]]
と書いた場合や、インターネットで言われる場合には、 [[MIME]] の
Base64 を指します。)

* 符号化方式

[27]
オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる [CODE(char)[=]]) は、 
[[ISO/IEC 646の版]]で全て共通に存在し、しかも [[EBCDIC]] 
の全ての版で使える文字から選ばれたそうです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

[28]
Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
[CODE(char)[=]] で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

[24]
Base64'ed data は、 一行辺り76文字以下でなければなりません。
([[電子メイル]]/[[MIME]] の制限に由来。)
区切りの改行文字列 [CODE(char)[CRLF]] は、復号の時には無視されます。 
(これ以外でも、上の表に無い文字が現れたら、無視して処理を続けます。)

[[#comment]]

* 仕様

[25] Base64 は、最初 [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されましたが、後に [[MIME]] ([[RFC 1341]] <urn:ietf:rfc:1341>,
[[RFC 1521]] <urn:ietf:rfc:1521>, [[RFC 2045]] <urn:ietf:rfc:2045>)
で採用され、広く普及するに至りました。

[15] その後、 Base64 を規定する新しい RFC, [[RFC 3548]] がでました。

[6] PEM 以来の Base64 の定義を採用する仕様:
- [[PEM]] 署名
- [[MIME]] [CODE(MIME)[Base64]] [[転送符号化]]
- [CODE(MIME)[[[x-gzip64]]]] 転送符号化
- [[PGP/MIME]] 署名
- MIME [CODE(MIME)[[[Content-MD5]]:]] 欄
- [[822]] [CODE(822)[[[Face]]:]] 欄
- MIME [CODE(ABNF)[[[encoded-word]]]] [CODE(MIME)[B]] 符号化
- [CODE(URI)[[[data]]:]] [[URI]] [[scheme]]
- [[uuencode]] 風表現 >>3

[[#comment]]


* uuencode 風表現

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

例1:
[PRE[
begin-base64 644 base64ed.data
[INS[... base64 stream ...]]
====
]PRE]

[26] 例2:
[PRE[
begin-base64 644 code.tgz
[INS[... base64 stream ...]]
=
]PRE]

[[#comment]]

* 変種

[23] MIME Base64 と似ながら少しずつ異なる変種がいろいろ知られています。

** 詰め文字の省略

[1] データ長がある程度決まっている場合は、 [CODE(char)[=]] padding
が無駄であることがあります。この場合で、 [CODE(char)[=]] padding 
を省略すると規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 [CODE(char)[=]] padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。

- [[UTF-7]] の Base64 は、必ず16ビット単位のデータを扱うので、
最後の詰め文字を省略すると規定されています。
- [29][[Norton AntiSpam]] は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。 [SRC[mew-dist 25264]]
もちろんこの実装は MIME 違反です。

[[#comment]]

** 斜線の代替文字

[22] MIME の Base64 字母には [CODE(char)[/]] が含まれますが、
色々なシステムで階層の区切り文字として使われているので、
あまり嬉しくないことがあります。

[7] [[IMAP]] の修正 [[UTF-7]] では、 >>2 の修正に加えて、 
[CODE(char)[/]] の代わりに [CODE(char)[,]] が使われています。

[9] [CODE(URI)[[[urn:urn-5]]]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(char)[/]] の代わりに [CODE(char)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

[16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] 
で安全ではないので、 [CODE(char)[/]] の代わりに [CODE(char)[~]] 
を使う提案があったそうです。しかし [CODE(char)[~]] もやはりファイル・システムや 
URI で安全とは言えません。

[17] そこで RFC 3548 はファイル名や URI で安全な代替 Base64 字母として、 
[CODE(char)[+]] と [CODE(char)[/]] に代えて [CODE(char)[-]] と [CODE(char)[_]] 
を使うものを規定しています。それでも [CODE(char)[=]] が padding 
に使われてるので、まだ完全に URI で安全とは言えません。 [CODE(char)[-]] 
が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。

[18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] 
を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]

** memo

[14] 変種ではありませんが、 [[MIME]] の [CODE(MIME)[[[application/octet-stream]]]] 
では、[[オクテット]] (8[[ビット]]) 単位でないビット列も扱うことが出来ます。
そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、
詰めた数を引数でメモっておきます。

[[#comment]]

* 実装

[4] [[Perl]] なら、 [CODE(perl)[[[MIME::Base64]]]] を使うのが気楽かと。
Perl 5.7.3 以降では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [CODE[[[tr]]]] を使うという方法が使われることもあります。

[[#comment]]

* メモ

[12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。

[10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) 
そうです。 ([Q[XML は人間可読である]]のじゃなかったのか? って気もするが。)

[11] >>10 実際のところ、 [[ISO/IEC 6479]] 
の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML 
の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)

[21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。

[13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] 
くらい使いたい気はする。 (実質 [[Un*x]] 
でしか使えない環境依存だから入れたくないのかもしれんが。)
@


1.11
log
@auto-committed
@
text
@d1 186
a186 188
 page-icon="字β"

[5] [DFN[Base64]] は、
[[オクテット]]値を64文字の[[英数字]]などにする[[符号化方式]]です。
早い話がオクテット列の64進数表記です。

[[MIME]] [[RFC]] (最新版は [[RFC 2045]] <urn:ietf:rfc:2045>)
で定義されていますが、元々は [[PEM]] ([[RFC 1421]] <urn:ietf:rfc:1421>)
で規定されていました。

オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる「=」) は、 [[ISO/IEC 646]] の版で
全て共通に存在し、しかも [[EBCDIC]] の全ての版で使える文字
から選ばれたようです。

[PRE[
     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y
]PRE]

Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
「=」で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

Base64'ed data は、 MIME の制限上、一行辺り76文字以下
でなければなりません。区切りの改行文字列 CRLF は、
復号の時には無視されます。 (これ以外でも、上の表に無い
文字が現れたら、無視して処理を続けます。)

詳しくは RFC 2045 を読んで下さい。

RFC 2047 は、 encoded-word で使われる B 符号化を、
Base64 と全く同じ物であるとしています。


* 応用

[6] PEM/MIME の定義と全く同じ Base64 を使っている主な応用:
- [[PEM]]の署名
- [[MIME]]の[[転送符号化]]
- x-gzip64 [[転送符号化]] (See [[Content-Transfer-Encoding:欄]])
- [[Content-MD5:欄]]
- [[data:URL]]
- [[PGP/MIME]]

[23]
UEsDBBQAAAAIAMySbzBfTfBAHQEAAEUBAAAKAAAAS2V5LkFueURWRBXHt5KCQACA4Z4ZXoKWQlQw
FFessEhYgrLE48ZBWRQDCBzx6c+r/u8/wj2UVMzTFE19KzoMT8gSAToZQFRUE8ZOmf32SU1i5zn+
OwbFKHlSrJPxh6aYT5gvhtvfu53QQq5mtXPxtEvQHMgtSYJqWGvW0Bl1ZQhcpahdjvG0tFEWFIM8
HGYKcAXUriueZ0NYbN7sBdjQf2+WR70f0SzAtnody4vul9voWBaNS5TAgaxWZXmiCdWrl5YmqOfy
MMqGtMAL7AtefwHnqEnDDFmN0UkrqzUS5yFGg6u6Wi7K1dSKhP/M9q4KbrkrHmpGQo4YabC2ZRJe
J2TekOddvXz+WqRz+6xMgXnPJ/yW2Vu6aUzfAf7rWURbZVrxgKGpP1BLAQIUABQAAAAIAMySbzBf
TfBAHQEAAEUBAAAKAAAAAAAAAAEAIAAAAAAAAABLZXkuQW55RFZEUEsFBgAAAAABAAEAOAAAAEUB
AAAAAA==
([[名無しさん]] [WEAK[2004-03-22 17:08:46 +00:00]])

[24]
FFessEhYgrLE48ZBWRQDCBzx6c+r/u8/wj2UVMzTFE19KzoMT8gSAToZQFRUE8ZOmf32SU1i5zn+ OwbFKHlSrJPxh6aYT5gvhtvfu53QQq5mtXPxtEvQHMgtSYJqWGvW0Bl1ZQhcpahdjvG0tFEWFIM8 HGYKcAXUriueZ0NYbN7sBdjQf2+WR70f0SzAtnody4vul9voWBaNS5TAgaxWZXmiCdWrl5YmqOfy MMqGtMAL7AtefwHnqEnDDFmN0UkrqzUS5yFGg6u6Wi7K1dSKhP/M9q4KbrkrHmpGQo4YabC2ZRJe J2TekOddvXz+WqRz+6xMgXnPJ/yW2Vu6aUzfAf7rWURbZVrxgKGpP1BLAQIUABQAAAAIAMySbzBf TfBAHQEAAEUBAAAKAAAAAAAAAAEAIAAAAAAAAABLZXkuQW55RFZEUEsFBgAAAAABAAEAOAAAAEUB AAAAAA=
([[名無しさん]] [WEAK[2004-04-29 00:29:14 +00:00]])

[25]
いつからここは Base64 で符号化して貼るスレになったのだろう。で、 >>23-24 の中身は何?
([[名無しさん]] [WEAK[2004-04-29 10:02:59 +00:00]])

[26]
begin-base64 644 code.tgz
H4sIAKL2nEAAA+3QOw7CMBBFUdeswksY/2JaarbgJuAUNEEKIHn5jIGGhi6h
uUd+Gsty8TTna53MysSJDDEaEXE5hdfU0+dbckYfYnY5eJ/6/yjeWFm7WPe4 3cfFWnOY6/JrE8fpMm/RZ2OlDVXjNFGz/9yD5qRJpWVfmoy7fxcFAAAAAAAA
AAAAAAAAAHx5An1mvWwAKAAA
= 
([[名無しさん]] [WEAK[2004-05-08 14:42:14 +00:00]])

[[#comment]]


** uuencode みたいの

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

[PRE[
 begin-base64 644 base64ed.data
 ... base64 stream ...
 ====
]PRE]

[27]
begin-base64 644 code.tgz
H4sIAKL2nEAAA+3QOw7CMBBFUdeswksY/2JaarbgJuAUNEEKIHn5jIGGhi6h
uUd+Gsty8TTna53MysSJDDEaEXE5hdfU0+dbckYfYnY5eJ/6/yjeWFm7WPe4
3cfFWnOY6/JrE8fpMm/RZ2OlDVXjNFGz/9yD5qRJpWVfmoy7fxcFAAAAAAAA
AAAAAAAAAHx5An1mvWwAKAAA
= 
([[名無しさん]] [WEAK[2004-05-08 14:44:07 +00:00]])

[28]
begin-base64 644 code.tgz
H4sIAKL2nEAAA+3QOw7CMBBFUdeswksY/2JaarbgJuAUNEEKIHn5jIGGhi6h
uUd+Gsty8TTna53MysSJDDEaEXE5hdfU0+dbckYfYnY5eJ/6/yjeWFm7WPe4
3cfFWnOY6/JrE8fpMm/RZ2OlDVXjNFGz/9yD5qRJpWVfmoy7fxcFAAAAAAAA
AAAAAAAAAHx5An1mvWwAKAAA
= 
([[名無しさん]] [WEAK[2004-05-08 14:47:06 +00:00]])

[[#comment]]


* 変種

[1] データ長がある程度決まっている場合は、 "=" padding
が無駄であることがあります。この場合で、 "=" padding を省略する
と規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 "=" padding
の代わりに、元のデータの後に任意個の [CODE[0x00]] が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。
- [[UTF-7]]

[22]
Base64
([[名無しさん]] [WEAK[2004-03-22 17:07:49 +00:00]])

[29]
>>1 Norton AntiSpam は [CODE(ABNF)[[[encoded-word]]]] の最後の
[CODE(MIME)[=]] を省くそうです。
[SRC[mew-dist 25264]]
([[名無しさん]])

[[#comment]]

[7] 修正 [[UTF-7]] では、 >>2 の修正に加えて、 "/" の代わりに ","
が使われています。

[9] [CODE(URN)[urn-5]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(Base64)[/]] の代わりに [CODE(URN)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

- [14] 変種ではありませんが、 [[MIME]] の [[application/octet-stream]] では、[[オクテット]] (8[[ビット]]) でないビット列も扱うことが出来ます。そのような場合には全体長が8の倍数になるようにビット [CODE[0]] を詰め、詰めた数をパラメーターでメモっておきます。
- [16] [[RFC 3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] で安全ではないので、 [CODE[/]] の代わりに [CODE[~]] を使う提案があったそうです。しかし [CODE[~]] もやはりファイル・システムや URI で安全とは言えません。
- [17] そこで 3548 はファイル名や URI で安全な代替 Base64 字母として、 [CODE[+]] と [CODE[/]] に代えて [CODE[-]] と [CODE[_]] を使うものを規定しています。それでも [CODE(URI)[=]] が padding に使われてるので、まだ完全に URI で安全とは言えません。 [CODE[-]] が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。
- [18] [[M$XML]] は [CODE(char)[/]] の代わりに [CODE(char)[*]] を使っていたそうです。最近の版では両方認識するそうです。

[[#comment]]


* 実装

[4] [[Perl]] なら、 [[MIME::Base64]] を使うのが気楽かと。
perl 5.8.0 では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [[tr]] を使うという方法が使われることもあります。

[[#comment]]


* メモ

- [10] [[XML]] でバイナリを扱う時には Base64 を使うのが推奨されている (誰に?) そうです。 (「XML は人間可読である」のじゃなかったのか? って気もするが。)
- [11] >>10 実際のところ、 [[ISO/IEC 6479]] の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)
- [21] >>11 [[XML 1.1]] では結局[[文字参照]]なら OK
([CODE(char)[[[U+0000]]]] 以外。) になりましたね。
- [12] [[インターネット]]でのオクテット列の文字列転写法の[[デ・ファクト標準]]です。
- [13] >>11 でも、せめて [CODE(char)[[ABBR[[[FF]]] [FORM FEED]]]] くらい使いたい気はする。 (実質 [[Un*x]] でしか使えない環境依存だから入れたくないのかもしれんが。)
- [15] Base64 を規定する新しい RFC, [[RFC 3548]] がでました。@


1.10
log
@auto-committed
@
text
@d1 1
a1 1
#?SuikaWiki/0.9 page-icon="字β"
a114 1

d116 6
a121 6
begin-base64 644 code.tgz
H4sIAKL2nEAAA+3QOw7CMBBFUdeswksY/2JaarbgJuAUNEEKIHn5jIGGhi6h
uUd+Gsty8TTna53MysSJDDEaEXE5hdfU0+dbckYfYnY5eJ/6/yjeWFm7WPe4
3cfFWnOY6/JrE8fpMm/RZ2OlDVXjNFGz/9yD5qRJpWVfmoy7fxcFAAAAAAAA
AAAAAAAAAHx5An1mvWwAKAAA
====
a123 1

d141 7
@


1.9
log
@auto-committed
@
text
@a79 1

d84 7
d105 20
@


1.8
log
@auto-committed
@
text
@d66 7
a72 7
UEsDBBQAAAAIAMySbzBfTfBAHQEAAEUBAAAKAAAAS2V5LkFueURWRBXHt5KCQACA4Z4ZXoKWQlQw
FFessEhYgrLE48ZBWRQDCBzx6c+r/u8/wj2UVMzTFE19KzoMT8gSAToZQFRUE8ZOmf32SU1i5zn+
OwbFKHlSrJPxh6aYT5gvhtvfu53QQq5mtXPxtEvQHMgtSYJqWGvW0Bl1ZQhcpahdjvG0tFEWFIM8
HGYKcAXUriueZ0NYbN7sBdjQf2+WR70f0SzAtnody4vul9voWBaNS5TAgaxWZXmiCdWrl5YmqOfy
MMqGtMAL7AtefwHnqEnDDFmN0UkrqzUS5yFGg6u6Wi7K1dSKhP/M9q4KbrkrHmpGQo4YabC2ZRJe
J2TekOddvXz+WqRz+6xMgXnPJ/yW2Vu6aUzfAf7rWURbZVrxgKGpP1BLAQIUABQAAAAIAMySbzBf
TfBAHQEAAEUBAAAKAAAAAAAAAAEAIAAAAAAAAABLZXkuQW55RFZEUEsFBgAAAAABAAEAOAAAAEUB
d75 11
@


1.7
log
@auto-committed
@
text
@d1 116
a116 88
#?SuikaWiki/0.9 page-icon="字β"
[5] オクテット値を64文字の英数字などにする encode です。
早い話がオクテット列の64進数表記です。

[[MIME]] [[RFC]] (最新版は RFC 2045 <urn:ietf:rfc:2045>)
で定義されていますが、元々は [[PEM]] (RFC 1421 <urn:ietf:rfc:1421>)
で規定されていました。

オクテット値3つ (8ビット×3 = 24ビット) を4文字 (6ビット×4)
で表現します。ですからデータ量は3分の4倍、33%増加になります。

64文字 (と、特殊用途に使われる「=」) は、 [[ISO/IEC 646]] の版で
全て共通に存在し、しかも [[EBCDIC]] の全ての版で使える文字
から選ばれたようです。

     Value Encoding  Value Encoding  Value Encoding  Value Encoding
         0 A            17 R            34 i            51 z
         1 B            18 S            35 j            52 0
         2 C            19 T            36 k            53 1
         3 D            20 U            37 l            54 2
         4 E            21 V            38 m            55 3
         5 F            22 W            39 n            56 4
         6 G            23 X            40 o            57 5
         7 H            24 Y            41 p            58 6
         8 I            25 Z            42 q            59 7
         9 J            26 a            43 r            60 8
        10 K            27 b            44 s            61 9
        11 L            28 c            45 t            62 +
        12 M            29 d            46 u            63 /
        13 N            30 e            47 v
        14 O            31 f            48 w         (pad) =
        15 P            32 g            49 x
        16 Q            33 h            50 y

Base64 は6ビット単位になりますが、オクテット列の長さと必ずしも
一致する (6と8の公倍数の長さになる) とは限らないので、
「=」で埋めて調節します。この結果、 Base64 data は必ず
4の整数倍の長さになります。

Base64'ed data は、 MIME の制限上、一行辺り76文字以下
でなければなりません。区切りの改行文字列 CRLF は、
復号の時には無視されます。 (これ以外でも、上の表に無い
文字が現れたら、無視して処理を続けます。)

詳しくは RFC 2045 を読んで下さい。

RFC 2047 は、 encoded-word で使われる B 符号化を、
Base64 と全く同じ物であるとしています。

*応用

[6] PEM/MIME の定義と全く同じ Base64 を使っている主な応用:
-[[PEM]]の署名
-[[MIME]]の[[転送符号化]]
-x-gzip64 [[転送符号化]] (See [[Content-Transfer-Encoding:欄]])
-[[Content-MD5:欄]]
-[[data:URL]]
-[[PGP/MIME]]

**uuencode みたいの

[3] [[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
みたいな書き方をすることがあるみたい。

 begin-base64 644 base64ed.data
 ... base64 stream ...
 ====

*変種

[1] データ長がある程度決まっている場合は、 "=" padding
が無駄であることがあります。この場合で、 "=" padding を省略する
と規定しているものがあります。

[2] 必ず[[8ビット・バイト]]を使用するものは、 "=" padding
の代わりに、元のデータの後に任意個の 0x00 が並んでいる
としても解釈上影響がないことがあります。そういうものがあります。
-[[UTF-7]]

[7] 修正 [[UTF-7]] では、 >>2 の修正に加えて、 "/" の代わりに ","
が使われています。

[9] [CODE(URN)[urn-5]] [[URN]] [[名前空間]]で使っている Base64
変種は、 [CODE(Base64)[/]] の代わりに [CODE(URN)[-]]
を使います。 (URN では [CODE(URI)[/]] が使えないため。)
また、詰め文字は使いません。
(''Namespace ID: urn-5'' <http://www.iana.org/assignments/urn-informal/urn-5>)

d118 2
a119 2
- [16] [[RFC3548]] 曰く、 MIME Base64 ではファイル名や [[URI]] で安全ではないので、 [CODE[/]] の代わりに [CODE[~]] を使う提案があったそうです。しかし [CODE[~]] もやはりファイル・システムや URI で安全とは言えません。
- [17] そこで 3548 はファイル名や URI で暗然な代替 Base64 字母として、 [CODE[+]] と [CODE[/]] に代えて [CODE[-]] と [CODE[_]] を使うものを規定しています。それでも [CODE(URI)[=]] が padding に使われてるので、まだ完全に URI で安全とは言えません。 [CODE[-]] が先頭に来る可能性があるので [[Un|x]] で安全でない虞もあります。
d121 19
a139 13
[[#comment]]

*実装

[4] [[Perl]] なら、 [[MIME::Base64]] を使うのが気楽かと。
perl 5.8.0 では標準で入っています。

但し、 >>1,>>2,>>7 のような変種には対応していません。

[8] [[uuencode]] も64進数であることを利用して、 uuencode
で符号化した後に [[tr]] を使うという方法が使われることもあります。

*メモ
d141 3
a143 1
- [11] >>10 実際のところ、 [[ISO/IEC6479]] の[[制御シーケンス]]とかが混じったデータを使いたいという要求はある。 (それは XML の思想に反するという反発は強く、 XML 1.1 でも結局駄目になったけど。)
d146 1
a146 1
- [15] Base64 を規定する新しい RFC, [[RFC3548]] がでました。
@


1.6
log
@auto-committed
@
text
@d92 1
@


1.5
log
@auto-commited
@
text
@d90 2
d109 1
@


1.4
log
@Updated.
@
text
@d1 1
a1 1
#?SuikaWiki/0.9
d3 2
d9 1
a9 1
オクテット値3つ (8ビット×3=24ビット) を4文字 (6ビット×4)
d83 9
d103 4
@


1.3
log
@Updated.
@
text
@d1 3
a3 2
オクテット値を64文字の英数字などにする encode です。
[[MIME]] RFC (最新版は RFC 2045 <urn:ietf:rfc:2045>)
d50 1
a50 1
PEM/MIME の定義と全く同じ Base64 を使っている主な応用:
d53 1
a53 1
-x-gzip64 [[転送符号化]] (See [[Content-Transfer-Encoding:領域]])
d60 1
a60 1
[[MIME]] 以外の場面でファイルを貼り付けるのに、 [[uuencode]]
d78 3
d83 9
a91 1
[[Perl]] なら、 [[MIME::Base64]] を使うのが気楽かと。
@


1.2
log
@Updated.
@
text
@d57 9
@


1.1
log
@Updated.
@
text
@a0 1

d49 1
a49 2
Base64 を使っている主な応用

a51 2
-[[Content-MD5:領域]]
-[[data: URL]]
d53 14
d70 1
a70 21
Perl なら、 MIME::Base64 を使うのが気楽かと。

*See also
-[[符号化]]
--[[転送符号化]]
---[[Quoted-Printable]]
--[[base85]]
--[[uuencode]] 
--[[BinHex]]
--[[ISH]]
-[[MIME]]
--[[encoded-word]]
-[[RFC822と仲間達の頭領域名]]
--[[Content-Transfer-Encoding:領域]]
-[[PEM]]
-[[URI]]
--[[URL]]
--[[data: URL]]
-[[ダイジェスト関数]]
--[[MD5]]
--[[SHA1]]
@

