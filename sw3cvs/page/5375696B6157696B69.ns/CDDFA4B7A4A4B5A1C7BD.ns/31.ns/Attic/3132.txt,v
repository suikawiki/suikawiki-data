head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.09.24.07.19.42;	author wakaba;	state dead;
branches;
next	1.1;

1.1
date	2003.06.28.10.15.05;	author make;	state Exp;
branches;
next	;


desc
@@


1.2
log
@semi-auto committed
@
text
@#?SuikaWiki/0.9
- Subject: 場面依存 view 定義
- Priority: normal
- Status: open
- Category: WikiView
- Creation-Date: 2003-06-07T00:01:48+00:00

[1] 今実装されている、 WikiName が [SAMP(wiki)[2003-03-01]] ならカレンダーを出力、のような機能を汎用的に簡単に定義できる仕組みがあるといいです。

あるいは [SAMP(wiki)[[VAR[NS]]//RecentChanges]] 
でその名前空間の [[RecentChanges]] が出てくるようなのも。

廃止された組込みページの仕組みの復活にはならないように (極度に hardcoding されたものにはならないように) 柔軟なものにしたいのですが、何かいい案はないですか?

[2] 新しい整形規則 (プラグイン・モジュール 
[CODE(wiki)[WikiView]] (新設) 辺りで定義。)
を作るのと [CODE(perl)[SuikaWiki::View]]
を修正して、 page feature 依存 view mode (仮称)
というのを実現することにします。

とりあえず [[SuikaWiki/0.9]] 形式の magic line parameter
に、 [SAMP(wiki)[feature="[VAR[featurename]]"]]
というのを追加します。この引数はその WikiPage
及びその WikiPage 名と同じ名前空間以下で (上書きされない限り)
有効とします。

一方、任意のプラグイン・モジュールは 
[CODE(perl)[SuikaWiki::View]] が新たに提供する界面を使って、
feature (新設 = 前述) と mode (既存)
に依存する view 定義断片を登録します。

[WEAK[登録は無駄が多い (実際にはどれか1つかそこらしか使わないんだから。) から、登録じゃなくてプラグインの名前空間を走査して云々、と思ったけど、結局大差なさそうだよなあ。後者の方が (既存の仕組みがない分) 面倒だし。]]

最初に述べた新しい整形規則を既存の view 定義の中に既存の方法で貼っときます。
で、登録された view 定義断片で条件に合致するものがあれば、
それを使います。なければ、既定の定義断片 (既存の、
新整形規則と置換えた部分) を使います。

どうでしょ? 名前空間無しの [[2003-06]] 
みたいな WikiPage 群にはこの方法は適用できませんが、
それは仕様ということで:)@


1.1
log
@auto-commited
@
text
@@

