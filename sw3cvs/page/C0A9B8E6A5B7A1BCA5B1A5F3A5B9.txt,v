head	1.6;
access;
symbols
	suikawiki3-final:1.6
	before-db-leaffile:1.4
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.3;
locks; strict;
comment	@# @;


1.6
date	2006.02.03.02.17.36;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.27.02.11.10;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.13.02.01.22;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.08.02.03.44;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.06.12.26.38;	author make;	state Exp;
branches;
next	1.1;

1.1
date	2002.09.22.06.24.15;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.6
log
@auto-committed
@
text
@[4]
>
:制御シーケンス (control sequence):
制御機能 [CODE(char)[[[CONTROL SEQUENCE INTRODUCER]]]] ([CODE(char)[[[CSI]]]], [CODE(char)[制御シーケンス開始]])
から始まるビット組合せの列であって、
[[パラメタ]]をもつか又はもたない制御機能の符号化表現のために使う。
([[JIS X 0211]]‐1994 4.2.24)

[3]
>
:制御シーケンス (control sequence):
[[制御機能]] [CODE(charname)@@en[[[CONTROL SEQUENCE INTRODUCER]]]]
([CODE(charname)@@en[[[CSI]]]], 
[CODE(jcharname)[[[制御シーケンス開始]]]])
から始まる一つ以上の[[ビット組合せ]]であって、
[[制御機能]]の[[符号化表現]]のために使う。
[SRC[[[JIS X 0201]]:1997 3.5]]


具体的には [[ISO/IEC6429]] / [[JISX0211]] で定義されてます。

ISO/IEC 6429:1991 5.4 を元に [[ABNF]] で書くと、大まかな構造はこんなんです。
-control-sequence = CSI [P] *I F
-CSI = ESC %x5B / %x9B  ;; ESC Fe / [[CR]] ([[符号]]の構造・[[告知]]による)
-P = std-P / private-P ;; Parameter byte(s)
-std-P = %x30-3B *( %x30-3F )
-pvt-P = %x3C-3F *( %x30-3F )
-I = %x20-2F  ;; Intermediate byte
-F = std-F / private-F  ;; Final byte
-std-F = %x40-6F
-private-F = %x70-7E

- [2] [WEAK[2004-01-05 03:55:03 +00:00]] ''[[SPCU]]'': 
[[#comment]]

*パラメーター・バイト
-P = std-P / pvt-P
-std-P = sub-string *(separator sub-string)
-separator = %x3B
-sub-string = *( DIGIT / digit-separator )
-DIGIT = %x30-39
-digit-separator = %x3A  ;; 小数点などに使用

sub-string の先導 *"0" は無視可能。 ("0123" == "123", "000" == "0")
sub-string は空 (empty) になり得る。最後の sub-string が空であるのは、その直前の
separator が無いのと同じ意味。 ("1;1;" == "1;1")

[[#comment]]

*7ビット・8ビット変換のための例外的解釈

冒頭の ABNF は、こんな風に修正しないといけません。

-control-sequence = CSI *(s P) *(s I) s F
-s = %x0E / %x0F  ;; SHIFT OUT / SHIFT IN
-P = %x30-3F / %xB0-BF
-I = %x20-2F / %xA0-AF
-F = %x40-7E / %xC0-FE

詳しくは[[7ビット符号と8ビット符号]]を参照。

*SGML での定義

[5]
>
:(137) [DFN[制御シーケンス]] ([DFN@@en[control sequence]]):
それ以降の[[文字列]]の[[解釈]]、[[表現]]又はその他の[[処理]]を[[制御]]する[[機能制御文字]]で始まる[[文字]]の[[並び]]。
- 例 [[エスケープシーケンス]]

;; 出典: [[JIS X 4151]]‐1992 3.

[1] [[SGML]]では、>>5と定義しています。[[符号化文字集合]]規格で言う[[制御シーケンス]]
([CODE(char)[CSI]] で始まる列) のほかに、
例示にあるように[[エスケープ・シーケンス]]も含みます。
(ほかに [CODE(char)[[[SS2]]]] 
などの[[制御文字]]も含むのかもしれません。 SGML
の[[文字集合]]は ISO の体系に限りませんから、[[漢字イン]]・
[[漢字アウト]]なども含まれると思われます。)

[[#comment]]

*メモ@


1.5
log
@auto-committed
@
text
@d64 5
a68 2
[1] [[SGML]] ([[JISX4151]]‐1992 用語定義 (137)) では、
>それ以降の文字列の解釈、表現又はその他の処理を制御する[[機能制御文字]]で始まる[[文字]]の並び。例 [[エスケープシーケンス]]
d70 3
a72 1
と定義しています。[[符号化文字集合]]規格で言う制御シーケンス
@


1.4
log
@auto-committed
@
text
@d1 1
a1 7
#?SuikaWiki/0.9 page-icon="字β"
>[[制御機能]] [CODE(char)[[[CSI]]]] 
([CODE(char)[制御シーケンス開始]]) 
から始まる一つ以上の[[ビット組合せ]]であって、
[[制御機能]]の[[符号化表現]]のために使う。 control sequence。
([[JISX0201]]:1997 3.5)

d8 11
@


1.3
log
@auto-committed
@
text
@d8 3
a10 1
>制御機能 [CODE(char)[CSI]] ([CODE(char)[制御シーケンス開始]])
d12 2
a13 2
[[パラメタ]]をもつかまたはもたない制御機能の符号化表現のために使う。
([[JISX0211]]‐1994 4.2.24)
d28 1
a28 1
- [2] [WEAK[2004-01-05 03:55:03 +00:00]] ''[[SPCU]]'': 
@


1.2
log
@auto-commited
@
text
@d26 1
@


1.1
log
@Updated.
@
text
@d1 5
a5 3
[[制御機能]] [[CSI]] (制御シーケンス開始)
から始まる一つ以上の[[ビット組合せ]]であって、[[制御機能]]
の[[符号化表現]]のために使う。 control sequence。
d8 2
a9 1
制御機能 CSI (制御シーケンス開始) から始まるビット組合せの列であって、
d11 1
a11 1
([[JISX0211]]-1994 4.2.24)
d13 1
a13 1
[[ISO/IEC6429]] / [[JISX0211]] で定義されてます。
d16 11
a26 9
=control-sequence = CSI [P] *I F
=CSI = ESC %x5B / %x9B  ;; ESC Fe / [[CR]] ([[符号]]の構造・[[告知]]による)
=P = std-P / private-P ;; Parameter byte(s)
=std-P = %x30-3B *( %x30-3F )
=pvt-P = %x3C-3F *( %x30-3F )
=I = %x20-2F  ;; Intermediate byte
=F = std-F / private-F  ;; Final byte
=std-F = %x40-6F
=private-F = %x70-7E
d29 6
a34 6
=P = std-P / pvt-P
=std-P = sub-string *(separator sub-string)
=separator = %x3B
=sub-string = *( DIGIT / digit-separator )
=DIGIT = %x30-39
=digit-separator = %x3A  ;; 小数点などに使用
d40 2
d46 5
a50 5
=control-sequence = CSI *(s P) *(s I) s F
=s = %x0E / %x0F  ;; SHIFT OUT / SHIFT IN
=P = %x30-3F / %xB0-BF
=I = %x20-2F / %xA0-AF
=F = %x40-7E / %xC0-FE
d53 17
@

