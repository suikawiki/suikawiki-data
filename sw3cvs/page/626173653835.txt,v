head	1.3;
access;
symbols
	suikawiki3-final:1.3
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.2
	before-fork-suikawiki3:1.2
	after-restore-20040122:1.2;
locks; strict;
comment	@# @;


1.3
date	2004.03.31.02.00.54;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.28.10.14.28;	author make;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.17.13.24.33;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@#?SuikaWiki/0.9

[3] 早い話が、[[ビット列]] (或いは[[オクテット列]])
の85[[進数]]表現です。普通 [[7ビット]]の [[ASCII]]
[[印字可能文字]]の範囲の[[文字集合]]を使います。
任意のビット列を [[ASCII文字]]に[[符号化]] ([[転写]])
することで、大抵の計算機網を非破壊的に通過できます。

このような[[転送符号化]]としては
[[Base64]] や [[uuencode]] のような64進数系が
(8ビット単位のデータをより効率よく変形できるので)
よく使われていますが、 PostScript
のような比較的 major な base 85 の応用もあるにはあります。


* PostScript

[5] [[PostScript]] level 2 ではバイナリ・データの埋め込みに
base85 が使われています。

[[#comment]]


* boo

[6] [[転送符号化]]の一種である boo という形式は base85
を使っているそうです。
<http://www.simtel.net/pub/pd/43212.html>


* IPv6 address の base85 表記

[[RFC1924]] ([[JokeRFC]]) は、 [[IPv6]] の長いアドレス表記を
皮肉って、 85 進数で表記することを提案しています。
- [1] 2002-10-17 (木) 20:39 ''[[名無しさん]]'': 数字は 0-9A-Za-z!#$%&()*+-;<=>?@@^_`{|}~
- [2] [[CPAN]] にある [[Math::Base85]]
<http://search.cpan.org/author/TMONROE/Math-Base85-0.2/>
はこの実装です。
[[#comment]]


* XML Base-85

draft-kwiatkowski-base85-for-xml という [[Internet-Draft]]
<urn:ietf:id:draft-kwiatkowski-base85-for-xml-00> 
『A Base-85 Encoding Suitable for [[XML]]』は、その題の通り
base85 を XML で使おうと言っています。 ([[Base64]] は XML
で使うのには無駄が多いと。)

数字は
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy!#$()*+,-./:;=?@@^`{|}~z_
です。更に、この I-D は余ったビットを使って追加機能を
入れることを提案しています。


[7]
>>0 そういう余計な追加機能を入れるのはしばしば便利ではあるのだけど、実装が面倒になるんだな。ほんのわずかな面倒さかもしれないけど、それが命取りになって、まともに実装されなかったり、全然実装されなかったりする。案の定この I-D もお陀仏か。
([[名無しさん]] [sage])

[[#comment]]


* メモ@


1.2
log
@auto-commited
@
text
@d1 63
a63 52
#?SuikaWiki/0.9
[3] 早い話が、[[ビット列]] (或いは[[オクテット列]])
の85[[進数]]表現です。普通 [[7ビット]]の [[ASCII]]
[[印字可能文字]]の範囲の[[文字集合]]を使います。
任意のビット列を [[ASCII文字]]に[[符号化]] ([[転写]])
することで、大抵の計算機網を非破壊的に通過できます。

このような[[転送符号化]]としては
[[Base64]] や [[uuencode]] のような64進数系が
(8ビット単位のデータをより効率よく変形できるので)
よく使われていますが、 PostScript
のような比較的 major な base 85 の応用もあるにはあります。

*PostScript

[5] [[PostScript]] level 2 ではバイナリ・データの埋め込みに
base85 が使われています。

[[#comment]]

*boo

[6] [[転送符号化]]の一種である boo という形式は base85
を使っているそうです。
<http://www.simtel.net/pub/pd/43212.html>

*IPv6 address の base85 表記

[[RFC1924]] ([[JokeRFC]]) は、 [[IPv6]] の長いアドレス表記を
皮肉って、 85 進数で表記することを提案しています。
- [1] 2002-10-17 (木) 20:39 ''[[名無しさん]]'': 数字は 0-9A-Za-z!#$%&()*+-;<=>?@@^_`{|}~
- [2] [[CPAN]] にある [[Math::Base85]]
<http://search.cpan.org/author/TMONROE/Math-Base85-0.2/>
はこの実装です。
[[#comment]]

*XML Base-85

draft-kwiatkowski-base85-for-xml という [[Internet-Draft]]
<urn:ietf:id:draft-kwiatkowski-base85-for-xml-00> 
『A Base-85 Encoding Suitable for [[XML]]』は、その題の通り
base85 を XML で使おうと言っています。 ([[Base64]] は XML
で使うのには無駄が多いと。)

数字は
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy!#$()*+,-./:;=?@@^`{|}~z_
です。更に、この I-D は余ったビットを使って追加機能を
入れることを提案しています。

[[#comment]]

*メモ
@


1.1
log
@Updated.
@
text
@d2 11
d16 1
a16 1
[[PostScript]] level 2 ではバイナリ・データの埋め込みに
d19 2
d23 1
a23 1
[[転送符号化]]の一種である boo という形式は base85
d49 4
@

