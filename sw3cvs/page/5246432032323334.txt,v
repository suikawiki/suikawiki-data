head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2004.04.08.02.00.50;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@auto-committed
@
text
@ Network Working Group                                     D. Crocker, Ed. 
 Request for Comments: 2234                       Internet Mail Consortium
 Category: Standards Track                                      P. Overell
                                                       Demon Internet Ltd.
                                                             November 1997

*Augmented BNF for Syntax Specifications: ABNF
*構文記述用増補 BNF: ABNF

**Status of this Memo

   This document specifies an Internet standards track protocol for the
   Internet community, and requests discussion and suggestions for
   improvements.  Please refer to the current edition of the "Internet
   Official Protocol Standards" (STD 1) for the standardization state
   and status of this protocol.  Distribution of this memo is unlimited.

**Copyright Notice

   Copyright (C) The Internet Society (1997).  All Rights Reserved.

**TABLE OF CONTENTS

   1. INTRODUCTION ..................................................  2

   2. RULE DEFINITION ...............................................  2
   2.1 RULE NAMING ..................................................  2
   2.2 RULE FORM ....................................................  3
   2.3 TERMINAL VALUES ..............................................  3
   2.4 EXTERNAL ENCODINGS ...........................................  5

   3. OPERATORS .....................................................  5
   3.1 CONCATENATION    RULE1     RULE2 .............................  5
   3.2 ALTERNATIVES RULE1 / RULE2 ...................................  6
   3.3 INCREMENTAL ALTERNATIVES   RULE1 =/ RULE2 ....................  6
   3.4 VALUE RANGE ALTERNATIVES   %C##-## ...........................  7
   3.5 SEQUENCE GROUP (RULE1 RULE2) .................................  7
   3.6 VARIABLE REPETITION *RULE ....................................  8
   3.7 SPECIFIC REPETITION NRULE ....................................  8
   3.8 OPTIONAL SEQUENCE [RULE] .....................................  8
   3.9 ; COMMENT ....................................................  8
   3.10 OPERATOR PRECEDENCE .........................................  9

   4. ABNF DEFINITION OF ABNF .......................................  9

   5. SECURITY CONSIDERATIONS ....................................... 10

   6. APPENDIX A - CORE ............................................. 11
   6.1 CORE RULES ................................................... 11
   6.2 COMMON ENCODING .............................................. 12

   7. ACKNOWLEDGMENTS ............................................... 12

   8. REFERENCES .................................................... 13

   9. CONTACT ....................................................... 13

   10. FULL COPYRIGHT STATEMENT ..................................... 14

*1.   INTRODUCTION

   Internet technical specifications often need to define a format
   syntax and are free to employ whatever notation their authors deem
   useful.  Over the years, a modified version of Backus-Naur Form
   (BNF), called Augmented BNF (ABNF), has been popular among many
   Internet specifications.  It balances compactness and simplicity,
   with reasonable representational power.  In the early days of the
   Arpanet, each specification contained its own definition of ABNF.
   This included the email specifications, RFC733 and then RFC822 which
   have come to be the common citations for defining ABNF.  The current
   document separates out that definition, to permit selective
   reference.  Predictably, it also provides some modifications and
   enhancements.

Internet 技術仕様書は、しばしば書式構文を定義する必要があり、
著者が便利と考えるどんな記法でも自由に使うことができます。
数年来、 Backus-Naur 形式 (BNF) の修正版、人呼んで増補 (Augmented) BNF (ABNF)
が多くの Internet 仕様書でよく使われるようになっています。
これは簡潔性と単純性を、十分な表現力と共に両立させています。
Arpanet の早い時期には、各仕様書がそれぞれ ABNF を定義していました。
これには、 ABNF の定義として広く参照されるようになった、電子メイル仕様の RFC 733 
や RFC 822 も含みます。この文書はこの定義を分離することにより、
選択の参照文献とすることが出来ます。お察しの通り、幾分の修正と拡張をも施しています。

   The differences between standard BNF and ABNF involve naming rules,
   repetition, alternatives, order-independence, and value ranges.
   Appendix A (Core) supplies rule definitions and encoding for a core
   lexical analyzer of the type common to several Internet
   specifications.  It is provided as a convenience and is otherwise
   separate from the meta language defined in the body of this document,
   and separate from its formal status.

標準 BNF と ABNF の違いは、命名規則, 繰り返し, 選択, 順序独立, 値範囲などです。
付属書 A (中核) は幾つもの Internet 仕様で典型的に共通な中核単語分析器の
規則定義と符号化を載せています。これは便宜上提供するもので、
この文書の本文で定義するメタ言語定義とは別のもので、
その正式な状態とは分離されたものです。

*2.   RULE DEFINITION 規則定義

**2.1  Rule Naming 命名規則

   The name of a rule is simply the name itself; that is, a sequence of
   characters, beginning with  an alphabetic character, and followed by
   a combination of alphabetics, digits and hyphens (dashes).

規則の名前は単に名前です。これは、文字の列で、字母文字 (訳注 ラテン基本字母)
で始まり、字母文字・数字・ハイフン (ダッシュ) の組み合わせが続くものです。

        NOTE:     Rule names are case-insensitive

注: 命名規則は大文字・小文字を区別しません。

   The names <rulename>, <Rulename>, <RULENAME> and <rUlENamE> all refer
   to the same rule.

名前 ・・・ はすべて同じ規則を指します。

   Unlike original BNF, angle brackets ("<", ">") are not  required.
   However, angle brackets may be used around a rule name whenever their
   presence will facilitate discerning the use of  a rule name.  This is
   typically restricted to rule name references in free-form prose, or
   to distinguish partial rules that combine into a string not separated
   by white space, such as shown in the discussion about repetition,
   below.

元の BNF とは違って、角括弧 ・・・ は必要ありません。しかし、角括弧があることにより
規則名として使用されていることが認識しやすくなる場合においては、規則名を
角括弧で囲んでも構いません。これは典型的には、自由型散文による規則名参照、
または空白間隔で区切られておらずくっついている文字列で各規則を区別する,
下記の繰り返しについての話で示すようなものでの使用に限られます。

**2.2  Rule Form 規則系

   A rule is defined by the following sequence:

規則は次の列により定義されます。

        name =  elements crlf

   where <name> is the name of the rule, <elements> is one or more rule
   names or terminal specifications and <crlf> is the end-of- line
   indicator, carriage return followed by line feed.  The equal sign
   separates the name from the definition of the rule.  The elements
   form a sequence of one or more rule names and/or value definitions,
   combined according to the various operators, defined in this
   document, such as alternative and repetition.

<name> は規則の名前で、 <element> は一つ以上の規則名か終端詳説で、
<crlf> は行末指示子で、復帰の次に改行が続くものです。
elements は1つ以上の規則名およびあるいは値定義を、
この文書で定義する選択や繰り返しのような種々の演算子で組み合わせて形成します。

   For visual ease, rule definitions are left aligned.  When a rule
   requires multiple lines, the continuation lines are indented.  The
   left alignment and indentation are relative to the first lines of the
   ABNF rules and need not match the left margin of the document.

見た感じが楽であるよう、規則定義は左揃えにします、規則が複数行に渡る時は、
継続行は字下げします。左揃えと字下げは ABNF 規則の最初の行との相対的なもので、
文書の左余白にあわせる必要はありません。

**2.3  Terminal Values (終端値)

   Rules resolve into a string of terminal values, sometimes called
   characters.  In ABNF a character is merely a non-negative integer.
   In certain contexts a specific mapping (encoding) of values into a
   character set (such as ASCII) will be specified.

規則は終端値の列、時々文字と呼ばれるものとして解決されます。
ABNF では文字は単に負でない整数です。特定の文脈では値の文字集合 (ASCII とか) 
への対応 (符号化方式) が定義されます。

   Terminals are specified by one or more numeric characters with the
   base interpretation of those characters indicated explicitly.  The
   following bases are currently defined:

終端は、何進数なのかを明白な説明と1つ以上の数値文字で指定します。
次に挙げる進数が現在定義されています。

        b           =  binary

        d           =  decimal

        x           =  hexadecimal

-b = 二進数
-d = 十進数
-x = 十六進数

   Hence:

ですから、

        CR          =  %d13

        CR          =  %x0D

   respectively specify the decimal and hexadecimal representation of
   [US-ASCII] for carriage return.

はそれぞれ、 [US-ASCII] の復帰の10進と16進での指定になります。

   A concatenated string of such values is specified compactly, using a
   period (".") to indicate separation of characters within that value.
   Hence:

かような値の文字の連続は簡潔に、句点 (".") を値中で文字の区切りを示すために
使って指定します。

        CRLF        =  %d13.10

   ABNF permits specifying literal text string directly, enclosed in
   quotation-marks.  Hence:

ABNF では引用符で囲んで生文字列を直接指定することができます。
すなわち:

        command     =  "command string"

   Literal text strings are interpreted as a concatenated set of
   printable characters.

生文字列は印字可能文字の連続集合として解釈します。

        NOTE:     ABNF strings are case-insensitive and
                  the character set for these strings is us-ascii.

参考: ABNF 文字列は大文字・小文字を区別せず、文字列の文字集合は
us-ascii です。

   Hence:

よって、

        rulename = "abc"

   and:

と

        rulename = "aBc"

   will match "abc", "Abc", "aBc", "abC", "ABc", "aBC", "AbC" and "ABC".

は "abc", "Abc", "aBc", "abC", "ABc", "aBC", "AbC", "ABC" に一致します。

                To specify a rule which IS case SENSITIVE,
                   specify the characters individually.

大文字・小文字'''を区別する'''規則を指定するには、文字を個々に指定します。

   For example:

例えば:

        rulename    =  %d97 %d98 %d99

   or

とか

        rulename    =  %d97.98.99

   will match only the string which comprises only lowercased
   characters, abc.

は小文字の文字 abc と比較した時にのみ一致します。

**2.4  External Encodings (外部符号化)

   External representations of terminal value characters will vary
   according to constraints in the storage or transmission environment.
   Hence, the same ABNF-based grammar may have multiple external
   encodings, such as one for a 7-bit US-ASCII environment, another for
   a binary octet environment and still a different one when 16-bit
   Unicode is used.  Encoding details are beyond the scope of ABNF,
   although Appendix A (Core) provides definitions for a 7-bit US-ASCII
   environment as has been common to much of the Internet.

終端値文字の外部表現は貯蔵庫や転送環境の必要要件によって変化します。
ですから、同じ基 ABNF 文法は複数の外部符号化を持って構いません。
例えば一つは7ビット US-ASCII 環境の、もう一つはバイナリ・オクテット環境の、
それからまた別のは16ビット Unicode が使われている時のです。
符号化の詳細は ABNF の適用範囲外です。但し付属書 A (中核) には、
Internet の多くの環境で広く使われている7ビット US-ASCII 用の定義を
提供しています。

   By separating external encoding from the syntax, it is intended that
   alternate encoding environments can be used for the same syntax.

外部符号化を構文から分離することにより、代替符号化環境が同じ構文で
使われうることを意図しています。

*3.   OPERATORS 演算子

**3.1  Concatenation                                  Rule1 Rule2
**3.1 連結  規則1 規則2

   A rule can define a simple, ordered string of values -- i.e., a
   concatenation of contiguous characters -- by listing a sequence of
   rule names.  For example:

規則は単純に、値の文字の順序, すなわち隣接文字の連結は、
規則名の列の列挙により定義出来ます。

        foo         =  %x61           ; a

        bar         =  %x62           ; b

        mumble      =  foo bar foo

        So that the rule <mumble> matches the lowercase string "aba".

これで規則 <mumble> は小文字の文字列「aba」と一致します。

        LINEAR WHITE SPACE:  Concatenation is at the core of the ABNF
        parsing model.  A string of contiguous characters (values) is
        parsed according to the rules defined in ABNF.  For Internet
        specifications, there is some history of permitting linear white
        space (space and horizontal tab) to be freelyPand
        implicitlyPinterspersed around major constructs, such as
        delimiting special characters or atomic strings.

行空白間隔 (LINEAR WHITE SPACE): 連結は ABNF 解析モデルの中核をなしています。
隣接文字(値)の文字列は ABNF で定義された規則により解析されます。
Internet 仕様書には、行空白間隔 (間隔と水平タブ)を自由に、
そして暗黙のうちに区切り特殊文字や原子(atomic)文字列大構造の周囲に点在させることを
認めてきた歴史があります。 (訳注: 原文乱丁。 P -> (SP))


        NOTE:     This specification for ABNF does not
                  provide for implicit specification of linear white
                  space.

この ABNF の仕様は__&&linear white space&&__の暗黙の記述を提供しません。

   Any grammar which wishes to permit linear white space around
   delimiters or string segments must specify it explicitly.  It is
   often useful to provide for such white space in "core" rules that are
   then used variously among higher-level rules.  The "core" rules might
   be formed into a lexical analyzer or simply be part of the main
   ruleset.

区切子又は文字列部の周りで__&&linear white space&&__を認めたい文法は、
これを陽に指定しなければなりません。そのような__&&white space&&__を、
高位の規則で色々と使われる「核」規則で提供することはしばしば有用です。
「核」規則は__&&lexical analyzer&&__により形成されるかもしれませんし、
単に主規則集合の一部かもしれません。

**3.2  Alternatives                               Rule1 / Rule2
選択 規則1 / 規則2

>Elements separated by forward slash ("/") are alternatives.
Therefore,

順斜線 ([CODE(ABNF)["/"]]) を挟んだ要素は[DFN[選択]]です。
従って、

-       foo / bar

>will accept <foo> or <bar>.

は [CODE(ABNF)[<foo>]] 又は [CODE(ABNF)[<bar>]] を受け付けます。

        NOTE:     A quoted string containing alphabetic
                  characters is special form for specifying alternative
                  characters and is interpreted as a non-terminal
                  representing the set of combinatorial strings with the
                  contained characters, in the specified order but with
                  any mixture of upper and lower case..

アルファベット文字を含む引用文字列は文字の選択を指定する特殊形で、
その含む文字をその順序で、
任意の大文字・小文字の組合せで合成した文字列の集合を表現する非終端と解釈します。

[INS[
訳注: 原文終端の「..」は「.」の typo か。
]INS]

**3.3  Incremental Alternatives                    Rule1 =/ Rule2
追加選択 規則1 =/ 規則2

   It is sometimes convenient to specify a list of alternatives in
   fragments.  That is, an initial rule may match one or more
   alternatives, with later rule definitions adding to the set of
   alternatives.  This is particularly useful for otherwise- independent
   specifications which derive from the same parent rule set, such as
   often occurs with parameter lists.  ABNF permits this incremental
   definition through the construct:

選択の並びを断片の形で記述すると都合がいいことがあります。
つまり、最初の規則は1つ以上の選択に一致し得て、
後の規則定義が選択の集合を追加するというものです。
これは、同じ親規則集合から派生した本来的には独立の仕様、
例えば引数並びのような場合に特に有用です。 ABNF
は追加選択を次の構造で認めています。

        oldrule     =/ additional-alternatives

>So that the rule set

よって、規則の集合

        ruleset     =  alt1 / alt2

        ruleset     =/ alt3

        ruleset     =/ alt4 / alt5

> is the same as specifying

は

        ruleset     =  alt1 / alt2 / alt3 / alt4 / alt5

と指定するのと同じです。

**3.4  Value Range Alternatives                           %c##-##
値範囲選択

>A range of alternative numeric values can be specified compactly,
using dash ("-") to indicate the range of alternative values.  Hence:

数値選択範囲は、範囲の指定にダッシュ ([CODE(ABNF)["-"]]) 
を使うことで簡潔に指定できます。

        DIGIT       =  %x30-39

>is equivalent to:

は

        DIGIT       =  "0" / "1" / "2" / "3" / "4" / "5" / "6" /

                           "7" / "8" / "9"

と同等です。

   Concatenated numeric values and numeric value ranges can not be
   specified in the same string.  A numeric value may use the dotted
   notation for concatenation or it may use the dash notation to specify
   one value range.  Hence, to specify one printable character, between
   end of line sequences, the specification could be:

数値と数値範囲の連結は同じ文字列中で指定することは出来ません。
数値は連結の句点記法を使うことは出来ますし、
ダッシュ記法で1つの値の範囲を指定することも出来ます。
ですから、改行列の間の1つの印字可能文字の指定は、次のようになります。

        char-line = %x0D.0A %x20-7E %x0D.0A

**3.5  Sequence Group                             (Rule1 Rule2)
連続体集団

>Elements enclosed in parentheses are treated as a single element,
whose contents are STRICTLY ORDERED.   Thus,

括弧で囲まれた要素群は単一の要素として扱います。
その内容は'''厳密に順序付けられています'''。従って、

        elem (foo / bar) blat

>which matches (elem foo blat) or (elem bar blat).

は [CODE(ABNF)[(elem foo blat)]] 又は
[CODE(ABNF)[(elem bar blat)]] と一致します。

        elem foo / bar blat

>matches (elem foo) or (bar blat).

は [CODE(ABNF)[(elem foo)]] 又は [CODE(ABNF)[(bar blat)]] と一致します。

        NOTE:     It is strongly advised to use grouping
                  notation, rather than to rely on proper reading of
                  "bare" alternations, when alternatives consist of
                  multiple rule names or literals.

選択が複数の規則名又は__&&literal&&__で構成される時には、
「生」の選択を適切に読ませることを期待するよりも集団化記法を使うことを強く推奨します。

>Hence it is recommended that instead of the above form, the form:

従って、上記の形式の代わりに

        (elem foo) / (bar blat)

> be used.  It will avoid misinterpretation by casual readers.

を使うことを推奨します。こうすれば斜め読みで誤解してしまうのを防ぐことが出来ます。

>The sequence group notation is also used within free text to set off
an element sequence from the prose.

連続体集団記法は自由文中で要素連続体と散文を区別するのにも使います。

[INS[
訳注: 例えば、前記の [CODE(ABNF)[(elem (foo / bar) blat)]] 
の例やこの文自身のように、自然言語文の中で引用的に ABNF (断片) を使うということです。
]INS]

**3.6  Variable Repetition                                *Rule
可変繰返し

   The operator "*" preceding an element indicates repetition. The full
   form is:

        <a>*<b>element

   where <a> and <b> are optional decimal values, indicating at least
   <a> and at most <b> occurrences of element.

   Default values are 0 and infinity so that *<element> allows any
   number, including zero; 1*<element> requires at  least  one;
   3*3<element> allows exactly 3 and 1*2<element> allows one or two.

3.7  Specific Repetition                                  nRule

   A rule of the form:

        <n>element

   is equivalent to

        <n>*<n>element

   That is, exactly  <N>  occurrences  of <element>. Thus 2DIGIT is a
   2-digit number, and 3ALPHA is a string of three alphabetic
   characters.

3.8  Optional Sequence                                   [RULE]

   Square brackets enclose an optional element sequence:

        [foo bar]

   is equivalent to

        *1(foo bar).

3.9  ; Comment

   A semi-colon starts a comment that continues to the end of line.
   This is a simple way of including useful notes in parallel with the
   specifications.








Crocker & Overell           Standards Track                     [Page 8]
&#12;
RFC 2234             ABNF for Syntax Specifications        November 1997


3.10 Operator Precedence

   The various mechanisms described above have the following precedence,
   from highest (binding tightest) at the top, to lowest and loosest at
   the bottom:

        Strings, Names formation
        Comment
        Value range
        Repetition
        Grouping, Optional
        Concatenation
        Alternative

   Use of the alternative operator, freely mixed with concatenations can
   be confusing.

        Again, it is recommended that the grouping operator be used to
        make explicit concatenation groups.



- RFC 2234 はまだまだ続きます。。。
@
