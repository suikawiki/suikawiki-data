head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2003.10.03.02.02.09;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@auto-committed
@
text
@#?SuikaWiki/0.9
[1] [CODE(XSLTe)[[VAR[xslt:]]number]] 要素の
[CODE(XSLTa)[[[format]]]] 属性の値のうち、
字母文字の列のことを[DFN[書式字句]] (format token)
といいます。

書式字句は、数値 [CODE[1]] に当たる文字列を代表として数列を指定します。
<http://www.w3.org/TR/xslt#convert>

注: ここで、字母文字とは、 [[Unicode]] で
[[Nd]], [[Nl]], [[No]], [[Lu]], [[Ll]], [[Lt]], [[Lm]], [[Lo]] 
に分類される文字を指します。

[2] 
- 最後の文字が Unicode の文字特性データベースによれば数値
[CODE[1]] で、それ以前の文字が最後の文字より若い[[符号位置]]のものばかりであるならば、
最後の文字の属する数字体系を使った、
最低の長さがこの書式字句の長さである十進数表現を意味します。
-- 例えば、 [SAMP(XSLT)[1]] は [SAMP[1]], [SAMP[2]], ..., [SAMP[10]], [SAMP[11]], ... を、
[SAMP(XSLT)[01]] は [SAMP[01]], [SAMP[02]], ..., [SAMP[10]], [SAMP[11]], ... を意味します。
- 書式字句 [CODE(XSLT)[A]] は、
[SAMP[A]], [SAMP[B]], ..., [SAMP[Z]], [SAMP[AA]], [SAMP[AB]], ... を意味します。
- 書式字句 [SAMP[a]] は、
[SAMP[a]], [SAMP[b]], ..., [SAMP[z]], [SAMP[aa]], [SAMP[ab]], ... を意味します。
- 書式字句 [SAMP[I]] は、
[SAMP[I]], [SAMP[II]], [SAMP[III]], [SAMP[IV]], [SAMP[V]], ..., [SAMP[IX]], [SAMP[X]], ... (これ以上の数の表現は例示なし) を意味します。
- 書式字句 [SAMP[i]] は、
[SAMP[i]], [SAMP[ii]], [SAMP[iii]], [SAMP[iv]], [SAMP[v]], ..., [SAMP[ix]], [SAMP[x]], ... (これ以上の数の表現は例示なし) を意味します。
- これ以外の書式字句は、その字句で始まる数列を示します。
実装がその数列に対応していない時は、書式字句
[CODE(XSLT)[1]] を使わなければなりません。

[5] 仕様書にある例:
,書式字句    ,letter-value,意味
,U+30A2 (ア) ,            ,片仮名 (ア, イ, ...)
,U+30A4 (イ) ,            ,片仮名 (イ, ロ, ...)
,U+0E51      ,            ,タイ数字
,U+05D0      ,traditional ,「伝統的」[[ヘブライ]]記数法
,U+10D0      ,traditional ,「伝統的」 [[Georgian]] 記数法
,U+03B1      ,traditional ,「古典的」ギリシャ記数法
,U+0430      ,traditional ,古スラブ記数法

[3] 字母列を使って表現する時
(>>2 の最初の数値の場合以外という意味??)
には、 [CODE(XPath)[[VAR[xslt:]][[format]]/@@[[lang]]]]
属性の値が影響します。
(この属性の既定値はシステムの言語設定 [WEAK[([[locale]] とか?)]] に依存します。)

XSLT の実装者は対応している言語を文書化するべきだと仕様書は言ってます。
更に仕様書は、数値表現体系は言語により様々だから、
[[英語]]の慣習だけを前提とした実装にするべきじゃないよと注意しています。

[4] [CODE(XPath)[[VAR[xslt:]]format/@@[[letter-value]]]]
属性を使って、言語内の数値表現体系を指定できます。
値は [CODE(XSLT)[alphabetic]] と [CODE(XSLT)[traditional]]
です。

既定値をはじめ、効果一切は実装依存です。
将来の版では規定するかもしれないし、
実装既定の追加属性で指定できてもいいと仕様書はしています。

多くの言語は2つの体系を持っていると仕様書は言ってますが、
だからといって本当にこんな変な属性値を規定しちゃう辺りがまた素敵。
素直に [[QName]] にでもしておけばいいものを。。。

という状態ですから、この属性はほぼ使い物になりません。
(それを言うなら書式字句自体そうですが。。。)

@
