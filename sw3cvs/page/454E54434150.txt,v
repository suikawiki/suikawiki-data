head	1.2;
access;
symbols
	suikawiki3-final:1.2
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2004.06.08.02.08.44;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.27.02.03.11;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.2
log
@auto-committed
@
text
@#?SuikaWiki/0.9
[4] [[容量]] [DFN[[CODE(SGML)[ENTCAP]]]] は、
定義した[[実体]]について計算したものです。

[[容量点]]は [CODE(SGML)[[[NAMELEN]]]] です。
[[規格参照容量集合]]では [CODE(SGML)[ENTCAP]] は
35000 です。

すなわち、規格参照容量集合を使う場合、 
[CODE(math)[[CODE(SGML)[ENTCAP]] := [CODE(SGML)[NAMELEN]] × (実体の個数) ≦ 35000]]
です。

[1] 
> [[省略時の実体]]及びその名前での[[参照]]が省略時の実体を表すことになった異なる[[実体名]]は、
容量 [CODE(SGML)[ENTCAP]] に対するよう容量点として計算する。
([[JIS X 4151]]‐1992 9.5.1.2 より)

[2] >>1 ってどういう意味でしょう? 
参照先が宣言されていない実体参照の名前も [CODE(SGML)[ENTCAP]] 
に加算します、というのが後者の意味なのはいいとして、
前者[Q[[[既定実体]]]] (JIS では[Q[省略時の実体]]) 
を計算するってことは、そのまま受取ると既定実体の分の長さを 
[CODE(SGML)[ENTCAP]] に数えるという意味になりますが。。。

[3] 
[DEL[
だけど既定実体は既に [CODE(SGML)[[[ENTCHCAP]]]] 
に加算されてるんだから、また加算してなんか意味があるのかなあ? と。
]DEL]

[4] >>2-3 よく読むと、 [CODE(SGML)[ENTCAP]]
で数えるのは実体の名前で、 [CODE(SGML)[ENTCHCAP]]
は実体の中身です。ですから、何もおかしな所はないのです。@


1.1
log
@auto-committed
@
text
@d1 33
a33 5
#?SuikaWiki/0.9

- [1] [[既定実体]]及び[[名前指定実体参照]]が既定実体を表す事になった[[実体]]の名前は、 [CODE(SGML)[ENTCAP]] の容量点として計算します。 ([[JISX4151]]‐1992 9.5.1.2)
- [2] >>1 ってどういう意味でしょう? 参照先が宣言されていない実体参照の名前も [CODE(SGML)[ENTCAP]] に加算します、というのが後者の意味なのはいいとして、前者「既定実体」 (JIS では「省略時の実体」) を計算するってことは、そのまま受取ると既定実体の中身の長さを [CODE(SGML)[ENTCAP]] に数えるという意味になりますが。。。
- [3] だけど既定実体は既に [CODE(SGML)[[[ENTCHCAP]]]] に加算されてるんだから、また加算してなんか意味があるのかなあ? と。
@

