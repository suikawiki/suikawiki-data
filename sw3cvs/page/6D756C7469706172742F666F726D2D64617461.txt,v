head	1.26;
access;
symbols
	suikawiki3-final:1.26
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.3;
locks; strict;
comment	@# @;
expand	@b@;


1.26
date	2007.10.18.02.39.29;	author wakaba;	state Exp;
branches;
next	1.25;

1.25
date	2007.09.23.02.35.36;	author wakaba;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.03.02.36.32;	author wakaba;	state Exp;
branches;
next	1.23;

1.23
date	2007.03.23.02.45.30;	author wakaba;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.03.02.13.49;	author wakaba;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.31.02.14.14;	author wakaba;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.08.02.16.38;	author wakaba;	state Exp;
branches;
next	1.19;

1.19
date	2006.07.03.02.12.59;	author wakaba;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.18.02.22.44;	author wakaba;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.08.02.13.07;	author wakaba;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.13.02.18.32;	author wakaba;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.03.02.15.31;	author wakaba;	state Exp;
branches;
next	1.14;

1.14
date	2005.07.31.02.07.20;	author wakaba;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.18.02.06.53;	author wakaba;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.13.02.07.42;	author wakaba;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.08.02.06.17;	author wakaba;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.18.02.05.39;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.23.02.09.59;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.18.02.07.32;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.13.02.08.04;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.18.02.08.19;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.18.02.08.25;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2004.10.08.02.05.39;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2003.10.31.02.03.35;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.27.02.03.11;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.13.02.02.15;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.26
log
@auto-committed
@
text
@
[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[up]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。

[64]
test
([[aaa]] [bbb] [WEAK[2005-04-08 02:48:54 +00:00]])

[65]
sdsds
([[ssss]] [WEAK[2005-05-15 10:41:07 +00:00]])

[67]
v
([[v]] [v] [WEAK[2006-01-31 09:06:13 +00:00]])

[68]
test
([[test]] [test] [WEAK[2006-05-12 02:29:43 +00:00]])

[70]
123
([[asdf]] [asdf] [WEAK[2006-06-16 10:09:42 +00:00]])

[71]
test
([[xxx]] [WEAK[2006-06-28 18:48:33 +00:00]])

[72]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:38 +00:00]])

[73]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:41 +00:00]])

[74]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:43 +00:00]])

[75]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:46 +00:00]])

[76]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:48 +00:00]])

[77]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:50 +00:00]])

[78]
Good design!
[url=http://mpawtymx.com/majo/dgvl.html]My homepage[/url] | [url=http://elaweihe.com/pdli/zvic.html]Cool site[/url]
([[Dixie]] [michelle@@fromru.net] [WEAK[2006-07-27 03:29:56 +00:00]])

[79]
Well done!
<a href="http://mpawtymx.com/majo/dgvl.html">My homepage</a> | <a href="http://pirtjatk.com/xobp/zqjh.html">Please visit</a>
([[Caleb]] [oscar@@yahoo.com] [WEAK[2006-07-27 03:30:08 +00:00]])

[80]
Great work!
http://mpawtymx.com/majo/dgvl.html | http://xcprshuy.com/ourg/fysx.html
([[Steven]] [john@@fromru.net] [WEAK[2006-07-27 03:30:16 +00:00]])

[81]
[PRE[
 Hi! Nice site! http://phentermine.webblogg.se/  <a href = http://soma.webblogg.se/ > Buy Soma </a>  [url = http://adipex.webblogg.se/ ] Buy Adipex [/url]    
([[Disney Cruise]] [zheka@@testsite.com] [WEAK[2007-03-21 23:53:47 +00:00]])
]PRE]

[82]
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]   http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[83]
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]   http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[84]
Not bad man! Look what i founf hier!!!!!
http://bed-bath-and-beyond-ivan.blogspot.com/ [url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]   <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[85]
Not bad man! Look what i founf hier!!!!!
http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  [url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]   
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[86]
<a href=http://freewebs.com/buy-levitrarx/generic-levitra.html>levitra</a>
<a href="http://freewebs.com/buy-levitrarx/generic-levitra.html">levitra</a>
<a href='http://freewebs.com/buy-levitrarx/generic-levitra.html'>levitra</a>
[URL=http://freewebs.com/buy-levitrarx/generic-levitra.html]levitra[/URL]
http://freewebs.com/buy-levitrarx/generic-levitra.html
([[Wendy]] [bdfv@@yahoo.com])


[87]
 Hi! Nice site! http://mlmlead.hostrocket.com/  <a href = http://franchisebiz.hostrocket.com/ > Franchise </a>  [url = http://homebasedbusiness.hostrocket.com/ ] Home Based Business [/url]    
([[Leather Sofa]] [zheka@@testsite.com] [WEAK[2007-10-16 18:57:22 +00:00]])


[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[69]
d
([[f]] [g] [WEAK[2006-06-05 03:37:00 +00:00]])

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[66]
あ
い
う
え
お

(326 [あああ] [WEAK[2005-07-27 09:32:06 +00:00]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
''''''
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
''''''
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
''''''
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
''''''
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


* メモ@


1.25
log
@auto-committed
@
text
@a104 1

d106 4
a109 4
<a href=http://freewebs.com/buy-levitrarx/generic-levitra.html>levitra</a>
<a href="http://freewebs.com/buy-levitrarx/generic-levitra.html">levitra</a>
<a href='http://freewebs.com/buy-levitrarx/generic-levitra.html'>levitra</a>
[URL=http://freewebs.com/buy-levitrarx/generic-levitra.html]levitra[/URL]
d112 5
@


1.24
log
@auto-committed
@
text
@a98 1

d100 2
a101 2
Not bad man! Look what i founf hier!!!!!
http://bed-bath-and-beyond-ivan.blogspot.com/ <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  [url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url]   
d104 9
@


1.23
log
@auto-committed
@
text
@a74 1

d76 1
d79 26
@


1.22
log
@auto-committed
@
text
@d1 684
a684 679
[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[up]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。

[64]
test
([[aaa]] [bbb] [WEAK[2005-04-08 02:48:54 +00:00]])

[65]
sdsds
([[ssss]] [WEAK[2005-05-15 10:41:07 +00:00]])

[67]
v
([[v]] [v] [WEAK[2006-01-31 09:06:13 +00:00]])

[68]
test
([[test]] [test] [WEAK[2006-05-12 02:29:43 +00:00]])

[70]
123
([[asdf]] [asdf] [WEAK[2006-06-16 10:09:42 +00:00]])

[71]
test
([[xxx]] [WEAK[2006-06-28 18:48:33 +00:00]])

[72]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:38 +00:00]])

[73]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:41 +00:00]])

[74]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:43 +00:00]])

[75]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:46 +00:00]])

[76]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:48 +00:00]])

[77]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:50 +00:00]])

[78]
Good design!
[url=http://mpawtymx.com/majo/dgvl.html]My homepage[/url] | [url=http://elaweihe.com/pdli/zvic.html]Cool site[/url]
([[Dixie]] [michelle@@fromru.net] [WEAK[2006-07-27 03:29:56 +00:00]])

[79]
Well done!
<a href="http://mpawtymx.com/majo/dgvl.html">My homepage</a> | <a href="http://pirtjatk.com/xobp/zqjh.html">Please visit</a>
([[Caleb]] [oscar@@yahoo.com] [WEAK[2006-07-27 03:30:08 +00:00]])


[80]
Great work!
http://mpawtymx.com/majo/dgvl.html | http://xcprshuy.com/ourg/fysx.html
([[Steven]] [john@@fromru.net] [WEAK[2006-07-27 03:30:16 +00:00]])


[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[69]
d
([[f]] [g] [WEAK[2006-06-05 03:37:00 +00:00]])

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[66]
あ
い
う
え
お

(326 [あああ] [WEAK[2005-07-27 09:32:06 +00:00]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
''''''
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
''''''
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
''''''
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
''''''
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


@


1.21
log
@auto-committed
@
text
@d1 70
a70 71

[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。

[64]
test
([[aaa]] [bbb] [WEAK[2005-04-08 02:48:54 +00:00]])

[65]
sdsds
([[ssss]] [WEAK[2005-05-15 10:41:07 +00:00]])

[67]
v
([[v]] [v] [WEAK[2006-01-31 09:06:13 +00:00]])

[68]
test
([[test]] [test] [WEAK[2006-05-12 02:29:43 +00:00]])

[70]
123
([[asdf]] [asdf] [WEAK[2006-06-16 10:09:42 +00:00]])

[71]
test
([[xxx]] [WEAK[2006-06-28 18:48:33 +00:00]])

[72]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:38 +00:00]])

[73]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:41 +00:00]])

[74]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:43 +00:00]])

[75]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:46 +00:00]])

[76]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:48 +00:00]])

[77]
fsdfds
([[fsadf]] [fdfas] [WEAK[2006-07-07 07:46:50 +00:00]])

[78]
Good design!
[url=http://mpawtymx.com/majo/dgvl.html]My homepage[/url] | [url=http://elaweihe.com/pdli/zvic.html]Cool site[/url]
([[Dixie]] [michelle@@fromru.net] [WEAK[2006-07-27 03:29:56 +00:00]])

[79]
Well done!
<a href="http://mpawtymx.com/majo/dgvl.html">My homepage</a> | <a href="http://pirtjatk.com/xobp/zqjh.html">Please visit</a>
([[Caleb]] [oscar@@yahoo.com] [WEAK[2006-07-27 03:30:08 +00:00]])


[80]
d72 608
a679 608
http://mpawtymx.com/majo/dgvl.html | http://xcprshuy.com/ourg/fysx.html
([[Steven]] [john@@fromru.net] [WEAK[2006-07-27 03:30:16 +00:00]])


[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[69]
d
([[f]] [g] [WEAK[2006-06-05 03:37:00 +00:00]])

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[66]
あ
い
う
え
お

(326 [あああ] [WEAK[2005-07-27 09:32:06 +00:00]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
''''''
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
''''''
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
''''''
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
''''''
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


@


1.20
log
@auto-committed
@
text
@a55 1

d59 16
@


1.19
log
@auto-committed
@
text
@a31 1

d35 25
@


1.18
log
@auto-committed
@
text
@a27 1

d31 5
@


1.17
log
@auto-committed
@
text
@d28 6
a83 1

a86 1

@


1.16
log
@auto-committed
@
text
@a23 1

a27 1

d77 6
@


1.15
log
@auto-committed
@
text
@a19 1

d23 5
@


1.14
log
@auto-committed
@
text
@d20 6
a155 1

d157 5
a161 5
あ
い
う
え
お
a163 1

@


1.13
log
@auto-committed
@
text
@a1 1

a15 1

a19 1

d149 11
@


1.12
log
@auto-committed
@
text
@a12 1

d16 5
@


1.11
log
@auto-committed
@
text
@d1 609
a609 604
[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。



[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。


[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
''''''
--AaB03x
Content-Disposition: form-data; name="submit-name"
''''''
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
''''''
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
''''''
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
''''''
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
''''''
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
''''''
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


@


1.10
log
@auto-committed
@
text
@d1 604
a604 599


[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。

[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。


[64]
000
(0 [0] [WEAK[2005-03-16 21:43:23 +00:00]])


[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


@


1.9
log
@auto-committed
@
text
@d1 599
a599 601
[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。


[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[60]
[[MacIE]] 5.2 には [CODE(MIME)[[[boundary]]]] のところの改行の
[CODE(ABNF)[[[CR]]]] が一部欠落してしまう不具合があるそうです。

[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])

[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]

*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
Content-Disposition: form-data; name="submit-name"

Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain

[VAR[... contents of file1.txt ...]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
Content-Disposition: form-data; name="submit-name"

Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y

--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain

[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary

[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"

--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable

Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


* Q & A

[63] '''Q: HTML でファイルをアップロードするにはどうしたらいいですか? ファイル名しか取得できません...'''

A: ファイル名しか取得できないのは、
[CODE(MIME)[[[application/x-www-form-urlencoded]]]]
を使用しているからの可能性が高いと考えられます。
フォームの提出で [CODE(MIME)[[[multipart/form-data]]]]
を使うようにしましょう。

関連: >>61, [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]], [[提出]]

[61] '''Q: HTML によるフォームの提出でブラウザに [CODE(MIME)[multipart/form-data]] で送ってもらうにはどうしたらいいですか?'''

A: [CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性を [CODE(MIME)[[[multipart/form-data]]]] と指定してください。

ついでに、 [CODE(HTMLa)[[[accept-charset]]]] 属性に希望する[[文字コード]]も指定しておきましょう。

[CODE(HTMLa)[[[method]]]] 属性を [CODE(HTML)[[[post]]]]
にしておくのを忘れないように。

関連: [CODE(HTMLe)[[[form]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[62] '''Q: CGI スクリプトで [CODE(MIME)[multipart/form-data]] と [CODE(MIME)[application/x-www-form-urlencoded]] を見分けるにはどうしたらいいですか?'''

A: [[CGI]] には [CODE(CGI)[[[CONTENT_TYPE]]]] という[[メタ変数]]
([[環境変数]]) があります。その値で判別できます。

[CODE(CGI)[CONTENT_TYPE]] の値の先頭の19文字が
[CODE(MIME)[multipart/form-data]] [WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[multipart/form-data]] が使われています。

[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が]]
[CODE(MIME)[application/x-www-form-urlencoded]] 
[WEAK[(大文字・小文字の区別なし)]]
で、その次の文字が存在しないか、[[空白]] ([[間隔]]、
[[タブ]]、[[改行]]) か、[[セミコロン]] ([CODE(MIME)[;]])
なら、 [CODE(MIME)[application/x-www-form-urlencoded]] が使われています。

それ以外なら、未知の何かが使われています。

関連: [CODE(MIME)[[[Content-Type]]]], [CODE(CGI)[[[CONTENT_TYPE]]]]

[[#comment]]


@


1.8
log
@auto-committed
@
text
@d11 1
a134 1

a141 1

a206 3
 


d497 1
d500 1
d505 2
a506 1
[VAR[... contents of file1.txt ...]]]
d513 1
d516 1
d521 1
d525 1
d531 1
d540 1
d545 1
d552 1
d588 1
a588 1
[CODE(CGI)[CONTENT_TYPE}] の値の先頭35文字が
d600 1
@


1.7
log
@auto-committed
@
text
@d1 135
a135 137


[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の[[媒体型]]のデータを扱うことができます。

[[#comment]]


* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
-- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
-- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
-- typo 修正
-- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
-- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[[#comment]]


* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5]]

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]

[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[53] ただし、 [[HTTP]] で [CODE(MIME)[[[multipart/form-data]]]]
を使う場合は、仕様が曖昧なためその中の本体部分で
[CODE(MIME)[Content-Transfer-Encoding]] を使用するべきではありません。
[CODE(HTTP)[[[Content-Encoding]]]] を本体部分に適用できるのかどうかも曖昧であり、
使わない方が良いです。
[WEAK[(対応している実装も少ないでしょう。)]] 
[CODE(HTTP)[[[Transfer-Encoding]]]] を本体部分に適用することはできません。

なお、これは [CODE(MIME)[multipart/form-data]] ''内''の各本体部分についてであり、
[CODE(MIME)[multipart/form-data]] 実体自体については >>54 をご覧下さい。

[[#comment]]


** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。


[60]
d139 455
a593 408
[CITE[MacのIEでのmultipart/form-dataデータ]] <http://kvasir.skirnir.net/software/software00009.ksd>
([[名無しさん]])


[[#comment]]


** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]


** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]


** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] 
を指定するべきです。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[[#comment]]

 


*** 複数ファイルの同時提出

[51] 1つのフォーム項目として複数のファイルを同時に提出する場合には、
[CODE(MIME)[[[multipart/mixed]]]] を使って1つの[[本体部分]]とします。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

ファイル名等はその [CODE(MIME)[multipart/mixed]]
内のそれぞれの[[本体部分]]の情報として付与します。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]


*** ファイル情報 (ファイル名など)

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[[#comment]]


** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、 [CODE(MIME)[[[message/external-body]]]] 
を使ってその[[指示子]]だけを送ることができます。
[SRC[RFC 2388 5.3]]

[52]
[CODE(MIME)[message/external-body]] の使い方は色々ありますが、
[CODE(MIME)[[[access-type]]]] [CODE(MIME)[[[uri]]]]
を使って遠隔ファイルの 
[[URI参照]]を送るのが現代的でよろしいのではないでしょうか。

[[#comment]]


* 他との関係


** HTML と [CODE(MIME)[multipart/form-data]]

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]


** 転送プロトコルと [CODE(MIME)[multipart/form-data]]

[54] [[MIME]] の規定によれば、 [CODE(MIME)[[[multipart/[VAR[*]]]]]]
のすべての[[実体]]の [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は [CODE(MIME)[[[7bit]]]], [CODE(MIME)[[[8bit]]]], [CODE(MIME)[[[binary]]]]
のいずれかでなければなりません。もちろん [CODE(MIME)[multipart/form-data]]
の実体にも適用されます。

注意: [CODE(MIME)[multipart/form-data]] 
の''中''の[[本体部分]]についての規定では''ありません''。
本体部分の [ABBR[CTE]] については >>53 を参照して下さい。

[55] [[HTTP]] では [CODE(MIME)[Content-Transfer-Encoding]]
を使用しません (常に [CODE(MIME)[binary]] 相当です) が、
[CODE(HTTP)[[[Content-Encoding]]]] と [CODE(HTTP)[[[Transfer-Encoding]]]]
があります。 [CODE(HTTP)[Transfer-Encoding]] は媒体型に依存しませんので、
[CODE(MIME)[multipart/form-data]] であろうがそうでなかろうが常に使用できます。
[CODE(HTTP)[Content-Encoding]] が使用できるのかどうかは微妙なところですが、
特別規定がないのですから、使用できるのでしょう。但し、
それに対応している実装 (クライアント・鯖) がどれだけあるのかは微妙なところです。

[56] [CODE(MIME)[[[Content-MD5]]]] による簡易的な整合性情報は、
MIME では [CODE(MIME)[multipart/[VAR[*]]]] に対して使用することが認められて''いません''が、
HTTP では認められています。 [CODE(MIME)[multipart/form-data]]
についても例外ではありません。

しかし、 [CODE(MIME)[multipart/form-data]] 全体の [[MD5]]
ハッシュを計算するよりは、面倒でも個々の本体部分で計算した方が良いでしょう。
もし HTTP で提出された [CODE(MIME)[multipart/form-data]] が途中で
MIME に変換されて [WEAK[(例えば電子メイルで)]] 
送られるとすると困ったことになります。

[[#comment]]


** その他

[[#comment]]


* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[57] 提出の途中での改竄を検出する簡易的な手段として
[CODE(MIME)[[[Content-MD5]]]] が使用できます (>>56)。
但し記述された [CODE(MIME)[Content-MD5]] 値自体が改竄されることもあり得ますから、
あくまで簡易的なものです。また、
実装している[[利用者エージェント]]は現時点で存在しないと思われます。

[58] 一般の MIME の実体の安全のための仕組みとして[[署名]]のための
[CODE(MIME)[[[multipart/signed]]]] や[[暗号化]]のための
[CODE(MIME)[[[multipart/encrypted]]]] が、
それを使った実際のシステムとして [[PGP/MIME]] や [[S/MIME]]
があります。しかし、現実に [CODE(MIME)[multipart/form-data]]
と組合せて使っている (使える) 例は聞いたことがありません。
[CODE(MIME)[multipart/form-data]] のどの部分を署名・暗号化するのか
(あるいは全体をするのか) や、フォームの提出の手続きの中でどのように処理するのかなどの詳細な標準化がなされないと
(または[[デファクト標準]]が登場しないと) 使用するのは難しいでしょう。

[59] 現実にフォームの提出の安全のために使用されているのは
[[TLS]] や [[SSL]] です。 [[HTTP]] に対応した利用者エージェントや鯖では大抵
TLS over HTTP ([[HTTPS]]) が利用できるので、
[[フォーム処理エージェント]]としては特別な処理が要らないのが普通です。
但し、 HTTP 以外の提出方法 (特に電子メイル)
にはこの方法は使えません。

[[#comment]]


* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]


* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]


** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[unknown-8bit]]]] とでも考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]


** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>51) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]


** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[[[Content-Type]]: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[[[Content-Disposition]]]] にも [CODE(MIME)[[[filename]]=""]] 
がつきます。 Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 頭欄がどうであれ、空の実体を送ってしまうと [WEAK[(一般の UA の場合に)]]
ファイル未選択状態と内容が空のファイルを提出した場合が区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]


* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

このフォームで、文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain
[VAR[... contents of file1.txt ...]]]
--AaB03x--
]PRE]

更に [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2, 改]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x
--AaB03x
Content-Disposition: form-data; name="submit-name"
Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain
[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary
[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"
--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain; charset=windows-1250
content-transfer-encoding: quoted-printable
Joe owes =80100.
--AaB03x--
]PRE]

[[#comment]]


@


1.6
log
@auto-committed
@
text
@d9 1
a9 1
([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) のために採用されましたが、
d11 1
a11 7
仕様上は任意の媒体型のデータを扱うことができます。


[51]
fff
([[名無しさん]] [WEAK[2005-01-15 07:26:13 +00:00]])

d75 1
a75 1
では規定されていません。 [SRC[RFC 2388 5.5&#65379;&#65379;]]
d103 11
d136 9
d204 2
a205 3
分からなければ [CODE(MIME)[[[application/octet-stream]]]] を指定するべきです。
複数のファイルが1つの項目で選択されて提出される場合には、
[CODE(MIME)[[[multipart/mixed]]]] が一つの本体部分に埋められます。
d208 25
a256 6
[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

d262 2
a263 2
[49] 遠隔ファイルを直接送らずに、
[CODE(MIME)[[[message/external-body]]]] を使ってその指示子だけを送ることができます。
d266 6
d277 3
d300 40
d364 23
d443 1
a443 1
[CODE(MIME)[charset=[[x-unknown]]]] と考えるしかなさそうです。問題は、
d455 2
a456 2
[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>#) のは、 [[UA]] で対応してるのはなさげ、
d472 3
a474 3
[CODE(MIME)[Content-Type: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[Content-Disposition]] にも [CODE(MIME)[filename=""]] がつきます。
Opera ではどちらもつかず、本当に空 
d478 2
a479 2
[38] 空の実体を送ってしまうと (一般の UA の場合に) 
ファイル未選択と内容が空のファイルが区別できなくなってしまいます。
d499 2
a500 2
文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2]]:
d513 1
a513 1
加えて [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2]]:
d540 1
a540 1
content-type: text/plain;charset=windows-1250
@


1.5
log
@auto-committed
@
text
@d1 445
a445 434
[11] [[媒体型]] [DFN[[CODE(MIME)[multipart/form-data]]]]
は、 [[HTML]] の[[フォーム]]の[[提出]]のために設計された書式です。
名前から分かる通り、 [[MIME]] の [CODE(MIME)[[[multipart/[VAR[*]]]]]]
の書式に基づいています。

元々は HTML のフォーム、特にファイルの[[うp]] 
([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) のために採用されましたが、
HTML 以外のフォームの提出にも使われています。
仕様上は任意の媒体型のデータを扱うことができます。

[[#comment]]

* 仕様書

[21] 仕様書:
- [[RFC 1867]]
- [[RFC 2388]] [CITE[Returning Values from Forms: multipart/form-data]]
- [[HTML 4]]
-- [CITE[multipart/form-data]]
<IW:HTML4:"interact/forms.html#didx-multipartform-data">
-- [CITE[A.1.3 Minor typographical errors that were corrected]]
<IW:HTML4:"appendix/changes.html#h-A.1.3">
-- HTML 4.01 正誤表 [CITE[10. content-disposition: attachment]]
<http://www.w3.org/MarkUp/html4-updates/errata#entry-10>

RFC 1867 と RFC 2388 と HTML 4 の [CODE(MIME)[multipart/form-data]]
の規定は文章を流用していて同じようなことが書いてありますが、
少しずつ違います。独立の仕様書になっている RFC 2388 が当然一番詳しくなっています。

[7] [[HTML 4]] の [CODE(MIME)[multipart/form-data]] への言及の変遷:
= 勧告以前の HTML 4 原案では、高々紹介程度で [[RFC 1867]] にほぼ丸投げ。
= HTML 4.0 勧告第1版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= HTML 4.0 勧告第2版: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
=- 勧告第1版と全く同内容
= HTML 4.01 勧告提案: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
=- RFC 1867 から [[RFC 2388]] に参照先を変更
= HTML 4.01 勧告: ''Forms in HTML documents'' 
<http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
=- typo 修正
=- 例中の [CODE(MIME)[Content-Disposition: attachment]]
を [CODE(MIME)[Content-Disposition: file]] に変更
= HTML 4.01 正誤表:
''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
=- 勧告での [CODE(MIME)[attachment]] から
[CODE(MIME)[file]] に再修正。しかも RFC 2388 に責任転嫁(藁

[22] [CODE(MIME)[multipart/form-data]] 内容は [[RFC 2045]]
で説明された[[多部分]] MIME データ列の規則に従います。
[CODE(MIME)[multipart/form-data]] の定義は [[IANAREG]]
から入手できます。 [SRC[HTML 4 17.13.4.2]]
と書いてありますけど、むしろ [[RFC 2046]] を読むべきでしょう。
また、後方互換性, 他の内容型との関係, 効率の問題その他については
[[RFC 1867]] [SRC[HTML 4.0 17.13.4.2]] ・ [[RFC 2388]] [SRC[HTML 4.01 17.13.4.2]]
を読むよう指示があります。
ちなみに、仕様書の発行順序は HTML 4.0 → RFC 2388 → HTML 4.01 です。

[[#comment]]

* 構文

[40] 基本的には、 [CODE(MIME)[[[multipart/mixed]]]] と同じ書式です。
[SRC[[[RFC 2046]], HTML 4 17.13.4.2, RFC 2388 3.]]

[23] 
フォームの各欄は、応用とフォームによって定義された順で、
それぞれ [CODE(MIME)[multipart/form-data]] の[[本体部分]]とします。
[SRC[RFC 2388 4.1]] 本体部分の順序は、 RFC 2388
では規定されていません。 [SRC[RFC 2388 5.5&#65379;&#65379;

[41]
HTML の場合、[CODE(MIME)[multipart/form-data]] の[[本体部分]]は、それぞれ、
[[成功]]制御子に対応します。順序は制御子の[[文書順]]とします。
[SRC[HTML 4 17.13.4.2]]

[24] 多部分境界 ([CODE(MIME)[[[boundary]]]]) はデータ中に現れてはなりません。
[SRC[HTML 4 17.13.4.2, RFC 2388 4.1]]


[26] ほかのすべての [CODE(MIME)[[[multipart/[VAR[*]]]]]] 型と同様、
各本体部分は省略可能な [CODE(MIME)[[[Content-Type]]]]
頭欄を持ちます。省略時の既定値は [CODE(MIME)[[[text/plain]]]] です。

媒体型が分かっている場合は適当に札付けし、分からない場合は
[CODE(MIME)[[[application/octet-stream]]]] とするべきです。
[SRC[RFC 2388 4.1]]
HTML [[UA]] は、 [CODE(MIME)[Content-Type]] 欄を
([CODE(MIME)[[[charset]]]] 引数を含めて) 供給するべきです。
[SRC[HTML 4 17.13.4.2]]

[27] 各本体部分は [ABBR[[[CTE]]][[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
を使ってもかまいません。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.3]]
その他 MIME の機構により暗号化・圧縮などをしても構いません。
それは [CODE(MIME)[multipart/form-data]] を生成する応用の機能です。
[SRC[RFC 2388 5.1]]

[[#comment]]

** 改行

[8] MIME の規定により、境界行や実体頭欄の末端の改行は [CODE(char)[[[CRLF]]]] 
でなければなりません。 [CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] 
だけではいけません。

[25] 他のすべての MIME 転送同様、改行は [CODE(char)[[[CRLF]]]] とします
[SRC[HTML 4 17.13.4.2]]。
と HTML 4 も言っています。 ([Q[転送]]とはどこからどこまでか、
曖昧であるのが問題ではありますが。)

[9] >>8 は大前提なんですが、
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ [CODE(char)[CR]]
だけとか [CODE(char)[LF]] だけとかで送ってくる糞
UA もあったりするんでしょうか?

多分 [[Mozilla]] とか [[Opera]]
とか [[IE]] とかの有名どころは大丈夫だと思うんですが。。。

[[#comment]]

** 欄名 (制御子名)

[28] 各欄は名前を持ちます。名前はフォーム内で固有です。
[SRC[RFC 2388 3.]] 欄名が同じ本体部分が複数あるときの取扱いは
RFC 2388 では規定されていません。 [SRC[RFC 2388 5.]]
応用により、例えば HTML では[[フォーム・データ集合]]に同じ名前の制御子名があれば、
複数の本体部分が同じ名前となることがあります。

各本体部分は、 [CODE(MIME)[[[Content-Disposition]]]]
を [CODE(MIME)[[[form-data]]]] とし、その [CODE(MIME)[[[name]]]]
引数に対応する制御子の欄名 ([[制御子名]]) を指定します
[SRC[HTML 4 17.13.4.2, RFC 2388 3.]]。

[29] 非 [[ASCII]] 文字を含むときには、
[[RFC 2045]] で説明されている方法で符号化して構いません
[SRC[HTML 4 17.13.4.2]]。と書いてはあるのですが、
[Q[構いません]]ではなくて何らかの方法で符号化しなければ'''なりません'''
(MIME 頭欄は ASCII と定義されています)。さて、 RFC 2045
の一体どこで [CODE(MIME)[Content-Disposition]] [CODE(MIME)[name]]
を符号化する方法が説明されているのでしょうか? されていません。
詳しくは [CODE(MIME)[[[name]]]] 引数の説明をご覧ください。

相当する部分は、 RFC 2388 では [[RFC 2047]] を参照しています
[SRC[RFC 2388 3., 5.4]]。 RFC 2047 と言うからには [CODE(ABNF)[[[encoded-word]]]]
を使うのでしょう。普通 [CODE(ABNF)[[[quoted-string]]]] でが
[CODE(ABNF)[encoded-word]] は使わない (使えない) ものですが、
明示的に 2047 を参照しているのですから [CODE(MIME)[name]]
引数では特別に使えるのでしょう。

[30]
例 [SRC[HTML 4 17.13.4.2]]
[PRE(MIME)[
Content-Disposition: form-data; name="mycontrol"
]PRE]

この例では、制御子名 [SAMP[mycontrol]] を表します。
この欄を含む本体部分の[[本体]]は、この名前の制御子の[[現在値]]
(またはファイル内容) になります。

[[#comment]]

** 本体

[31]
各本体部分の[[本体]]は、ファイル選択制御子 
([[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]]) ではファイルの内容、
それ以外では[[現在値]]になります。 
[WEAK[(という説明が HTML 4 仕様書ではきちんとなされていません。)]]

[[#comment]]

** ファイルの場合

[32] 本体にファイルの内容を入れる場合には、適当な[[媒体型]]か、
分からなければ [CODE(MIME)[[[application/octet-stream]]]] を指定するべきです。
複数のファイルが1つの項目で選択されて提出される場合には、
[CODE(MIME)[[[multipart/mixed]]]] が一つの本体部分に埋められます。
[SRC[HTML 4 17.13.4.2, RFC 2388 3., RFC 2388 4.2]]

[44] フォーム・ソフトウェアはファイル名やその他のファイルの属性情報をつけても構いません。
[SRC[RFC 2388 4.4]]

[33] HTML UA は提出する各ファイルにファイル名を供給するよう試みるべきです。
ファイル名は [CODE(MIME)[Content-Disposition]] 欄の
[CODE(MIME)[[[filename]]]] 引数で指定します。[SRC[HTML 4 17.13.4.2]]

UA 側システムのファイル名が [[US-ASCII]] でないときには、
ファイル名は近似するか、 RFC 2045 の方法で符号化しなければなりません。
[SRC[HTML 4 17.13.4.2]] と >>29 に続いてここでも [Q[RFC 2045の方法]]が出てきましたが、
こちらもやはり RFC 2045 に規定はありません。

RFC 2388 は、 RFC 2045 ではなく、 [[RFC 2231]] の方法を使っても良いとしています。
[SRC[RFC 2388 4.4]] この規定は RFC 2231 とは整合していますが、
[CODE(ABNF)[encoded-word]] を使うべしとする [CODE(MIME)[name]]
引数の規定 (>>29) とは矛盾しています。本当に使い分けろというのでしょうか。

[45]
提出するファイルは相互にファイル名で参照関係を持っているかもしれませんから、
ファイル名が保存されていると便利です。 [SRC[HTML 4 17.13.4.2, RFC 2388 4.4]]

ファイル名指定に関する様々な問題については、
[CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

[34] 提出ファイルが複数の時の [CODE(MIME)[multipart/mixed]] 内の本体部分では
[CODE(MIME)[Content-Disposition: file]] とするかのような記述が仕様書にあります
[SRC[HTML 4.01 17.13.4.2]] が、
[CODE(MIME)[attachment]] の誤りだそうです [SRC[HTML 4.01 正誤表 10.]]。
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりましたが、 HTML 4.01 で [Q[minor typo]] として修正されています [SRC[HTML 4.01 A.1.3]]。]]

[[#comment]]

** 遠隔ファイル指示子

[49] 遠隔ファイルを直接送らずに、
[CODE(MIME)[[[message/external-body]]]] を使ってその指示子だけを送ることができます。
[SRC[RFC 2388 5.3]]

[[#comment]]

* 他との関係

[6] HTML のフォームでは [CODE(MIME)[[[application/x-www-form-urlencoded]]]]
もよく使われていますが、任意のバイナリ・データや非 ASCII 
文字を効率よく確実に扱うことができないという問題があります。
バイナリ・データや非 ASCII 文字を含むフォームの提出では、
[CODE(MIME)[multipart/form-data]] を使うべきです [SRC[HTML 4 17.13.4.2]]。
ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
を使う時には、 [CODE(MIME)[multipart/form-data]] を
[CODE(HTMLe)[form]] の [CODE(HTMLa)[enctype]] で指定するべきです
[SRC[HTML 4 17.3, 17.13.4.2]]。

[35] HTML のフォームで [CODE(MIME)[multipart/form-data]] で提出させたい時は、
[CODE(HTMLe)[[[form]]]] 要素の [CODE(HTMLa)[[[enctype]]]]
属性に [CODE(MIME)[multipart/form-data]] と指定しておきます。

各本体部分の文字符号化方式の決定には、 [CODE(HTMLe)[form]]
要素の [CODE(HTMLa)[[[accept-charset]]]] 属性の指定を参照します。

[[#comment]]

* 安全性

[50] [CODE(MIME)[multipart/form-data]] 
を構成するプロトコル要素や[[フォーム]]の仕組み自体には、
様々な安全上の問題があることが知られています。

例えば、利用者の意図しない状態や利用者が十分な考慮を行えない状況で自動的・
半自動的にフォームを提出させると、
利用者の私的な情報や利用者の環境の安全に関わる情報が送信されてしまう虞があります。
このほかにも、フォームの提出という仕組みそのものに起因する問題が多く見つかっています。

また、ファイルを提出する際には [CODE(MIME)[filename]]
引数を使うことができますが、フォーム処理エージェント 
([CODE(MIME)[multipart/form-data]] を処理する側) 
が信頼して無防備に実際のファイル名等として使用すると、
既存の別のファイルやシステム・ファイルを上書きしたり、
その環境で扱えないファイル名のファイルが中途半端にできてしまったりする虞があります。
詳しくは [CODE(MIME)[[[filename]]]] 引数の説明をご覧ください。

このようなフォーム自体や [CODE(MIME)[multipart/form-data]]
が利用しているプロトコル要素に関する問題や、
特定の実装に依存した問題を除いては、 [CODE(MIME)[multipart/form-data]]
に関する安全上の問題は見つかっていません。

[[#comment]]

* 適合性

[10] HTML 4 UA は、 [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しなければなりません [SRC[HTML 4 17.13.4]]。

[[#comment]]

* 実装

[15] WinIE 3.02 用の file upload add-on は1997年の中ごろに出ました。

[36] 現代のほとんどの [[WWWブラウザ]]は [CODE(MIME)[multipart/form-data]]
によるフォームの提出を実装しています。

[37]
一方、 [[CGIスクリプト]]などの鯖側は酷い状況です。
多くの実装は相手にもしていません。 [[Perl]] なら [CODE(file)[[[CGI.pm]]]] 
などを使えば自動的に対応できますが、[WEAK[最近は増えてきたとはいえ]]モジュールを
CGI スクリプトで使うことは少なく、 [CODE(MIME)[application/x-www-form-urlencoded]]
にしか対応していません。ファイルのうpがしたくなったら 
(素直にモジュールを使えばいいのに) 見よう見まねで適当に対処しようとして、
結局特定ブラウザの特定の版でしか上手く動かないようなコードを書いてみたり。
[WEAK[(で、質問掲示板で暴れてみたり。)]] お前らちゃんと仕様書読んでくださいよ。

処理系で標準または標準に近いモジュール的なものが[[要求]]の解析をしてくれることが広く知られていて、
そのモジュール的なものの作者がちゃんと仕様を読んでコードを書くような人なら、
その処理系で書かれた処理はさほど深く考えなくても自動的に 
[CODE(MIME)[multipart/form-data]] を正しく処理できるはずです。
[WEAK[よく知りませんけど、 Java servelet とか PHP はその辺きちんとしてるのではないですか?]]

[[#comment]]

** 媒体型と charset

[1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] 
に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 
(ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)

[2] Opera は、 [CODE(MIME)[multipart/form-data]] そのものに存在しない 
[CODE(MIME)[charset]] 引数をつけてきます。
この charset 値は実際にはそれに含まれる本体部分の[[実体本体]]及び 
[CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 
引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 
今度確かめてみよう。

[3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera 
に対して、 WinIE と Mozilla は既定では何もしません。ただし、 
[CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。

[4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] 
として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。)
[CODE(MIME)[charset=[[x-unknown]]]] と考えるしかなさそうです。問題は、
一般の form data と file を区別する確実な方法がないことです。 
IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。

[5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。
これ超確実。

[[#comment]]

** 複数ファイルをまとめて提出

[13] 1つのファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
を使って複数ファイルをうpする (>>#) のは、 [[UA]] で対応してるのはなさげ、
サーバーもおそらく全滅だろうという感じですね。 

[[www-html]] で [[Opera]] の特定の版では出来るという未確認情報がありましたが、
最新版では出来ないらしいし、勘違いかなんかじゃないかなあ。

[[#comment]]

** 零個のファイルを提出

[6] ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]]) 
があっても、ファイル名として何も指定されなかった場合、
WinIE も Mozilla も Opera も、空の内容を送ります。

このとき、 WinIE と Mozilla は頭欄に 
[CODE(MIME)[Content-Type: [[application/octet-stream]]]] と書いてきて、 
[CODE(MIME)[Content-Disposition]] にも [CODE(MIME)[filename=""]] がつきます。
Opera ではどちらもつかず、本当に空 
([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] 
と空の内容だけ) になります。

[38] 空の実体を送ってしまうと (一般の UA の場合に) 
ファイル未選択と内容が空のファイルが区別できなくなってしまいます。
ファイルを選択していないファイル選択制御子はそもそも[[成功]]にしてはいけないのではないでしょうか。

[[#comment]]

* 例

[39] HTML のフォームの例 [SRC[HTML 4 17.13.4.2、改]]
[PRE(HTML)[
 <FORM action="http://server.example/cgi/handle"
       enctype="multipart/form-data"
       method="post">
   <P>
   What is your name? <INPUT type="text" name="submit-name"><BR>
   What files are you sending? <INPUT type="file" name="files"><BR>
   <INPUT type="submit" value="Send"> <INPUT type="reset">
 </FORM>
]PRE]

文章入力欄に [SAMP[Larry]] と記入し、ファイル選択で
[SAMP(file)[file1.txt]] を指定して提出した場合 [SRC[HTML 4 17.13.4.2]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
Content-Disposition: form-data; name="submit-name"

Larry
--AaB03x
Content-Disposition: form-data; name="files"; filename="file1.txt"
Content-Type: text/plain

[VAR[... contents of file1.txt ...]
--AaB03x--
]PRE]

加えて [SAMP(file)[file2.gif]] も選択していた場合 [SRC[HTML 4 17.13.4.2]]:
[PRE(MIME)[
Content-Type: multipart/form-data; boundary=AaB03x

--AaB03x
Content-Disposition: form-data; name="submit-name"

Larry
--AaB03x
Content-Disposition: form-data; name="files"
Content-Type: multipart/mixed; boundary=BbC04y

--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file1.txt"
Content-Type: text/plain

[VAR[... contents of file1.txt ...]]
--BbC04y
Content-Disposition: [DEL[file]] [INS[attachment]]; filename="file2.gif"
Content-Type: image/gif
Content-Transfer-Encoding: binary

[VAR[...contents of file2.gif...]]
--BbC04y--
--AaB03x--
]PRE]

[47] ユーロ通貨記号を値に使った例 [SRC[RFC 2388 4.5、改]]
[PRE(HTML)[
Content-Type: multipart/form-data; boundary="AaB03x"

--AaB03x
content-disposition: form-data; name="field1"
content-type: text/plain;charset=windows-1250
content-transfer-encoding: quoted-printable

Joe owes =80100.
--AaB03x--
]PRE]


[[#comment]]


* メモ
@


1.4
log
@auto-committed
@
text
@d21 2
d210 1
a210 1
[WEAK[みっともないことに HTML 4.01 正誤表は [[RFC 2388]] に責任転嫁しております(w。確かに元々 HTML 4.0 では [CODE(MIME)[attachment]] になっておりました。]]
@


1.3
log
@auto-committed
@
text
@d1 4
a4 1
#?SuikaWiki/0.9
d6 34
a39 15
- [1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 (ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)
- [2] Opera は、 [CODE(MIME)[multipart/form-data]] に存在しない [CODE(MIME)[charset]] 引数をつけてきます。この値はそれに含まれる本体部分の[[実体本体]]及び [CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 今度確かめてみよう。
- [3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera にたいして、 WinIE と Mozilla は既定では何もしません。ただし、 [CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。
- [4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。) [CODE(MIME)[charset=[[x-unknown]]]] と考えるしかなさそうです。問題は、一般の form data と file を区別する確実な方法がないことです。 IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。
- [5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。これ超確実。
- [6] [CODE(XPath)[[CODE(HTMLe)[[[input]]]][@@[CODE(HTMLa)[[[type]]]]='file'] ]] があっても、ファイル名が指定されなかった場合には、3 UA とも、空の内容を送りますが、 IE と Moz は [CODE(MIME)[Content-Type: [[application/octet-stream]]]] と書いてきて、 [CODE(MIME)[Content-Disposition]] にも [CODE(MIME)[filename=""]] がつきます。 Opera ではどちらもつかず、本当に空 ([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] と空の内容だけ) になります。

[7] [[HTML4]] の [CODE(MIME)[multipart/form-data]] への言及
= これ以前の原案では、高々紹介程度で [[RFC1867]] にほぼ丸投げ。
= ''Forms in HTML documents'' <http://www.w3.org/TR/REC-html40-971218/interact/forms.html#didx-multipartform-data>
= ''Forms in HTML documents'' <http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#didx-multipartform-data>
=- 前勧告と全く同内容
= ''Forms in HTML documents'' <http://www.w3.org/TR/1999/PR-html40-19990824/interact/forms.html#didx-multipartform-data>
=- [[RFC2388]] に参照先を変更
= ''Forms in HTML documents'' <http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#didx-multipartform-data>
d43 2
a44 1
= ''HTML 4 Errata'' <http://www.w3.org/MarkUp/html4-updates/errata#entry-10>
d46 51
a96 2
[CODE(MIME)[file]] に再修正。しかも RFC 2388 
に責任転嫁(藁
d100 1
a100 1
* 複数部分本体中の改行
d102 8
a109 1
[8] MIME の規定により、境界行や実体頭欄の末端の改行は [[CRLF]] でなければなりません。 [[CR]] や [[LF]] だけではいけません。
d112 2
a113 2
一方で HTTP ではいい加減な実装が多いので、もしかしたら・・・ CR
だけとか LF だけとかで送ってくる糞
d120 311
@


1.2
log
@auto-committed
@
text
@d26 17
@


1.1
log
@auto-committed
@
text
@d1 25
a25 8
#?SuikaWiki/0.9

- [1] [[WinIE]] も [[Mozilla]] も [[Opera]] も、 [CODE(MIME)[multipart/form-data]] に含まれる[[本体部分]]には [[charsetパラメーター]]を付けてくれません。 (ファイル送信を除いて [CODE(MIME)[[[Content-Type]]]] 欄そのものをつけません。)
- [2] Opera は、 [CODE(MIME)[multipart/form-data]] に存在しない [CODE(MIME)[charset]] 引数をつけてきます。この値はそれに含まれる本体部分の[[実体本体]]及び [CODE(MIME)[[[Content-Disposition]]]] 欄の [CODE(MIME)[[[name]]]] 引数に適用されるようです。あ、 [CODE(MIME)[[[filename]]]] にもかな? 今度確かめてみよう。
- [3] 規格不適合ながらもとりあえず >>2 のように情報を送ってくる Opera にたいして、 WinIE と Mozilla は既定では何もしません。ただし、 [CODE(HTML)[[[_charset_]]]] hack を使えば一応は情報を得られます。
- [4] >>2-3 の情報は、 [CODE(HTML)[[[file]]]] として送られる実体本体には適用できません。 (その実体の頭欄には適用されます。) [CODE(MIME)[charset=[[x-unknown]]]] と考えるしかなさそうです。問題は、一般の form data と file を区別する確実な方法がないことです。 IE, Moz, Opera に限れば、 [CODE(MIME)[filename]] 引数の有無で決定できますが。。。
- [5] >>4 あ、確実な方法が1つだけあります。受取る側が名前を知っていること。これ超確実。
- [6] [CODE(XPath)[[CODE(HTMLe)[[[input]]]][@@[CODE(HTMLa)[[[type]]]]='file'] ]] があっても、ファイル名が指定されなかった場合には、3 UA とも、空の内容を送りますが、 IE と Moz は [CODE(MIME)[Content-Type: [[application/octet-stream]]]] と書いてきて、 [CODE(MIME)[Content-Disposition]] にも [CODE(MIME)[filename=""]] がつきます。 Opera ではどちらもつかず、本当に空 ([CODE(MIME)[Content-Disposition: [[form-data]]; name=[VAR[名前]]]] と空の内容だけ) になります。
@

