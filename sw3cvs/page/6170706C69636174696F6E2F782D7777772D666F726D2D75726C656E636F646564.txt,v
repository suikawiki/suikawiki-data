head	1.27;
access;
symbols
	suikawiki3-final:1.27
	before-db-leaffile:1.8
	after-upgrade-to-suikawiki-3:1.8
	before-fork-suikawiki3:1.8
	after-restore-20040122:1.8;
locks; strict;
comment	@# @;


1.27
date	2008.10.08.02.57.05;	author wakaba;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.08.02.41.11;	author wakaba;	state Exp;
branches;
next	1.25;

1.25
date	2007.04.27.02.24.22;	author wakaba;	state Exp;
branches;
next	1.24;

1.24
date	2007.04.08.02.39.09;	author wakaba;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.03.02.34.31;	author wakaba;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.08.02.14.48;	author wakaba;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.23.02.14.29;	author wakaba;	state Exp;
branches;
next	1.20;

1.20
date	2005.09.23.02.08.52;	author wakaba;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.08.02.07.13;	author wakaba;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.13.02.08.58;	author wakaba;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.08.02.06.59;	author wakaba;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.23.02.05.06;	author wakaba;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.27.02.06.23;	author wakaba;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.18.02.07.26;	author wakaba;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.13.02.07.56;	author wakaba;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.23.02.05.39;	author wakaba;	state Exp;
branches;
next	1.11;

1.11
date	2005.01.03.02.05.46;	author wakaba;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.23.02.07.39;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2004.10.08.02.05.32;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.18.02.03.30;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.03.02.02.09;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.24.07.19.39;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.16.09.18.54;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.27.07.25.00;	author make;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.26.04.49.34;	author w;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.16.10.48.51;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.12.01.58;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.27
log
@auto-committed
@
text
@
[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。

[40]
t
([[Mr.Anonymous]] [WEAK[2005-05-05 17:20:48 +00:00]])

[41]
− 〜
([[名無しさん]])

[44]
application/x-www-form-urlencoded
([[名無しさん]] [WEAK[2005-09-04 22:41:21 +00:00]])

[45]
fdsdasf
([[af]] [dasfdasf] [WEAK[2005-09-20 11:37:55 +00:00]])

[46]
test
([[名無しさん]] [WEAK[2006-06-19 08:23:24 +00:00]])

[47]
Great work!
[url=http://blrwfwad.com/lzrl/wojj.html]My homepage[/url] | [url=http://wuhfebhg.com/zqei/aolt.html]Cool site[/url]
([[Alice]] [ben@@fromru.net] [WEAK[2006-09-06 05:40:30 +00:00]])

[48]
Nice site!
<a href="http://blrwfwad.com/lzrl/wojj.html">My homepage</a> | <a href="http://vcfonohw.com/uyiw/xbft.html">Please visit</a>
([[Felix]] [lori@@pochta.net] [WEAK[2006-09-06 05:41:19 +00:00]])

[49]
Great work!
http://blrwfwad.com/lzrl/wojj.html | http://szmfzjqf.com/vtih/rocy.html
([[Debbie]] [lori@@pochta.net] [WEAK[2006-09-06 05:41:36 +00:00]])

[50]
Not bad man! Look what i founf hier!!!!!
<a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>   [url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url] http://bed-bath-and-beyond-ivan.blogspot.com/  
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[51]
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url] http://bed-bath-and-beyond-ivan.blogspot.com/   <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  
http://bed-bath-and-beyond-ivan.blogspot.com/
([[Prohor!]] [openbfor@@rtydg.com])

[[#comment]]


* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]]) ☆
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]]) ☆
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]] ☆
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
-- 
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]
- [[RFC 3875]] ([[CGI/1.1]])
-- [CODE[4.1.7 QUERY_STRING]]

[SAMP[☆]]を付けたのは、特に重要な規定を含むものです。
その他は、補助的な規定や他の仕様を参照するものなどのうち、
特に多く章を裂いているものを挙げています。この他単に
[CODE(MIME)[application/x-www-form-urlencoded]]]] 
を参照しているだけの仕様は枚挙に暇がありません。

[53]
[CITE@@en[Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts]] ([CODE[2007-06-23 05:33:39 +09:00]] 版) <http://www.w3.org/TR/2007/REC-wsdl20-adjuncts-20070626/#_http_x-www-form-urlencoded>
([[名無しさん]])

[[#comment]]


* 構文

[11] [CODE(MIME)[application/x-www-form-urlencoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

= body = field *(separator field) / obs-body
= separator = "&" / obs-separator
= field = name "=" value
= name = 1*uchar / obs-name
= value = 1*uchar / obs-value
= uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
= joint = "+"
= escaped = "%" escaped-code / "%0D%0A"
= escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
= obs-escaped-code = 2HEXDIGIT
= obs-separator = ";"
= obs-body = *(separator field) [ separator ]
= obs-name = *uchar
= obs-value = *uchar
= obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[42]
−
([[名無しさん]] [WEAK[2005-05-09 07:16:11 +00:00]])

[52]
hjhkhkkhj
([[名無しさん]] [WEAK[2007-04-26 07:40:49 +00:00]])

[[#comment]]


** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]


** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[[#comment]]


*** 百分率符号化

[37] [[文字]] (あるいは[[オクテット]]) を[[百分率符号化]]するかどうかについて、
各仕様は次のように規定しています。

:[[HTML 4]]:[[間隔]]は [CODE(URI)[+]] とします。
それ以外の非[[英数字]]は [[RFC 1738]] 2.2節の方法で符号化
(百分率符号化) します。 RFC 1738 によると、
百分率符号化には大文字の[[十六進数字]]を使いますが、
小文字を使っても構いません。[[改行]]は
[CODE(URI)[%0D%0A]] とします。
:[[XForms 1.0]]:[[間隔]]は [CODE(URI)[+]] とします。
非 ASCII 文字と、 [[RFC 2396]]
(または以後の改訂) の[[予約]]文字は百分率符号化します。
百分率符号化には大文字の十六進数字を使います。
改行は [CODE(URI)[%0D%0A]] とします。

[38]
XForms 1.0は RFC 2396 の予約文字を符号化しろとは言っていますが、
[[非安全]]文字 ([[URI参照]]で使えない文字) を符号化しろとは言っていません。
これはミスではないですかね?

しかも URI の規格の最新版自動追尾になっております。
従って、どの URI の規格に従うかによって現時点で
3種類の方法があり得ます。

:RFC 2396 による予約文字:[CODE(regex)['''[''';/?:@@&=+$,''']''']]
:[[RFC 2732]] による予約文字:[CODE(regex)['''[''';/?[]:@@&=+$,''']''']]
:[[RFC 3986]] による予約文字:[CODE(regex)['''[''':/?#[]@@!$&'()*+,;=''']''']]

[[#comment]]


*** 表現できない文字の処理

[43]
−
([[名無しさん]] [WEAK[2005-05-09 07:18:13 +00:00]])

[[#comment]]


** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。

[39]
あいえう
([[名無しさん]] [WEAK[2005-03-19 14:35:33 +00:00]])

[[#comment]]


** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]


* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
-- [VAR[EltName]] は要素節の[[局所名]]です。
=== 間隔は [CODE(URI)[+]] で置換します。
=== 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=== 改行は [CODE(URI)[%0D%0A]] とします。
-- [VAR[value]] は文節の内容です。
-- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
-- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]


* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]


** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]


** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]


* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。


[54]
[CITE[豊島区立図書館のメモ - やればできる子の日記]] ([TIME[2008-10-05 11:21:13 +09:00]] 版) <http://d.hatena.ne.jp/matsuza/20080831/1220177018>
([[名無しさん]])


[[#comment]]


* 転送符号化との関係

[36] あまり見かけませんが、[[電子メイル]]でフォームを提出することもありますから、
[CODE(MIME)[application/x-www-form-urlencoded]] が [[MIME]]
で使われることもあります。

MIME の [CODE(MIME)[[[Content-Transfer-Encoding]]]] は、普通は不要です
([CODE(MIME)[[[7bit]]]] で十分です)。
[WEAK[([CODE(MIME)[application/x-www-form-urlencoded]] 自体が転送符号化のようなものですから。)]]
ただし、少しでもデータ量が多いと改行がない
[WEAK[(あったとしても[[百分率符号化]]されている)]]
ので、電子メイル / MIME の行長制限に引っかかることが容易に考えられます。
その場合は CTE が必要になります。

CTE は [CODE(MIME)[[[Quoted-Printable]]]] が適当です。
元々7ビットのデータなのですから [CODE(MIME)[[[Base64]]]]
は効率が悪すぎます。

[[#comment]]


* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]


* Q & A

[29] '''Q: [CODE(MIME)[application/x-www-form-urlencoded]] で使う文字コードは何ですか?'''

A: [CODE(MIME)[application/x-www-form-urlencoded]] 実体自体は [[US-ASCII]]
で記述します。符号化されている内容の文字コードは不定です。
(使用する場面の仕様や実装に依存します。)

詳細: >>11, >>14-15, >>22-, [[提出]], [CODE(HTMLa)[[[accept-charset]]]]

[30] '''Q: HTTP の [CODE(HTTP)[[[Content-Type]]:]] に [CODE(MIME)[[[charset]]]] を指定すればよいのではありませんか?'''

A: そのような実装も存在しますが、標準化されてはいません。また、
MIME の [CODE(MIME)[charset]] 
の仕様と意味的に異なるので望ましくないという考え方もあります。

詳細: >>7-, >>1-, [[[CODE(MIME)[charset]]パラメーター]]

[31] '''Q: 非 ASCII 文字を使う時は [CODE(MIME)[[[multipart/form-data]]]] を使えと言うが、そんなブラウザはないのでは。'''

A: 現代の実用的な Web ブラウザで [CODE(MIME)[multipart/form-data]]
に対応していないなんて考えられません。 HTML の場合は [CODE(HTMLa)[[[enctype]]]]
を [CODE(MIME)[multipart/form-data]] と''著者が''明示しておかないと
[CODE(MIME)[multipart/form-data]] は使われませんよ。

詳細: [CODE(MIME)[[[multipart/form-data]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[32] '''Q: TrackBack は [CODE(MIME)[application/x-www-form-urlencoded]] を使っているが、文字コードを指定できないではないか。欠陥だ。'''

A: そうですね。 [CODE(MIME)[application/x-www-form-urlencoded]]
なんて使うからいけないのです。

関連: [[TrackBack]]

[33] '''Q: HTML 4 では [CODE(char)[&]] の代わりに [CODE(char)[;]] を使えと言っているが?'''

A: [CODE(char)[;]] の使用を薦めているのは [[URI参照]]の中の[[照会]]の部分での話で、
[CODE(MIME)[application/x-www-form-urlencoded]] とは [WEAK[(根は同じとは言え)]]
別の問題です。

関連: >>13-, [[照会]], [[文字実体参照]], [CODE(MIME)[[[application/sgml-form-urlencoded]]]]

[34] '''Q: 鯖とやり取りするプログラムで、 [CODE(MIME)[application/x-www-form-urlencoded]] と書いてあった部分を [CODE(MIME)[application/x-www-form-urlencoded; charset=UTF-8]] にしたら文字化けが起こらなくなりましたよ。'''

A: たまたまです。相性が良かったのです。
次のときもうまくいくとは限らないこと、
いつまでもうまく動き続けるとは限らないことを肝に銘じておいてください。

関連: >>11, >>14-15, >>22-, [[提出]], [CODE(HTMLa)[[[accept-charset]]]],
[[[CODE(MIME)[charset]]パラメーター]], 
[CODE(MIME)[[[multipart/form-data]]]]

[35] '''Q: ファイルをうpできません。ファイル名しか取得できません。'''

A: HTML のフォームでは、ファイルをうpするためには
[CODE(MIME)[application/x-www-form-urlencoded]] は使えません。
[CODE(MIME)[[[multipart/form-data]]]] など他の形式をお使い下さい。

関連: [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]],
[CODE(HTMLa)[[[enctype]]]], [CODE(MIME)[[[multipart/form-data]]]]

[[#comment]]


* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
他のきちんと標準化された[[媒体型]]を使うべきです。@


1.26
log
@auto-committed
@
text
@a96 1

d98 1
a98 1
[CITE@@en[Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts]] ([TIME[2007-06-23 05:33:39 +09:00]] 版) <http://www.w3.org/TR/2007/REC-wsdl20-adjuncts-20070626/#_http_x-www-form-urlencoded>
a100 1

d461 6
@


1.25
log
@auto-committed
@
text
@d97 6
a152 1

a155 1

@


1.24
log
@auto-committed
@
text
@a50 1

d52 2
a53 2
Not bad man! Look what i founf hier!!!!!
[url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url] http://bed-bath-and-beyond-ivan.blogspot.com/   <a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>  
a56 1

d146 6
@


1.23
log
@auto-committed
@
text
@d45 6
d52 1
a52 1
[50]
d54 1
a54 1
<a href= http://bed-bath-and-beyond-ivan.blogspot.com/ >bed bath and beyound</a>   [url= http://bed-bath-and-beyond-ivan.blogspot.com/ ]bed bath and beyound[/url] http://bed-bath-and-beyond-ivan.blogspot.com/  
@


1.22
log
@auto-committed
@
text
@a39 1

d41 1
a41 1
Great work!
d44 7
@


1.21
log
@auto-committed
@
text
@a25 1

d29 16
@


1.20
log
@auto-committed
@
text
@a21 1

d25 5
@


1.19
log
@auto-committed
@
text
@a17 1

d21 5
@


1.18
log
@auto-committed
@
text
@a1 1

d18 6
a211 1

@


1.17
log
@auto-committed
@
text
@a10 1

d15 3
d105 4
d203 5
@


1.16
log
@auto-committed
@
text
@d11 6
a224 1

a227 1

@


1.15
log
@auto-committed
@
text
@d1 502
a502 492
[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。



[[#comment]]


* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]]) ☆
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]]) ☆
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]] ☆
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
-- 
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]
- [[RFC 3875]] ([[CGI/1.1]])
-- [CODE[4.1.7 QUERY_STRING]]

[SAMP[☆]]を付けたのは、特に重要な規定を含むものです。
その他は、補助的な規定や他の仕様を参照するものなどのうち、
特に多く章を裂いているものを挙げています。この他単に
[CODE(MIME)[application/x-www-form-urlencoded]]]] 
を参照しているだけの仕様は枚挙に暇がありません。

[[#comment]]


* 構文

[11] [CODE(MIME)[application/x-www-form-urlencoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

= body = field *(separator field) / obs-body
= separator = "&" / obs-separator
= field = name "=" value
= name = 1*uchar / obs-name
= value = 1*uchar / obs-value
= uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
= joint = "+"
= escaped = "%" escaped-code / "%0D%0A"
= escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
= obs-escaped-code = 2HEXDIGIT
= obs-separator = ";"
= obs-body = *(separator field) [ separator ]
= obs-name = *uchar
= obs-value = *uchar
= obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[[#comment]]


** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]


** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[[#comment]]

*** 百分率符号化

[37] [[文字]] (あるいは[[オクテット]]) を[[百分率符号化]]するかどうかについて、
各仕様は次のように規定しています。

:[[HTML 4]]:[[間隔]]は [CODE(URI)[+]] とします。
それ以外の非[[英数字]]は [[RFC 1738]] 2.2節の方法で符号化
(百分率符号化) します。 RFC 1738 によると、
百分率符号化には大文字の[[十六進数字]]を使いますが、
小文字を使っても構いません。[[改行]]は
[CODE(URI)[%0D%0A]] とします。
:[[XForms 1.0]]:[[間隔]]は [CODE(URI)[+]] とします。
非 ASCII 文字と、 [[RFC 2396]]
(または以後の改訂) の[[予約]]文字は百分率符号化します。
百分率符号化には大文字の十六進数字を使います。
改行は [CODE(URI)[%0D%0A]] とします。

[38]
XForms 1.0は RFC 2396 の予約文字を符号化しろとは言っていますが、
[[非安全]]文字 ([[URI参照]]で使えない文字) を符号化しろとは言っていません。
これはミスではないですかね?

しかも URI の規格の最新版自動追尾になっております。
従って、どの URI の規格に従うかによって現時点で
3種類の方法があり得ます。

:RFC 2396 による予約文字:[CODE(regex)['''[''';/?:@@&=+$,''']''']]
:[[RFC 2732]] による予約文字:[CODE(regex)['''[''';/?[]:@@&=+$,''']''']]
:[[RFC 3986]] による予約文字:[CODE(regex)['''[''':/?#[]@@!$&'()*+,;=''']''']]

[[#comment]]

*** 表現できない文字の処理

[[#comment]]


** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。

[[#comment]]


** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]


* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
-- [VAR[EltName]] は要素節の[[局所名]]です。
=== 間隔は [CODE(URI)[+]] で置換します。
=== 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=== 改行は [CODE(URI)[%0D%0A]] とします。
-- [VAR[value]] は文節の内容です。
-- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
-- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]


* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]


** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]


** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]


* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。

[[#comment]]

* 転送符号化との関係

[36] あまり見かけませんが、[[電子メイル]]でフォームを提出することもありますから、
[CODE(MIME)[application/x-www-form-urlencoded]] が [[MIME]]
で使われることもあります。

MIME の [CODE(MIME)[[[Content-Transfer-Encoding]]]] は、普通は不要です
([CODE(MIME)[[[7bit]]]] で十分です)。
[WEAK[([CODE(MIME)[application/x-www-form-urlencoded]] 自体が転送符号化のようなものですから。)]]
ただし、少しでもデータ量が多いと改行がない
[WEAK[(あったとしても[[百分率符号化]]されている)]]
ので、電子メイル / MIME の行長制限に引っかかることが容易に考えられます。
その場合は CTE が必要になります。

CTE は [CODE(MIME)[[[Quoted-Printable]]]] が適当です。
元々7ビットのデータなのですから [CODE(MIME)[[[Base64]]]]
は効率が悪すぎます。

[[#comment]]

* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]

* Q & A

[29] '''Q: [CODE(MIME)[application/x-www-form-urlencoded]] で使う文字コードは何ですか?'''

A: [CODE(MIME)[application/x-www-form-urlencoded]] 実体自体は [[US-ASCII]]
で記述します。符号化されている内容の文字コードは不定です。
(使用する場面の仕様や実装に依存します。)

詳細: >>11, >>14-15, >>22-, [[提出]], [CODE(HTMLa)[[[accept-charset]]]]

[30] '''Q: HTTP の [CODE(HTTP)[[[Content-Type]]:]] に [CODE(MIME)[[[charset]]]] を指定すればよいのではありませんか?'''

A: そのような実装も存在しますが、標準化されてはいません。また、
MIME の [CODE(MIME)[charset]] 
の仕様と意味的に異なるので望ましくないという考え方もあります。

詳細: >>7-, >>1-, [[[CODE(MIME)[charset]]パラメーター]]

[31] '''Q: 非 ASCII 文字を使う時は [CODE(MIME)[[[multipart/form-data]]]] を使えと言うが、そんなブラウザはないのでは。'''

A: 現代の実用的な Web ブラウザで [CODE(MIME)[multipart/form-data]]
に対応していないなんて考えられません。 HTML の場合は [CODE(HTMLa)[[[enctype]]]]
を [CODE(MIME)[multipart/form-data]] と''著者が''明示しておかないと
[CODE(MIME)[multipart/form-data]] は使われませんよ。

詳細: [CODE(MIME)[[[multipart/form-data]]]], [CODE(HTMLa)[[[enctype]]]], [[提出]]

[32] '''Q: TrackBack は [CODE(MIME)[application/x-www-form-urlencoded]] を使っているが、文字コードを指定できないではないか。欠陥だ。'''

A: そうですね。 [CODE(MIME)[application/x-www-form-urlencoded]]
なんて使うからいけないのです。

関連: [[TrackBack]]

[33] '''Q: HTML 4 では [CODE(char)[&]] の代わりに [CODE(char)[;]] を使えと言っているが?'''

A: [CODE(char)[;]] の使用を薦めているのは [[URI参照]]の中の[[照会]]の部分での話で、
[CODE(MIME)[application/x-www-form-urlencoded]] とは [WEAK[(根は同じとは言え)]]
別の問題です。

関連: >>13-, [[照会]], [[文字実体参照]], [CODE(MIME)[[[application/sgml-form-urlencoded]]]]

[34] '''Q: 鯖とやり取りするプログラムで、 [CODE(MIME)[application/x-www-form-urlencoded]] と書いてあった部分を [CODE(MIME)[application/x-www-form-urlencoded; charset=UTF-8]] にしたら文字化けが起こらなくなりましたよ。'''

A: たまたまです。相性が良かったのです。
次のときもうまくいくとは限らないこと、
いつまでもうまく動き続けるとは限らないことを肝に銘じておいてください。

関連: >>11, >>14-15, >>22-, [[提出]], [CODE(HTMLa)[[[accept-charset]]]],
[[[CODE(MIME)[charset]]パラメーター]], 
[CODE(MIME)[[[multipart/form-data]]]]

[35] '''Q: ファイルをうpできません。ファイル名しか取得できません。'''

A: HTML のフォームでは、ファイルをうpするためには
[CODE(MIME)[application/x-www-form-urlencoded]] は使えません。
[CODE(MIME)[[[multipart/form-data]]]] など他の形式をお使い下さい。

関連: [[[CODE(HTMLe)[input]]//[CODE(HTML)[file]]]],
[CODE(HTMLa)[[[enctype]]]], [CODE(MIME)[[[multipart/form-data]]]]


[[#comment]]


* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
@


1.14
log
@auto-committed
@
text
@d156 31
@


1.13
log
@auto-committed
@
text
@d1 461
a461 392


[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。

[29]
abc
([[abc]] [abc] [WEAK[2004-12-20 21:12:56 +00:00]])


[31]
nknk
([[名無しさん]] [WEAK[2005-02-09 14:56:09 +00:00]])


[[#comment]]


* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]]) ☆
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]]) ☆
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]] ☆
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
-- 
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]
- [[RFC 3875]] ([[CGI/1.1]])
-- [CODE[4.1.7 QUERY_STRING]]

[SAMP[☆]]を付けたのは、特に重要な規定を含むものです。
その他は、補助的な規定や他の仕様を参照するものなどのうち、
特に多く章を裂いているものを挙げています。この他単に
[CODE(MIME)[application/x-www-form-urlencoded]]]] 
を参照しているだけの仕様は枚挙に暇がありません。

[[#comment]]


* 構文

[11] [CODE(MIME)[application/x-www-form-urlencoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

= body = field *(separator field) / obs-body
= separator = "&" / obs-separator
= field = name "=" value
= name = 1*uchar / obs-name
= value = 1*uchar / obs-value
= uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
= joint = "+"
= escaped = "%" escaped-code / "%0D%0A"
= escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
= obs-escaped-code = 2HEXDIGIT
= obs-separator = ";"
= obs-body = *(separator field) [ separator ]
= obs-name = *uchar
= obs-value = *uchar
= obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[[#comment]]


** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]


** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[30]
こんにちは
([[名無しさん]] [WEAK[2005-01-19 05:14:26 +00:00]])

[[#comment]]


*** 表現できない文字の処理

[[#comment]]


** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。

[[#comment]]


** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]


* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
-- [VAR[EltName]] は要素節の[[局所名]]です。
=== 間隔は [CODE(URI)[+]] で置換します。
=== 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=== 改行は [CODE(URI)[%0D%0A]] とします。
-- [VAR[value]] は文節の内容です。
-- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
-- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]


* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]


** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]


** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]


* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。

[[#comment]]


* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]


* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
@


1.12
log
@auto-committed
@
text
@d15 6
a163 1

a166 1

@


1.11
log
@auto-committed
@
text
@d1 388
a388 383

[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。


[29]
abc
([[abc]] [abc] [WEAK[2004-12-20 21:12:56 +00:00]])


[[#comment]]


* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]]) ☆
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]]) ☆
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]] ☆
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
-- 
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]
- [[RFC 3875]] ([[CGI/1.1]])
-- [CSECTION[4.1.7 QUERY_STRING]]

[SAMP[☆]]を付けたのは、特に重要な規定を含むものです。
その他は、補助的な規定や他の仕様を参照するものなどのうち、
特に多く章を裂いているものを挙げています。この他単に
[CODE(MIME)[application/x-www-form-urlencoded]]]] 
を参照しているだけの仕様は枚挙に暇がありません。

[[#comment]]


* 構文

[11] [CODE(MIME)[application/x-www-form-urlencoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

= body = field *(separator field) / obs-body
= separator = "&" / obs-separator
= field = name "=" value
= name = 1*uchar / obs-name
= value = 1*uchar / obs-value
= uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
= joint = "+"
= escaped = "%" escaped-code / "%0D%0A"
= escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
= obs-escaped-code = 2HEXDIGIT
= obs-separator = ";"
= obs-body = *(separator field) [ separator ]
= obs-name = *uchar
= obs-value = *uchar
= obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[[#comment]]


** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]


** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[[#comment]]


*** 表現できない文字の処理

[[#comment]]


** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。

[[#comment]]


** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]


* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
-- [VAR[EltName]] は要素節の[[局所名]]です。
=== 間隔は [CODE(URI)[+]] で置換します。
=== 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=== 改行は [CODE(URI)[%0D%0A]] とします。
-- [VAR[value]] は文節の内容です。
-- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
-- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]


* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]


** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]


** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]


* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。

[[#comment]]


* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]


* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
@


1.10
log
@auto-committed
@
text
@d1 383
a383 376


[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。


[29]
abc
([[abc]] [abc] [WEAK[2004-12-20 21:12:56 +00:00]])


[[#comment]]


* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]])
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]])
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]]
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
-- 
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]

[[#comment]]


* 構文

[11] [CODE(MIME)[application/x-www-form-url-encoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

= body = field *(separator field) / obs-body
= separator = "&" / obs-separator
= field = name "=" value
= name = 1*uchar / obs-name
= value = 1*uchar / obs-value
= uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
= joint = "+"
= escaped = "%" escaped-code / "%0D%0A"
= escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
= obs-escaped-code = 2HEXDIGIT
= obs-separator = ";"
= obs-body = *(separator field) [ separator ]
= obs-name = *uchar
= obs-value = *uchar
= obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[[#comment]]


** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]


** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[[#comment]]


*** 表現できない文字の処理

[[#comment]]


** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。

[[#comment]]


** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]


* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
-- [VAR[EltName]] は要素節の[[局所名]]です。
=== 間隔は [CODE(URI)[+]] で置換します。
=== 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=== 改行は [CODE(URI)[%0D%0A]] とします。
-- [VAR[value]] は文節の内容です。
-- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
-- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]


* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]


** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]


** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]] [[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]


* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。

[[#comment]]


* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]


* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
@


1.9
log
@auto-committed
@
text
@d1 377
a377 357
[9] [[媒体型]] [DFN[[CODE(MIME)[application/x-www-form-urlencoded]]]]
は、 [[HTML]] などの[[フォーム]]を提出するための書式の一つです。
HTML にフォームが導入された際に開発され、 HTML
以外の規格でもフォーム提出の方法などとして採用されています。
仕様上の問題がいくつもあるにもかかわらず、
実装が極めて単純であることや HTML の既定の提出書式であることから、
非常によく用いられています。

[[#comment]]

* 仕様

[10] 独立して [CODE(MIME)[application/x-www-form-urlencoded]]
を規定する仕様書は存在しないようです。 HTML や [[XForms]]
など、採用する規格の仕様書が個々に定義しています。

- [[HTML 2.0]] ([[RFC 1866]])
- [[HTML 2.x]] ([[RFC 2070]])
- [[HTML 4]] ([[Web Forms 1.0]])
-- [CITE[application/x-www-form-urlencoded]]
<IW:HTML4:"interact/forms.html#didx-applicationx-www-form-urlencoded">
- [[XForms 1.0]]
-- [CITE[11.6 Serialization as application/x-www-form-urlencoded]]
<IW:XForms:"xforms/slice11.html#serialize-urlencode">
- [[WML]]
--
<http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf>
-- [CITE[WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境) ― WAP June 2000 Conformance Release 対応版 ―]],
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班。
- [[WSDL]]
-- [CITE[Web Services Description Language (WSDL) Version 2.0 Part 3: Bindings 3.8.1 Serialization as "application/x-www-form-urlencoded"]]
<http://www.w3.org/TR/wsdl20-bindings/#_http_x-www-form-urlencoded>
- [[TAG Finding]]:
[CITE[URIs, Addressability, and the use of HTTP GET and POST 5.1 Internationalization]] 
<http://www.w3.org/2001/tag/doc/whenToUseGet.html#i18n>
- [CITE[J‐スカイサービス向け HTML コンテンツ開発ガイド 2.4.2.2. 携帯端末⇒ウェブサーバ]]
- [CITE[ボーダフォンライブ!向けウェブコンテンツ開発ガイド [HTML 編] 2.4.2.2. 端末⇒Web サーバ]]

[[#comment]]

* 構文

[11] [CODE(MIME)[application/x-www-form-url-encoded]]
形式の[[実体]]は、 [SAMP[name1=value1&name2=value2]]
のように、名前と値の組を等号でつなげたものをアンド記号で結んでいます。
名前と値は、必要に応じて [[URI符号化]]します。

同じ名前の組が複数個あることもあります。また、
順序は意味を持ちます。大文字・小文字の区別は、値においては存在します。
名前における区別の有無は明らかではありませんが、
一般には存在すると考えられています。

文字の符号化の方法 ([[charset]]) は規定されていません。
HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]] が、現実には任意の符号化方式が使われています。
(ASCII 非互換なものも含まれます。) URI 符号化を使うことからも明らかなように、
任意のバイナリ・データの転送に使用するのには向いていませんが、
稀にそのような用途でも使われます。 (但し、そのような場合であっても、
フォームの他の文字的データと共に転送する目的であり、
専らバイナリ・データを転送するために使用することは考えにくいです。)
XForms はバイナリ内容には他の直列化方式を使うことを推奨しています
[SRC[XForms 1.0 11.6]]。

[12] [CODE(MIME)[application/x-www-form-urlencoded]]
の書式を [[ABNF]] で表現してみたのが次の生成規則です。
但し、すべての仕様・実装がこの規則に合致しているわけではありません。

=body = field *(separator field) / obs-body
=separator = "&" / obs-separator
=field = name "=" value
=name = 1*uchar / obs-name
=value = 1*uchar / obs-value
=uchar = ALPHA / DIGIT / "-" / "_" / "." / "," / ":" / joint / escaped / obs-uchar
=joint = "+"
=escaped = "%" escaped-code / "%0D%0A"
=escaped-code = "0" ( "0" / .. / "9" / "B" / "C" / "E" / "F" ) / ( "1" / .. / "7" ) HEXDIGIT / obs-escaped-code
=obs-escaped-code = 2HEXDIGIT
=obs-separator = ";"
=obs-body = *(separator field) [ separator ]
=obs-name = *uchar
=obs-value = *uchar
=obs-uchar = "'" / "(" / ")" / ";" / "$" / "@@" / "*" / "!"

[[#comment]]

** 分離子 &

[13]
区切文字は "&" です。

一方、 HTML4 は、 CGI などの URI で x-www-form-urlencoded
同様の形式の query-part を使うときに、 "&" でなくて
";" を使うのが望ましい、としています。
<http://www.w3.org/TR/html401/appendix/notes.html#h-B.2.2>

もちろんこれは URI での話であって、 x-www-form-urlencoded
の話は無いのですが、元々は同じ物ですし、 ";"
に対応した CGI script では、両者(の復号処理)を一緒くたにして
いるものが少なくありません。

ですから、復号側は必要に応じて ";" も区切り文字として扱うようにし、
符号化側は ";" を必ず URI escape して "%3B" とするのが
望ましいと考えられます。

また、幾つかの CGI script で区切り文字に使われている "$"
も、同様に URI escape しておくのが望ましいでしょう。

[[#comment]]

** 文字の表現

[14] 名前と値の部分は、任意の文字列 (あるいはオクテット列)
が使用されています。

HTML 4 は [[ASCII]] 文字だけが使用できると述べています
[SRC[HTML 4 17.13.1 Note]]。しかし、現実には 
[CODE(MIME)[application/x-www-form-urlencoded]] が使われ始めてすぐに、
HTML で使われていたあらゆる文字・[[文字コード]]が使用されるようになっています。
HTML 4 が勧告された当時は既に混乱が収拾のつかない状態に達していましたから、
安全に使用できる ASCII に限定したのでしょうが、焼け石に水とでも申しましょうか、
手軽に実装できる [CODE(MIME)[application/x-www-form-urlencoded]]
がその後も使われ続けています。

[15] HTML フォームの提出に際して [[UA]] が使用する charset
は、 >>14 の通り、 HTML 4 は規定していません。
実装は、
- 文書の charset と同じものを使用する
- UA の charset (UA の内部符号やその環境の符号) と同じものを使用する
- [CODE(HTMLa)[[[accept-charset]]]] で指定されたものを使用する

の3種類と、その混合があります。利用者によって編集されていないフォーム欄
(例えば [[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]] による隠し制御子)
は文書の charset で、編集された欄は UA の charset
で符号化するという UA すらかつて存在しました。 (その名も
[[WinIE 3]]。)

[[XForms]] は、 [[UTF-8]] を使用すると規定しています [SRC[XForms 1.0 11.6]]。

[[#comment]]

*** 表現できない文字の処理

[[#comment]]

** URI 符号化

[16] 名前と値は、適当な charset によるオクテット表現を URI escape 符号化します。
HTML 4 [SRC[HTML 4 17.13.4.1]] や XForms 1.0 [SRC[XForms 1.0 11.6]]
によれば、

- [[間隔]]文字は、 [CODE(URI)[+]] とします。
- [[改行]]は、 [CODE(URI)[%0D%0A]] とします。
- その他の URI 予約文字 ([CODE(ABNF)[[[reserved]]]])
および非 ASCII 文字 (オクテット) は、 [CODE(URI)[%[VAR[HH]]]]
とします。

16進数表現 [VAR[HH]] は、 XForms によれば大文字を使います。
HTML 4 はどちらとも述べていません。一般的には、
どちらでもよいものと考えられていますが、
多くの UA は大文字で出力し、多くのフォーム処理エージェントはどちらも認めるようです
([[人に優しく自分に厳しく]])。

[17] この URI escape 符号化は名前にも値にも適用されますが、
[[制御子名]]に非 ASCII 文字や URI 予約文字を使うことはあまりないので、
名前の URI escape 符号化を復号しないフォーム処理エージェントが少なくないと推測されます。

[19] 改行の規定が正しく運用されているかは疑問です。


[[#comment]]

** メモ

[28] 誤って1文字目に [CODE(URI)[?]] をつける実装もあります。

[[#comment]]

* フォーム・データ集合からの生成

[18] HTML 4 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
のデータは[[フォーム・データ集合]]から次のように生成しなければならないと規定しています
[SRC[HTML 4 17.13.4.1]]。

= 制御子の名前と値を escape します。
== 間隔は [CODE(URI)[+]] に置換します。
== 予約文字は [[RFC 1738]] 2.2 節の規定の通り escape します。
== 改行は [CODE(URI)[%0D%0A]] で表現します。
= 制御子の名前・値は[[文書順]]で並べます。
名前と値は [CODE(URI)[=]] で分離し、
名前・値の組は相互に [CODE(URI)[&]] で分離します。

[21] XForms 1.0 は、 [CODE(MIME)[application/x-www-form-urlencoded]]
による[[直列化]]を次の通り規定しています [SRC[XForms 1.0 11.6]]。

= 各[[要素節]]を[[文書順]]に見ていきます。
1つ[[文節]]を含む要素節を選びます。
= 要素節毎に、 [SAMP(URI)[[VAR[EltName]]=[VAR[value]][VAR[{sep}]]]]
という文字列を作ります。
=- [VAR[EltName]] は要素節の[[局所名]]です。
=-= 間隔は [CODE(URI)[+]] で置換します。
=-= 非 ASCII 文字および予約文字 ([[RFC 2396]] およびその改訂によります。)
を UTF-8 で URI escape します。16進数は大文字で表現します。
=-= 改行は [CODE(URI)[%0D%0A]] とします。
=- [VAR[value]] は文節の内容です。
=- [VAR[{sep}]] は [CODE(XMLe)[[[submission]]]] の [CODE(XMLa)[[[separator]]]]
属性で指定された分離子文字です。
=- なお、要素節の属性や名前空間など他の情報は使われません。
= すべてを文書順に連結します。

[20] HTML では、フォーム制御子ごとにフォーム・データ集合に何が含まれるのかが異なります。
[[フォーム・データ集合]], [[成功]], [[現在値]]の説明をごらんください。
特に、ファイル選択制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[file]]]])
の現在値はファイル名の並びであり、ファイルの内容ではありません。
また、画像提出ボタン制御子 ([[[CODE(HTMLe)[input]]/[CODE(HTML)[image]]]])
では座標が含まれます。

[[HTML 2.0]] では、[Q[値無し (null) な欄は省略しても構わない]<urn:ietf:rfc:1866>]
などの規定が含まれていましたが、 HTML 4 
では整理されて[[成功]]制御子の選択に関する規定に移動しています。

[[#comment]]

* Charset の識別

[22] >>11, >>14- にあるように、 [CODE(MIME)[application/x-www-form-urlencoded]]
では、文字の符号化の方法が定まっていません。ですから、
判定のためにいくつもの方法が使われています。

:決め打ち:特定の charset で提出されることが見込める環境のフォーム処理エージェントは、
charset に関する判定・変換を行いません。例えば、欧米で利用されており、
[[ASCII]] または [CODE(charset)[[[ISO-8859-1]]]] 
などで提出する利用者ばかりであると見込めるなら、
受け取ったデータをそのまま内部で使用していることがよくあります。
また、[[iモード]]などの特定の機器から利用することを想定しているフォーム処理エージェントは、
[[シフトJIS]] (iモード拡張版) でデータを受け取るものと想定していることがよくあります。
:自動判別:複数の charset が混在することが普通な環境では、
古くから自動判別によって内部用の charset に変換するなどしてから処理に使用するようにフォーム処理エージェントが設計されています。
例えば、日本語圏では昔から3つの符号化方式が混在してきましたから、
そのいずれであるかを判定し、どれかに統一するのが普通になっています。
:識別情報の利用:自動判別は確実なものではなく、
よく[[文字化け]]が起こっていました。そのため、
外部や内部に識別情報を含め(させ)て、
それを使って復号するという手法が提案されてきました。
自動判別の手法も少しずつ改善されていますが、
それでも完全ではないことや、判定にかかる経費の問題がありますし、
識別情報を付加する UA が増えてきたこともあり、
現在では識別情報によって判断するフォーム処理エージェントが増えてきています。

[[#comment]]

** 自動判別

[23] [CODE(MIME)[application/x-www-form-urlencoded]] の文字列の符号化方式が不明な場合、
自動判別算法によって決定することがよくあります。
自動判別の方法は WWW でフォームが使われる以前から研究されてきましたが、
フォームのデータは従来の判別対象と比べて非常に短いものが多く、
より難しいものとなっています。

[24] また、 [CODE(MIME)[application/x-www-form-urlencoded]]
では判定の対象となる名前・値が複数個存在しますが、
その一つに対する判定結果を他のすべてに対して使ってよいものかという問題もありました。
現在の実装は一つの [CODE(MIME)[application/x-www-form-urlencoded]]
[[実体]]で複数の符号化方式を混在させることはまずありませんが、
過去にはそうではないものもありました (>>15)。
ですから、ある欄がシフト JIS でも別の欄は日本語 EUC
かもしれず、正確に処理するためにはすべての欄で別々に判定しなければなりませんから、
判定の経費が増大し、しかも判定の材料が少なくなるという悲惨な状況でした。

[[#comment]]

** 識別情報の利用

[25] 自動判別にできるだけ頼らず、 UA に識別情報を送らせたり、
一度判定済みの情報を再度利用することによって自動判別の不確実性や経費を削減する方法が古くから考えられてきました。

[5] '''隠し欄を使った方法''': 特定の文字を含めた隠し欄
([[[CODE(HTMLe)[input]]//[CODE(HTML)[hidden]]]])
をフォームに含めておき、提出されたデータの中のその値とあらかじめ用意しておいた
charset ごとのその文字の表現を比較するという方法があります。
たとえば、[SAMP(HTML)[<input type="hidden" name="dot" value="・">]]
をフォームに含めておき、フォーム処理エージェントでは
[SAMP[dot]] の値とあらかじめ用意しておいた [SAMP[・]]
のシフト JIS や日本語 EUC などによる表現と比較します。

この方法は、適当な文字を選べは確実に判定できる優れたものですが、
その情報が他の欄にも通用するとは限らないという問題 (>>24)
があります。この方法が考案された当時実際に欄ごとに別の charset
を用いる実装がありました (>>15) から、
かえって文字化けを誘発する虞がありました。

[27] '''特別な名前を使った方法''':
特定の名前・値の組を charset 名の識別として使います。
例えば、 [[Google]] では [SAMP(URI)[ie=UTF-8]]
のような組を含めることで、一度判別した情報を再利用しているようです。
但し、この使い方はフォームの提出の時点では (UA が対応していないので)
意味がありません。

この方法に UA が対応したものとして、 [CODE(HTML)[[[_charset_]]]]
hack と呼ばれるものがあります。フォームに特定の記述をしておくと、
UA が提出する際に charset 名を [SAMP(URI)[_charset_=ISO-2022-JP]]
のような組として送信してくれます。この方法は最近主要な UA
に実装され、徐々にフォーム処理エージェントでも使われるようになってきています。

[7] '''[CODE(MIME)[charset]] 引数を使った方法''':
[CODE(HTTP)[[[POST]]]] で提出する場合など、
媒体型の引数が利用できる時に、 [CODE(MIME)[[[charset]]]]
引数を使って charset を指定します。

この方法は [[RFC 2070]] や [[WAP]] 
[SRC[[[WML]], [CITE[WAP 日本仕様ガイドライン]]]] 
で提案・規定されていますし、 [[Opera]] などの UA が提出の際に使っています。

[2]
>>27 の方法と似ていますが、 >>27 は[[実体本体]]内の情報であるのに対し、
こちらは実体本体外 ([[実体頭欄]]) の情報ですから、
本体の構文解析より前に情報が得られます。その一方で、
実体頭欄を利用できない [CODE(HTTP)[[[GET]]]] の HTTP URI
のような場所では使えないという致命的な欠点があります。
また、 MIME の定義する [CODE(MIME)[charset]] 引数とは意味的にやや差異があり、
仕様上の問題はないとはいえ、一貫性に欠くとの批判もあります。
(RFC 2070 は、 URI 符号化が 
[ABBR[[[CTE]]][[CODE(MIME)[[[Content-Transfer-Encoding]]]]]] 
のようなものと考えれば問題なかろうという見解を示しています。)

[[#comment]]

* 実装

[1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] 
は [CODE(MIME)[charset]] パラメーターを付けてしまうようです。 [[Perl]] の古い 
[[CGI]] 用 library である [CODE(file)[[[cgi-lib.pl]]]] はこれに対応していません。

この他にも、 [CODE(HTTP)[[[Content-Type]]:]] 
欄に引数が含まれるとうまく処理できなくなってしまうフォーム処理エージェントがかなり多く存在している模様です。

[6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': 
[[Opera]] 7.02 を使ってみましたが、こいつは 
[SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] 
なんてのを送ってきます。。。

[[#comment]]

* 他との関係

[3] [[Lynx]] は [CODE(MIME)[[[application/sgml-form-urlencoded]]]] 
に対応しています。これは [CODE(URI)[&]] の代わりに [CODE(URI)[;]] を使います。

[[#comment]]

* メモ

[4] 過去のしがらみが無い HTTP [CODE(HTTP)[[[POST]]]] を使うプロトコル・応用は、
できればこんな時代遅れの形式は使わずに、 [CODE(MIME)[[[multipart/form-data]]]] 
なり [CODE(MIME)[[[application/xml]]]] なり、
他のきちんと標準化された[[媒体型]]を使うべきです。

@


1.8
log
@auto-committed
@
text
@d1 67
a67 13
ちゃんとした定義見たいのはないみたいです。
必要とする仕様が適当に定義しています。

説明読めばわかりますが、 ASCII 文字以外の送信は意図していない
みたいです。というかむしろ、(仕様策定の時点で無茶苦茶で)
あえて無視せざるを得なかったのかもしれません。

でっかなバイナリ・データや非 ASCII 文字のデータを送るのには
相応しくないので、 [[multipart/form-data媒体型]]が推奨されています。

*BNF

でっちあげ。
d79 1
a79 1
=obs-separator = ";" ;; 下の注記を参照
d85 3
a87 1
*区切文字
d89 1
d109 1
a109 29
*8ビットのオクテットの扱い

8ビットのオクテットを含むときは、 [[multipart/form-data媒体型]]
を使うべきでしょう。

解釈の時。 XForm (WD) は、疑問を呈しつつも [[UTF-8]] にすべし、
といってます。

CGI script などの実装では、ビット組合せから自動判別するか、
特定の[[符号化文字集合]]に決め打ちしているのが多いようです。
(というか他に選択肢は無いな・・エラーで処理中止くらいしか。)

IETF HTML 2.x (RFC 2070), HTML4 は accept-charset
属性により、 form 要素から送られるデータの charset
を指定できるようにしています。但しこれを指定していない 
HTML 文書が多く、対応していない実装(UA)も少なくありません。

この既定値は "unknown" とされています。その場合、
HTML4 は文書の charset が指定されているとみなすように
言っています。
<http://www.w3.org/TR/html401/interact/forms.html#adef-accept-charset>

ですからこれだけの手がかりがあれば、余程運が悪く無い限り、
なんとか解読できるのではないでしょうか。

とはいえ、 charset 指定の可能な [[multipart/form-data媒体型]]
を使うのが望ましいことにはかわりありません。

*W3C HTML 4.01 の説明
d111 1
a111 2
17.13.4 <http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1>
曰く:
d113 2
a114 38
**application/x-www-form-urlencoded  

This is the default content type. Forms submitted with this 
content type must be encoded as follows:

=Control names and values are escaped. Space characters are replaced by `+', and then reserved characters are escaped as described in [RFC1738], section 2.2: Non-alphanumeric characters are replaced by `%HH', a percent sign and two hexadecimal digits representing the ASCII code of the character. Line breaks are represented as "CR LF" pairs (i.e., `%0D%0A'). 
=The control names/values are listed in the order they appear in the document. The name is separated from the value by `=' and name/value pairs are separated from each other by `&'. 

**和訳

これは ([[form要素]]からの送信時の) 既定の内容型です。
この内容型で送信する form は、次のように符号化しないといけません。

=制御 control 名と値を escape する。間隔文字は「+」で置き換えて、予約文字は [RFC1738] の2.2節で説明されているように escape する。つまり、非字母数字文字を「%HH」 (百分率記号と文字の ASCII 符号を表す2桁の16進数字) で置き換える。改行は「CR LF」組 (つまり「%0D%0A」) で表現する。
=制御名・値を文書に現れる順で列挙する。名前と値は「=」で区切って、名前・値組は互いに「&」で区切る。

*IETF HTML 2.0 (RFC 1866) の説明

W3C HTML 4.01 の説明とほぼ同じです。 2. には更に次のように
書かれています。 (もしかすると HTML4 でも他の部分に書いてあるのかも
しれません。)

値無し (null) の領域は、省略しても構いません。
特に、未選択のラジオ・ボタンやチェック箱は
符号化データに出現させるべきではありません。
但し、 value 属性のある隠し領域は出現させるべきです。

*W3C XForm での説明

W3C HTML4 と大体同じです。但し、 XForm はまだ WD です。
<http://www.w3.org/TR/xforms/slice4.html#rpm-send-urlencoded>

*charset パラメーター

『WAP 日本仕様ガイドライン (日本語を用いたコンテンツ作成環境)
― WAP June 2000 Conformance Release 対応版 ―』,
2000 年10 月25 日 1.0 版, モバイル・インターネット・アクセス・フォーラム
第1技術部会 SPEC 作業班
d116 241
a356 2
という仕様書では、 [[charsetパラメーター]] が使えることになっています。
但し値はこいつの仕様上実質的に [[Shift_JIS]] のみとり得ます。
a357 9
日本仕様じゃない元仕様にもあるのかとか、新版があればそれにも
あるのかとかは、調べてません。
- [1] <http://openlab.ring.gr.jp/k16/htmllint/faq.html> によると、古い [[Lynx]] は [CODE[charset]] パラメーターを付けてしまうようです。 [[perl]] の古い [[CGI]] 用 library である [[cgi-lib.pl]] はこれに対応していません。
- [2] なお、この実在しない [CODE[charset]] パラメーターを使った場合でも、 [[MIME]] の [CODE[charset]] パラメーターと同じ解釈にはなりませんから注意が必要です。
- [3] [[Lynx]] は [CODE[application/sgml-form-urlencoded]] に対応しています。これは "&" の代わりに ";" を使います。
- [4] 過去のしがらみが無い HTTP post を使うプロトコル・応用は、できればこんな時代遅れの形式は使わずに、 [CODE[[[multipart/form-data]]]] なり [CODE[[[application/xml]]]] なり、他のきちんと標準化された[[媒体型]]を使うべきです。
- [5] [WEAK[2003-09-17 11:24:21 +00:00]] ''[[application/x-www-form-urlencoded]]'': 
- [6] [WEAK[2003-09-26 07:29:50 +00:00]] ''[[Mr.Anonymous]]'': [[Opera]] 7.02 を使ってみましたが、こいつは [SAMP(HTTP)[application/x-www-form-urlencoded; charset=utf-8]] なんてのを送ってきます。。。
- [7] >>0 本家 [[WML]] が UA に [CODE(MIME)[charset]] 引数をつけることを要求しています。 <http://www.openmobilealliance.org/wapdocs/wap-191_105-wml-20020212-a.pdf> とか参照。
@


1.7
log
@auto-committed
@
text
@d135 1
@


1.6
log
@semi-auto committed
@
text
@d134 1
@


1.5
log
@auto-committed
@
text
@d133 1
@


1.4
log
@pre-namespace
@
text
@d132 1
@


1.3
log
@auto-commited
@
text
@d131 1
@


1.2
log
@*** empty log message ***
@
text
@d129 2
@


1.1
log
@Updated.
@
text
@d117 12
@

