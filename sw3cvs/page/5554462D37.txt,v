head	1.15;
access;
symbols
	suikawiki3-final:1.15
	before-db-leaffile:1.5
	after-upgrade-to-suikawiki-3:1.5
	before-fork-suikawiki3:1.5
	after-restore-20040122:1.5;
locks; strict;
comment	@# @;


1.15
date	2007.12.08.02.37.38;	author wakaba;	state Exp;
branches;
next	1.14;

1.14
date	2007.07.23.02.43.03;	author wakaba;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.03.02.33.36;	author wakaba;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.18.02.42.21;	author wakaba;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.27.02.10.03;	author wakaba;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.23.02.11.18;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.03.02.08.38;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.23.02.16.32;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.18.02.07.23;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.23.02.05.12;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.13.02.01.46;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.16.09.18.53;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.27.07.24.58;	author make;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.29.13.24.49;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.16.14.24.02;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.15
log
@auto-committed
@
text
@
[3] [DFN[UTF-7]] は [[UCS]] ([[ISO/IEC 10646]]/[[Unicode]])
の[[符号化方式]]の一つで、 [CODE(char)[U+0080]]〜[CODE(char)[U+10FFFF]] を [[ASCII]]
の[[図形文字]]に [[Base64]] を使って転写するものです。

[[Experimental]] RFC である [[RFC 1642]] <urn:ietf:rfc:1642>
で定義されていましたが、この RFC は [[RFC 2152]]
<urn:ietf:rfc:2152> ([[Informational]])
で廃止されました。 RFC 2152 は editorial な変更以外は
RFC 1642 と同じ内容です。

[12]
UTF-7 は 7ビットの制限がある[[電子メイル]] (特に [[SMTP]])
での使用を想定して設計されたものですが、現在では使用は非推奨とされています。 
([[UTF-8]] を [[MIME]] の [[Base64]] で包むなりして送るのが [[IETF]] 
のお勧めらしいです。)

[[IMAP]] では[DFN[修正 UTF-7]] が使われています。

[41]
あ
([[名無しさん]] [WEAK[2006-07-24 11:16:00 +00:00]])

[[#comment]]


* 符号化方式

[13]
:集合 D (直接符号化文字):[CODE(regex)['''['''A-Za-z0-9'(),-./:?''']''']]
:集合 O (任意符号化文字):[CODE(regex)['''['''!"#$%&*;<=>@@[]^_`{|}''']''']]
:集合 B (修正 Base64):[[Base64]] 字母 ([CODE(char)[=]] を除く。)

[14]
[DFN[規則1 (直接符号化)]]: 集合 D と集合 O の文字は、そのまま
1 オクテットの [[ASCII]] で符号化。集合 O 
の文字は使用する頭欄や通過する関門によっては問題があり得るから注意。

[15]
[DFN[規則2 (Unicode シフト符号化)]]: 任意の Unicode 文字
([[UTF-16BE]] で表したもの。) を[DFN[修正 [[Base64]]]]
で符号化。この前に [CODE(char)[+]] を置く。これは集合 B に無い文字 
([CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] などを含む。) 
が出現するまで続く。[Q[集合 B に無い文字]]が 
[CODE(char)[-]] の時は、これを棄てる。

規則2を別の言い方で説明すると、こう。任意の Unicode
文字(列)は修正 Base64 で符号化して、頭とお尻に [CODE(char)[+]] と [CODE(char)[-]]
をつける。但し、この塊の直後が集合 B に含まれない文字である場合は、
[CODE(char)[-]] を省略しても良い。

[CODE(char)[+-]] は、 [CODE(char)[+]] を表す。

[16]
[DFN[規則3]]: [CODE(char)[[[SP]]]] ([CODE(char)[U+0020]]), 
[CODE(char)[[[HT]]]] ([CODE(char)[U+0009]]), [CODE(char)[CR]] ([CODE(char)[U+000D]]), 
[CODE(char)[LF]] ([CODE(char)[U+000A]])
は、そのまま1オクテットの ASCII で表現。

[17]
RFC 2152 は集合 O の [CODE(char)[`]] を [CODE(char)[']] に誤植しています。
(RFC 1642 はあってるのに。) 気になるなら両方とも集合 O
として扱うのが良いかもしれません。

[18] これをみるとわかるように、 UTF-7 は他の UTF-8
などの符号化方式とは違って UCS 専用の[[転送符号化]]のような趣です。
Charset の一種ではなく、 [[MIME]] の一部であったなら、
もう少しは普及したかもしれません。

[[#comment]]


* UTF-7 の修正 Base64

[19] 基本的には [[MIME]] の [[Base64]] なのですが、
詰め物 [CODE(char)[=]] は使わずに、 0 のビットがあるとして処理します。
(復号の時は余ったのを棄てるだけで良い。)

(だけど最後が [CODE(char)[U+0000]] だと困るような。 [CODE(char)[U+0000]] は 
[CODE(char)[[[NUL]]]] だし、ステステなのかな。)

[11] >>19 [[C]] 以来 (それ以前から??) [CODE(char)[[[NULL]]]] 
って冷遇されてますよねぇ。 (っていうか [CODE(char)[NULL]] ってそういうもの?)

[35]
MIME の改行に関する規定もないことになってるような。 UTF-7 RFC にそう明記されていたっけ?
([[名無しさん]])


[46]
配送明細
([[名無しさん]] [WEAK[2007-12-07 09:10:50 +00:00]])


[[#comment]]


* Korean mess と UTF-7

[1] 
Charset 名 [CODE(charset)[UNICODE-1-1-UTF-7]] は、 [[Unicode 1.1]] 
([[ハングルの大移動]]以前) のデータを UTF-7 
で符号化したものに対して使います。

[[#comment]]


* 修正 UTF-7

[24]
[DFN[IMAP [RUBYB[修正] [modified]] UTF-7]] は、
[[RFC 2060]] <urn:ietf:rfc:2060> ([[IMAP]]) 5.1.3 で定義されています。
(決まった呼び名はなく、[Q[IMAP の UTF-7]] とか呼びたい人が好きな名前で呼んでいます。)

[25]
[CODE(char)[&]] を除く印字可能 ASCII 文字 ([CODE(char)[[[SP]]]] を含む。) は全て、
そのままにします。
それ以外の文字 ([[C0]], [CODE(char)[[[DEL]]]] を含む。) は修正修正 Base64 
を使います。

修正修正 Base64 は、前に [CODE(char)[&]] が、後に [CODE(char)[-]] が来ます。
(明記されてはいませんが、修正前の UTF-7 とは異なり、 
[CODE(char)[-]] は省略不能だと思います。)
Base64 字母の [CODE(char)[/]] は
[WEAK[IMAP 的意味との衝突防止から]] [CODE(char)[,]] で代用します。

[CODE(char)[&-]] が [CODE(char)[&]] を表します。

[27] これだけ違うと別の名前付けた方がよかったと思うぞ。
[[#comment]]


* UTF-7 を採用した規格

[34] UTF-7 を積極的に (単なる可能な選択肢の一つとしてではなく、
実装必須であろうが任意選択であろうが規格の完全な一部として)
採用している規格には次のようなものがあります。

- [[IMAP]]
-- IMAP は名前に UTF-7 を使っています。但し、素の UTF-7
ではなく、アルゴリズムが同じなだけで互換性のない修正版 UTF-7 です。
- [[PICS]] ([CODE(MIME)[[[application/pics-service]]]])
-- 記述に UTF-7 を使っています。
-- 区切子と使う二重引用符以外の集合 O の文字は直接符号化します。
-- 仕様書: [CITE[REC-PICS-services-961031]] 
<http://www.w3.org/TR/REC-PICS-services#Syntax>

[42]
sdfs
([[名無しさん]] [WEAK[2007-04-17 04:43:31 +00:00]])

[[#comment]]


* MIME での使用


** 素の UTF-7

[28]
[[MIME]] で使用する時は、 [CODE(MIME)[[[charset]]]] 名 
[CODE(charset)[UTF-7]] または
[CODE(charset)[UNICODE-1-1-UTF-7]] (RFC 1642) を使います。

IANA 登録簿に無い名前では、 [CODE(charset)[UTF7]], [CODE(charset)[CP65000]], 
[CODE(charset)[UNICODE-2-0-UTF-7]],
[CODE(charset)[UNICODE-2-0-UTF7]], [CODE(charset)[X-UNICODE-2-0-UTF-7]] 
が観測されてます。

[29]
[[SMTP]] で使う時は、 [CODE(char)[LINE SEPARATOR]] ([CODE(char)[U+2028]]) tp
[CODE(char)[PARAGRAPH SEPARATOR]] ([CODE(char)[U+2029]])
を [CODE(char)[[[CRLF]]]] に変換してあげたら良さげ、って RFC 2152 に書いてあります。
でも実際 [CODE(char)[LS]] とか [CODE(char)[PS]] を使ってる文書ってあるんですかね?

[Q[[[MUST]]]] じゃないし、無視していいと思います。 [CODE(char)[PS]] を 
[CODE(char)[CRLF]] に変換するのは明らかに情報劣化ですし。 
(plain‐text で [CODE(char)[PS]] なんて使うなっていう
話もありますが。)

[[#comment]]


** 修正 UTF-7

[30]
IMAP の修正 UTF-7 の名前としては、 [CODE(charset)[X-IMAP4-Modified-UTF7]],
[CODE(charset)[UTF-7-for-IMAP]] が観測されてます。 
IANA 登録簿に登録しようという動きがありましたが、情報交換用でない charset 
を登録する必要は無いという意見があって、立ち消えになってしまいました。
(登録派の意見は、プログラムの内部名として使うときに IANA 
名が標準化されていたほうが便利、というもの。確かに根拠としては弱い。)

ちなみに、 [[PHP]] では [CODE(charset)[UTF7-IMAP]] という名前を使っています。

[[#comment]]


** 内容転送符号化

[36] [[MIME]] で使用する場合、 [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は不要です。 ([CODE(MIME)[[[7bit]]]] で十分です。)

[[ASCII]] すら保証されない転送路 [WEAK[(いまどきあるのか?)]]
を通す必要がある時は、適当な CTE を使うか、集合 O
の文字も UTF-7 で修正 Base64 を使って符号化すればよいでしょう。
(集合 D の文字が危険な場合は CTE を使うしかありません。
[[関門]]などで charset を勝手に変えたくない場合も CTE を使うしかありません。)

CTE を使う場合は [CODE(MIME)[[[Base64]]]] ではなく、
[CODE(MIME)[[[Quoted-Printable]]]] を使うべきです。
[CODE(MIME)[Base64]] を使うのは無駄過ぎです。

[[#comment]]


** 符号化語

[37] [[MIME]] [CODE(ABNF)[[[encoded-word]]]] で使用する場合、
[CODE(MIME)[[[B]]]] 符号化ではなく [CODE(MIME)[[[Q]]]]
符号化を使うべきです。 (Base64 を使うのは無駄過ぎです。)
ほとんどの場合は [CODE(MIME)[Q]] 符号化でも実質無変換で使用できます。

[[#comment]]


** その他

[[#comment]]


* CodePage

[33] [[Windows CodePage]] 65000 が素の UTF-7 に割り当てられているようです。

[[#comment]]


* ファイル名

[32] 素の UTF-7 で書かれた[[ファイル]]であることを[[ファイル名]]の[[接尾辞]]
([[拡張子]]) を使って示すことがたまにあります。

そのような場合に使われる接尾辞の例:
- [SAMP(file)[.u7]]
- [SAMP(file)[.utf7]]
- [SAMP(file)[.utf-7]]

[[#comment]]


* 実装について

[6] 古い [ABBR[[[NN]]] [[[Netscape Navigator]]]] は [CODE(char)[+-]] 
に対応していないらしいです。。。

[7] >>6 のように間違った実装では [CODE(char)[[[PLUS SIGN]]]] をそのまま 
[CODE(char)[+]] と表すみたいです。

[8] もし >>6-7 のような問題が気になるのなら、
[CODE(char)[+]] は規則2で符号化することにすれば、(きっと) 問題ないでしょう。

[32] [[Outlook Express]] (版不明) では、 UTF-7
で本文を符号化すると、 [CODE(822)[[[Message-ID]]:]] 欄などでも意味もなく
UTF-7 で符号化してしまうらしいです。 ([CODE(ABNF)[[[encoded-word]]]]
などではなく、[[欄本体]]が生の UTF-7。)

[[#comment]]


* 例


** 素の UTF-7

- [20] [SAMP[A+ImIDkQ.]] (= [SAMP[A[CODE(char)[<NOT IDENTICAL TO>]]Α.]]) 
([CODE(char)[U+0041]] [CODE(char)[U+2262]] [CODE(char)[U+0391]] [CODE(char)[U+002E]])
- [21] [SAMP[Hi Mom -+Jjo--!]] (= [SAMP[Hi Mom -[CODE(char)[<WHITE SMILING FACE>]]-!]]) 
([CODE(char)[U+0048]] [CODE(char)[U+0069]] [CODE(char)[U+0020]] 
[CODE(char)[U+004D]] [CODE(char)[U+006F]] [CODE(char)[U+006D]] 
[CODE(char)[U+0020]] [CODE(char)[U+002D]] [CODE(char)[U+263A]] 
[CODE(char)[U+002D]] [CODE(char)[U+0021]])
- [22] [SAMP[+ZeVnLIqe-]] (= [SAMP[日本語]]) 
([CODE(char)[U+65E5]] [CODE(char)[U+672C]] [CODE(char)[U+8A9E]])
- [23] [SAMP[Item 3 is +AKM-1.]] (= [SAMP[Item 3 is £1.]])

(RFC 2152 より。この例はもはや伝説になりつつあるな。。)

[[#comment]]


** 修正 UTF-7

- [26] [SAMP[~peter/mail/&ZeVnLIqe-/&U,BTFw-]]

[[#comment]]


* メモ

[38]
[CITE[スラッシュドット ジャパン | UTF-7エンコードされたタグ文字列によるXSS脆弱性に注意]] <http://slashdot.jp/security/05/12/21/2318216.shtml>
([[名無しさん]] [WEAK[2005-12-22 01:14:03 +00:00]])

[39]
[CITE[Bug 4868 - ASCIIと互換性のない文字コードはユーザーの指定で選択可能にすべきでない]] <http://bugzilla.mozilla.gr.jp/show_bug.cgi?id=4868>

>>38 の問題は[[UTF-7]]に限らずどんな[[文字コード]]でも、可能な[[ビット列]]の組合わせによって生じうる。

([[名無しさん]] [sage])

[40]
[CITE[The Old New Thing : Some files come up strange in Notepad]] <http://blogs.msdn.com/oldnewthing/archive/2004/03/24/95235.aspx>

[[BOM]]
([[名無しさん]] [sage])

[43]
[CITE@@en[I'm not a Klingon : Please avoid UTF-7]] ([CODE[2007-05-02 10:19:34 +09:00]] 版) <http://blogs.msdn.com/shawnste/archive/2007/05/01/please-avoid-utf-7.aspx>
([[名無しさん]] [WEAK[2007-05-02 01:22:20 +00:00]])

[44]
>>43 UTF-8 over MIME が使えない legacy な mail/NNTP
の実装ってあるのか? UTF-7 over MIME only な UA
なんて UTF-7 がでてきた極々初期くらいにしか存在しなかったのでは?

([[名無しさん]] [WEAK[2007-05-02 01:24:35 +00:00]])

[45]
[CITE[葉っぱ日記 - そろそろ UTF-7 について一言いっとくか]] ([CODE[2007-07-22 01:39:26 +09:00]] 版) <http://d.hatena.ne.jp/hasegawayosuke/20070717/p1>
([[名無しさん]])@


1.14
log
@auto-committed
@
text
@d89 6
d330 2
a331 3
[CITE[葉っぱ日記 - そろそろ UTF-7 について一言いっとくか]] ([TIME[2007-07-22 01:39:26 +09:00]] 版) <http://d.hatena.ne.jp/hasegawayosuke/20070717/p1>
([[名無しさん]])

@


1.13
log
@auto-committed
@
text
@d317 3
a319 3
>>43 UTF-8 over MIME が使えない legacy な mail/NNTP
の実装ってあるのか? UTF-7 over MIME only な UA
なんて UTF-7 がでてきた極々初期くらいにしか存在しなかったのでは?
d322 4
@


1.12
log
@auto-committed
@
text
@a145 1

d310 13
a322 1
([[名無しさん]] [sage])@


1.11
log
@auto-committed
@
text
@a19 1

a23 1

d141 5
@


1.10
log
@auto-committed
@
text
@d20 6
d305 2
a306 2
[CITE[The Old New Thing : Some files come up strange in Notepad]] <http://blogs.msdn.com/oldnewthing/archive/2004/03/24/95235.aspx>

d308 1
a308 2
([[名無しさん]] [sage])

@


1.9
log
@auto-committed
@
text
@d292 8
a299 1
[CITE[Bug 4868 - ASCIIと互換性のない文字コードはユーザーの指定で選択可能にすべきでない]] <http://bugzilla.mozilla.gr.jp/show_bug.cgi?id=4868>
d301 1
a301 2
>>38 の問題は[[UTF-7]]に限らずどんな[[文字コード]]でも、可能な[[ビット列]]の組合わせによって生じうる。

@


1.8
log
@auto-committed
@
text
@d291 7
@


1.7
log
@auto-committed
@
text
@d1 290
a290 281

[3] [DFN[UTF-7]] は [[UCS]] ([[ISO/IEC 10646]]/[[Unicode]])
の[[符号化方式]]の一つで、 [CODE(char)[U+0080]]〜[CODE(char)[U+10FFFF]] を [[ASCII]]
の[[図形文字]]に [[Base64]] を使って転写するものです。

[[Experimental]] RFC である [[RFC 1642]] <urn:ietf:rfc:1642>
で定義されていましたが、この RFC は [[RFC 2152]]
<urn:ietf:rfc:2152> ([[Informational]])
で廃止されました。 RFC 2152 は editorial な変更以外は
RFC 1642 と同じ内容です。

[12]
UTF-7 は 7ビットの制限がある[[電子メイル]] (特に [[SMTP]])
での使用を想定して設計されたものですが、現在では使用は非推奨とされています。 
([[UTF-8]] を [[MIME]] の [[Base64]] で包むなりして送るのが [[IETF]] 
のお勧めらしいです。)

[[IMAP]] では[DFN[修正 UTF-7]] が使われています。

[[#comment]]


* 符号化方式

[13]
:集合 D (直接符号化文字):[CODE(regex)['''['''A-Za-z0-9'(),-./:?''']''']]
:集合 O (任意符号化文字):[CODE(regex)['''['''!"#$%&*;<=>@@[]^_`{|}''']''']]
:集合 B (修正 Base64):[[Base64]] 字母 ([CODE(char)[=]] を除く。)

[14]
[DFN[規則1 (直接符号化)]]: 集合 D と集合 O の文字は、そのまま
1 オクテットの [[ASCII]] で符号化。集合 O 
の文字は使用する頭欄や通過する関門によっては問題があり得るから注意。

[15]
[DFN[規則2 (Unicode シフト符号化)]]: 任意の Unicode 文字
([[UTF-16BE]] で表したもの。) を[DFN[修正 [[Base64]]]]
で符号化。この前に [CODE(char)[+]] を置く。これは集合 B に無い文字 
([CODE(char)[[[CR]]]] や [CODE(char)[[[LF]]]] などを含む。) 
が出現するまで続く。[Q[集合 B に無い文字]]が 
[CODE(char)[-]] の時は、これを棄てる。

規則2を別の言い方で説明すると、こう。任意の Unicode
文字(列)は修正 Base64 で符号化して、頭とお尻に [CODE(char)[+]] と [CODE(char)[-]]
をつける。但し、この塊の直後が集合 B に含まれない文字である場合は、
[CODE(char)[-]] を省略しても良い。

[CODE(char)[+-]] は、 [CODE(char)[+]] を表す。

[16]
[DFN[規則3]]: [CODE(char)[[[SP]]]] ([CODE(char)[U+0020]]), 
[CODE(char)[[[HT]]]] ([CODE(char)[U+0009]]), [CODE(char)[CR]] ([CODE(char)[U+000D]]), 
[CODE(char)[LF]] ([CODE(char)[U+000A]])
は、そのまま1オクテットの ASCII で表現。

[17]
RFC 2152 は集合 O の [CODE(char)[`]] を [CODE(char)[']] に誤植しています。
(RFC 1642 はあってるのに。) 気になるなら両方とも集合 O
として扱うのが良いかもしれません。

[18] これをみるとわかるように、 UTF-7 は他の UTF-8
などの符号化方式とは違って UCS 専用の[[転送符号化]]のような趣です。
Charset の一種ではなく、 [[MIME]] の一部であったなら、
もう少しは普及したかもしれません。

[[#comment]]


* UTF-7 の修正 Base64

[19] 基本的には [[MIME]] の [[Base64]] なのですが、
詰め物 [CODE(char)[=]] は使わずに、 0 のビットがあるとして処理します。
(復号の時は余ったのを棄てるだけで良い。)

(だけど最後が [CODE(char)[U+0000]] だと困るような。 [CODE(char)[U+0000]] は 
[CODE(char)[[[NUL]]]] だし、ステステなのかな。)

[11] >>19 [[C]] 以来 (それ以前から??) [CODE(char)[[[NULL]]]] 
って冷遇されてますよねぇ。 (っていうか [CODE(char)[NULL]] ってそういうもの?)

[35]
MIME の改行に関する規定もないことになってるような。 UTF-7 RFC にそう明記されていたっけ?
([[名無しさん]])

[[#comment]]


* Korean mess と UTF-7

[1] 
Charset 名 [CODE(charset)[UNICODE-1-1-UTF-7]] は、 [[Unicode 1.1]] 
([[ハングルの大移動]]以前) のデータを UTF-7 
で符号化したものに対して使います。

[[#comment]]


* 修正 UTF-7

[24]
[DFN[IMAP [RUBYB[修正] [modified]] UTF-7]] は、
[[RFC 2060]] <urn:ietf:rfc:2060> ([[IMAP]]) 5.1.3 で定義されています。
(決まった呼び名はなく、[Q[IMAP の UTF-7]] とか呼びたい人が好きな名前で呼んでいます。)

[25]
[CODE(char)[&]] を除く印字可能 ASCII 文字 ([CODE(char)[[[SP]]]] を含む。) は全て、
そのままにします。
それ以外の文字 ([[C0]], [CODE(char)[[[DEL]]]] を含む。) は修正修正 Base64 
を使います。

修正修正 Base64 は、前に [CODE(char)[&]] が、後に [CODE(char)[-]] が来ます。
(明記されてはいませんが、修正前の UTF-7 とは異なり、 
[CODE(char)[-]] は省略不能だと思います。)
Base64 字母の [CODE(char)[/]] は
[WEAK[IMAP 的意味との衝突防止から]] [CODE(char)[,]] で代用します。

[CODE(char)[&-]] が [CODE(char)[&]] を表します。

[27] これだけ違うと別の名前付けた方がよかったと思うぞ。
[[#comment]]


* UTF-7 を採用した規格

[34] UTF-7 を積極的に (単なる可能な選択肢の一つとしてではなく、
実装必須であろうが任意選択であろうが規格の完全な一部として)
採用している規格には次のようなものがあります。

- [[IMAP]]
-- IMAP は名前に UTF-7 を使っています。但し、素の UTF-7
ではなく、アルゴリズムが同じなだけで互換性のない修正版 UTF-7 です。
- [[PICS]] ([CODE(MIME)[[[application/pics-service]]]])
-- 記述に UTF-7 を使っています。
-- 区切子と使う二重引用符以外の集合 O の文字は直接符号化します。
-- 仕様書: [CITE[REC-PICS-services-961031]] 
<http://www.w3.org/TR/REC-PICS-services#Syntax>

[[#comment]]


* MIME での使用


** 素の UTF-7

[28]
[[MIME]] で使用する時は、 [CODE(MIME)[[[charset]]]] 名 
[CODE(charset)[UTF-7]] または
[CODE(charset)[UNICODE-1-1-UTF-7]] (RFC 1642) を使います。

IANA 登録簿に無い名前では、 [CODE(charset)[UTF7]], [CODE(charset)[CP65000]], 
[CODE(charset)[UNICODE-2-0-UTF-7]],
[CODE(charset)[UNICODE-2-0-UTF7]], [CODE(charset)[X-UNICODE-2-0-UTF-7]] 
が観測されてます。

[29]
[[SMTP]] で使う時は、 [CODE(char)[LINE SEPARATOR]] ([CODE(char)[U+2028]]) tp
[CODE(char)[PARAGRAPH SEPARATOR]] ([CODE(char)[U+2029]])
を [CODE(char)[[[CRLF]]]] に変換してあげたら良さげ、って RFC 2152 に書いてあります。
でも実際 [CODE(char)[LS]] とか [CODE(char)[PS]] を使ってる文書ってあるんですかね?

[Q[[[MUST]]]] じゃないし、無視していいと思います。 [CODE(char)[PS]] を 
[CODE(char)[CRLF]] に変換するのは明らかに情報劣化ですし。 
(plain‐text で [CODE(char)[PS]] なんて使うなっていう
話もありますが。)

[[#comment]]


** 修正 UTF-7

[30]
IMAP の修正 UTF-7 の名前としては、 [CODE(charset)[X-IMAP4-Modified-UTF7]],
[CODE(charset)[UTF-7-for-IMAP]] が観測されてます。 
IANA 登録簿に登録しようという動きがありましたが、情報交換用でない charset 
を登録する必要は無いという意見があって、立ち消えになってしまいました。
(登録派の意見は、プログラムの内部名として使うときに IANA 
名が標準化されていたほうが便利、というもの。確かに根拠としては弱い。)

ちなみに、 [[PHP]] では [CODE(charset)[UTF7-IMAP]] という名前を使っています。

[[#comment]]

** 内容転送符号化

[36] [[MIME]] で使用する場合、 [CODE(MIME)[[[Content-Transfer-Encoding]]]]
は不要です。 ([CODE(MIME)[[[7bit]]]] で十分です。)

[[ASCII]] すら保証されない転送路 [WEAK[(いまどきあるのか?)]]
を通す必要がある時は、適当な CTE を使うか、集合 O
の文字も UTF-7 で修正 Base64 を使って符号化すればよいでしょう。
(集合 D の文字が危険な場合は CTE を使うしかありません。
[[関門]]などで charset を勝手に変えたくない場合も CTE を使うしかありません。)

CTE を使う場合は [CODE(MIME)[[[Base64]]]] ではなく、
[CODE(MIME)[[[Quoted-Printable]]]] を使うべきです。
[CODE(MIME)[Base64]] を使うのは無駄過ぎです。

[[#comment]]

** 符号化語

[37] [[MIME]] [CODE(ABNF)[[[encoded-word]]]] で使用する場合、
[CODE(MIME)[[[B]]]] 符号化ではなく [CODE(MIME)[[[Q]]]]
符号化を使うべきです。 (Base64 を使うのは無駄過ぎです。)
ほとんどの場合は [CODE(MIME)[Q]] 符号化でも実質無変換で使用できます。

[[#comment]]

** その他

[[#comment]]

* CodePage

[33] [[Windows CodePage]] 65000 が素の UTF-7 に割り当てられているようです。

[[#comment]]


* ファイル名

[32] 素の UTF-7 で書かれた[[ファイル]]であることを[[ファイル名]]の[[接尾辞]]
([[拡張子]]) を使って示すことがたまにあります。

そのような場合に使われる接尾辞の例:
- [SAMP(file)[.u7]]
- [SAMP(file)[.utf7]]
- [SAMP(file)[.utf-7]]

[[#comment]]


* 実装について

[6] 古い [ABBR[[[NN]]] [[[Netscape Navigator]]]] は [CODE(char)[+-]] 
に対応していないらしいです。。。

[7] >>6 のように間違った実装では [CODE(char)[[[PLUS SIGN]]]] をそのまま 
[CODE(char)[+]] と表すみたいです。

[8] もし >>6-7 のような問題が気になるのなら、
[CODE(char)[+]] は規則2で符号化することにすれば、(きっと) 問題ないでしょう。

[32] [[Outlook Express]] (版不明) では、 UTF-7
で本文を符号化すると、 [CODE(822)[[[Message-ID]]:]] 欄などでも意味もなく
UTF-7 で符号化してしまうらしいです。 ([CODE(ABNF)[[[encoded-word]]]]
などではなく、[[欄本体]]が生の UTF-7。)

[[#comment]]


* 例


** 素の UTF-7

- [20] [SAMP[A+ImIDkQ.]] (= [SAMP[A[CODE(char)[<NOT IDENTICAL TO>]]Α.]]) 
([CODE(char)[U+0041]] [CODE(char)[U+2262]] [CODE(char)[U+0391]] [CODE(char)[U+002E]])
- [21] [SAMP[Hi Mom -+Jjo--!]] (= [SAMP[Hi Mom -[CODE(char)[<WHITE SMILING FACE>]]-!]]) 
([CODE(char)[U+0048]] [CODE(char)[U+0069]] [CODE(char)[U+0020]] 
[CODE(char)[U+004D]] [CODE(char)[U+006F]] [CODE(char)[U+006D]] 
[CODE(char)[U+0020]] [CODE(char)[U+002D]] [CODE(char)[U+263A]] 
[CODE(char)[U+002D]] [CODE(char)[U+0021]])
- [22] [SAMP[+ZeVnLIqe-]] (= [SAMP[日本語]]) 
([CODE(char)[U+65E5]] [CODE(char)[U+672C]] [CODE(char)[U+8A9E]])
- [23] [SAMP[Item 3 is +AKM-1.]] (= [SAMP[Item 3 is £1.]])

(RFC 2152 より。この例はもはや伝説になりつつあるな。。)

[[#comment]]


** 修正 UTF-7

- [26] [SAMP[~peter/mail/&ZeVnLIqe-/&U,BTFw-]]

[[#comment]]


* メモ@


1.6
log
@auto-committed
@
text
@d1 1
a1 1
#?SuikaWiki/0.9 page-icon="字β"
d22 3
a24 1
*符号化方式
d26 3
a28 3
:集合 D (直接符号化文字):[CODE(regex)[ [A-Za-z0-9'(),-./:?] ]]
:集合 O (任意符号化文字):[CODE(regex)[ [!"#$%&*;<=>@@[]^_`{|}] ]]
:集合 B (修正 Base64): [[Base64]] 字母 ([CODE(char)[=]] を除く。)
a67 1
*UTF-7 の修正 Base64
d69 4
a72 2
[19]
詰め物 [CODE(char)[=]] は使わずに、 0 のビットがあるとして処理する。
d80 5
d91 3
a93 2
[CODE(charset)[UNICODE-1-1-UTF-7]] は、 [[Unicode 1.1]] 
([[ハングルの大移動]]以前) のデータを UTF-7 で符号化したものに対して使います。
d97 2
a98 1
*修正 UTF-7
d101 1
a101 1
[DFN[IMAP [RUBYB[修正][modified]] UTF-7]] は、
d119 3
d123 14
a137 1
[27] これだけ違うと別の名前付けた方がよかったと思うぞ。
d141 3
a143 1
*MIME での使用
d145 1
d169 2
a170 1
**修正 UTF-7
d184 30
d220 1
a232 1
*実装について
d234 3
a236 1
[6] 古い [ABBR[[[NN]]][[[Netscape Navigator]]]] は [CODE(char)[+-]] 
d253 3
a255 1
*例
d257 2
a258 1
-[20] [SAMP[A+ImIDkQ.]] (= [SAMP[A[CODE(char)[<NOT IDENTICAL TO>]]Α.]]) 
d260 1
a260 1
-[21] [SAMP[Hi Mom -+Jjo--!]] (= [SAMP[Hi Mom -[CODE(char)[<WHITE SMILING FACE>]]-!]]) 
d265 1
a265 1
-[22] [SAMP[+ZeVnLIqe-]] (= [SAMP[日本語]]) 
d267 1
a267 1
-[23] [SAMP[Item 3 is +AKM-1.]] (= [SAMP[Item 3 is £1.]])
d273 1
d275 2
a276 1
-[26] [SAMP[~peter/mail/&ZeVnLIqe-/&U,BTFw-]]
d279 1
@


1.5
log
@auto-committed
@
text
@d2 2
a3 2
[3] UTF-7 は [[UCS]] ([[ISO/IEC10646]]/[[Unicode]])
の[[符号化方式]]の一つで、 U+0080〜U+10FFFF を ASCII
d6 3
a8 5
Experimental RFC である [[RFC1642]]
<urn:ietf:rfc:1642>
で定義されていましたが、
この RFC は [[RFC2152]]
<urn:ietf:rfc:2152> (Informational)
d12 1
d14 3
a16 3
での使用を想定して設計されたものですが、現在では
使用は非推奨とされています。 ([[UTF-8]] を [[MIME]]
の [[Base64]] で包むなりして送るのが [[IETF]] お勧めらしいです。)
d18 3
a20 1
[[IMAP]] では修正 UTF-7 が使われています。
d23 17
a39 13
:集合 D (直接符号化文字): [A-Za-z0-9'(),-./:?]
:集合 O (任意符号化文字): [!"#$%&*;<=>@@[]^_`{|}]
:集合 B (修正 Base64): Base64 字母 ("=" を除く。)

規則1 (直接符号化): 集合 D と集合 O の文字は、そのまま
1オクテットの [[ASCII]] で符号化。集合 O の文字は使用する頭欄
や通過する関門によっては問題があり得るから注意。

規則2 (Unicode シフト符号化): 任意の Unicode 文字
([[UTF-16]]BE で表したもの。) を修正 [[Base64]]
で符号化。この前に "+" を置く。これは集合 B に無い文字 
(CR や LF などを含む。) が出現する
まで続く。「集合 B に無い文字」が "-" の時は、これを棄てる。
d42 1
a42 1
文字(列)は修正 Base64 で符号化して、頭とお尻に "+" と "-"
d44 1
a44 1
"-" を省略しても良い。
d46 1
a46 1
"+-" は、 "+" を表す。
d48 4
a51 1
規則3: SP (U+0020), HT (U+0009), CR (U+000D), LF (U+000A)
d54 2
a55 1
RFC 2152 は集合 O の "`" を "'" に誤植しています。
d57 8
a64 1
として扱うのが良いかも知れません。
d66 1
a66 1
*修正 Base64
d68 2
a69 1
詰め物 "=" は使わずに、 0 のビットがあるとして処理する。
d72 2
a73 2
(だけど最後が U+0000 だと困るような。 U+0000 は NUL だし、
ステステなのかな。)
d75 2
a76 1
- [11] >> [[C]] 以来 (以前から??) [[NULL]] って冷遇されてますよねぇ。 (っていうか NULL ってそういうもの?)
a78 1
*例
d80 7
a86 4
-A+ImIDkQ. (A<NOT IDENTICAL TO>Α.) (U+0041 U+2262 U+0391 U+002E)
-Hi Mom -+Jjo--! (Hi Mom -<WHITE SMILING FACE>-!) (U+0048 U+0069 U+0020 U+004D U+006F U+006D U+0020 U+002D U+263A U+002D U+0021)
-+ZeVnLIqe- (日本語) (65E5,672C,8A9E)
-Item 3 is +AKM-1. (£)
d88 1
a88 1
(RFC 2152 より。この例はもはや伝説になりつつあるな。。)
d90 4
a93 1
*修正 (modified) UTF-7
d95 5
a99 1
RFC 2060 <urn:ietf:rfc:2060> (IMAP) 5.1.3 で定義されています。
d101 5
a105 2
"&" を除く印字可能 ASCII 文字 (SP を含む。) は全て、そのままにします。
それ以外の文字 ([[C0]], DEL を含む。) は修正修正 Base64 を使います。
d107 1
a107 3
修正修正 Base64 は、前に "&" が、後に "-" が来ます。
(明記されてはいませんが、 "-" は省略不能だと思います。)
Base64 字母の "/" は "," で代用します。
a108 1
"&-" が "&" を表します。
a109 1
例: ~peter/mail/&ZeVnLIqe-/&U,BTFw-
d111 1
a111 1
- 2002-08-16 (Fri) 21:13:11 ''[[和]]'' : これだけ違うと別の名前付けた方がよかったと思うぞ。
d114 1
d116 35
d152 24
a175 2
[[MIME]] で使用する時は、 [[charset]] 名 "UTF-7" または
"UNICODE-1-1-UTF-7" (RFC 1642) を使います。
d177 2
a178 2
IANA 登録簿に無い名前で、 UTF7, CP65000, UNICODE-2-0-UTF-7,
UNICODE-2-0-UTF7, X-UNICODE-2-0-UTF-7 が観測されてます。
d180 2
a181 3
[[SMTP]] で使う時は、 LINE SEPARATOR (U+2028) PARAGRAPH SEPARATOR (U+2029)
を CRLF に変換してあげたら良さげ、って RFC 2152 に書いてあります。
でも実際 LS とか PS を使ってる文書ってあるんですかね?
d183 4
a186 3
MUST じゃないし、無視していいと思います。 PS を CRLF に変換するのは
明らかに情報劣化ですし。 (plain-text で PS なんて使うなっていう
話もありますが。)
a189 1
**修正 UTF-7
d191 12
a202 3
IMAP の修正 UTF-7 の名前としては、 X-IMAP4-Modified-UTF7,
UTF-7-for-IMAP が観測されてます。 IANA 登録簿に登録しようという
動きがありましたが、情報交換用でない charset を登録する必要は無いという意見があって、立ち消えになってしまいました。
d204 1
a204 1
ちなみに、 [[PHP]] では UTF7-IMAP という名前を使っています。
d208 3
a210 5
*UTF-7 一般について
- [1] 2002-10-29 (火) 20:31 ''[[名無しさん]]'': ''UNICODE-1-1-UTF-7'' は、 [[Unicode1.1]] ([[ハングルの大移動]]以前) のデータを UTF-7 で符号化したものに対して使います。
- [2] 2002-10-29 (火) 20:32 ''[[名無しさん]]'': [[perl]] での実装としては、 [[Encode::Unicode::UTF7]] (<http://suika.fam.cx/gate/cvs/perl/lib/Encode/Unicode/UTF7.pm>) があります。
- [4] >>2 は修正 U7 にも対応してますね。
- [5] >>2-4 標準の [[Encode]] にないのが不思議。
d212 2
a213 5
- [6] 古い [[NN]] は [CODE[+-]] に対応していないらしいです。。。
- [7] >>6 のように間違った実装では [CODE(CHARNAME)[PLUS SIGN]] をそのまま [CODE[+]] と表すみたいです。
- [8] もし >>6-7 のような問題が気になるのなら、「+」は規則2で符号化することにすれば、(きっと) 問題ないでしょう。
- [9] perl での実装 : <IW:SuikaCVS:"perl/lib/Encode/Unicode/UTF7.pm">
- [10] >>9 は UTF7-IMAP にも対応。
@


1.4
log
@auto-committed
@
text
@d58 1
d125 2
@


1.3
log
@pre-namespace
@
text
@d6 5
a10 2
Experimental RFC である RFC 1642 <urn:ietf:rfc:1642>
で定義されていましたが、 RFC 2152 <urn:ietf:rfc:2152> (Informational)
a21 1

d58 2
d103 2
d109 1
a109 2
動きがありましたが、情報交換用でない charset を登録する必要は無い
という意見があって、立ち消えになってしまいました。
d113 2
a115 1

d118 2
a119 2
- [4] >>2 は修正 U7 にも対応してますね。
- [5] >>2-4 標準の [[Encode]] にないのが不思議。
d121 3
a123 3
- [6] 古い [[NN]] は [CODE[+-]] に対応していないらしいです。。。
- [7] >>6 のように間違った実装では [CODE(CHARNAME)[PLUS SIGN]] をそのまま [CODE[+]] と表すみたいです。
- [8] もし >>6-7 のような問題が気になるのなら、「+」は規則2で符号化することにすれば、(きっと) 問題ないでしょう。
@


1.2
log
@Updated.
@
text
@d1 2
a2 1
UTF-7 は [[UCS]] ([[ISO/IEC10646]]/[[Unicode]])
d110 4
a113 2
- [1] 2002-10-29 (火) 20:31 ''[[名無しさん]]'': ''UNICODE-1-1-UTF-7'' は、 [[Unicode1.1]] ([[ハングルの大移動]]以前) のデータを UTF-7 で符号化したものに対して使います。
- [2] 2002-10-29 (火) 20:32 ''[[名無しさん]]'': [[perl]] での実装としては、 [[Encode::Unicode::UTF7]] (<http://suika.fam.cx/gate/cvs/perl/lib/Encode/Unicode/UTF7.pm>) があります。
d115 3
@


1.1
log
@Updated.
@
text
@d109 2
@

