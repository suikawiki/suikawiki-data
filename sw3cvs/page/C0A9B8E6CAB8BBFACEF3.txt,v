head	1.4;
access;
symbols
	suikawiki3-final:1.4
	before-db-leaffile:1.4
	after-upgrade-to-suikawiki-3:1.4
	before-fork-suikawiki3:1.4
	after-restore-20040122:1.4;
locks; strict;
comment	@# @;


1.4
date	2002.10.20.13.24.44;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.22.06.24.15;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.17.03.24.14;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.16.14.24.02;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updated.
@
text
@#?SuikaWiki/0.9 obsoleted="yes"
→[[制御列]]
@


1.3
log
@Updated.
@
text
@d1 2
a2 1
→[[制御列]]@


1.2
log
@Updated.
@
text
@d1 1
a1 31
[[ISO/IEC6429]] 1991 5.6

データ列中に出現して、制御目的の論理実体となる。
See also [[区切子制御文字]]

=control-string = cmd-string / char-string
=cmd-string = cmd-opening-delimiter cmd-string terminating-delimiter
=char-string = char-opening-delimiter char-string terminating-delimiter
=cmd-opening-delimiter = APC / DCS / OCS / PM
=char-opening-delimter = SOS
=cmd-string = 1*( %x08-0D / %x20-7E )
=char-string = 1*<OCTET except SOS and ST>
=terminating-delimiter = ST

command string で %x08-0D が使えるってのは、特定の [[C0]]
文字集合に依存してる気がしますがねぇ。この区間は 
[[ISO/IEC6429のC0文字集合]]と解釈するのがいいんでしょうか?

あ、そもそも、 command string や character string
の中身は制御文字列の外側と同じように[[符号拡張法]]を使って
文字を表現するものなんですかね?

え? 制御文字列を解釈する受信装置に依存ですか? うーむ。

char-string で SOS を除いてあるのは、制御文字列は入れ子に出来ない
ってことでしょう。

%x0E-0F / %xA0-FE の扱いについては、[[7ビット符号と8ビット符号]]参照。
char-string は任意のビット組合せが使えるらしいですが、 [[GR]]
はこの方法で SO...SI にするとして、 [[CR]] はどうしたらいいんでしょう?
ESC Fe ですか...?
@


1.1
log
@Updated.
@
text
@d11 1
a11 1
=cmd-string = 1*( %x08-13 / %x20-7E )
d14 18
@

