head	1.3;
access;
symbols;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2006.06.18.02.28.24;	author wakaba;	state dead;
branches;
next	1.2;

1.2
date	2005.11.23.02.26.53;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.18.02.10.42;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.3
log
@auto-committed
@
text
@

* Perl 5.8.0 付属の Encode::Unicode


** NAME

Encode::Unicode -- Various Unicode Transformation Formats


** SYNOPSIS

[PRE[
    use Encode qw/encode decode/; 
    $ucs2 = encode("UCS-2BE", $utf8);
    $utf8 = decode("UCS-2BE", $ucs2);
]PRE]


** ABSTRACT

This module implements all Character Encoding Schemes of Unicode that
are officially documented by Unicode Consortium (except, of course,
for UTF-8, which is a native format in perl).

- <http://www.unicode.org/glossary/> says: 曰く:

I<Character Encoding Scheme> A character encoding form plus byte
serialization. There are seven character encoding schemes in Unicode:
UTF-8, UTF-16, UTF-16BE, UTF-16LE, UTF-32 (UCS-4), UTF-32BE (UCS-4BE) and
UTF-32LE (UCS-4LE).

''[[文字符号化方式]]'' 文字符号化形とバイトの並び。 [[Unicode]]
には7つの文字符号化方式がある。

[INS[

訳注: 厳密には [[UTF-32]] と [[UCS-4]] は違う。
それから [[UCS-2]] のことはもう忘れたか!?
]INS]

- Quick Reference

[PRE[
                Decodes from ord(N)           Encodes chr(N) to...
       octet/char BOM S.P d800-dfff  ord > 0xffff     \x{1abcd} ==
  ---------------+-----------------+------------------------------
  UCS-2BE	2   N   N  is bogus                  Not Available
  UCS-2LE       2   N   N     bogus                  Not Available
  UTF-16      2/4   Y   Y  is   S.P           S.P            BE/LE
  UTF-16BE    2/4   N   Y       S.P           S.P    0xd82a,0xdfcd
  UTF-16LE	2   N   Y       S.P           S.P    0x2ad8,0xcddf
  UTF-32	4   Y   -  is bogus         As is            BE/LE
  UTF-32BE	4   N   -     bogus         As is       0x0001abcd
  UTF-32LE	4   N   -     bogus         As is       0xcdab0100
  UTF-8       1-4   -   -     bogus   >= 4 octets   \xf0\x9a\af\8d
  ---------------+-----------------+------------------------------
]PRE]


** Size, Endianness, and BOM 大きさとエンディアンと BOM

You can categorize these CES by 3 criteria:  size of each character,
endianness, and Byte Order Mark.

これらの [[CES]] を3つの基準, 文字の大きさ, エンディアン,
バイト順印で分類できます。


*** by size 大きさ

UCS-2 is a fixed-length encoding with each character taking 16 bits.
It B<does not> support I<surrogate pairs>.  When a surrogate pair
is encountered during decode(), its place is filled with \x{FFFD}
if I<CHECK> is 0, or the routine croaks if I<CHECK> is 1.  When a
character whose ord value is larger than 0xFFFF is encountered,
its place is filled with \x{FFFD} if I<CHECK> is 0, or the routine
croaks if I<CHECK> is 1.

[[UCS-2]] は16ビット毎字の固定長符号化なんだ。こいつは
''[[サロゲート組]]''に対応して'''いない'''。 decode()
中にサロゲート組が出てきたら、 ''CHECK'' が 0 の時は \x{FFFD}
で埋めて、 ''CHECK'' が 1 なら [[croak]] する(死ぬ)。
[INS[

訳注: encode() で
]INS]

[[ord]] (序数)値が 0xFFFF 以上の時、 ''CHECK'' が 0 なら
\x{FFFD} で埋めて、 1 なら croak する。

UTF-16 is almost the same as UCS-2 but it supports I<surrogate pairs>.
When it encounters a high surrogate (0xD800-0xDBFF), it fetches the
following low surrogate (0xDC00-0xDFFF) and C<desurrogate>s them to
form a character.  Bogus surrogates result in death.  When \x{10000}
or above is encountered during encode(), it C<ensurrogate>s them and
pushes the surrogate pair to the output stream.

[[UTF-16]] はほとんど [[UCS-2]] と同じだが、こいつは
[[サロゲート組]]に対応してる。高サロゲート (0xD800-0xD8FF)
が出てきたら次の低サロゲート (0xDC00-0xDFFF) とくっついて
desurroagete (解サロゲート) して1文字にする。偽サロゲートだと死ぬ。
encode() 中に \x{10000} 以上が出てきたら ensurrogate
(サロゲート化) して差路げと組にして出力列に突っ込む。

UTF-32 (UCS-4) is a fixed-length encoding with each character taking 32 bits.
Since it is 32-bit, there is no need for I<surrogate pairs>.

[[UTF-32]] ([[UCS-4]]) は32ビット毎字の固定長符号化だ。
32ビットだから''[[サロゲート組]]''は必要ないね。


*** by endianness エンディアン

The first (and now failed) goal of Unicode was to map all character
repertoires into a fixed-length integer so that programmers are happy.
Since each character is either a I<short> or I<long> in C, you have to
pay attention to the endianness of each platform when you pass data
to one another.

最初の (だけどぽちゃった) [[Unicode]] の目標ってのは、
全ての文字を固定長整数値に押し込んでプログラマを楽ちん
にしよーってのだった。各文字は 「「C]] で言う所の ''[[short]]''
とか ''[[long]]'' だから、データを渡す時はお互いの環境の
[[エンディアン]]のことに注意せなあかん。

Anything marked as BE is Big Endian (or network byte order) and LE is
Little Endian (aka VAX byte order).  For anything not marked either
BE or LE, a character called Byte Order Mark (BOM) indicating the
endianness is prepended to the string.

BE って書いてあるのは[[大エンディアン]] ([[ネットワークバイト順]])
のことで、 LE ってのが [[小エンディアン]] (aka [[VAX]] バイト順)
のことだ。 BE とも LE とも書いてないのは、文字列の頭にくっついてる
バイト順印 ([[BOM]]) って文字がエンディアンを示す。

- BOM as integer when fetched in network byte order

[PRE[
              16         32 bits/char
  -------------------------
  BE      0xFeFF 0x0000FeFF
  LE      0xFFeF 0xFFFe0000
  -------------------------
]PRE]

This modules handles the BOM as follows.

- When BE or LE is explicitly stated as the name of encoding, BOM is
simply treated as a normal character (ZERO WIDTH NO-BREAK SPACE).
BE か LE かが符号化の名前で明示されてる時は、 BOM は単なる文字
(ZERO WIDTH NO-BREAK SPACE) として扱う。

- When BE or LE is omitted during decode(), it checks if BOM is at the
beginning of the string; if one is found, the endianness is set to
what the BOM says.  If no BOM is found, the routine dies.
BE か LE かが decode() の時に省かれてたら、文字列の最初の BOM
を確認。あったら、エンディアンは BOM に従う。なかったら死ぬ。

- When BE or LE is omitted during encode(), it returns a BE-encoded
string with BOM prepended.  So when you want to encode a whole text
file, make sure you encode() the whole text at once, not line by line
or each line, not file, will have a BOM prepended.
encode() で BE か LE かが省かれてたら、 BOM がくっついた
BE で符号化した文字列を返す。 text file 丸ごと符号化したい
時は text 丸ごと一度に encode() してやってね。行ごとじゃなくて。

- C<UCS-2> is an exception.  Unlike others, this is an alias of UCS-2BE.
UCS-2 is already registered by IANA and others that way.
[[UCS-2]] は例外ね。他のと違って UCS-2BE の別名だよーん。
だって [[UCS-2]] はもう [[IANA]] 他にそう登録されちゃってるもん。

[INS[

訳注: [[IETF]]/[[IANA]](/[[W3C]]) 的には、例えば [[UTF-32]]
とあるとき、復号に当たってはまず [[BOM]] を確認し、 BOM
がなければ [[UTF-32BE]] とみなします。 
(これは[[ネットワークバイト順]]の習慣に由来します。)
[[UnicodeConsortium]] 的には [[UTF-32]] で [[BOM]] がなければ、
それは BE か LE のどちらかです。 (どちらかはわかりません。)
実装の時にはこういう微妙な違いにはまらないように注意したいところ。
]INS]


** Surrogate Pairs サロゲート組

[INS[

訳注: サロゲート = 代理 (cf. surrogate mother = [[代理母]])
]INS]

To say the least, surrogate pairs were the biggest mistake of the
Unicode Consortium.  But according to the late Douglas Adams in I<The
Hitchhiker's Guide to the Galaxy> Trilogy, C<In the beginning the
Universe was created. This has made a lot of people very angry and
been widely regarded as a bad move>.  Their mistake was not of this
magnitude so let's forgive them.

控えめに言っても、サロゲート組は Unicode Consortium
の最大の間違いだな。んだが故 Douglas Adams が
「銀河へヒッチハイクする奴の手引き」
[INS[

訳注: 和訳書があったりします? その題はなんでしょ?
]INS]

三部作で書いてるのに拠れば、「最初に宇宙が作られたのよ。
こいつがたっくさんの連中をかんかんにしちまって、
んだからみんな悪いことだと思ってる」。 Unicode の連中の
間違いはこれに比べればたいしたことないんだから、許してやってよ。

(I don't dare make any comparison with Unicode Consortium and the
Vogons here ;)  Or, comparing Encode to Babel Fish is completely
appropriate -- if you can only stick this into your ear :)

(あたしゃ流石に Unicode Consortium と Vogons をここで
比較する勇気はないけどね ;) あるいは、 Encode と Babel Fish
を比べる方がよくあってるかな。あんたがこれを耳に刺すだけ
出来たらね :)

[INS[

訳注: よくわかりませんが、故事かなんかですか?

[[#comment]]
]INS]

Surrogate pairs were born when the Unicode Consortium finally
admitted that 16 bits were not big enough to hold all the world's
character repertoires.  But they already made UCS-2 16-bit.  What
do we do?

サロゲート組は Unicode Consortium が結局16ビットじゃ世界中の
文字[[レパートリ]]じゃ足りんと認めた時に出来たんだ。だけど
連中はもう UCS-2 を16ビットにしちまってた。どうしよう。

[INS[

訳注: [[UCS-4]] を使えよ!
]INS]

Back then, the range 0xD800-0xDFFF was not allocated.  Let's split
that range in half and use the first half to represent the C<upper
half of a character> and the second half to represent the C<lower
half of a character>.  That way, you can represent 1024 * 1024 =
1048576 more characters.  Now we can store character ranges up to
\x{10ffff} even with 16-bit encodings.  This pair of half-character is
now called a I<surrogate pair> and UTF-16 is the name of the encoding
that embraces them.

そん時、 0xD800-0xDF00 の範囲は未割当だったんだ。
この範囲を半分に分けて最初の半分を文字の上半分、
残りの半分を文字の下半分を表現するのに使おう。こうすれば、
1024 × 1024 = 1048576 文字表現出来る。ってことで \x{10ffff}
までの範囲の文字を16ビット符号化で使えるようになったんだ。
この半分文字の組合せを[[サロゲート組]]って呼んで、 [[UTF-16]]
ってのがこれを含む符号化の名前にする。

Here is a formula to ensurrogate a Unicode character \x{10000} and
above;

ここに \x{10000} 以上の Unicode 文字をサロゲート化する公式を示す。

[PRE[
  $hi = ($uni - 0x10000) / 0x400 + 0xD800;
  $lo = ($uni - 0x10000) % 0x400 + 0xDC00;
]PRE]

And to desurrogate;

解サロゲートはこう。

[PRE[
 $uni = 0x10000 + ($hi - 0xD800) * 0x400 + ($lo - 0xDC00);
]PRE]

Note this move has made \x{D800}-\x{DFFF} into a forbidden zone but
perl does not prohibit the use of characters within this range.  To perl, 
every one of \x{0000_0000} up to \x{ffff_ffff} (*) is I<a character>.

で、このせいで \x{d800}-\x{DF00} は禁じられし領域になったんだけど、
perl はこの範囲の文字の使用を禁止してない。 perl にとっては
\x{0000_0000} から \x{ffff_ffff} の範囲のものはぜーんぶ
''文字''なんだ。

[PRE[
  (*) or \x{ffff_ffff_ffff_ffff} if your perl is compiled with 64-bit
  integer support!
]PRE]

おたくの perk が64ビット整数対応で作ってあったら 
\x{ffff_ffff_ffff_ffff} まで使えるよーん!

[INS[

訳注: でもどうやって [[UTF-8]] 内部表現にするんでしょ?
]INS]


** SEE ALSO

[[Encode]], <http://www.unicode.org/glossary/>,
<http://www.unicode.org/unicode/faq/utf_bom.html>,

RFC 2781 <http://rfc.net/rfc2781.html>,
[INS[

<urn:ietf:rfc:2781>
]INS]

The whole Unicode standard <http://www.unicode.org/unicode/uni2book/u2.html>

Ch. 15, pp. 403 of C<Programming Perl (3rd Edition)>
by Larry Wall, Tom Christiansen, Jon Orwant; 
O'Reilly & Associates; ISBN 0-596-00027-8


** この部分の License

[[perlと同じライセンス]]。


* メモ

- [1] [[UTF]] の概略をつかむのには良い文章ですね。 (和訳は駄目だけど。)
- [2] >>1 でも [[UTF]]s のすばらしき仕様達を理解するのにはちょっと物足りないですね...
- [3] >>2 これ読んで [[Unicode]] ってすばらしいなあ! とか思う人が出てきたらアレですしね (いないとは思うけど)。

[4]
ü
([[名無しさん]] [WEAK[2005-11-22 13:01:37 +00:00]])

@


1.2
log
@auto-committed
@
text
@@


1.1
log
@auto-committed
@
text
@d1 324
a324 288
#?SuikaWiki/0.9
*Perl 5.8.0 付属の Encode::Unicode
**NAME

Encode::Unicode -- Various Unicode Transformation Formats

**SYNOPSIS

    use Encode qw/encode decode/; 
    $ucs2 = encode("UCS-2BE", $utf8);
    $utf8 = decode("UCS-2BE", $ucs2);

**ABSTRACT

This module implements all Character Encoding Schemes of Unicode that
are officially documented by Unicode Consortium (except, of course,
for UTF-8, which is a native format in perl).

-<http://www.unicode.org/glossary/> says: 曰く:

I<Character Encoding Scheme> A character encoding form plus byte
serialization. There are seven character encoding schemes in Unicode:
UTF-8, UTF-16, UTF-16BE, UTF-16LE, UTF-32 (UCS-4), UTF-32BE (UCS-4BE) and
UTF-32LE (UCS-4LE).

''[[文字符号化方式]]'' 文字符号化形とバイトの並び。 [[Unicode]]
には7つの文字符号化方式がある。

[INS[
訳注: 厳密には [[UTF-32]] と [[UCS-4]] は違う。
それから [[UCS-2]] のことはもう忘れたか!?
]INS]

-Quick Reference

                Decodes from ord(N)           Encodes chr(N) to...
       octet/char BOM S.P d800-dfff  ord > 0xffff     \x{1abcd} ==
  ---------------+-----------------+------------------------------
  UCS-2BE	2   N   N  is bogus                  Not Available
  UCS-2LE       2   N   N     bogus                  Not Available
  UTF-16      2/4   Y   Y  is   S.P           S.P            BE/LE
  UTF-16BE    2/4   N   Y       S.P           S.P    0xd82a,0xdfcd
  UTF-16LE	2   N   Y       S.P           S.P    0x2ad8,0xcddf
  UTF-32	4   Y   -  is bogus         As is            BE/LE
  UTF-32BE	4   N   -     bogus         As is       0x0001abcd
  UTF-32LE	4   N   -     bogus         As is       0xcdab0100
  UTF-8       1-4   -   -     bogus   >= 4 octets   \xf0\x9a\af\8d
  ---------------+-----------------+------------------------------

**Size, Endianness, and BOM 大きさとエンディアンと BOM

You can categorize these CES by 3 criteria:  size of each character,
endianness, and Byte Order Mark.

これらの [[CES]] を3つの基準, 文字の大きさ, エンディアン,
バイト順印で分類できます。

***by size 大きさ

UCS-2 is a fixed-length encoding with each character taking 16 bits.
It B<does not> support I<surrogate pairs>.  When a surrogate pair
is encountered during decode(), its place is filled with \x{FFFD}
if I<CHECK> is 0, or the routine croaks if I<CHECK> is 1.  When a
character whose ord value is larger than 0xFFFF is encountered,
its place is filled with \x{FFFD} if I<CHECK> is 0, or the routine
croaks if I<CHECK> is 1.

[[UCS-2]] は16ビット毎字の固定長符号化なんだ。こいつは
''[[サロゲート組]]''に対応して'''いない'''。 decode()
中にサロゲート組が出てきたら、 ''CHECK'' が 0 の時は \x{FFFD}
で埋めて、 ''CHECK'' が 1 なら [[croak]] する(死ぬ)。
[INS[
訳注: encode() で
]INS]
[[ord]] (序数)値が 0xFFFF 以上の時、 ''CHECK'' が 0 なら
\x{FFFD} で埋めて、 1 なら croak する。

UTF-16 is almost the same as UCS-2 but it supports I<surrogate pairs>.
When it encounters a high surrogate (0xD800-0xDBFF), it fetches the
following low surrogate (0xDC00-0xDFFF) and C<desurrogate>s them to
form a character.  Bogus surrogates result in death.  When \x{10000}
or above is encountered during encode(), it C<ensurrogate>s them and
pushes the surrogate pair to the output stream.

[[UTF-16]] はほとんど [[UCS-2]] と同じだが、こいつは
[[サロゲート組]]に対応してる。高サロゲート (0xD800-0xD8FF)
が出てきたら次の低サロゲート (0xDC00-0xDFFF) とくっついて
desurroagete (解サロゲート) して1文字にする。偽サロゲートだと死ぬ。
encode() 中に \x{10000} 以上が出てきたら ensurrogate
(サロゲート化) して差路げと組にして出力列に突っ込む。

UTF-32 (UCS-4) is a fixed-length encoding with each character taking 32 bits.
Since it is 32-bit, there is no need for I<surrogate pairs>.

[[UTF-32]] ([[UCS-4]]) は32ビット毎字の固定長符号化だ。
32ビットだから''[[サロゲート組]]''は必要ないね。

***by endianness エンディアン

The first (and now failed) goal of Unicode was to map all character
repertoires into a fixed-length integer so that programmers are happy.
Since each character is either a I<short> or I<long> in C, you have to
pay attention to the endianness of each platform when you pass data
to one another.

最初の (だけどぽちゃった) [[Unicode]] の目標ってのは、
全ての文字を固定長整数値に押し込んでプログラマを楽ちん
にしよーってのだった。各文字は 「「C]] で言う所の ''[[short]]''
とか ''[[long]]'' だから、データを渡す時はお互いの環境の
[[エンディアン]]のことに注意せなあかん。

Anything marked as BE is Big Endian (or network byte order) and LE is
Little Endian (aka VAX byte order).  For anything not marked either
BE or LE, a character called Byte Order Mark (BOM) indicating the
endianness is prepended to the string.

BE って書いてあるのは[[大エンディアン]] ([[ネットワークバイト順]])
のことで、 LE ってのが [[小エンディアン]] (aka [[VAX]] バイト順)
のことだ。 BE とも LE とも書いてないのは、文字列の頭にくっついてる
バイト順印 ([[BOM]]) って文字がエンディアンを示す。

-BOM as integer when fetched in network byte order

              16         32 bits/char
  -------------------------
  BE      0xFeFF 0x0000FeFF
  LE      0xFFeF 0xFFFe0000
  -------------------------

This modules handles the BOM as follows.

-When BE or LE is explicitly stated as the name of encoding, BOM is
simply treated as a normal character (ZERO WIDTH NO-BREAK SPACE).
BE か LE かが符号化の名前で明示されてる時は、 BOM は単なる文字
(ZERO WIDTH NO-BREAK SPACE) として扱う。

-When BE or LE is omitted during decode(), it checks if BOM is at the
beginning of the string; if one is found, the endianness is set to
what the BOM says.  If no BOM is found, the routine dies.
BE か LE かが decode() の時に省かれてたら、文字列の最初の BOM
を確認。あったら、エンディアンは BOM に従う。なかったら死ぬ。

-When BE or LE is omitted during encode(), it returns a BE-encoded
string with BOM prepended.  So when you want to encode a whole text
file, make sure you encode() the whole text at once, not line by line
or each line, not file, will have a BOM prepended.
encode() で BE か LE かが省かれてたら、 BOM がくっついた
BE で符号化した文字列を返す。 text file 丸ごと符号化したい
時は text 丸ごと一度に encode() してやってね。行ごとじゃなくて。

-C<UCS-2> is an exception.  Unlike others, this is an alias of UCS-2BE.
UCS-2 is already registered by IANA and others that way.
[[UCS-2]] は例外ね。他のと違って UCS-2BE の別名だよーん。
だって [[UCS-2]] はもう [[IANA]] 他にそう登録されちゃってるもん。

[INS[
訳注: [[IETF]]/[[IANA]](/[[W3C]]) 的には、例えば [[UTF-32]]
とあるとき、復号に当たってはまず [[BOM]] を確認し、 BOM
がなければ [[UTF-32BE]] とみなします。 
(これは[[ネットワークバイト順]]の習慣に由来します。)
[[UnicodeConsortium]] 的には [[UTF-32]] で [[BOM]] がなければ、
それは BE か LE のどちらかです。 (どちらかはわかりません。)
実装の時にはこういう微妙な違いにはまらないように注意したいところ。
]INS]

**Surrogate Pairs サロゲート組

[INS[
訳注: サロゲート = 代理 (cf. surrogate mother = [[代理母]])
]INS]

To say the least, surrogate pairs were the biggest mistake of the
Unicode Consortium.  But according to the late Douglas Adams in I<The
Hitchhiker's Guide to the Galaxy> Trilogy, C<In the beginning the
Universe was created. This has made a lot of people very angry and
been widely regarded as a bad move>.  Their mistake was not of this
magnitude so let's forgive them.

控えめに言っても、サロゲート組は Unicode Consortium
の最大の間違いだな。んだが故 Douglas Adams が
「銀河へヒッチハイクする奴の手引き」
[INS[
訳注: 和訳書があったりします? その題はなんでしょ?
]INS]
三部作で書いてるのに拠れば、「最初に宇宙が作られたのよ。
こいつがたっくさんの連中をかんかんにしちまって、
んだからみんな悪いことだと思ってる」。 Unicode の連中の
間違いはこれに比べればたいしたことないんだから、許してやってよ。

(I don't dare make any comparison with Unicode Consortium and the
Vogons here ;)  Or, comparing Encode to Babel Fish is completely
appropriate -- if you can only stick this into your ear :)

(あたしゃ流石に Unicode Consortium と Vogons をここで
比較する勇気はないけどね ;) あるいは、 Encode と Babel Fish
を比べる方がよくあってるかな。あんたがこれを耳に刺すだけ
出来たらね :)

[INS[
訳注: よくわかりませんが、故事かなんかですか?

[[#comment]]
]INS]

Surrogate pairs were born when the Unicode Consortium finally
admitted that 16 bits were not big enough to hold all the world's
character repertoires.  But they already made UCS-2 16-bit.  What
do we do?

サロゲート組は Unicode Consortium が結局16ビットじゃ世界中の
文字[[レパートリ]]じゃ足りんと認めた時に出来たんだ。だけど
連中はもう UCS-2 を16ビットにしちまってた。どうしよう。

[INS[
訳注: [[UCS-4]] を使えよ!
]INS]

Back then, the range 0xD800-0xDFFF was not allocated.  Let's split
that range in half and use the first half to represent the C<upper
half of a character> and the second half to represent the C<lower
half of a character>.  That way, you can represent 1024 * 1024 =
1048576 more characters.  Now we can store character ranges up to
\x{10ffff} even with 16-bit encodings.  This pair of half-character is
now called a I<surrogate pair> and UTF-16 is the name of the encoding
that embraces them.

そん時、 0xD800-0xDF00 の範囲は未割当だったんだ。
この範囲を半分に分けて最初の半分を文字の上半分、
残りの半分を文字の下半分を表現するのに使おう。こうすれば、
1024 × 1024 = 1048576 文字表現出来る。ってことで \x{10ffff}
までの範囲の文字を16ビット符号化で使えるようになったんだ。
この半分文字の組合せを[[サロゲート組]]って呼んで、 [[UTF-16]]
ってのがこれを含む符号化の名前にする。

Here is a formula to ensurrogate a Unicode character \x{10000} and
above;

ここに \x{10000} 以上の Unicode 文字をサロゲート化する公式を示す。

  $hi = ($uni - 0x10000) / 0x400 + 0xD800;
  $lo = ($uni - 0x10000) % 0x400 + 0xDC00;

And to desurrogate;

解サロゲートはこう。

 $uni = 0x10000 + ($hi - 0xD800) * 0x400 + ($lo - 0xDC00);

Note this move has made \x{D800}-\x{DFFF} into a forbidden zone but
perl does not prohibit the use of characters within this range.  To perl, 
every one of \x{0000_0000} up to \x{ffff_ffff} (*) is I<a character>.

で、このせいで \x{d800}-\x{DF00} は禁じられし領域になったんだけど、
perl はこの範囲の文字の使用を禁止してない。 perl にとっては
\x{0000_0000} から \x{ffff_ffff} の範囲のものはぜーんぶ
''文字''なんだ。

  (*) or \x{ffff_ffff_ffff_ffff} if your perl is compiled with 64-bit
  integer support!

おたくの perk が64ビット整数対応で作ってあったら 
\x{ffff_ffff_ffff_ffff} まで使えるよーん!

[INS[
訳注: でもどうやって [[UTF-8]] 内部表現にするんでしょ?
]INS]

**SEE ALSO

[[Encode]], <http://www.unicode.org/glossary/>,
<http://www.unicode.org/unicode/faq/utf_bom.html>,

RFC 2781 <http://rfc.net/rfc2781.html>,
[INS[
<urn:ietf:rfc:2781>
]INS]

The whole Unicode standard <http://www.unicode.org/unicode/uni2book/u2.html>

Ch. 15, pp. 403 of C<Programming Perl (3rd Edition)>
by Larry Wall, Tom Christiansen, Jon Orwant; 
O'Reilly & Associates; ISBN 0-596-00027-8

**この部分の License

[[perlと同じライセンス]]。

*メモ
d328 5
@

