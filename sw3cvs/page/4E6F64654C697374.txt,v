head	1.4;
access;
symbols
	suikawiki3-final:1.4
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;


1.4
date	2008.07.08.03.11.52;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.03.04.01.56;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.23.02.41.10;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.22;	author make;	state Exp;
branches;
next	;


desc
@@


1.4
log
@auto-committed
@
text
@

* NodeList 界面 (DOM)

[1] [CODE(DOMi)[NodeList]] 界面は、 [CODE(DOMi)[[[Node]]]]
の[[順序付き]]の[[集まり]]を扱います。
この集まりをどう実装するかは定義・制約されていません。

[2]
,method	,[CODE(DOMm)[[[item]]]]	,項目を取得	,[DOM1]
,読取専用属性	,[CODE(DOMa)[[[length]]]]	,個数	,[DOM1]

[3] どう実装するかは定義しないとしながらも、 >>2
の界面定義はかなりの制約です。
多くの[[プログラム言語]]は[[配列]]の仕組みを持っていますが、
この定義では必ずしもそれを利用出来ません。
([[DOM]] の最初の実装である [[JavaScript]]
の流儀に強く影響されています。)

例えば [[perl]] の束縛なら、 [CODE(perl)[[VAR[$i]]]]
番目の項目 (節) は [CODE(perl)[ $$node_list [$i] ]]
で、個数は [CODE(perl)[ scalar @@$node_list ]]
で取得したいところです。 (perl の場合は、適当な class
に [[bless]] しておけば DOM 式と perl 
式を同時に実装できますね。)

[4] なお、項目番号 ([CODE(DOMattr)[index]])
は [CODE(DOM)[0]] から始まります。
これも束縛先言語との流儀の絡みであまり嬉しい制約ではありません。
(しかしながら、最初の索引番号を何にす(な)るか考えなくて良いと言う意味では嬉しい制約です。)

- [DOM1] ''Document Object Model (Core) Level 1'' <http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-536297177>
- [DOM2] ''Document Object Model Core'' <http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177>
- [5] >>3 DOM の仕様書の附属書 (参考) の [[ECMAScript]] 束縛では、 [CODE(JS)[ [VAR[NodeList]][ [VAR[i]] ] ]] と [CODE(JS)[ [VAR[NodeList]].item ( [VAR[i]] ) ]] は等価とされていますから、 >>3 は真っ当な実装だと思います。
- [6] [CODE(DOMi)[NodeList]] は[[活性]]です。例えば、ある要素節の子節群である [CODE(DOMi)[NodeList]] を得たら、その要素の子節を追加とか削除とかした時に、特に何も指示しなくてもその [CODE(DOMi)[NodeList]] は最新の内容になっている必要があります。
- [7] >>6 の説明は分かりにくいですが <http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#attribute-childNodes> にもあって、そこでは更に「この性質は ([CODE(DOMattr)[[[childNodes]]]] だけではなく) [CODE(DOMmethod)[[[getElementsByTagName]]]] などで得た [CODE(DOMi)[NodeList]] にも適用される」と述べています。 (違う method の説明にわざわざかくなんて、[CODE[スコア −1: 余計なもの]]です。 ) しかし、これは FE Errata で削除されています。 (予想ですが、この文言は、 get... の検索結果が随時変わる (木に変更が加えられるたびに検索しなおす) 必要があるように解釈出来ますが、そういう解釈は間違いということで削除したんじゃないでしょうか? (ちゃんと削除理由も書いて欲しいなあ。))
- [8] >>7 ほんとにその解釈が正しいとしたら、下手に木は操作できなくて、すごいことになりそう。
- [9] >>7-8 [CODE(DOMi)[NodeList]] を継承する [CODE(DOMi)[[[MathMLNodeList]]]] では、属性値的意味の節群である時についてのみ、活性であると言及しています。これから推測して、 >>7 は正しい (get... method の返り値では、やはり (再検索するという意味での) 活性ではないのではないでしょうか。) <http://www.w3.org/TR/MathML2/appendixd.html#dom_NodeList>
- [10] 似た界面として、 [CODE(DOMi)[[[NamedNodeMap]]]] があります。 [CODE(DOMi)[NodeList]] が[[配列]]なら、 [CODE(DOMi)[NamedNodeMap]] は[[連想配列]]です。

[11]
[CITE[Bug 14547 - typeof document.body.childNodes=="function" ("object" expected)]] ([CODE[2008-03-22 22:09:03 +09:00]] 版) <http://bugs.webkit.org/show_bug.cgi?id=14547>
([[名無しさん]])

[15]
<li><a href="http://adultall.110mb.com/gay-adult-book-store.html">gay adult book store</a></li><li><a href="http://adultall.110mb.com/adult-dvd-now--.html">adult dvd now  </a></li><li><a href="http://adultall.110mb.com/adult-babies-in-diapers.html">adult babies in diapers</a></li><a href=http://adultall.blog.espresso.repubblica.it/map.html >all adult</a>
([[jerryov]] [jerrywn@@yahoo.com])

[16]
<li><a href="http://adultall.110mb.com/adult-film-photo.html">adult film photo</a></li><li><a href="http://adultall.110mb.com/jlc-s-internet-tv-adult-content----.html">jlc s internet tv adult content    </a></li><li><a href="http://adultall.110mb.com/adult-chat-room.html">adult chat room</a></li><a href=http://adultall.blog.espresso.repubblica.it/map.html >all adult</a>
([[jerrytb]] [jerrynl@@yahoo.com])


[17]
<li><a href="http://adultall.110mb.com/adult-book-iowa-store.html">adult book iowa store</a></li><li><a href="http://adultall.110mb.com/adult-sex-shopping-toy.html">adult sex shopping toy</a></li><li><a href="http://adultall.110mb.com/adult-only-club----.html">adult only club    </a></li><a href=http://adultall.blog.espresso.repubblica.it/map.html >all adult</a>
([[jerrydv]] [jerryxr@@yahoo.com])


[[#comment]]


* メモ

[12]
adjtmeoq qawnjrpy ozmhrxasc asqblugfe qthcg pysafwi lbgqd
([[jkgtl iweqzogkp]] [jbpmvs@@gmail.com])

[13]
iaxnvf zwpmjyf yekcdqfoh nreduc fzaitejh cnzdihk rglcb
([[zwvxfr pbrhy]] [tnjizuk@@gmail.com])

[14]
iaxnvf zwpmjyf yekcdqfoh nreduc fzaitejh cnzdihk rglcb
([[zwvxfr pbrhy]] [tnjizuk@@gmail.com])@


1.3
log
@auto-committed
@
text
@d45 14
d74 1
a74 2
([[zwvxfr pbrhy]] [tnjizuk@@gmail.com])

@


1.2
log
@auto-committed
@
text
@d42 1
a42 1
[CITE[Bug 14547 - typeof document.body.childNodes=="function" ("object" expected)]] ([TIME[2008-03-22 22:09:03 +09:00]] 版) <http://bugs.webkit.org/show_bug.cgi?id=14547>
d48 14
a61 1
* メモ@


1.1
log
@auto-commited
@
text
@d1 38
a38 37
#?SuikaWiki/0.9
*NodeList 界面 (DOM)

[1] [CODE(DOMi)[NodeList]] 界面は、 [CODE(DOMi)[[[Node]]]]
の[[順序付き]]の[[集まり]]を扱います。
この集まりをどう実装するかは定義・制約されていません。

[2]
,method      ,[CODE(DOMm)[[[item]]]]   ,項目を取得 ,[DOM1]
,読取専用属性,[CODE(DOMa)[[[length]]]] ,個数       ,[DOM1]

[3] どう実装するかは定義しないとしながらも、 >>2
の界面定義はかなりの制約です。
多くの[[プログラム言語]]は[[配列]]の仕組みを持っていますが、
この定義では必ずしもそれを利用出来ません。
([[DOM]] の最初の実装である [[JavaScript]]
の流儀に強く影響されています。)

例えば [[perl]] の束縛なら、 [CODE(perl)[[VAR[$i]]]]
番目の項目 (節) は [CODE(perl)[ $$node_list [$i] ]]
で、個数は [CODE(perl)[ scalar @@$node_list ]]
で取得したいところです。 (perl の場合は、適当な class
に [[bless]] しておけば DOM 式と perl 
式を同時に実装できますね。)

[4] なお、項目番号 ([CODE(DOMattr)[index]])
は [CODE(DOM)[0]] から始まります。
これも束縛先言語との流儀の絡みであまり嬉しい制約ではありません。
(しかしながら、最初の索引番号を何にす(な)るか考えなくて良いと言う意味では嬉しい制約です。)

-[DOM1] ''Document Object Model (Core) Level 1'' <http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-536297177>
-[DOM2] ''Document Object Model Core'' <http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-536297177>
- [5] >>3 DOM の仕様書の附属書 (参考) の [[ECMAScript]] 束縛では、 [CODE(JS)[ [VAR[NodeList]][ [VAR[i]] ] ]] と [CODE(JS)[ [VAR[NodeList]].item ( [VAR[i]] ) ]] は等価とされていますから、 >>3 は真っ当な実装だと思います。
- [6] [CODE(DOMi)[NodeList]] は[[活性]]です。例えば、ある要素節の子節群である [CODE(DOMi)[NodeList]] を得たら、その要素の子節を追加とか削除とかした時に、特に何も指示しなくてもその [CODE(DOMi)[NodeList]] は最新の内容になっている必要があります。
- [7] >>6 の説明は分かりにくいですが <http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#attribute-childNodes> にもあって、そこでは更に「この性質は ([CODE(DOMattr)[[[childNodes]]]] だけではなく) [CODE(DOMmethod)[[[getElementsByTagName]]]] などで得た [CODE(DOMi)[NodeList]] にも適用される」と述べています。 (違う method の説明にわざわざかくなんて、[CODE[スコア −1: 余計なもの]]です。 ) しかし、これは FE Errata で削除されています。 (予想ですが、この文言は、 get... の検索結果が随時変わる (木に変更が加えられるたびに検索しなおす) 必要があるように解釈出来ますが、そういう解釈は間違いということで削除したんじゃないでしょうか? (ちゃんと削除理由も書いて欲しいなあ。))
- [8] >>7 ほんとにその解釈が正しいとしたら、下手に木は操作できなくて、すごいことになりそう。
- [9] >>7-8 [CODE(DOMi)[NodeList]] を継承する [CODE(DOMi)[[[MathMLNodeList]]]] では、属性値的意味の節群である時についてのみ、活性であると言及しています。これから推測して、 >>7 は正しい (get... method の返り値では、やはり (再検索するという意味での) 活性ではないのではないでしょうか。) <http://www.w3.org/TR/MathML2/appendixd.html#dom_NodeList>
d40 9
a48 3
[[#comment]]

*メモ@

