head	1.4;
access;
symbols
	suikawiki3-final:1.4
	before-db-leaffile:1.3
	after-upgrade-to-suikawiki-3:1.3
	before-fork-suikawiki3:1.3
	after-restore-20040122:1.3;
locks; strict;
comment	@# @;


1.4
date	2004.06.18.02.06.24;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.22.06.24.15;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.17.03.24.14;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.16.14.24.02;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.4
log
@auto-committed
@
text
@[1]
制御のための論理的な単位としてデータストリーム中に
現れる[[ビット組合せ]]の列。 control string。 
([[JIS X 0211]]-1994 4.2.25)

仕様書:
[[ISO/IEC 6429]]:1991 5.6

データ列中に出現して、制御目的の論理実体となる。
See also [[区切子制御文字]]

=control-string = cmd-string / char-string
=cmd-string = cmd-opening-delimiter cmd-string terminating-delimiter
=char-string = char-opening-delimiter char-string terminating-delimiter
=cmd-opening-delimiter = APC / DCS / OCS / PM
=char-opening-delimter = SOS
=cmd-string = 1*( %x08-0D / %x20-7E )
=char-string = 1*<OCTET except SOS and ST>
=terminating-delimiter = ST

Command string で [CODE(ABNF)[%x08-0D]] が使えるってのは、
特定の [[C0]] 文字集合に依存してる気がしますがねぇ。この区間は 
[[ISO/IEC 6429//C0文字集合]]と解釈するのがいいんでしょうか?

あ、そもそも、 command string や character string
の中身は制御文字列の外側と同じように[[符号拡張法]]を使って
文字を表現するものなんですかね?

え? 制御文字列を解釈する受信装置に依存ですか? うーむ。

[CODE(ABNF)[char-string]] で [CODE(char)[[[SOS]]]] 
を除いてあるのは、制御文字列は入れ子に出来ないってことでしょう。

[CODE(ABNF)[%x0E-0F / %xA0-FE]] の扱いについては、
[[7ビット符号と8ビット符号]]参照。
[CODE(ABNF)[char-string]] は任意のビット組合せが使えるらしいですが、 
[[GR]] はこの方法で 
[SAMP[[CODE(char)[[[SO]]]][VAR[...]][CODE(char)[[[SI]]]]]] 
にするとして、 [[CR]] はどうしたらいいんでしょう?
[CODE(char)[[[ESC]] [VAR[[[Fe]]]]]] ですか...?

[[#comment]]

*制御列と制御シーケンス

[[JIS X 0211]]‐1994 の訳語にあわせて、 control sequence
→[[制御シーケンス]], control string →[[制御列]]に直しました。

* メモ@


1.3
log
@Updated.
@
text
@d1 1
d3 2
a4 1
現れる[[ビット組合せ]]の列。 control string。 ([[JISX0211]]-1994 4.2.25)
d6 2
a7 1
[[ISO/IEC6429]] 1991 5.6
d21 3
a23 3
command string で %x08-0D が使えるってのは、特定の [[C0]]
文字集合に依存してる気がしますがねぇ。この区間は 
[[ISO/IEC6429のC0文字集合]]と解釈するのがいいんでしょうか?
d31 2
a32 2
char-string で SOS を除いてあるのは、制御文字列は入れ子に出来ない
ってことでしょう。
d34 9
a42 4
%x0E-0F / %xA0-FE の扱いについては、[[7ビット符号と8ビット符号]]参照。
char-string は任意のビット組合せが使えるらしいですが、 [[GR]]
はこの方法で SO...SI にするとして、 [[CR]] はどうしたらいいんでしょう?
ESC Fe ですか...?
d46 4
a49 2
[[JISX0211]]-1994 の訳語にあわせて、 control sequence
→[[制御シーケンス]], control string →[[制御列]]に直しました。@


1.2
log
@Updated.
@
text
@d1 2
a2 1
Control sequences。[[ISO/IEC6429]] で定義されてます。
d4 1
a4 32
1991 5.4 を元に [[ABNF]] で書くと、大まかな構造はこんなんです。
=control-sequence = CSI [P] *I F
=CSI = ESC %x5B / %x9B  ;; ESC Fe / [[CR]] ([[符号]]の構造・[[告知]]による)
=P = std-P / private-P ;; Parameter byte(s)
=std-P = %x30-3B *( %x30-3F )
=pvt-P = %x3C-3F *( %x30-3F )
=I = %x20-2F  ;; Intermediate byte
=F = std-F / private-F  ;; Final byte
=std-F = %x40-6F
=private-F = %x70-7E

*パラメーター・バイト
=P = std-P / pvt-P
=std-P = sub-string *(separator sub-string)
=separator = %x3B
=sub-string = *( DIGIT / digit-separator )
=DIGIT = %x30-39
=digit-separator = %x3A  ;; 小数点などに使用

sub-string の先導 *"0" は無視可能。 ("0123" == "123", "000" == "0")
sub-string は空 (empty) になり得る。最後の sub-string が空であるのは、その直前の
separator が無いのと同じ意味。 ("1;1;" == "1;1")

*7ビット・8ビット変換のための例外的解釈

冒頭の ABNF は、こんな風に修正しないといけません。

=control-sequence = CSI *(s P) *(s I) s F
=s = %x0E / %x0F  ;; SHIFT OUT / SHIFT IN
=P = %x30-3F / %xB0-BF
=I = %x20-2F / %xA0-AF
=F = %x40-7E / %xC0-FE
d6 34
a39 1
詳しくは[[7ビット符号と8ビット符号]]を参照。
@


1.1
log
@Updated.
@
text
@d24 13
a36 1
separator が無いのと同じ意味。 ("1:1:" == "1:1")
@

