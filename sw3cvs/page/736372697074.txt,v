head	1.33;
access;
symbols
	suikawiki3-final:1.33
	before-db-leaffile:1.8
	after-upgrade-to-suikawiki-3:1.7
	before-fork-suikawiki3:1.7
	after-restore-20040122:1.6;
locks; strict;
comment	@# @;


1.33
date	2008.10.13.03.11.35;	author wakaba;	state Exp;
branches;
next	1.32;

1.32
date	2008.09.18.03.10.35;	author wakaba;	state Exp;
branches;
next	1.31;

1.31
date	2008.09.08.02.44.15;	author wakaba;	state Exp;
branches;
next	1.30;

1.30
date	2008.07.27.03.06.23;	author wakaba;	state Exp;
branches;
next	1.29;

1.29
date	2008.07.23.03.15.14;	author wakaba;	state Exp;
branches;
next	1.28;

1.28
date	2007.10.23.02.51.10;	author wakaba;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.08.03.41.58;	author wakaba;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.03.02.52.27;	author wakaba;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.03.02.37.47;	author wakaba;	state Exp;
branches;
next	1.24;

1.24
date	2007.02.13.02.35.31;	author wakaba;	state Exp;
branches;
next	1.23;

1.23
date	2007.01.31.02.26.07;	author wakaba;	state Exp;
branches;
next	1.22;

1.22
date	2006.11.08.02.15.43;	author wakaba;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.23.02.20.42;	author wakaba;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.08.02.14.36;	author wakaba;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.18.02.12.11;	author wakaba;	state Exp;
branches;
next	1.18;

1.18
date	2005.09.18.02.09.27;	author wakaba;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.31.02.10.20;	author wakaba;	state Exp;
branches;
next	1.16;

1.16
date	2005.03.08.02.06.24;	author wakaba;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.27.02.06.18;	author wakaba;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.13.02.04.55;	author wakaba;	state Exp;
branches;
next	1.13;

1.13
date	2004.12.13.02.09.35;	author wakaba;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.18.02.08.34;	author wakaba;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.08.02.05.41;	author wakaba;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.18.02.04.40;	author wakaba;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.18.02.05.48;	author wakaba;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.18.02.01.12;	author wakaba;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.31.02.03.44;	author wakaba;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.03.02.02.09;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.03.02.00.14;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.16.09.18.55;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.26.07.42.55;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.06.12.26.32;	author make;	state Exp;
branches;
next	1.1;

1.1
date	2003.03.27.07.25.05;	author make;	state Exp;
branches;
next	;


desc
@@


1.33
log
@auto-committed
@
text
@

* [CODE(HTMLe)[script]] 要素型 (HTML, XHTML 1)

@@@@ 
[CODE(HTMLe)@@en[[[script]]]][[要素型]]の現実の処理は[[HTML 5]]で規定されると思われます。
ここでの説明は[[HTML 4]]に基づいており、実装を必ずしも正確に反映していません。

[1] [ABBR[[[HTML]]] [Hypertext Markup Language]] の 
[DFN[[CODE(HTMLe)[script]] 要素]]は、
文書中に[[スクリプト]]を配置します。

[29] 仕様書:
- [[HTML 4]]
-- [CITE[18 Scripts in HTML documents]]
<IW:HTML4:"interact/scripts.html#edef-SCRIPT">
-- [CITE[Element content]]
<IW:HTML4:"appendix/notes.html#h-B.3.2.1">
- [[ECMA-290]] 
- [[XHTML 1.0]]
-- [CSECTION[4.8. Script and Style elements]]
(参考) <IW:XHTML10:"h-4.8">

[9] 
:[[開始タグ]]:必須
:[[終了タグ]]:必須
:出現できる文脈:[CODE(HTMLe)[[[head]]]] の子として、または [CODE(HTMLe)[[[body]]]]
子孫の大抵の場所で
:[[内容模型]]:[CODE(SGML)[[[CDATA]]]] ([[HTML 4]]), [CODE(XML)[[[PCDATA]]]] ([[XHTML 1]])
:[[属性]]:
,属性名	,属性値	,既定値	,説明	,出典
,[CODE(HTMLa)[[[archive]]]]	,	,	,[NC4]
,[CODE(HTMLa)[[[charset]]]]	,[CODE(SGML)[%[[Charset]]]]	,	,charset ヒント	,[HTML 4]
,[CODE(HTMLa)[[[classname]]]]	,[[逆ドメイン名]]	,	,級名	,[ECMA-290]
,[CODE(HTMLa)[[[defer]]]]	,([[真偽値属性]])	,(偽)	,遅延評価	,[HTML 4]
,[CODE(HTMLa)[[[event]]]]	,	,	,[[事象]]	,[HTML 4] 予約
,[CODE(HTMLa)[[[for]]]]	,[CODE(SGML)[[[IDREF]]]]	,	,対象	,[HTML 4] 予約
,[CODE(HTMLa)[[[id]]]]	,[CODE(SGML)[[[ID]]]]	,(なし)	,固有識別子
,[CODE(HTMLa)[[[language]]]]	,	,	,スクリプト言語	,[HTML 4] 非推奨
,[CODE(HTMLa)[[[name]]]]	,	,	,	,非標準
,[CODE(HTMLa)[[[purpose]]]]	,	,	,実行目的	,[ECMA-290]
,[CODE(HTMLa)[[[src]]]]	,[CODE(SGML)[%[[URI]]]]	,(内容)	,外部スクリプト	,[HTML 4]
,[CODE(HTMLa)[[[type]]]]	,[CODE(SGML)[%[[ContentType]]]]	,(必須)	,[[スクリプト言語]]	,[HTML 4]
,[CODE(XMLa)[[VAR[ev:]][[event]]]]	,[CODE(ABNF)[[[QName]]]]	,(なし)	,[[事象名]]
,[CODE(XMLa)[[VAR[ev:]][[observer]]]]	,[CODE(XML)[[[IDREF]]]]	,	,[[事象観察器]]
,[CODE(XMLa)[[VAR[ev:]][[phase]]]]	,	,	,
,[CODE(XMLa)[[VAR[ev:]][[propagate]]]]	,	,	,[[伝播]]制御
,[CODE(XMLa)[[VAR[ev:]][[target]]]]	,[CODE(XML)[IDREF]]	,	,事象対象


[[#comment]]


** 出現できる文脈

[14] [CODE(HTMLe)[script]] 要素は、 [CODE(HTMLe)[[[head]]]] 要素や
[CODE(HTMLe)[[[body]]]] 要素の中の大抵の場所に出現できます
[SRC[HTML 4 18.2.1]]。

[15]
しかし、[[不思議マーク付け]]の世界や多くの [[WWWブラウザ]]の実装では、
[CODE(HTMLe)[[[html]]]] タグの前後や [CODE(HTMLe)[head]] 要素と
[CODE(HTMLe)[body]] 要素の間を含めて、あらゆる場所に出現できるようです。

[CITE[ダイナミックHTML入門]]
(Bruce Campbell + Rick Darnell 著, 安藤慶一訳) という入門書では、
[Q[スクリプトの場所に関しては標準規格は必要ないようです]<urn:isbn:4-89471-048-X>]
などと電波を飛ばしているそうです。
[SRC[[CITE[いくつかの書籍のあらさがし]] <http://openlab.ring.gr.jp/k16/htmllint/findfault.html#dynamic-html>]]

[[#comment]]


** 内容

[4] [CODE(HTMLa)[[[src]]]] 属性が指定されている場合、
スクリプトはその外部資源で定義されます。 
[ABBR[[[UA]]] [利用者エージェント]]
は[[内容]]を無視し、指定された 
[ABBR[URI] [統一資源識別子]] のスクリプトを取り寄せなければなりません。
[CODE(HTMLa)[src]] 属性が指定されていない場合、
[VAR[UA][利用者エージェント]] 
は内容をスクリプトとして解釈しなければなりません。
[SRC[HTML 4 18.2.1]]

[30] [ABBR[[[XHTML]]] [拡張可能ハイパーテキスト・マーク付け言語]] 
より前の [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] では、 
[CODE(HTMLe)[script]]
要素の内容は [CODE(HTMLe)[[[style]]]] 要素の内容同様[[文字データ]]
([CODE(SGML)[[[CDATA]]]]) 宣言内容とされていました。
つまり、 [CODE(HTMLe)[script]] 要素内ではほとんどの[[マーク]]は認知されず、
[ABBR[[CODE(SGML)[[[etago]]]]] [終了タグ開き]] ([CODE(HTML)[</]]) の
直後に[[名前開始文字]] [WEAK[([[ラテン文字]]など)]] または 
[ABBR[[CODE(SGML)[[[tagc]]]]] [タグ閉じ]] ([CODE(HTML)[>]])
が来たらそこで [CODE(HTMLe)[script]] 要素が終わることになっていました。

ですから、スクリプト言語の[[演算子]]などとして 
[ABBR[HTML] [ハイパーテキスト・マーク付け言語]]
の[[マーク文字]]が登場することがよくありますが、
そのような場合にもほとんど[[文字参照]]化する必要がありませんでした。

[36] 
[ABBR[[CODE(SGML)[[[ETAGO]]]]] [終了タグ閉じ]] がかけないのは 
[CODE(JS)[[CODE(DOMa)[[[document]]]].[CODE(DOMm)[[[write]]]]]]
のデータを作る時などにしばしば問題となり、その最盛期には、
これが原因でうまく動かないことに悩む人もよく見受けられました。
回避するためには、そのスクリプト言語の文字列連結を使ったり
([SAMP(JS)['<' + '/a>']])、 escape (quote) 機能を使ったり
([SAMP(JS)['<\/a>']])、文字生成関数を使ったり 
([SAMP(VB)["<" & [[Chr]] (47) & "a>"]])
する方法がよく紹介されました。

[33] しかし、 [ABBR[[[XML]]] [拡張可能マーク付け言語]] では 
[ABBR[[CODE(SGML)[CDATA]]] [文字データ]] 宣言内容は使えないので、
[ABBR[[[XHTML 1]]] [拡張可能ハイパーテキスト・マーク付け言語 1]] では 
[ABBR[[CODE(XML)[[[PCDATA]]]]] [解析可能文字データ]] 
と宣言されています。
ですから、 [ABBR[[CODE(SGML)[STAGO]]] [開始タグ開き]] 
([CODE(XML)[<]]) は必ず [[escape]]
して [CODE(XML)[&lt;]] としなければならないなどの制限があります。
これを回避するために [[[CODE(XML)[CDATA]]区間]]を使う方法がよく紹介されますが、
そうすると多くの既存の [ABBR[WWW] [World Wide Web]] 
ブラウザとの互換性が失われてしまいます。
ですから、 [ABBR[XHTML] [拡張可能ハイパーテキスト・マーク付け言語]] で 
[CODE(HTMLe)[script]] 要素を使う時は [CODE(HTMLa)[src]]
属性を使った外部スクリプトとするのが良いと言われています。

[41]
[CODE(HTMLa)[src]] で指定された資源が取得できない時に内容を使うとする説があります。

[CITE[SCRIPT - Client-side Script(jp)]] <http://www.htmlhelp.com/ja/reference/html40/special/script.html>

しかし、 [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 4 
の規定と矛盾します。
[WEAK[(この文書はほんとうに [ABBR[HTML] [ハイパーテキスト・マーク付け言語]] 4 に基づいているのでしょうか?)]]

[47]
[CITE[Working with the WebKit Nightly Builds]] <http://developer.apple.com/opensource/internet/nightlywebkit.html>
([[名無しさん]] [WEAK[2006-11-05 02:47:22 +00:00]])

[48]
[CITE[Surfin’ Safari - Blog Archive &#187; Understanding HTML, XML and XHTML]] <http://webkit.org/blog/?p=68>
([[名無しさん]])

[[#comment]]


*** 擬似注釈宣言の使用

[18] [CODE(HTMLe)[script]] 要素に対応していない古い WWW ブラウザは、
[CODE(HTMLe)[script]] 要素内の[[文字データ]]も構わず解釈してしまいます。
そこで、 [CODE(HTMLe)[script]] 要素の内容としてスクリプトを記述するときには、
HTML の[[注釈宣言]]のように最初に [CODE(HTML)[<!--]] を、
最後に [CODE(HTML)[-->]] をつけることが慣習となっています。

HTML 4 によれば、これは HTML の機能ではなく、[[スクリプト機関]]の機能とされています。
この機能に対応している言語には [[JavaScript]], [[VBScript]], [[Tcl]]
があるようです。 [SRC[HTML 4 18.3.2]] より正確には、この3つの言語は
[CODE(HTMLe)[script]] 要素の内容の一番最初の非[[空白]]文字列が
[CODE[<!--]] であるとき、これを無視するらしいです。
最後の [CODE[-->]] は、3つの言語のいずれも、それだけで書くことはできず、
それぞれの言語の注釈の内容として (JavaScript の場合は [SAMP(JS)[// -->]] 
のようにして) 書くことが必要らしいです。

[Q[らしい]]というのは、正確にこれを規定した仕様がないからです。
HTML 4 は[Q[スクリプト機関]]によるものだと言っていますから、
スクリプト言語の言語仕様かなにかに規定があってもよさそうなものですが、
そのようなものは見たことがありません。また、 HTML
に直接埋め込まれていない [[ECMAScript]] のスクリプトのソース・コードに
[CODE[<!--]] という文字列があってもよいという話も聞きません。
([CODE(HTMLe)[[[style]]]] 要素も同じような事情ですが、こちらは
[[CSS2]] で言語仕様の一部としてきちんと定義されています。)

[42] 少なくても [[JavaScript]] では、
最初の [SAMP[<!--]] が含まれる行の行末までを無視するのが
Web ブラウザの普通の実装のようです。

[27] このような注釈宣言 (のようなもの) の中では、 (SGML
的には [CODE(SGML)[CDATA]] なので注釈宣言ではないとはいえ、
古い UA の立場からしても SGML 的に正当であるために) [CODE(SGML)[[[COM]]]]
([CODE(HTML)[--]]) を含めるべきではないと考える人もいます。

[19] なお、 XHTML 1 の [CODE(HTMLe)[script]] 要素は、 [CODE(SGML)[CDATA]]
ではありませんので、注釈宣言 (のようなもの) を書くと、
本当に XML の注釈宣言と解釈されてしまいます。当然、
スクリプトとして解釈・実行されることはありません。

[40] [CODE(HTMLe)[script]] 要素が使われ始めたばかりの1996年ごろまでは、
注釈宣言 (のようなもの) の閉じの前に
[PRE(HTML)[
<script language="javascript">
<!-- hide script from old browsers
[VAR[...]]
// hide script from old browsers -->
</script>
]PRE]

のように自然言語の注釈を入れておくことがよく行われていました 
(初期の使用例にそう載っていたからみんなで真似したのでしょう)。
(この例のように開き (のようなもの) の後に書くこともできましたが、
閉じの前に書くのが普通だったと記憶しております。)
後にこのような冗長なことはせず、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
//-->
</script>
]PRE]

のように簡単に書くようになりました。

[35] また、[Q[裏技]]的なものとして、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
// -->スクリプトに対応していません。<!--
[VAR[...]]
// -->
</script>
]PRE]

のような書き方が紹介されることもありました。
(この例のようになぜかスクリプトの途中に書いているものもあれば、
注釈宣言 (のようなもの) の前後に書いているものもありました。
どこに入れるにせよ、書く内容は一行にするか、
うまくして行頭にスクリプト言語の注釈導入子が来るように調整することが重要です。
また、 [CODE(SGML)[[[etago]]]] が使えないことにも注意が必要です。)

[38] スクリプト言語の演算子として [CODE[>]] を使うことが良くありますが、
古いブラウザの中には注釈宣言を [CODE[>]] で終えてしまうものがあることが知られています。
[SAMP(JS)[[VAR[x]] > [VAR[y]]]] のような式は [SAMP(JS)[[VAR[y]] < [VAR[x]]]]
と書くことで回避できます。 [SRC[HTML 4 18.3.2 Note]]
もっとも、そのようなブラウザは HTML 4 の時点でも骨董品ですし、
HTML 4 も特にそうするべきだなどとは言っていません。

参考文献:
- [16] [CITE[<SCRIPT>〜</SCRIPT> 内の要素はすべてコメントで囲んだ方が安全です。]]
<http://openlab.ring.gr.jp/k16/htmllint/explain.html#comment-element>

[[#comment]]


** UA による利用

[28] [CODE(HTMLe)[script]] 要素によるスクリプトは、
文書の読込み時に実行されます [SRC[HTML 4 18.1]]。

[CODE(HTMLa)[src]] 属性による外部スクリプトは優先的に実行されるという説を唱える人がいますが、
根拠は不明です。特定の UA ではそうなのかもしれませんが、
少なくても HTML 4 は何も規定していません。
但し、 [CODE(HTMLa)[[[defer]]]] 属性や [CODE(HTMLa)[[[event]]]]
属性は実行時機に影響するのかもしれません。

[[#comment]]


** 安全性

[43]
'''Web メイルにおける HTML メイル''':
[[HTML]] を[[利用者界面]]として利用した [[MUA]]
(いわゆる [[Webメイル]]) で [[HTML]]
[[文書]]が含まれる[[メイル]]・[[メッセージ]]を表示する時には特に注意が必要です。
[CODE(HTMLe)@@en[[[script]]]] [[要素]]など[[スクリプト]]が実行され得るものをそのまま
[[HTML]] に含めると、 [[Webブラウザ]]側でその [[HTML]] [[文書]]全体 
[WEAK[([[HTMLメイル]]自体とその周りの[[利用者界面]]を含む全体)]]
の権限で[[スクリプト]]が実行されることになります。

[[Webブラウザ]]外に被害が及ぶかという点では通常の鯖側の[[スクリプト]]の安全上の脅威と変わりませんが、
[[利用者界面]]の部分を介して[[利用者]]の意図せぬ (削除などの)
操作を行ったり、受信したメッセージや個人情報が流出したりする危険性があります。

[[#comment]]


** 歴史

[2] [CODE(HTMLe)[script]] 要素は、 [[NN2]] が [[LiveScript]]
と共に実装したのがはじめであると考えられています。

[20] [CODE(HTMLe)[script]] 要素がはじめて公式な仕様書に入ったのは
1997年1月の [[HTML 3.2]] でした。しかし、
このときの最終的な勧告では詳細が決まらず、
将来の版のために予約すると述べるに留まっていました。

> <!ELEMENT SCRIPT - - CDATA -- placeholder for script statements -->
[SRC[HTML 3.2 DTD]]

[12] その後1997年12月の [[HTML 4]] で、 [CODE(HTMLe)[script]]
要素型はようやく正式な仕様の一部となりました。
当時 [[WinIE]] や [[NN]] が実装していた [CODE(HTMLe)[script]]
の基本的な機能が仕様に入りましたが、 WinIE だけが実装していた
[CODE(HTMLa)[event]] 属性と [CODE(HTMLa)[for]] 属性は、
将来のために予約とされました。

[24] 1998年に勧告された [[DOM 1]] やその後の [[DOM 2]] では、
[CODE(HTMLe)[script]] 要素型に対応する [CODE(DOMi)[[[HTMLScriptElement]]]]
界面が定義されています。ここでは、標準の属性の他、
[CODE(HTMLa)[for]] 属性と [CODE(HTMLa)[event]] 属性も[Q[将来の使用のために予約]]
として定義だけされています。

[25] >>24 そんな将来くるのかな〜。来たら嫌だな〜

[26] >>24-25 将来の使用は M$ の仕様の間違いじゃないのかな。

[32]
>>24-26 
その後 [[XHTML 1]] が標準化されましたが、予約2属性はやはり正式な仕様には昇格せず、
このまま忘れ去られようとしています。しかし、両属性の機能は拡張して汎用化されて
[[XML事象]]仕様の一部として標準化されました (2002年)。

[[#comment]]


** 実装

[31] [CODE(file)[[[CGI.pm]]]] は、 XHTML 出力 mode だと、
[[注釈宣言]]内に [[[CODE(XML)[CDATA]]区間]]宣言という素晴らしい出力をしてくれます(w

[50]
[CITE[Bug 60724 &#8211; <script> tag inside <applet> tag executes if Java enabled]] ([CODE[2007-02-10 13:51:33 +09:00]] 版) <https://bugzilla.mozilla.org/show_bug.cgi?id=60724>
([[名無しさん]])

[[#comment]]


** 不思議解釈

[34]
[CODE(HTMLa)[src]] 属性のある [CODE(HTMLe)[script]] の中に 
[CODE(HTMLe)[noscript]] を書く困った人がいます。。。

([[名無しさん]] [WEAK[2004-09-14 07:54:57 +00:00]])

[17] 仕様によれば (>>4)、 [CODE(HTMLa)[src]] 属性があるとき UA
は内容を無視しなければなりません。この規定に特に条件は無いようなので、
スクリプト未対応の UA であっても同様でしょう。
ですから、 [CODE(HTMLe)[script]] の中に [CODE(HTMLe)[noscript]]
を書くと、 HTML 4 対応の [CODE(HTMLe)[script]] 未対応 UA
には無視されてしまうはずです。

[[#comment]]


** 他との関係

[3] [[ASP]] などの鯖側で HTML 文書 (もどき) を前処理する類のシステムの一部では、
[CODE(HTMLe)[script]] 要素 (のようなもの) を拡張して、
[CODE[[[runat]]]] 属性などを付与して鯖側で実行するものと [CODE(HTMLe)[script]]
要素としてクライアントに送信するものを区別していることがあります。

(そのような実現方法は開発者がスクリプトの実行を正しく把握しづらくなるのではないかとの懸念はあります。
その点、 [[NES]] のように [CODE[[[server]]]] 要素型という別の要素型を用意するのは一つの考えではありますが、
どんぐりのせいくらべといったところでしょう。)

[13] スクリプトによって HTML 文書を動的に扱う方法として、 [[JavaScript]]
の [CODE(js)[[[document]].[[write]]]] がよく使われました。
([CODE(js)[document.write]] は後に [[DOM 1]] で [CODE(DOMi)[[[HTMLDocument]]]]
界面の [CODE(DOMm)[[[write]]]] method として標準化されています。)

HTML 4 仕様書は読み込み時のスクリプトによる文書に書き換えについても規定していますが、
その内容は [CODE(js)[document.write]] (と同様なもの) 
を想定しているようです。実際に使われていたのも [CODE(js)[document.write]]
(と同様なもの) だけでしょう。というわけで、 [CODE(DOMm)[[[write]]]]
method の説明もご覧ください。

[39] スクリプトに対応していなかったり、実行しないことにしていたりするときの[[代替内容]]を提供する
[CODE(HTMLe)[[[noscript]]]] が用意されています。アクセス可能性の確保のために、
重要な情報を提供する [CODE(HTMLe)[script]] は、
対応する [CODE(HTMLe)[noscript]] 要素を用意しておくことが極めて望ましいと考えられます。

[45]
[[XML事象]]の仕様書には[[事象取扱器]]として
[CODE(HTMLe)@@en[[[script]]]] を使う例があり、
[[Opera]] 9 でも [CODE(HTMLe)@@en[[[script]]]]
を[[事象取扱器]]にできるように実装されています。

が、 [[XML事象]]の[[属性]]がある
[CODE(HTMLe)@@en[[[script]]]] [[要素]]も、
[[文書]]読込み時には[[属性]]がないときと同じように実行されてしまうので、
あまり使いやすくありません。
([[名無しさん]])

[[#comment]]


** 例

[37] 二乗した結果を書き出す例 [SRC[HTML 4 18.3.2 改]]

[[JavaScript]] による例
[PRE(HTML)[
<SCRIPT type="text/javascript">
<!--  to hide script contents from old browsers
  function square(i) {
    document.write("The call passed ", i ," to the function.","<BR>");
    return i * i;
  }
  document.write("The function returned ",square(5),".");
// end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[VBScript]] による例
[PRE(HTML)[
<SCRIPT type="text/vbscript">
<!--
  Function Square(i)
    Call Document.Write("The call passed ",i," to the function.","<BR>")
    Square = i * i
  End Function
  Document.Write("The function returned ",Square(5),".")
' -->
</SCRIPT>
]PRE]

[[Tcl]] による例
[PRE(HTML)[
<SCRIPT type="text/tcl">
<!--  to hide script contents from old browsers
  proc square {i} {
    document write "The call passed $i to the function.<BR>"
    return [expr $i * $i]
  }
  document write "The function returned [square 5]."
# end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[#comment]]


** メモ

[44]
[CITE[XHTML Frequently Answered Questions]] <http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite>

[[HTML 4]] は [[SGML]] [[応用]]なのに
[CODE(JS)@@en[[[document]].[[write]]]]
が使えて、
[[XHTML 1]] は [[XML]] [[応用]]だから
[CODE(JS)@@en[[[document]].[[write]]]]
が使えないというのはよくわからない。
([[名無しさん]] [WEAK[2006-08-05 06:53:16 +00:00]])

[46]
[CITE[404 Blog Not Found:javascript - scriptタグによる通信が特許侵害!?]] <http://blog.livedoor.jp/dankogai/archives/50677817.html>
([[名無しさん]] [WEAK[2006-11-04 02:20:29 +00:00]])

[49]
[CITE[Bug 178258 &#8211; document.forms has no properties on a page without <body> (JavaScript error)]] ([CODE[2007-01-29 17:04:28 +09:00]] 版) <https://bugzilla.mozilla.org/show_bug.cgi?id=178258>
([[名無しさん]])

[51]
[CITE@@en[HTML5 script start tag should select appropriate content model according  to src]] ([[David Woolley]] 著, [CODE[2007-04-21 22:52:46 +09:00]] 版) <http://lists.w3.org/Archives/Public/www-html/2007Apr/0053.html>
([[名無しさん]] [WEAK[2007-04-28 03:58:40 +00:00]])

[52]
[CITE[HTML5 IRC logs: w3c / #html-wg / 20070423]] ([CODE[2007-06-30 15:38:51 +09:00]] 版) <http://krijnhoetmer.nl/irc-logs/html-wg/20070423#l-144>

> [03:47] <mjs> Lachy: since you were discussing Safari's handling of <script /> earlier, we might make that a Dashboard-only quirk - we foolishly did it for Firefox compatibility, and then a huge number of Dashboard widgets started relying on it, and now Firefox no longer handles it as empty in HTML  

([[名無しさん]])

[53]
[CITE@@en[http charset, <script> and IE]] ([[tex]] 著, [CODE[2007-07-30 06:33:36 +09:00]] 版) <http://lists.w3.org/Archives/Public/www-international/2007JulSep/0040.html>
([[名無しさん]])

[54]
[CITE[“消えた初音ミク”問題 ヤフーとGoogle「原因を調査中」 - ITmedia News]] ([CODE[2007-10-18 22:03:18 +09:00]] 版) <http://www.itmedia.co.jp/news/articles/0710/18/news065.html>

>
[PRE(HTML example code)[
<script language="JavaScript" type="text/javascript">
<!--
var pid="784200073";
var locs="ITOT1";
var random=new Date();
var js_url='http://dlv.itmedia.co.jp/adsv/v1?posall='+locs+'&id='+pid+'&rnd='+random.getTime();
document.write('<sc'+'ript language="JavaScript" type="text/javascript" src="'+js_url+'">');
document.write('</sc'+'ript>');
//-->
</script>
]PRE]

([[名無しさん]])

[55]
[CITE@@en[Re: <script> for non-script content]] ([[Ian Hickson]] 著, [CODE[2008-05-14 16:53:44 +09:00]] 版) <http://lists.w3.org/Archives/Public/public-html/2008May/0291.html>
([[名無しさん]])

[56]
[CITE@@ja[冬様もすなる☆日記というもの (2008年7月)]] ([[わかば]] 著, [CODE[2008-07-21 17:28:49 +09:00]] 版) <http://suika.fam.cx/~wakaba/d/d200807#d21-1>
([[名無しさん]])

[57]
[CITE@@ja[Kanasan.JS JavaScript 第 5 版読書会 #5: Days on the Moon]] ([CODE[2008-07-26 22:46:16 +09:00]] 版) <http://nanto.asablo.jp/blog/2008/07/25/3648120>
([[名無しさん]])

[58]
[CITE@@en[OpenSocial Data Pipelining - OpenSocial Specifications]] ([CODE[2008-09-04 06:00:40 +09:00]] 版) <http://wiki.opensocial-templates.org/index.php?title=OpenSocial_Data_Pipelining>
([[名無しさん]])

[60]
[CITE[High Performance Web Sites :: “Delayed Script Execution” in Opera]] ([CODE[2008-09-17 13:31:22 +09:00]] 版) <http://www.stevesouders.com/blog/2008/09/11/delayed-script-execution-in-opera/>
([[名無しさん]])

[[#comment]]


* script 要素 (ASP)

[[#comment]]


** 属性

,HTML (>>9) に加えて、	,==	,==	,==
,runat	,server	,なし	,動作場所 >>5

[5] [CODE[runat]] は、 [[M$]] の [[ASP]] で使われて、値が [CODE["server"]]
である場合に、その要素のスクリプトはサーバーで処理されます。
(クライアントには送られません。) この属性は [[W3C]]
の規格では規定されていません。サーバーで処理される以外で使ってはいけません。

- [6] >>2-3,>>5 [CODE[language]] 属性や [CODE[type]] 属性を省略しても [CODE[<%@@ Page Language="VB" %>]] みたいのが書いてあれば、それ以降の部分で解釈されるサーバー側スクリプトはその言語で解釈されるそうです。
- [7] >>5-6 それから、 [CODE[runat]] 属性はどんな要素にも? 使えて、サーバー側スクリプトからアクセス可能なことを表す?らしいです。全くもって理解不能な世界ですが。。。
- [8] >>2 ASP での既定値は (設定ファイルで変更しない限り) [CODE[VB]] (= [[VBScript]]) だそうです。
[[#comment]]


* script 要素型 (CSP)

- [10] CSP の script 要素では runat="server"/"compiler" の属性があります。 ''Introduction to Cache Server Pages - The CSP Compiler'' <http://www.cacheinfo.com/document/V401/cpi/cpitagbased.html>
- [11] このほか CSP の script 要素には色んな独自拡張属性 (もしかして自由に作れる?) があります。 ''技術サポート'' <http://www.cacheinfo.com/techinfo.htm>

[[#comment]]


* msxsl:script 要素 (M$XML の XSLT 実装)

[21] [CODE(XML)[{urn:schemas-microsoft-com:xslt}:script]]
要素を使うと、 [[XSLT]] (の [[XPath]] を使う文脈)
で利用者定義の関数を使用することが可能となります。

親要素は xslt:[[stylesheet]] 要素又は xslt:[[transform]]
要素です。内容は #[[PCDATA]] です (たぶん)。

,implements-prefix	,名前空間接頭辞	,必須	,関数の名前空間
,language	,html:[[language]] と同じ	,不明	,スクリプト言語

[[language]] 属性には [CODE(HTML)[html:script]] 
要素の場合と同じ値を指定できるそうです。
[CODE(XML)[implements-prefix]] 属性には、 XSLT
側で関数を呼ぶ際の [[XML名前空間]]接頭辞を与えます。
この値は自分以上の要素の [[xmlns]] 
属性を使って宣言されていなければならないはずです。

[22] 言葉で説明するより実例を見たほうが分かりやすいでしょう。

[PRE[
  <xslt:stylesheet version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:foo="http://foo.example/">
    <msxsl:script language="JScript" implements-prefix="foo">
      function bar (baz) {
        return baz;
      }
    </msxsl:script>
    <xslt:template select="element1">
      <xslt:apply-templates select="foo:bar(element2)"/>
    </xslt:template>
  </xslt:stylesheet>
]PRE]

この場合は関数 [CODE(XPath)[foo:bar(baz)]] は引数 [CODE(JS)[baz]]
をただ返すだけの何の面白味もないものですが、
雰囲気はつかめるでしょう。

- ''XSLT Elements'' <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/htm/xsl_elm_qz_4s50.asp>
[[#comment]]
- ''XSLT 1.0で正規表現を使う(MSXML限定)'' <http://members.jcom.home.ne.jp/jintrick/Personal/d20031l.html#d22_4>
[[#comment]]


* xalan:script 要素 (Xalan-Java XSLT 実装)

[23] [[Xalan]] では [[XSLT]] [[スタイル・シート]]で
[[JavaScript]] などを使うのに [CODE(XML)[xalan:script]]
要素を使います。

親要素は xalan:[[component]] 要素です。

,lang	,CDATA	,必須	,スクリプト言語
,src	,[[URI]]	,(指定なし)	,外部スクリプト参照

[[HTML]] や MSXML での書き方と互換性はありません。

- ''Xalan-Java Extensions'' <http://xml.apache.org/xalan-j/extensions.html>
[[#comment]]


* メモ

[59]
[[OSML]] で[[鯖]]側で処理される [[HTML]] 片の [CODE(HTMLe)@@en[[[script]]]]
[[要素]]
([CODE(HTML)@@en[[[type]]="[[text/os-data]]"]] や
[CODE(HTML)@@en[[[type]]="[[text/os-template]}"]] には、]]
[CODE(HTMLa)@@en[[[beforeData]]]]
や [CODE(HTMLa)@@en[[[requireData]]]] のような[[属性]]を更に指定できます。
([[名無しさん]])

[61]
[CITE[Bug 304786 &#8211; dynamically inserting/adding xul:script via DOM doesn't work]] ([TIME[2008-10-09 11:53:54 +09:00]] 版) <https://bugzilla.mozilla.org/show_bug.cgi?id=304786>
([[名無しさん]])

@


1.32
log
@auto-committed
@
text
@a505 1

d507 1
a507 1
[CITE[High Performance Web Sites :: “Delayed Script Execution” in Opera]] ([TIME[2008-09-17 13:31:22 +09:00]] 版) <http://www.stevesouders.com/blog/2008/09/11/delayed-script-execution-in-opera/>
a509 1

d615 6
a620 1
([[名無しさん]])@


1.31
log
@auto-committed
@
text
@d506 6
d611 5
a615 5
[[OSML]] で[[鯖]]側で処理される [[HTML]] 片の [CODE(HTMLe)@@en[[[script]]]]
[[要素]]
([CODE(HTML)@@en[[[type]]="[[text/os-data]]"]] や
[CODE(HTML)@@en[[[type]]="[[text/os-template]}"]] には、
[CODE(HTMLa)@@en[[[beforeData]]]]
d617 1
a617 2
([[名無しさん]])

@


1.30
log
@auto-committed
@
text
@a497 1

d499 1
a499 1
[CITE@@ja[Kanasan.JS JavaScript 第 5 版読書会 #5: Days on the Moon]] ([TIME[2008-07-26 22:46:16 +09:00]] 版) <http://nanto.asablo.jp/blog/2008/07/25/3648120>
d502 3
d602 11
a612 1
* メモ@


1.29
log
@auto-committed
@
text
@d494 4
d499 2
a500 2
[56]
[CITE@@ja[冬様もすなる☆日記というもの (2008年7月)]] ([[わかば]] 著, [TIME[2008-07-21 17:28:49 +09:00]] 版) <http://suika.fam.cx/~wakaba/d/d200807#d21-1>
@


1.28
log
@auto-committed
@
text
@d471 22
a493 17
[54]
[CITE[“消えた初音ミク”問題 ヤフーとGoogle「原因を調査中」 - ITmedia News]] ([TIME[2007-10-18 22:03:18 +09:00]] 版) <http://www.itmedia.co.jp/news/articles/0710/18/news065.html>

>
[PRE(HTML example code)[
<script language="JavaScript" type="text/javascript">
<!--
var pid="784200073";
var locs="ITOT1";
var random=new Date();

var js_url='http://dlv.itmedia.co.jp/adsv/v1?posall='+locs+'&id='+pid+'&rnd='+random.getTime();
document.write('<sc'+'ript language="JavaScript" type="text/javascript" src="'+js_url+'">');
document.write('</sc'+'ript>');
//-->
</script>
]PRE]
d495 2
@


1.27
log
@auto-committed
@
text
@d467 22
a489 2
[53]
[CITE@@en[http charset, <script> and IE]] ([[tex]] 著, [TIME[2007-07-30 06:33:36 +09:00]] 版) <http://lists.w3.org/Archives/Public/www-international/2007JulSep/0040.html>
@


1.26
log
@auto-committed
@
text
@d460 6
a466 5
[52]
[CITE[HTML5 IRC logs: w3c / #html-wg / 20070423]] ([TIME[2007-06-30 15:38:51 +09:00]] 版) <http://krijnhoetmer.nl/irc-logs/html-wg/20070423#l-144>

>[03:47] <mjs> Lachy: since you were discussing Safari's handling of <script /> earlier, we might make that a Dashboard-only quirk - we foolishly did it for Firefox compatibility, and then a huge number of Dashboard widgets started relying on it, and now Firefox no longer handles it as empty in HTML  

d468 2
@


1.25
log
@auto-committed
@
text
@a455 1

d457 1
a457 1
[CITE@@en[HTML5 script start tag should select appropriate content model according  to src]] ([[David Woolley]] 著, [TIME[2007-04-21 22:52:46 +09:00]] 版) <http://lists.w3.org/Archives/Public/www-html/2007Apr/0053.html>
d459 9
@


1.24
log
@auto-committed
@
text
@a321 1

d323 1
a323 1
[CITE[Bug 60724 &#8211; <script> tag inside <applet> tag executes if Java enabled]] ([TIME[2007-02-10 13:51:33 +09:00]] 版) <https://bugzilla.mozilla.org/show_bug.cgi?id=60724>
a325 1

d455 6
@


1.23
log
@auto-committed
@
text
@d322 6
a453 1

d455 1
a455 1
[CITE[Bug 178258 &#8211; document.forms has no properties on a page without <body> (JavaScript error)]] ([TIME[2007-01-29 17:04:28 +09:00]] 版) <https://bugzilla.mozilla.org/show_bug.cgi?id=178258>
a456 1

@


1.22
log
@auto-committed
@
text
@a140 1

a144 1

d447 6
@


1.21
log
@auto-committed
@
text
@d137 10
a371 1

d373 8
a380 8
[[XML事象]]の仕様書には[[事象取扱器]]として
[CODE(HTMLe)@@en[[[script]]]] を使う例があり、
[[Opera]] 9 でも [CODE(HTMLe)@@en[[[script]]]]
を[[事象取扱器]]にできるように実装されています。

が、 [[XML事象]]の[[属性]]がある
[CODE(HTMLe)@@en[[[script]]]] [[要素]]も、
[[文書]]読込み時には[[属性]]がないときと同じように実行されてしまうので、
a383 1

d445 4
@


1.20
log
@auto-committed
@
text
@d362 14
d428 7
a434 7
[CITE[XHTML Frequently Answered Questions]] <http://www.w3.org/MarkUp/2004/xhtml-faq#docwrite>

[[HTML 4]] は [[SGML]] [[応用]]なのに
[CODE(JS)@@en[[[document]].[[write]]]]
が使えて、
[[XHTML 1]] は [[XML]] [[応用]]だから
[CODE(JS)@@en[[[document]].[[write]]]]
a436 1

@


1.19
log
@auto-committed
@
text
@d1 520
a520 505
* [CODE(HTMLe)[script]] 要素型 (HTML, XHTML 1)

@@@@
[CODE(HTMLe)@@en[[[script]]]][[要素型]]の現実の処理は[[HTML 5]]で規定されると思われます。
ここでの説明は[[HTML 4]]に基づいており、実装を必ずしも正確に反映していません。

[1] [ABBR[[[HTML]]][Hypertext Markup Language]] の 
[DFN[[CODE(HTMLe)[script]] 要素]]は、
文書中に[[スクリプト]]を配置します。

[29] 仕様書:
- [[HTML 4]]
-- [CITE[18 Scripts in HTML documents]]
<IW:HTML4:"interact/scripts.html#edef-SCRIPT">
-- [CITE[Element content]]
<IW:HTML4:"appendix/notes.html#h-B.3.2.1">
- [[ECMA-290]] 
- [[XHTML 1.0]]
--[CSECTION[4.8. Script and Style elements]]
(参考) <IW:XHTML10:"h-4.8">

[9] 
:[[開始タグ]]:必須
:[[終了タグ]]:必須
:出現できる文脈:[CODE(HTMLe)[[[head]]]] の子として、または [CODE(HTMLe)[[[body]]]]
子孫の大抵の場所で
:[[内容模型]]:[CODE(SGML)[[[CDATA]]]] ([[HTML 4]]), [CODE(XML)[[[PCDATA]]]] ([[XHTML 1]])
:[[属性]]:
,属性名	,属性値	,既定値	,説明	,出典
,[CODE(HTMLa)[[[archive]]]],,,[NC4]
,[CODE(HTMLa)[[[charset]]]]	,[CODE(SGML)[%[[Charset]]]]	,	,charset ヒント	,[HTML 4]
,[CODE(HTMLa)[[[classname]]]],[[逆ドメイン名]],,級名,[ECMA-290]
,[CODE(HTMLa)[[[defer]]]]	,([[真偽値属性]])	,(偽)	,遅延評価	,[HTML 4]
,[CODE(HTMLa)[[[event]]]]	,	,	,[[事象]]	,[HTML 4] 予約
,[CODE(HTMLa)[[[for]]]]	,[CODE(SGML)[[[IDREF]]]]	,	,対象	,[HTML 4] 予約
,[CODE(HTMLa)[[[id]]]],[CODE(SGML)[[[ID]]]],(なし),固有識別子
,[CODE(HTMLa)[[[language]]]]	,	,	,スクリプト言語	,[HTML 4] 非推奨
,[CODE(HTMLa)[[[name]]]],,,,非標準
,[CODE(HTMLa)[[[purpose]]]],,,実行目的,[ECMA-290]
,[CODE(HTMLa)[[[src]]]]	,[CODE(SGML)[%[[URI]]]]	,(内容)	,外部スクリプト	,[HTML 4]
,[CODE(HTMLa)[[[type]]]]	,[CODE(SGML)[%[[ContentType]]]]	,(必須)	,[[スクリプト言語]]	,[HTML 4]
,[CODE(XMLa)[[VAR[ev:]][[event]]]],[CODE(ABNF)[[[QName]]]],(なし),[[事象名]]
,[CODE(XMLa)[[VAR[ev:]][[observer]]]],[CODE(XML)[[[IDREF]]]],,[[事象観察器]]
,[CODE(XMLa)[[VAR[ev:]][[phase]]]],,,
,[CODE(XMLa)[[VAR[ev:]][[propagate]]]],,,[[伝播]]制御
,[CODE(XMLa)[[VAR[ev:]][[target]]]],[CODE(XML)[IDREF]],,事象対象


[[#comment]]


** 出現できる文脈

[14] [CODE(HTMLe)[script]] 要素は、 [CODE(HTMLe)[[[head]]]] 要素や
[CODE(HTMLe)[[[body]]]] 要素の中の大抵の場所に出現できます
[SRC[HTML 4 18.2.1]]。

[15]
しかし、[[不思議マーク付け]]の世界や多くの [[WWWブラウザ]]の実装では、
[CODE(HTMLe)[[[html]]]] タグの前後や [CODE(HTMLe)[head]] 要素と
[CODE(HTMLe)[body]] 要素の間を含めて、あらゆる場所に出現できるようです。

[CITE[ダイナミックHTML入門]]
(Bruce Campbell + Rick Darnell 著, 安藤慶一訳) という入門書では、
[Q[スクリプトの場所に関しては標準規格は必要ないようです]<urn:isbn:4-89471-048-X>]
などと電波を飛ばしているそうです。
[SRC[[CITE[いくつかの書籍のあらさがし]] <http://openlab.ring.gr.jp/k16/htmllint/findfault.html#dynamic-html>]]

[[#comment]]


** 内容

[4] [CODE(HTMLa)[[[src]]]] 属性が指定されている場合、
スクリプトはその外部資源で定義されます。 
[ABBR[[[UA]]][利用者エージェント]]
は[[内容]]を無視し、指定された 
[ABBR[URI][統一資源識別子]] のスクリプトを取り寄せなければなりません。
[CODE(HTMLa)[src]] 属性が指定されていない場合、
[VAR[UA][利用者エージェント]] 
は内容をスクリプトとして解釈しなければなりません。
[SRC[HTML 4 18.2.1]]

[30] [ABBR[[[XHTML]]][拡張可能ハイパーテキスト・マーク付け言語]] 
より前の [ABBR[HTML][ハイパーテキスト・マーク付け言語]] では、 
[CODE(HTMLe)[script]]
要素の内容は [CODE(HTMLe)[[[style]]]] 要素の内容同様[[文字データ]]
([CODE(SGML)[[[CDATA]]]]) 宣言内容とされていました。
つまり、 [CODE(HTMLe)[script]] 要素内ではほとんどの[[マーク]]は認知されず、
[ABBR[[CODE(SGML)[[[etago]]]]][終了タグ開き]] ([CODE(HTML)[</]]) の
直後に[[名前開始文字]] [WEAK[([[ラテン文字]]など)]] または 
[ABBR[[CODE(SGML)[[[tagc]]]]][タグ閉じ]] ([CODE(HTML)[>]])
が来たらそこで [CODE(HTMLe)[script]] 要素が終わることになっていました。

ですから、スクリプト言語の[[演算子]]などとして 
[ABBR[HTML][ハイパーテキスト・マーク付け言語]]
の[[マーク文字]]が登場することがよくありますが、
そのような場合にもほとんど[[文字参照]]化する必要がありませんでした。

[36] 
[ABBR[[CODE(SGML)[[[ETAGO]]]]][終了タグ閉じ]] がかけないのは 
[CODE(JS)[[CODE(DOMa)[[[document]]]].[CODE(DOMm)[[[write]]]]]]
のデータを作る時などにしばしば問題となり、その最盛期には、
これが原因でうまく動かないことに悩む人もよく見受けられました。
回避するためには、そのスクリプト言語の文字列連結を使ったり
([SAMP(JS)['<' + '/a>']])、 escape (quote) 機能を使ったり
([SAMP(JS)['<\/a>']])、文字生成関数を使ったり 
([SAMP(VB)["<" & [[Chr]] (47) & "a>"]])
する方法がよく紹介されました。

[33] しかし、 [ABBR[[[XML]]][拡張可能マーク付け言語]] では 
[ABBR[[CODE(SGML)[CDATA]]][文字データ]] 宣言内容は使えないので、
[ABBR[[[XHTML 1]]][拡張可能ハイパーテキスト・マーク付け言語 1]] では 
[ABBR[[CODE(XML)[[[PCDATA]]]]][解析可能文字データ]] 
と宣言されています。
ですから、 [ABBR[[CODE(SGML)[STAGO]]][開始タグ開き]] 
([CODE(XML)[<]]) は必ず [[escape]]
して [CODE(XML)[&lt;]] としなければならないなどの制限があります。
これを回避するために [[[CODE(XML)[CDATA]]区間]]を使う方法がよく紹介されますが、
そうすると多くの既存の [ABBR[WWW][World Wide Web]] 
ブラウザとの互換性が失われてしまいます。
ですから、 [ABBR[XHTML][拡張可能ハイパーテキスト・マーク付け言語]] で 
[CODE(HTMLe)[script]] 要素を使う時は [CODE(HTMLa)[src]]
属性を使った外部スクリプトとするのが良いと言われています。


[41]
[CODE(HTMLa)[src]] で指定された資源が取得できない時に内容を使うとする説があります。

[CITE[SCRIPT - Client-side Script(jp)]] <http://www.htmlhelp.com/ja/reference/html40/special/script.html>

しかし、 [ABBR[HTML][ハイパーテキスト・マーク付け言語]] 4 
の規定と矛盾します。
[WEAK[(この文書はほんとうに [ABBR[HTML][ハイパーテキスト・マーク付け言語]] 4 に基づいているのでしょうか?)]]

[[#comment]]


*** 擬似注釈宣言の使用

[18] [CODE(HTMLe)[script]] 要素に対応していない古い WWW ブラウザは、
[CODE(HTMLe)[script]] 要素内の[[文字データ]]も構わず解釈してしまいます。
そこで、 [CODE(HTMLe)[script]] 要素の内容としてスクリプトを記述するときには、
HTML の[[注釈宣言]]のように最初に [CODE(HTML)[<!--]] を、
最後に [CODE(HTML)[-->]] をつけることが慣習となっています。

HTML 4 によれば、これは HTML の機能ではなく、[[スクリプト機関]]の機能とされています。
この機能に対応している言語には [[JavaScript]], [[VBScript]], [[Tcl]]
があるようです。 [SRC[HTML 4 18.3.2]] より正確には、この3つの言語は
[CODE(HTMLe)[script]] 要素の内容の一番最初の非[[空白]]文字列が
[CODE[<!--]] であるとき、これを無視するらしいです。
最後の [CODE[-->]] は、3つの言語のいずれも、それだけで書くことはできず、
それぞれの言語の注釈の内容として (JavaScript の場合は [SAMP(JS)[// -->]] 
のようにして) 書くことが必要らしいです。

[Q[らしい]]というのは、正確にこれを規定した仕様がないからです。
HTML 4 は[Q[スクリプト機関]]によるものだと言っていますから、
スクリプト言語の言語仕様かなにかに規定があってもよさそうなものですが、
そのようなものは見たことがありません。また、 HTML
に直接埋め込まれていない [[ECMAScript]] のスクリプトのソース・コードに
[CODE[<!--]] という文字列があってもよいという話も聞きません。
([CODE(HTMLe)[[[style]]]] 要素も同じような事情ですが、こちらは
[[CSS2]] で言語仕様の一部としてきちんと定義されています。)

[42] 少なくても [[JavaScript]] では、
最初の [SAMP[<!--]] が含まれる行の行末までを無視するのが
Web ブラウザの普通の実装のようです。

[27] このような注釈宣言 (のようなもの) の中では、 (SGML
的には [CODE(SGML)[CDATA]] なので注釈宣言ではないとはいえ、
古い UA の立場からしても SGML 的に正当であるために) [CODE(SGML)[[[COM]]]]
([CODE(HTML)[--]]) を含めるべきではないと考える人もいます。

[19] なお、 XHTML 1 の [CODE(HTMLe)[script]] 要素は、 [CODE(SGML)[CDATA]]
ではありませんので、注釈宣言 (のようなもの) を書くと、
本当に XML の注釈宣言と解釈されてしまいます。当然、
スクリプトとして解釈・実行されることはありません。

[40] [CODE(HTMLe)[script]] 要素が使われ始めたばかりの1996年ごろまでは、
注釈宣言 (のようなもの) の閉じの前に
[PRE(HTML)[
<script language="javascript">
<!-- hide script from old browsers
[VAR[...]]
// hide script from old browsers -->
</script>
]PRE]

のように自然言語の注釈を入れておくことがよく行われていました 
(初期の使用例にそう載っていたからみんなで真似したのでしょう)。
(この例のように開き (のようなもの) の後に書くこともできましたが、
閉じの前に書くのが普通だったと記憶しております。)
後にこのような冗長なことはせず、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
//-->
</script>
]PRE]

のように簡単に書くようになりました。

[35] また、[Q[裏技]]的なものとして、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
// -->スクリプトに対応していません。<!--
[VAR[...]]
// -->
</script>
]PRE]

のような書き方が紹介されることもありました。
(この例のようになぜかスクリプトの途中に書いているものもあれば、
注釈宣言 (のようなもの) の前後に書いているものもありました。
どこに入れるにせよ、書く内容は一行にするか、
うまくして行頭にスクリプト言語の注釈導入子が来るように調整することが重要です。
また、 [CODE(SGML)[[[etago]]]] が使えないことにも注意が必要です。)

[38] スクリプト言語の演算子として [CODE[>]] を使うことが良くありますが、
古いブラウザの中には注釈宣言を [CODE[>]] で終えてしまうものがあることが知られています。
[SAMP(JS)[[VAR[x]] > [VAR[y]]]] のような式は [SAMP(JS)[[VAR[y]] < [VAR[x]]]]
と書くことで回避できます。 [SRC[HTML 4 18.3.2 Note]]
もっとも、そのようなブラウザは HTML 4 の時点でも骨董品ですし、
HTML 4 も特にそうするべきだなどとは言っていません。

参考文献:
- [16] [CITE[<SCRIPT>〜</SCRIPT> 内の要素はすべてコメントで囲んだ方が安全です。]]
<http://openlab.ring.gr.jp/k16/htmllint/explain.html#comment-element>

[[#comment]]


** UA による利用

[28] [CODE(HTMLe)[script]] 要素によるスクリプトは、
文書の読込み時に実行されます [SRC[HTML 4 18.1]]。

[CODE(HTMLa)[src]] 属性による外部スクリプトは優先的に実行されるという説を唱える人がいますが、
根拠は不明です。特定の UA ではそうなのかもしれませんが、
少なくても HTML 4 は何も規定していません。
但し、 [CODE(HTMLa)[[[defer]]]] 属性や [CODE(HTMLa)[[[event]]]]
属性は実行時機に影響するのかもしれません。

[[#comment]]

** 安全性

[43]
'''Web メイルにおける HTML メイル''':
[[HTML]] を[[利用者界面]]として利用した [[MUA]]
(いわゆる [[Webメイル]]) で [[HTML]]
[[文書]]が含まれる[[メイル]]・[[メッセージ]]を表示する時には特に注意が必要です。
[CODE(HTMLe)@@en[[[script]]]] [[要素]]など[[スクリプト]]が実行され得るものをそのまま
[[HTML]] に含めると、 [[Webブラウザ]]側でその [[HTML]] [[文書]]全体 
[WEAK[([[HTMLメイル]]自体とその周りの[[利用者界面]]を含む全体)]]
の権限で[[スクリプト]]が実行されることになります。

[[Webブラウザ]]外に被害が及ぶかという点では通常の鯖側の[[スクリプト]]の安全上の脅威と変わりませんが、
[[利用者界面]]の部分を介して[[利用者]]の意図せぬ (削除などの)
操作を行ったり、受信したメッセージや個人情報が流出したりする危険性があります。

[[#comment]]

** 歴史

[2] [CODE(HTMLe)[script]] 要素は、 [[NN2]] が [[LiveScript]]
と共に実装したのがはじめであると考えられています。

[20] [CODE(HTMLe)[script]] 要素がはじめて公式な仕様書に入ったのは
1997年1月の [[HTML 3.2]] でした。しかし、
このときの最終的な勧告では詳細が決まらず、
将来の版のために予約すると述べるに留まっていました。

> <!ELEMENT SCRIPT - - CDATA -- placeholder for script statements -->
[SRC[HTML 3.2 DTD]]

[12] その後1997年12月の [[HTML 4]] で、 [CODE(HTMLe)[script]]
要素型はようやく正式な仕様の一部となりました。
当時 [[WinIE]] や [[NN]] が実装していた [CODE(HTMLe)[script]]
の基本的な機能が仕様に入りましたが、 WinIE だけが実装していた
[CODE(HTMLa)[event]] 属性と [CODE(HTMLa)[for]] 属性は、
将来のために予約とされました。

[24] 1998年に勧告された [[DOM 1]] やその後の [[DOM 2]] では、
[CODE(HTMLe)[script]] 要素型に対応する [CODE(DOMi)[[[HTMLScriptElement]]]]
界面が定義されています。ここでは、標準の属性の他、
[CODE(HTMLa)[for]] 属性と [CODE(HTMLa)[event]] 属性も[Q[将来の使用のために予約]]
として定義だけされています。

[25] >>24 そんな将来くるのかな〜。来たら嫌だな〜

[26] >>24-25 将来の使用は M$ の仕様の間違いじゃないのかな。

[32]
>>24-26 
その後 [[XHTML 1]] が標準化されましたが、予約2属性はやはり正式な仕様には昇格せず、
このまま忘れ去られようとしています。しかし、両属性の機能は拡張して汎用化されて
[[XML事象]]仕様の一部として標準化されました (2002年)。

[[#comment]]


** 実装

[31] [CODE(file)[[[CGI.pm]]]] は、 XHTML 出力 mode だと、
[[注釈宣言]]内に [[[CODE(XML)[CDATA]]区間]]宣言という素晴らしい出力をしてくれます(w

[[#comment]]


** 不思議解釈

[34]
[CODE(HTMLa)[src]] 属性のある [CODE(HTMLe)[script]] の中に 
[CODE(HTMLe)[noscript]] を書く困った人がいます。。。

([[名無しさん]] [WEAK[2004-09-14 07:54:57 +00:00]])

[17] 仕様によれば (>>4)、 [CODE(HTMLa)[src]] 属性があるとき UA
は内容を無視しなければなりません。この規定に特に条件は無いようなので、
スクリプト未対応の UA であっても同様でしょう。
ですから、 [CODE(HTMLe)[script]] の中に [CODE(HTMLe)[noscript]]
を書くと、 HTML 4 対応の [CODE(HTMLe)[script]] 未対応 UA
には無視されてしまうはずです。

[[#comment]]


** 他との関係

[3] [[ASP]] などの鯖側で HTML 文書 (もどき) を前処理する類のシステムの一部では、
[CODE(HTMLe)[script]] 要素 (のようなもの) を拡張して、
[CODE[[[runat]]]] 属性などを付与して鯖側で実行するものと [CODE(HTMLe)[script]]
要素としてクライアントに送信するものを区別していることがあります。

(そのような実現方法は開発者がスクリプトの実行を正しく把握しづらくなるのではないかとの懸念はあります。
その点、 [[NES]] のように [CODE[[[server]]]] 要素型という別の要素型を用意するのは一つの考えではありますが、
どんぐりのせいくらべといったところでしょう。)

[13] スクリプトによって HTML 文書を動的に扱う方法として、 [[JavaScript]]
の [CODE(js)[[[document]].[[write]]]] がよく使われました。
([CODE(js)[document.write]] は後に [[DOM 1]] で [CODE(DOMi)[[[HTMLDocument]]]]
界面の [CODE(DOMm)[[[write]]]] method として標準化されています。)

HTML 4 仕様書は読み込み時のスクリプトによる文書に書き換えについても規定していますが、
その内容は [CODE(js)[document.write]] (と同様なもの) 
を想定しているようです。実際に使われていたのも [CODE(js)[document.write]]
(と同様なもの) だけでしょう。というわけで、 [CODE(DOMm)[[[write]]]]
method の説明もご覧ください。

[39] スクリプトに対応していなかったり、実行しないことにしていたりするときの[[代替内容]]を提供する
[CODE(HTMLe)[[[noscript]]]] が用意されています。アクセス可能性の確保のために、
重要な情報を提供する [CODE(HTMLe)[script]] は、
対応する [CODE(HTMLe)[noscript]] 要素を用意しておくことが極めて望ましいと考えられます。

[[#comment]]


** 例

[37] 二乗した結果を書き出す例 [SRC[HTML 4 18.3.2 改]]

[[JavaScript]] による例
[PRE(HTML)[
<SCRIPT type="text/javascript">
<!--  to hide script contents from old browsers
  function square(i) {
    document.write("The call passed ", i ," to the function.","<BR>");
    return i * i;
  }
  document.write("The function returned ",square(5),".");
// end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[VBScript]] による例
[PRE(HTML)[
<SCRIPT type="text/vbscript">
<!--
  Function Square(i)
    Call Document.Write("The call passed ",i," to the function.","<BR>")
    Square = i * i
  End Function
  Document.Write("The function returned ",Square(5),".")
' -->
</SCRIPT>
]PRE]

[[Tcl]] による例
[PRE(HTML)[
<SCRIPT type="text/tcl">
<!--  to hide script contents from old browsers
  proc square {i} {
    document write "The call passed $i to the function.<BR>"
    return [expr $i * $i]
  }
  document write "The function returned [square 5]."
# end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[#comment]]


** メモ

[[#comment]]


* script 要素 (ASP)

[[#comment]]


** 属性

,HTML (>>9) に加えて、	,==	,==	,==
,runat	,server	,なし	,動作場所 >>5

[5] [CODE[runat]] は、 [[M$]] の [[ASP]] で使われて、値が [CODE["server"]]
である場合に、その要素のスクリプトはサーバーで処理されます。
(クライアントには送られません。) この属性は [[W3C]]
の規格では規定されていません。サーバーで処理される以外で使ってはいけません。

- [6] >>2-3,>>5 [CODE[language]] 属性や [CODE[type]] 属性を省略しても [CODE[<%@@ Page Language="VB" %>]] みたいのが書いてあれば、それ以降の部分で解釈されるサーバー側スクリプトはその言語で解釈されるそうです。
- [7] >>5-6 それから、 [CODE[runat]] 属性はどんな要素にも? 使えて、サーバー側スクリプトからアクセス可能なことを表す?らしいです。全くもって理解不能な世界ですが。。。
- [8] >>2 ASP での既定値は (設定ファイルで変更しない限り) [CODE[VB]] (= [[VBScript]]) だそうです。
[[#comment]]


* script 要素型 (CSP)

- [10] CSP の script 要素では runat="server"/"compiler" の属性があります。 ''Introduction to Cache Server Pages - The CSP Compiler'' <http://www.cacheinfo.com/document/V401/cpi/cpitagbased.html>
- [11] このほか CSP の script 要素には色んな独自拡張属性 (もしかして自由に作れる?) があります。 ''技術サポート'' <http://www.cacheinfo.com/techinfo.htm>

[[#comment]]


* msxsl:script 要素 (M$XML の XSLT 実装)

[21] [CODE(XML)[{urn:schemas-microsoft-com:xslt}:script]]
要素を使うと、 [[XSLT]] (の [[XPath]] を使う文脈)
で利用者定義の関数を使用することが可能となります。

親要素は xslt:[[stylesheet]] 要素又は xslt:[[transform]]
要素です。内容は #[[PCDATA]] です (たぶん)。

,implements-prefix	,名前空間接頭辞	,必須	,関数の名前空間
,language	,html:[[language]] と同じ	,不明	,スクリプト言語

[[language]] 属性には [CODE(HTML)[html:script]] 
要素の場合と同じ値を指定できるそうです。
[CODE(XML)[implements-prefix]] 属性には、 XSLT
側で関数を呼ぶ際の [[XML名前空間]]接頭辞を与えます。
この値は自分以上の要素の [[xmlns]] 
属性を使って宣言されていなければならないはずです。

[22] 言葉で説明するより実例を見たほうが分かりやすいでしょう。

[PRE[
  <xslt:stylesheet version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:foo="http://foo.example/">
    <msxsl:script language="JScript" implements-prefix="foo">
      function bar (baz) {
        return baz;
      }
    </msxsl:script>
    <xslt:template select="element1">
      <xslt:apply-templates select="foo:bar(element2)"/>
    </xslt:template>
  </xslt:stylesheet>
]PRE]

この場合は関数 [CODE(XPath)[foo:bar(baz)]] は引数 [CODE(JS)[baz]]
をただ返すだけの何の面白味もないものですが、
雰囲気はつかめるでしょう。

- ''XSLT Elements'' <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/htm/xsl_elm_qz_4s50.asp>
[[#comment]]
- ''XSLT 1.0で正規表現を使う(MSXML限定)'' <http://members.jcom.home.ne.jp/jintrick/Personal/d20031l.html#d22_4>
[[#comment]]


* xalan:script 要素 (Xalan-Java XSLT 実装)

[23] [[Xalan]] では [[XSLT]] [[スタイル・シート]]で
[[JavaScript]] などを使うのに [CODE(XML)[xalan:script]]
要素を使います。

親要素は xalan:[[component]] 要素です。

,lang	,CDATA	,必須	,スクリプト言語
,src	,[[URI]]	,(指定なし)	,外部スクリプト参照

[[HTML]] や MSXML での書き方と互換性はありません。

- ''Xalan-Java Extensions'' <http://xml.apache.org/xalan-j/extensions.html>
[[#comment]]


@


1.18
log
@auto-committed
@
text
@d3 4
@


1.17
log
@auto-committed
@
text
@d245 17
@


1.16
log
@auto-committed
@
text
@d14 3
@


1.15
log
@auto-committed
@
text
@d31 1
@


1.14
log
@auto-committed
@
text
@d157 4
@


1.13
log
@auto-committed
@
text
@a0 1

d13 1
d25 1
d31 1
@


1.12
log
@auto-committed
@
text
@d2 1
d4 2
a5 3
* script 要素型 (HTML, XHTML 1)

[1] [[HTML]] の [DFN[[CODE(HTMLe)[script]] 要素]]は、
d20 1
a20 2
:[[内容模型]] ([[HTML 4]]):[CODE(SGML)[[[CDATA]]]]
:内容模型 ([[XHTML 1]]):[CODE(XML)[[[PCDATA]]]]
d23 1
d28 1
d32 5
d65 4
a68 2
スクリプトはその外部資源で定義されます。 [[UA]]
は[[内容]]を無視し、指定された URI のスクリプトを取り寄せなければなりません。
d70 2
a71 1
UA は内容をスクリプトとして解釈しなければなりません。
d74 3
a76 1
[30] [[XHTML]] より前の HTML では、 [CODE(HTMLe)[script]]
d80 3
a82 2
[CODE(SGML)[[[etago]]]] ([CODE(HTML)[</]]) の直後に[[名前開始文字]]
([[ラテン文字]]など) または [CODE(SGML)[[[tagc]]]] ([CODE(HTML)[>]])
d85 2
a86 1
ですから、スクリプト言語の[[演算子]]などとして HTML
d90 3
a92 1
[36] [CODE(SGML)[[[ETAGO]]]] がかけないのは [CODE(JS)[document.write]]
d97 2
a98 1
([SAMP(JS)['<\/a>']])、文字生成関数を使ったり ([SAMP(VB)["<" & [[Chr]] (47) & "a>"]])
d101 7
a107 3
[33] しかし、 [[XML]] では [CODE(SGML)[CDATA]] 宣言内容は使えないので、
[[XHTML 1]] では [CODE(XML)[[[PCDATA]]]] と宣言されています。
ですから、 [CODE(SGML)[stago]] ([CODE(XML)[<]]) は必ず [[escape]]
d110 4
a113 2
そうすると多くの既存の WWW ブラウザとの互換性が失われてしまいます。
ですから、 XHTML で [CODE(HTMLe)[script]] 要素を使う時は [CODE(HTMLa)[src]]
d122 3
a124 4
しかし、 HTML 4 の規定と矛盾します。
(この文書はほんとうに HTML 4 に基づいているのでしょうか?)
([[名無しさん]])

@


1.11
log
@auto-committed
@
text
@d1 95
a95 94



* script 要素型 (HTML, XHTML 1)

[1] [[HTML]] の [DFN[[CODE(HTMLe)[script]] 要素]]は、
文書中に[[スクリプト]]を配置します。

[29] 仕様書:
- [[HTML 4]]
-- [CITE[18 Scripts in HTML documents]]
<IW:HTML4:"interact/scripts.html#edef-SCRIPT">

[9] 
:[[開始タグ]]:必須
:[[終了タグ]]:必須
:出現できる文脈:[CODE(HTMLe)[[[head]]]] の子として、または [CODE(HTMLe)[[[body]]]]
子孫の大抵の場所で
:[[内容模型]] ([[HTML 4]]):[CODE(SGML)[[[CDATA]]]]
:内容模型 ([[XHTML 1]]):[CODE(XML)[[[PCDATA]]]]
:[[属性]]:
,属性名	,属性値	,既定値	,説明	,出典
,[CODE(HTMLa)[[[charset]]]]	,[CODE(SGML)[%[[Charset]]]]	,	,charset ヒント	,[HTML 4]
,[CODE(HTMLa)[[[defer]]]]	,([[真偽値属性]])	,(偽)	,遅延評価	,[HTML 4]
,[CODE(HTMLa)[[[event]]]]	,	,	,[[事象]]	,[HTML 4] 予約
,[CODE(HTMLa)[[[for]]]]	,[CODE(SGML)[[[IDREF]]]]	,	,対象	,[HTML 4] 予約
,[CODE(HTMLa)[[[language]]]]	,	,	,スクリプト言語	,[HTML 4] 非推奨
,[CODE(HTMLa)[[[src]]]]	,[CODE(SGML)[%[[URI]]]]	,(内容)	,外部スクリプト	,[HTML 4]
,[CODE(HTMLa)[[[type]]]]	,[CODE(SGML)[%[[ContentType]]]]	,(必須)	,[[スクリプト言語]]	,[HTML 4]


[[#comment]]


** 出現できる文脈

[14] [CODE(HTMLe)[script]] 要素は、 [CODE(HTMLe)[[[head]]]] 要素や
[CODE(HTMLe)[[[body]]]] 要素の中の大抵の場所に出現できます
[SRC[HTML 4 18.2.1]]。

[15]
しかし、[[不思議マーク付け]]の世界や多くの [[WWWブラウザ]]の実装では、
[CODE(HTMLe)[[[html]]]] タグの前後や [CODE(HTMLe)[head]] 要素と
[CODE(HTMLe)[body]] 要素の間を含めて、あらゆる場所に出現できるようです。

[CITE[ダイナミックHTML入門]]
(Bruce Campbell + Rick Darnell 著, 安藤慶一訳) という入門書では、
[Q[スクリプトの場所に関しては標準規格は必要ないようです]<urn:isbn:4-89471-048-X>]
などと電波を飛ばしているそうです。
[SRC[[CITE[いくつかの書籍のあらさがし]] <http://openlab.ring.gr.jp/k16/htmllint/findfault.html#dynamic-html>]]

[[#comment]]


** 内容

[4] [CODE(HTMLa)[[[src]]]] 属性が指定されている場合、
スクリプトはその外部資源で定義されます。 [[UA]]
は[[内容]]を無視し、指定された URI のスクリプトを取り寄せなければなりません。
[CODE(HTMLa)[src]] 属性が指定されていない場合、
UA は内容をスクリプトとして解釈しなければなりません。
[SRC[HTML 4 18.2.1]]

[30] [[XHTML]] より前の HTML では、 [CODE(HTMLe)[script]]
要素の内容は [CODE(HTMLe)[[[style]]]] 要素の内容同様[[文字データ]]
([CODE(SGML)[[[CDATA]]]]) 宣言内容とされていました。
つまり、 [CODE(HTMLe)[script]] 要素内ではほとんどの[[マーク]]は認知されず、
[CODE(SGML)[[[etago]]]] ([CODE(HTML)[</]]) の直後に[[名前開始文字]]
([[ラテン文字]]など) または [CODE(SGML)[[[tagc]]]] ([CODE(HTML)[>]])
が来たらそこで [CODE(HTMLe)[script]] 要素が終わることになっていました。

ですから、スクリプト言語の[[演算子]]などとして HTML
の[[マーク文字]]が登場することがよくありますが、
そのような場合にもほとんど[[文字参照]]化する必要がありませんでした。

[36] [CODE(SGML)[[[ETAGO]]]] がかけないのは [CODE(JS)[document.write]]
のデータを作る時などにしばしば問題となり、その最盛期には、
これが原因でうまく動かないことに悩む人もよく見受けられました。
回避するためには、そのスクリプト言語の文字列連結を使ったり
([SAMP(JS)['<' + '/a>']])、 escape (quote) 機能を使ったり
([SAMP(JS)['<\/a>']])、文字生成関数を使ったり ([SAMP(VB)["<" & [[Chr]] (47) & "a>"]])
する方法がよく紹介されました。

[33] しかし、 [[XML]] では [CODE(SGML)[CDATA]] 宣言内容は使えないので、
[[XHTML 1]] では [CODE(XML)[[[PCDATA]]]] と宣言されています。
ですから、 [CODE(SGML)[stago]] ([CODE(XML)[<]]) は必ず [[escape]]
して [CODE(XML)[&lt;]] としなければならないなどの制限があります。
これを回避するために [[[CODE(XML)[CDATA]]区間]]を使う方法がよく紹介されますが、
そうすると多くの既存の WWW ブラウザとの互換性が失われてしまいます。
ですから、 XHTML で [CODE(HTMLe)[script]] 要素を使う時は [CODE(HTMLa)[src]]
属性を使った外部スクリプトとするのが良いと言われています。


[41]
d101 353
a453 353
(この文書はほんとうに HTML 4 に基づいているのでしょうか?)
([[名無しさん]])


[[#comment]]


*** 擬似注釈宣言の使用

[18] [CODE(HTMLe)[script]] 要素に対応していない古い WWW ブラウザは、
[CODE(HTMLe)[script]] 要素内の[[文字データ]]も構わず解釈してしまいます。
そこで、 [CODE(HTMLe)[script]] 要素の内容としてスクリプトを記述するときには、
HTML の[[注釈宣言]]のように最初に [CODE(HTML)[<!--]] を、
最後に [CODE(HTML)[-->]] をつけることが慣習となっています。

HTML 4 によれば、これは HTML の機能ではなく、[[スクリプト機関]]の機能とされています。
この機能に対応している言語には [[JavaScript]], [[VBScript]], [[Tcl]]
があるようです。 [SRC[HTML 4 18.3.2]] より正確には、この3つの言語は
[CODE(HTMLe)[script]] 要素の内容の一番最初の非[[空白]]文字列が
[CODE[<!--]] であるとき、これを無視するらしいです。
最後の [CODE[-->]] は、3つの言語のいずれも、それだけで書くことはできず、
それぞれの言語の注釈の内容として (JavaScript の場合は [SAMP(JS)[// -->]] 
のようにして) 書くことが必要らしいです。

[Q[らしい]]というのは、正確にこれを規定した仕様がないからです。
HTML 4 は[Q[スクリプト機関]]によるものだと言っていますから、
スクリプト言語の言語仕様かなにかに規定があってもよさそうなものですが、
そのようなものは見たことがありません。また、 HTML
に直接埋め込まれていない [[ECMAScript]] のスクリプトのソース・コードに
[CODE[<!--]] という文字列があってもよいという話も聞きません。
([CODE(HTMLe)[[[style]]]] 要素も同じような事情ですが、こちらは
[[CSS2]] で言語仕様の一部としてきちんと定義されています。)

[27] このような注釈宣言 (のようなもの) の中では、 (SGML
的には [CODE(SGML)[CDATA]] なので注釈宣言ではないとはいえ、
古い UA の立場からしても SGML 的に正当であるために) [CODE(SGML)[[[COM]]]]
([CODE(HTML)[--]]) を含めるべきではないと考える人もいます。

[19] なお、 XHTML 1 の [CODE(HTMLe)[script]] 要素は、 [CODE(SGML)[CDATA]]
ではありませんので、注釈宣言 (のようなもの) を書くと、
本当に XML の注釈宣言と解釈されてしまいます。当然、
スクリプトとして解釈・実行されることはありません。

[40] [CODE(HTMLe)[script]] 要素が使われ始めたばかりの1996年ごろまでは、
注釈宣言 (のようなもの) の閉じの前に
[PRE(HTML)[
<script language="javascript">
<!-- hide script from old browsers
[VAR[...]]
// hide script from old browsers -->
</script>
]PRE]

のように自然言語の注釈を入れておくことがよく行われていました 
(初期の使用例にそう載っていたからみんなで真似したのでしょう)。
(この例のように開き (のようなもの) の後に書くこともできましたが、
閉じの前に書くのが普通だったと記憶しております。)
後にこのような冗長なことはせず、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
//-->
</script>
]PRE]

のように簡単に書くようになりました。

[35] また、[Q[裏技]]的なものとして、
[PRE(HTML)[
<script language="javascript">
<!--
[VAR[...]]
// -->スクリプトに対応していません。<!--
[VAR[...]]
// -->
</script>
]PRE]

のような書き方が紹介されることもありました。
(この例のようになぜかスクリプトの途中に書いているものもあれば、
注釈宣言 (のようなもの) の前後に書いているものもありました。
どこに入れるにせよ、書く内容は一行にするか、
うまくして行頭にスクリプト言語の注釈導入子が来るように調整することが重要です。
また、 [CODE(SGML)[[[etago]]]] が使えないことにも注意が必要です。)

[38] スクリプト言語の演算子として [CODE[>]] を使うことが良くありますが、
古いブラウザの中には注釈宣言を [CODE[>]] で終えてしまうものがあることが知られています。
[SAMP(JS)[[VAR[x]] > [VAR[y]]]] のような式は [SAMP(JS)[[VAR[y]] < [VAR[x]]]]
と書くことで回避できます。 [SRC[HTML 4 18.3.2 Note]]
もっとも、そのようなブラウザは HTML 4 の時点でも骨董品ですし、
HTML 4 も特にそうするべきだなどとは言っていません。

参考文献:
- [16] [CITE[<SCRIPT>〜</SCRIPT> 内の要素はすべてコメントで囲んだ方が安全です。]]
<http://openlab.ring.gr.jp/k16/htmllint/explain.html#comment-element>

[[#comment]]


** UA による利用

[28] [CODE(HTMLe)[script]] 要素によるスクリプトは、
文書の読込み時に実行されます [SRC[HTML 4 18.1]]。

[CODE(HTMLa)[src]] 属性による外部スクリプトは優先的に実行されるという説を唱える人がいますが、
根拠は不明です。特定の UA ではそうなのかもしれませんが、
少なくても HTML 4 は何も規定していません。
但し、 [CODE(HTMLa)[[[defer]]]] 属性や [CODE(HTMLa)[[[event]]]]
属性は実行時機に影響するのかもしれません。

[[#comment]]


** 歴史

[2] [CODE(HTMLe)[script]] 要素は、 [[NN2]] が [[LiveScript]]
と共に実装したのがはじめであると考えられています。

[20] [CODE(HTMLe)[script]] 要素がはじめて公式な仕様書に入ったのは
1997年1月の [[HTML 3.2]] でした。しかし、
このときの最終的な勧告では詳細が決まらず、
将来の版のために予約すると述べるに留まっていました。

> <!ELEMENT SCRIPT - - CDATA -- placeholder for script statements -->
[SRC[HTML 3.2 DTD]]

[12] その後1997年12月の [[HTML 4]] で、 [CODE(HTMLe)[script]]
要素型はようやく正式な仕様の一部となりました。
当時 [[WinIE]] や [[NN]] が実装していた [CODE(HTMLe)[script]]
の基本的な機能が仕様に入りましたが、 WinIE だけが実装していた
[CODE(HTMLa)[event]] 属性と [CODE(HTMLa)[for]] 属性は、
将来のために予約とされました。

[24] 1998年に勧告された [[DOM 1]] やその後の [[DOM 2]] では、
[CODE(HTMLe)[script]] 要素型に対応する [CODE(DOMi)[[[HTMLScriptElement]]]]
界面が定義されています。ここでは、標準の属性の他、
[CODE(HTMLa)[for]] 属性と [CODE(HTMLa)[event]] 属性も[Q[将来の使用のために予約]]
として定義だけされています。

[25] >>24 そんな将来くるのかな〜。来たら嫌だな〜

[26] >>24-25 将来の使用は M$ の仕様の間違いじゃないのかな。

[32]
>>24-26 
その後 [[XHTML 1]] が標準化されましたが、予約2属性はやはり正式な仕様には昇格せず、
このまま忘れ去られようとしています。しかし、両属性の機能は拡張して汎用化されて
[[XML事象]]仕様の一部として標準化されました (2002年)。

[[#comment]]


** 実装

[31] [CODE(file)[[[CGI.pm]]]] は、 XHTML 出力 mode だと、
[[注釈宣言]]内に [[[CODE(XML)[CDATA]]区間]]宣言という素晴らしい出力をしてくれます(w

[[#comment]]


** 不思議解釈

[34]
[CODE(HTMLa)[src]] 属性のある [CODE(HTMLe)[script]] の中に 
[CODE(HTMLe)[noscript]] を書く困った人がいます。。。

([[名無しさん]] [WEAK[2004-09-14 07:54:57 +00:00]])

[17] 仕様によれば (>>4)、 [CODE(HTMLa)[src]] 属性があるとき UA
は内容を無視しなければなりません。この規定に特に条件は無いようなので、
スクリプト未対応の UA であっても同様でしょう。
ですから、 [CODE(HTMLe)[script]] の中に [CODE(HTMLe)[noscript]]
を書くと、 HTML 4 対応の [CODE(HTMLe)[script]] 未対応 UA
には無視されてしまうはずです。

[[#comment]]


** 他との関係

[3] [[ASP]] などの鯖側で HTML 文書 (もどき) を前処理する類のシステムの一部では、
[CODE(HTMLe)[script]] 要素 (のようなもの) を拡張して、
[CODE[[[runat]]]] 属性などを付与して鯖側で実行するものと [CODE(HTMLe)[script]]
要素としてクライアントに送信するものを区別していることがあります。

(そのような実現方法は開発者がスクリプトの実行を正しく把握しづらくなるのではないかとの懸念はあります。
その点、 [[NES]] のように [CODE[[[server]]]] 要素型という別の要素型を用意するのは一つの考えではありますが、
どんぐりのせいくらべといったところでしょう。)

[13] スクリプトによって HTML 文書を動的に扱う方法として、 [[JavaScript]]
の [CODE(js)[[[document]].[[write]]]] がよく使われました。
([CODE(js)[document.write]] は後に [[DOM 1]] で [CODE(DOMi)[[[HTMLDocument]]]]
界面の [CODE(DOMm)[[[write]]]] method として標準化されています。)

HTML 4 仕様書は読み込み時のスクリプトによる文書に書き換えについても規定していますが、
その内容は [CODE(js)[document.write]] (と同様なもの) 
を想定しているようです。実際に使われていたのも [CODE(js)[document.write]]
(と同様なもの) だけでしょう。というわけで、 [CODE(DOMm)[[[write]]]]
method の説明もご覧ください。

[39] スクリプトに対応していなかったり、実行しないことにしていたりするときの[[代替内容]]を提供する
[CODE(HTMLe)[[[noscript]]]] が用意されています。アクセス可能性の確保のために、
重要な情報を提供する [CODE(HTMLe)[script]] は、
対応する [CODE(HTMLe)[noscript]] 要素を用意しておくことが極めて望ましいと考えられます。

[[#comment]]


** 例

[37] 二乗した結果を書き出す例 [SRC[HTML 4 18.3.2 改]]

[[JavaScript]] による例
[PRE(HTML)[
<SCRIPT type="text/javascript">
<!--  to hide script contents from old browsers
  function square(i) {
    document.write("The call passed ", i ," to the function.","<BR>");
    return i * i;
  }
  document.write("The function returned ",square(5),".");
// end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[VBScript]] による例
[PRE(HTML)[
<SCRIPT type="text/vbscript">
<!--
  Function Square(i)
    Call Document.Write("The call passed ",i," to the function.","<BR>")
    Square = i * i
  End Function
  Document.Write("The function returned ",Square(5),".")
' -->
</SCRIPT>
]PRE]

[[Tcl]] による例
[PRE(HTML)[
<SCRIPT type="text/tcl">
<!--  to hide script contents from old browsers
  proc square {i} {
    document write "The call passed $i to the function.<BR>"
    return [expr $i * $i]
  }
  document write "The function returned [square 5]."
# end hiding contents from old browsers  -->
</SCRIPT>
]PRE]

[[#comment]]


** メモ

[[#comment]]


* script 要素 (ASP)

[[#comment]]


** 属性

,HTML (>>9) に加えて、	,==	,==	,==
,runat	,server	,なし	,動作場所 >>5

[5] [CODE[runat]] は、 [[M$]] の [[ASP]] で使われて、値が [CODE["server"]]
である場合に、その要素のスクリプトはサーバーで処理されます。
(クライアントには送られません。) この属性は [[W3C]]
の規格では規定されていません。サーバーで処理される以外で使ってはいけません。

- [6] >>2-3,>>5 [CODE[language]] 属性や [CODE[type]] 属性を省略しても [CODE[<%@@ Page Language="VB" %>]] みたいのが書いてあれば、それ以降の部分で解釈されるサーバー側スクリプトはその言語で解釈されるそうです。
- [7] >>5-6 それから、 [CODE[runat]] 属性はどんな要素にも? 使えて、サーバー側スクリプトからアクセス可能なことを表す?らしいです。全くもって理解不能な世界ですが。。。
- [8] >>2 ASP での既定値は (設定ファイルで変更しない限り) [CODE[VB]] (= [[VBScript]]) だそうです。
[[#comment]]


* script 要素型 (CSP)

- [10] CSP の script 要素では runat="server"/"compiler" の属性があります。 ''Introduction to Cache Server Pages - The CSP Compiler'' <http://www.cacheinfo.com/document/V401/cpi/cpitagbased.html>
- [11] このほか CSP の script 要素には色んな独自拡張属性 (もしかして自由に作れる?) があります。 ''技術サポート'' <http://www.cacheinfo.com/techinfo.htm>

[[#comment]]


* msxsl:script 要素 (M$XML の XSLT 実装)

[21] [CODE(XML)[{urn:schemas-microsoft-com:xslt}:script]]
要素を使うと、 [[XSLT]] (の [[XPath]] を使う文脈)
で利用者定義の関数を使用することが可能となります。

親要素は xslt:[[stylesheet]] 要素又は xslt:[[transform]]
要素です。内容は #[[PCDATA]] です (たぶん)。

,implements-prefix	,名前空間接頭辞	,必須	,関数の名前空間
,language	,html:[[language]] と同じ	,不明	,スクリプト言語

[[language]] 属性には [CODE(HTML)[html:script]] 
要素の場合と同じ値を指定できるそうです。
[CODE(XML)[implements-prefix]] 属性には、 XSLT
側で関数を呼ぶ際の [[XML名前空間]]接頭辞を与えます。
この値は自分以上の要素の [[xmlns]] 
属性を使って宣言されていなければならないはずです。

[22] 言葉で説明するより実例を見たほうが分かりやすいでしょう。

[PRE[
  <xslt:stylesheet version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:foo="http://foo.example/">
    <msxsl:script language="JScript" implements-prefix="foo">
      function bar (baz) {
        return baz;
      }
    </msxsl:script>
    <xslt:template select="element1">
      <xslt:apply-templates select="foo:bar(element2)"/>
    </xslt:template>
  </xslt:stylesheet>
]PRE]

この場合は関数 [CODE(XPath)[foo:bar(baz)]] は引数 [CODE(JS)[baz]]
をただ返すだけの何の面白味もないものですが、
雰囲気はつかめるでしょう。

- ''XSLT Elements'' <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/htm/xsl_elm_qz_4s50.asp>
[[#comment]]
- ''XSLT 1.0で正規表現を使う(MSXML限定)'' <http://members.jcom.home.ne.jp/jintrick/Personal/d20031l.html#d22_4>
[[#comment]]


* xalan:script 要素 (Xalan-Java XSLT 実装)

[23] [[Xalan]] では [[XSLT]] [[スタイル・シート]]で
[[JavaScript]] などを使うのに [CODE(XML)[xalan:script]]
要素を使います。

親要素は xalan:[[component]] 要素です。

,lang	,CDATA	,必須	,スクリプト言語
,src	,[[URI]]	,(指定なし)	,外部スクリプト参照

[[HTML]] や MSXML での書き方と互換性はありません。

- ''Xalan-Java Extensions'' <http://xml.apache.org/xalan-j/extensions.html>
[[#comment]]


@


1.10
log
@auto-committed
@
text
@d3 29
a31 2
- [29] [WEAK[2003-08-20 21:58:25 +00:00]] ''[[aaa]]'': aaa
- [30] [WEAK[2003-09-28 12:35:31 +00:00]] ''[[名無しさん]]'': document.f.q.focus();
d35 1
a35 1
* script 要素 (HTML)
d37 14
a50 2
[1] スクリプトを文書に埋め込むための要素です。 [[NetscapeNavigator]] 2
が最初に [[JavaScript]] ([[LiveScript]]) で実装しました。
d52 171
a222 1
[20] [[HTML]] 3.2 は将来の版で使用すると予告しています。
d225 16
d242 7
a248 8
- [14] [CODE[script]] 要素が出現できるのは [[head]]  要素又は [[body]] 要素の内容です。 (厳密には各規格を参照。) しかし[[不思議マーク付け]] HTML では、 [[html]] 要素の外側 (前や後), [CODE[head]] 要素と [CODE[body]] 要素の間を含めて、ありとあらゆる場所に出現します。
- [15] >>14 参考 <http://openlab.ring.gr.jp/k16/htmllint/findfault.html#dynamic-html>
- [16] ''Another HTML-lint : Explanation'' <http://openlab.ring.gr.jp/k16/htmllint/explain.html#comment-element>
- [31] [CODE(perl)[[[CGI.pm]]]] は、 XHTML 出力 mode だと、[[注釈宣言]]内に[[CDATA区間]]宣言という素晴らしい出力をしてくれます(w

[33]
123
([[名無しさん]] [WEAK[2004-06-17 09:33:46 +00:00]])
d253 6
a258 1
** 属性
a259 34
[9]
,名前	,値の型	,既定値	,意味	,主な規格・実装
,event	,[[CDATA]]	,なし	,催事名                >>12	,[[WinIE]]
,for	,[[IDREF]]	,なし	,対象要素              >>12	,[[WinIE]]
,language	,[[CDATA]]	,なし	,スクリプト言語 >>2	,[[HTML4]] (非推奨)
,src	,[[URI]]	,なし	,スクリプトの URI >>4	,"HTML4, [[NN]]3+"
,type	,[[媒体型]]	,必須	,スクリプト言語の媒体型 >>3	,"HTML4, NN3+"
,(これで全部ではありません。)	,==	,==	,==

[2] [CODE[language]] 属性はスクリプト言語の種類を指定します。
きちんとした規定・運用は実質的にありません。
多くの実装は [CODE[JavaScript]] を既定値としています。
大文字・小文字は区別されません。 [[HTML4]] では非推奨です。
使われている値については[[スクリプトの媒体型]]を参照。

[3] 適当な文字列だった >>2 の [CODE[language]] に代わって導入されたのが
[CODE[type]] 属性で、 HTML4 では必須です。
こちらではスクリプト言語を[[媒体型]]で指定します。
しかし [CODE[language]] 属性の失敗は生かされず、未登録の媒体型が多種使われています。
[[スクリプトの媒体型]]を参照。

[4] [[src]] 属性はスクリプトの所在を [[URI]] で示します。
この属性を使って外部参照している時は [CODE[script]] 
要素自体は[[空要素]]でなければなりません。
- [12] [[M$]] 独自拡張の [CODE[for]] 属性とか [CODE[event]] 属性もあります。例:  for="window" event="onload"
- [13] [CODE[src]] 属性に対応しているのは [[NN]] 3.0 以降だそうです。
- [17] [[Mozilla]] 1.3a では、 [SAMP[<script type="text/javascript;version=1.2" />]] のように指定できます。 [SAMP[<script type="text/javascript; version=1.2" />]] とか [SAMP[<script type="text/javascript;x-foo=bar; version=1.2" />]] とかでも OK ですが、 [SAMP[<script type="text/javascript;version=&quot;1.2&quot;" />]] や [SAMP[<script type='text/javascript;version="1.2"' />]] では動作しません。
- [18] [CODE[language]] 属性と [CODE[type]] 属性とで値が違う場合、 [[Mozilla]] 1.3a や [[WinIE]]6 では [CODE[type]] 属性が優先されます。
- [19] [[defer]] 属性について: ''JavaScript質問スレ'' <http://pc2.2ch.net/test/read.cgi/hp/1041701828/171->
- [24] [[DOM]] (水準1以上) HTML では、 [CODE(DOMi)[[[HTMLScriptElement]] 界面に、「将来の使用のために予約」と称して [CODE(DOMa)[[[htmlFor]]]] 属性及び [CODE(DOMa)[[[event]]]] 属性が定義されています。]]
- [25] >>24 そんな将来くるのかな〜。来たら嫌だな〜
- [26] >>24-25 将来の使用は M$ の仕様の間違いじゃないのかな。
- [27] [[WinIE]] ではスクリプト言語の既定値は [CODE(SGML)[#[[CURRENT]]]] (ただし初出では JScript) になるらしいです。
- [28] src を使った外部参照は読み込み時に優先的に実行されるという説がありますがほんとですか?
d261 1
a261 5
[32]
>>24-26 実は HTML 4 でも [CODE(HTMLa)[for]] 属性と [CODE(HTMLa)[event]] 属性は予約として定義だけはされていて、 DOM の属性はそれに対応しています。
ちなみに、両属性はちょっと形が変わって 
[[XML事象]]仕様の中で標準化されました。
([[名無しさん]])
d264 2
a265 1
[CODE(HTMLa)[src]] 属性のある [CODE(HTMLe)[script]] の中に [CODE(HTMLe)[noscript]] を書く困った人がいます。。。
d269 88
d381 8
d453 1
a453 4
* メモ

- [10] CSP の script 要素では runat="server"/"compiler" の属性があります。 ''Introduction to Cache Server Pages - The CSP Compiler'' <http://www.cacheinfo.com/document/V401/cpi/cpitagbased.html>
- [11] このほか CSP の script 要素には色んな独自拡張属性 (もしかして自由に作れる?) があります。 ''技術サポート'' <http://www.cacheinfo.com/techinfo.htm>@


1.9
log
@auto-committed
@
text
@d1 1
a1 1
#?SuikaWiki/0.9
d71 6
@


1.8
log
@auto-committed
@
text
@d21 5
d67 2
a68 2
>>24-26 実は HTML 4 でも [CODE(HTMLa)[for]] 属性と [CODE(HTMLa)[event]] 属性は予約として定義だけはされていて、 DOM の属性はそれに対応しています。
ちなみに、両属性はちょっと形が変わって 
@


1.7
log
@auto-committed
@
text
@d1 2
a2 1
#?SuikaWiki/0.9
d5 15
a19 12
[[#comment]]
*script 要素 (HTML)

[1] スクリプトを文書に埋め込むための要素です。 [[NetscapeNavigator]] 2
が最初に [[JavaScript]] ([[LiveScript]]) で実装しました。

[20] [[HTML]] 3.2 は将来の版で使用すると予告しています。
> <!ELEMENT SCRIPT - - CDATA -- placeholder for script statements -->

- [14] [CODE[script]] 要素が出現できるのは [[head]]  要素又は [[body]] 要素の内容です。 (厳密には各規格を参照。) しかし[[不思議マーク付け]] HTML では、 [[html]] 要素の外側 (前や後), [CODE[head]] 要素と [CODE[body]] 要素の間を含めて、ありとあらゆる場所に出現します。
- [15] >>14 参考 <http://openlab.ring.gr.jp/k16/htmllint/findfault.html#dynamic-html>
- [16] ''Another HTML-lint : Explanation'' <http://openlab.ring.gr.jp/k16/htmllint/explain.html#comment-element>
d21 35
a55 33
[[#comment]]

**属性
[9]
,名前         ,値の型      ,既定値 ,意味                      ,主な規格・実装
,event        ,[[CDATA]]   ,なし   ,催事名                >>12,[[WinIE]]
,for          ,[[IDREF]]   ,なし   ,対象要素              >>12,[[WinIE]]
,language     ,[[CDATA]]   ,なし   ,スクリプト言語 >>2        ,[[HTML4]] (非推奨)
,src          ,[[URI]]     ,なし   ,スクリプトの URI >>4      ,"HTML4, [[NN]]3+"
,type         ,[[媒体型]]  ,必須   ,スクリプト言語の媒体型 >>3,"HTML4, NN3+"
,(これで全部ではありません。),==,==,==

[2] [CODE[language]] 属性はスクリプト言語の種類を指定します。
きちんとした規定・運用は実質的にありません。
多くの実装は [CODE[JavaScript]] を既定値としています。
大文字・小文字は区別されません。 [[HTML4]] では非推奨です。
使われている値については[[スクリプトの媒体型]]を参照。

[3] 適当な文字列だった >>2 の [CODE[language]] に代わって導入されたのが
[CODE[type]] 属性で、 HTML4 では必須です。
こちらではスクリプト言語を[[媒体型]]で指定します。
しかし [CODE[language]] 属性の失敗は生かされず、未登録の媒体型が多種使われています。
[[スクリプトの媒体型]]を参照。

[4] [[src]] 属性はスクリプトの所在を [[URI]] で示します。
この属性を使って外部参照している時は [CODE[script]] 
要素自体は[[空要素]]でなければなりません。
- [12] [[M$]] 独自拡張の [CODE[for]] 属性とか [CODE[event]] 属性もあります。例:  for="window" event="onload"
- [13] [CODE[src]] 属性に対応しているのは [[NN]] 3.0 以降だそうです。
- [17] [[Mozilla]] 1.3a では、 [SAMP[<script type="text/javascript;version=1.2" />]] のように指定できます。 [SAMP[<script type="text/javascript; version=1.2" />]] とか [SAMP[<script type="text/javascript;x-foo=bar; version=1.2" />]] とかでも OK ですが、 [SAMP[<script type="text/javascript;version=&quot;1.2&quot;" />]] や [SAMP[<script type='text/javascript;version="1.2"' />]] では動作しません。
- [18] [CODE[language]] 属性と [CODE[type]] 属性とで値が違う場合、 [[Mozilla]] 1.3a や [[WinIE]]6 では [CODE[type]] 属性が優先されます。
- [19] [[defer]] 属性について: ''JavaScript質問スレ'' <http://pc2.2ch.net/test/read.cgi/hp/1041701828/171->
- [24] [[DOM]] (水準1以上) HTML では、 [CODE(DOMi)[[[HTMLScriptElement]] 界面に、「将来の使用のために予約」と称して [CODE(DOMa)[[[htmlFor]]]] 属性及び [CODE(DOMa)[[[event]]]] 属性が定義されています。
d60 98
a157 81
[[#comment]]
*script 要素 (ASP)
[[#comment]]

**属性
,HTML (>>9) に加えて、,==,==,==
,runat        ,"server"     ,なし       ,動作場所 >>5

[5] [CODE[runat]] は、 [[M$]] の [[ASP]] で使われて、値が [CODE["server"]]
である場合に、その要素のスクリプトはサーバーで処理されます。
(クライアントには送られません。) この属性は [[W3C]]
の規格では規定されていません。サーバーで処理される以外で使ってはいけません。

- [6] >>2-3,>>5 [CODE[language]] 属性や [CODE[type]] 属性を省略しても [CODE[<%@@ Page Language="VB" %>]] みたいのが書いてあれば、それ以降の部分で解釈されるサーバー側スクリプトはその言語で解釈されるそうです。
- [7] >>5-6 それから、 [CODE[runat]] 属性はどんな要素にも? 使えて、サーバー側スクリプトからアクセス可能なことを表す?らしいです。全くもって理解不能な世界ですが。。。
- [8] >>2 ASP での既定値は (設定ファイルで変更しない限り) [CODE[VB]] (= [[VBScript]]) だそうです。
[[#comment]]

*msxsl:script 要素 (M$XML の XSLT 実装)

[21] [CODE(XML)[{urn:schemas-microsoft-com:xslt}:script]]
要素を使うと、 [[XSLT]] (の [[XPath]] を使う文脈)
で利用者定義の関数を使用することが可能となります。

親要素は xslt:[[stylesheet]] 要素又は xslt:[[transform]]
要素です。内容は #[[PCDATA]] です (たぶん)。

,implements-prefix,名前空間接頭辞      ,必須   ,関数の名前空間
,language   ,html:[[language]] と同じ  ,不明   ,スクリプト言語

[[language]] 属性には [CODE(HTML)[html:script]] 
要素の場合と同じ値を指定できるそうです。
[CODE(XML)[implements-prefix]] 属性には、 XSLT
側で関数を呼ぶ際の [[XML名前空間]]接頭辞を与えます。
この値は自分以上の要素の [[xmlns]] 
属性を使って宣言されていなければならないはずです。

[22] 言葉で説明するより実例を見たほうが分かりやすいでしょう。

  <xslt:stylesheet version="1.0"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:msxsl="urn:schemas-microsoft-com:xslt"
        xmlns:foo="http://foo.example/">
    <msxsl:script language="JScript" implements-prefix="foo">
      function bar (baz) {
        return baz;
      }
    </msxsl:script>
    <xslt:template select="element1">
      <xslt:apply-templates select="foo:bar(element2)"/>
    </xslt:template>
  </xslt:stylesheet>

この場合は関数 [CODE(XPath)[foo:bar(baz)]] は引数 [CODE(JS)[baz]]
をただ返すだけの何の面白味もないものですが、
雰囲気はつかめるでしょう。

-''XSLT Elements'' <http://msdn.microsoft.com/library/default.asp?url=/library/en-us/xmlsdk/htm/xsl_elm_qz_4s50.asp>
[[#comment]]
-''XSLT 1.0で正規表現を使う(MSXML限定)'' <http://members.jcom.home.ne.jp/jintrick/Personal/d20031l.html#d22_4>
[[#comment]]

*xalan:script 要素 (Xalan-Java XSLT 実装)

[23] [[Xalan]] では [[XSLT]] [[スタイル・シート]]で
[[JavaScript]] などを使うのに [CODE(XML)[xalan:script]]
要素を使います。

親要素は xalan:[[component]] 要素です。

,lang   ,CDATA    ,必須       ,スクリプト言語
,src    ,[[URI]]  ,(指定なし) ,外部スクリプト参照

[[HTML]] や MSXML での書き方と互換性はありません。

-''Xalan-Java Extensions'' <http://xml.apache.org/xalan-j/extensions.html>
[[#comment]]

*メモ
- [10] CSP の script 要素では runat="server"/"compiler" の属性があります。 ''Introduction to Cache Server Pages - The CSP Compiler'' <http://www.cacheinfo.com/document/V401/cpi/cpitagbased.html>
- [11] このほか CSP の script 要素には色んな独自拡張属性 (もしかして自由に作れる?) があります。 ''技術サポート'' <http://www.cacheinfo.com/techinfo.htm>
@


1.6
log
@auto-committed
@
text
@d16 1
@


1.5
log
@auto-committed
@
text
@d3 1
@


1.4
log
@auto-committed
@
text
@d2 1
@


1.3
log
@semi-auto committed
@
text
@d50 1
@


1.2
log
@auto-commited
@
text
@d49 1
@


1.1
log
@pre-namespace
@
text
@d46 3
@

