head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2003.09.24.07.19.43;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.1
log
@semi-auto committed
@
text
@#?SuikaWiki/0.9
[1] [[manakai]] [[XML]] perl module は、
- 規格に完全に適合する
- それなりの速さで何とか動く
- まあまあオブジェクト指向である
- pure perl である

ことを目指した、 XML 及び関連規格の perl
による実装です。

[2] Perl での XML の実装は既に存在しますが、
なんとなく好きになれない(謎)し、
[[TMTOWTDI]] という大義名分(藁)があるし、
>>1 に書いたように目指すところは違うので、
まあいいかなあという気がします。

もちろん既存のものに取って代わって標準になろうとか野心的なことは考えてません。
無理でしょう。互換性も全然ないですし。

[[#comment]]

* 既にそれなりに動く機能

[3]
- XML 本体の実装
-- [CODE(perl)[[[Message::Markup::XML]]]]
--- XML
の構造に対応する[[節]]の集合体 ([[木]])
を扱う基本的な機能を提供しています。
--- 木を XML 文書に変換することが出来ます。
-- [CODE(perl)[[[Message::Markup::XML::Parser]]]]
--- XML 文書から [CODE(perl)[Message::Markup::XML]]
の木を生成します。
--- XML 文書の問題 [WEAK[(整形式制約・妥当性制約への違反とか、非推奨の構造とか)]] を行・文字数・問題の部分を直接に含む[[実体]]の名前などと共に報告できます。
その処理 [WEAK[(どこにどう記録するとか、そこで構文解析を終了するとか)]] は callback 
関数で柔軟に処理できます。
--- [[外部実体]]の取出しは、組込みの [[LWP]]
を使った単純な方法の代わりに任意の処理方法を与えられます。
-- [CODE(perl)[[[Message::Markup::XML::Validator]]]]
--- XML 文書の[[妥当性]]を検証します。
[CODE(perl)[Message::Markup::XML::Parser]]
で木を作った直後に使うことを想定しています。
- 関連規格の実装
-- [CODE(perl)[[[Message::Markup::XML::Catalog]]]]
--- [[XML型録]]を使った[[外部識別子]]の解決が行えます。
[CODE(perl)[Message::Markup::XML::Parser]]
と組合せれば外部実体を型録に書かれた URI
から取り出すことが出来ます。

[[#comment]]

* とりあえずあるけどまだ全然役に立たないもの
[4]
- [CODE(perl)[[[Message::Markup::XML::DOM]]]]
-- [[DOM]] の実装ですが、 [CODE(DOMm)[[[hasFeature]]]]
しか実装してません:-)

[[#comment]]

* 入手

[5] manakai XML modules は manakai の一部として入手できます。
詳しくは [CODE(WikiPage)[[[manakai]]]] を参照して下さい。

manakai XML の特定のモジュールだけを入手したい時は、
CVS リポジトリ <IW:SuikaCVS:"messaging/manakai/lib/Message/Markup/">
からどうぞ。

[[#comment]]

* ライセンス

[6] manakai XML modules のライセンスは、
[[perlと同じライセンス]]を採用しています。

* メモ
@
