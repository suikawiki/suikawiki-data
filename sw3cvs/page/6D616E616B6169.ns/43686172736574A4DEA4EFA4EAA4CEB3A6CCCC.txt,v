head	1.1;
access;
symbols
	suikawiki3-final:1.1
	before-db-leaffile:1.1
	after-upgrade-to-suikawiki-3:1.1
	before-fork-suikawiki3:1.1
	after-restore-20040122:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.06.06.12.26.53;	author make;	state Exp;
branches;
next	;


desc
@@


1.1
log
@auto-commited
@
text
@#?SuikaWiki/0.9
[1] Message::* perl modules の charset 
周りの界面はぐちゃぐちゃで、さぱーり分からない状態です。
Perl 5.8 記念 byte 依存 code 掃討フェア(謎)の一貫として、ついでにこのあたりの界面を整理したいとおもてます。 --[[わかば]]
(2002.10.26)

*方針
-[2] まだ perl 5.8 (or utf8) には依存しない。
-内部コードと外部コード
--[3] 内部コード (モジュール内部で文字列を保管するときの符号) は任意, 外部コード (入出力時の符号) は8ビットのうち左半分が ASCII であるものか、 UTF-8 (perl 5.8 utf8 文字列) とする。
--[4] 内部コードに変換できないオクテット列は可能な限り charset 札つきのオクテット列として扱う。
--[5] 内外コード変換は Message::MIME::Charset が担当する。実際の処理は M::M::C::* を通して [[Encode]] など外部モジュールに任せる。
-文字コードの判断
--[6] [[MIME]] などの文字コード情報があるときは、これを使う。
--[7] [[M$]] 製 [[MUA]] など特定の条件下で文字コード情報の解釈を変更する。 (出力は規格に照らして正当なものにする。)
--[8] 文字コード情報が無い時には既定の文字コードとみなす。

*オプションの界面

$object->{option}->... の charset 関係のもの:
-{charset}->
--{input} 入力既定 charset 名 (:= charset-name)
--{output} 出力既定 charset 名 (:= charset-name / undef)
-{quoted_string}-> ([[quoted-string]] があるモジュールで)
--{use_encoded_word} [[encoded-word]] を解釈するか (:= 1/0)
--{output_encoded_word} encoded-word を出力するか (:= 1/0)
-{value}-> (parameter の value について)
--{use_encoded_word} encoded-word を解釈するか (:= 1/0)
--{output_encoded_word} encoded-word を出力するか (:= 1/0)
@
