head	1.6;
access;
symbols
	suikawiki3-final:1.6
	before-db-leaffile:1.6
	after-upgrade-to-suikawiki-3:1.6
	before-fork-suikawiki3:1.6
	after-restore-20040122:1.6;
locks; strict;
comment	@# @;


1.6
date	2003.09.13.02.01.46;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.06.12.26.26;	author make;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.17.01.25.20;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.15.13.24.22;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.30.03.24.03;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.18.03.24.02;	author wakaba;	state Exp;
branches;
next	;


desc
@@


1.6
log
@auto-committed
@
text
@#?SuikaWiki/0.9
[4] [[UCS]]/[[Unicode]] を表す [[IETF]]/[[IANA]]
[[charset]] 名は、公式に登録されているものとそうでないものをあわせて、数え切れないほど沢山あります。

IETF/IANA 以外の場面で使われている、
別の規格で標準化された、
あるいは標準化されていないその他の名前を含めると、
更に膨大な数になります。

[5] 後の方でそれらを種類別にまとめていますが、
これだけ沢山の名前がでてきた理由は、
- 符号化方法の多種多様性
- 名前の標準化の遅れ, あるいは不徹底

があるでしょう。後者については、 IETF/IANA
の登録手続きは誰かが手続きしない限り登録されないのですが、
なかなかする人がいません。標準化団体,
すなわち ISO/IEC とか Unicode Consortium
は、 [[UTR]] で追加された符号化方法を気が向いたら登録するくらいですか。
製品開発者は自分が定義したのでない限りまず面倒な登録手続きなんてしませんし、
自分が定義したのだってわざわざ面倒な手続きをする人はいないです。
[WEAK[(手続きが面倒ってのは、 reviewer がさぼってたりとかで遅々として進まないのが恒例だとか。それに charset 登録簿って実は大して知名度が無いから、知らない人が多いんじゃないのかな。[[媒体型]]と同じで、標準規格があること自体知られてないのかも。)]]
で、第三者に至っては無関心なわけです。

[6] 符号化方法の多種多様性ってのは、
あえて今更言うまでもないですが、いろんな人が UCS
を自分のところで使うために、あるいは人のところで無理矢理使わせるために都合の良い形式を作って実装してきたつけというかなんというか。

変種のチェックポイントとしては、
- 狭義の符号化方法 (UCS-2 or UCS-4 or UTF-16 or UTF-8 or...)
- [[符号位置]]の範囲は? [CODE(char)[U+0000]]〜[CODE(char)[U+FFFF]]? 〜[CODE(char)[U+10FFFF]]?
〜[CODE(char)[U-7FFFFFFF]]?
- 文字集合は [[KoreanMess]] 以前? 以後?
- [[私用域]]の文字の割り当ては?
- [[サロゲート・ペア]]の符号位置 ([[S領域]])
の使用は? 無規定? 使用禁止? サロゲートとして使用可能?
- [[BOM]] の使用は? 必須? 任意? 禁止? 無規定?
- [[エンディアン]]は? 大? 小? 自動判別? 無関係?

辺りでしょうか。このバリエーションの数だけ可能性的には名前の組み合わせがありえます。

[[#comment]]

*UCS-2
-ISO-10646-UCS-2 [IANAREG]
-csUnicode [IANAREG]
-UNICODE-1-1 [RFC1641] [IANAREG]
-csUnicode11 [IANAREG]

[[ネットワーク・バイト順]] = 大エンディアンと [IANAREG]
に書いてあります。時期的に、 BOM は無しでしょう。

UNICODE-1-1 は RFC 1641 によると大エンディアンで、
Unicode 1.1 に対応します。 ISO-10646-UCS-2 も時期的には
Unicode 1.1 かもしれませんが、名前・説明的に最新版と解釈
するのがいいんでしょう、きっと。

-ISO-10646-UCS-Basic [IANAREG]
-csUnicodeASCII [IANAREG]

バイト順についての説明がありません。そもそも [[UCS-2]] か [[UCS-4]]
かもわかりませんが、 ASCII subset of ''Unicode'' と書いてあるので、
UCS-2 と見てよいでしょう。 (時代的に考えても、 UCS-4 のはずないし。)

-ISO-10646-Unicode-Latin1 [IANAREG]
-csUnicodeLatin1 [IANAREG]
-ISO-10646 [RFC1815] [IANAREG]
-ISO-10646-J-1 [RFC1815] [IANAREG]

上の3つは同じものです。 IANAREG には subset of Unicode
としか書いてありませんが、 RFC 1815 にははっきりと大エンディアン
と説明されています。 J-1 も然り。 BOM は無しです。

上の3つは ISO 8859-1 相当, J-1 は JIS X 0208 相当の部分集合
です。詳しくは RFC 1815 に書かれています。

"ISO-10646-Unicode-Latin1" は [[charset]] でないとか
騒いでる夏厨(違)が [[ietf-charset]] にいましたけど、
RFC 1815 を読めって注釈あるんですから読んだらどうですかね?
(でもうに厨は読んだら失神するかもね。[[マー君]]みたいに。)

-ISO-Unicode-IBM-1261 [IANAREG]
-csUnicodeIBM1261 [IANAREG]
-ISO-Unicode-IBM-1268 [IANAREG]
-csUnicodeIBM1268 [IANAREG]
-ISO-Unicode-IBM-1276 [IANAREG]
-csUnicodeIBM1276 [IANAREG]
-ISO-Unicode-IBM-1264 [IANAREG]
-csUnicodeIBM1264 [IANAREG]
-ISO-Unicode-IBM-1265 [IANAREG]
-csUnicodeIBM1265 [IANAREG]

IANAREG にはバイト順の説明がありません。 IBM の資料を見れば
分かるのかもしれませんが...

[[ietf-charset]] list に流れた情報だと、 IBM にこれらの定義は
ないらしいです。

いずれも名前の通り、 IBM CodePage に対応する部分集合のようです。

-UCS-2
-UCS2

IANAREG に登録されていないものの charset 名に使われています。
どう解釈すればよいのやら。

-UCS-2BE
-X-ISO-10646-UCS-2-BE
-UCS-2LE
-X-ISO-10646-UCS-2-LE

*UCS-4
-ISO-10646-UCS-4 [IANAREG]
-csUCS4 [IANAREG]

ISO-10646-UCS-2 と同じく、大エンディアン (1234) です。
時期的に BOM なしと思われます。

-UCS4
-UCS-4

どう解釈するのか。

-UCS-4BE
-X-ISO-10646-UCS-4-BE
-X-UCS-4BE
-UCS-4LE
-X-ISO-10646-UCS-4-LE
-X-UCS-4LE
-X-UCS-4BE-BOM
-X-UCS-4LE-BOM

*UTF-1
-ISO-10646-UTF-1 [IANAREG]
-csISO10646UTF1 [IANAREG]

[[UTF-1]] にはバイト順問題はありません。また時期的に
BOM は使わないと思われます。

*UTF-7
-UTF-7 [RFC1642] [IANAREG] [RFC2152]
-UNICODE-1-1-UTF-7 [RFC1642] [IANAREG]
-csUnicode11UTF7 [IANAREG]
-UTF7
-CP65000
-Unicode-2-0-UTF-7
-Unicode-2-0-UTF7
-X-Unicode-2-0-UTF-7

[[UTF-7]] で符号化されたオクテット列にはバイト順問題はありません。
符号化される文字列は、 RFC 1642 では UCS-2BE, RFC 2152
では UTF-16BE です。 BOM は言及されていませんが、つけないと
解釈するのが妥当でしょう。

RFC には charset 名の規定は無く、例示だけですが、
RFC 1642 では UNICODE-1-1-UTF-7 が、 RFC 2152 では UTF-7
が使われています。

*UTF7-IMAP
-X-IMAP4-Modified-UTF7
-UTF-7-for-IMAP

[[UTF-7]] 参照。 BOM 無しです。

*UTF-8
-UTF-8 [RFC2044] [RFC2279] [IANAREG]
-CP1208
-CP65001
-IBM1208
-UTF8
-X-UTF-8
-UTF-8N
-Unicode-1-1-UTF-8 [RFC1641] [RFC1945] [RFC2279] [RFC2957]
-Unicode-2-0-UTF-8 [RFC2957]
-Unicode-2-0-UTF8
-X-Unicode-2-0-UTF-8

RFC 2044 は IETF で最初に UTF-8 を定義した文書です。
BOM には言及がありません (つまり BOM なしです)。
UTF-16 をそのまま変換してはいけないと明記されています。
参照しているのは Unicode 1.1 です。

RFC 2279 は RFC 2044 の定義を改め、 UTF-8 が最低でも [[Korean-mess]]
以降のものであるとしました。それ以前のものは、 UNICODE-1-1-UTF-8
としました。依然 BOM への言及はありません。 BOM なしです。

UNICODE-1-1-UTF-8 [RFC1641] [RFC2269] は BOM なしでしょう。

Unicode people ([[Unicoder]]) は BOM 推進のどさくさにまぎれて(?)
UTF-8 という名前を BOM つきに対して使うようにしたらしいです。
で、 BOM 無しは UTF-8n という名前にしたんだそーな。

IETF UTF-8 [RFC2279] は説明するだけするものの [[ISO/IEC10646]]
を参照していて、 ISO/IEC 10646 はこんなのもあるんだぞーと
BOM を紹介していますから、結局 BOM は使えるのか使えないのか
はっきりしません。 (使わなければ''ならない'''''ではない'''
のだけは明らかです。) そういう隙に付け込んだわけです。
(決して [[IETF]] を苛めようとわざとやったんじゃないと思いますよ。
方針のころころ変わる某コンソーシアムが悪いんでしょう。)

Web なんかだと、 BOM ありも BOM なしも UTF-8 という名前を
使っているようです。 Unicoder 的 UTF-8/UTF-8n 認識も結構
広まっているようです。 (IANA (未登録) charset "UTF-8n"
の用例があるかは確認してません。)

draft-yergeau-rfc2279bis-00 <urn:ietf:id:draft-yergeau-rfc2279bis-00>
(2002) によると、先頭の ZWNBSP を BOM と解釈してもいいみたいです。
つまり、必須ではありません。 (今更必須には出来ないでしょう。)

*UTF-9
-UTF-9
*UTF-16
-UTF-16 [RFC2781] [IANAREG]
-UTF-16BE [RFC2781] [IANAREG]
-UTF-16LE [RFC2781] [IANAREG]
-IBM-17584
-IBM-13488
-Unicode-2-0 [RFC2152]
-Unicode-2-0-UTF-16
-CP1201 (BE)
-UnicodeFFFE
-X-UTF-16-BE
-X-UTF-16-BE-BOM
-CP1200 (LE)
-IBM-1200 (LE)
-Unicode (LE)
-X-UTF-16LE
-X-UTF-16LE-BOM

"Unicode" なんて名前を自分の製品が採用しているもの
(UTF-16LE) に付すなんて、困った会社があったもんです :-)

UTF-16BE, UTF-16LE には BOM をつけてはいけません。
UTF-16 には BOM をつけるべきです。 BOM がない UTF-16
は、 UTF-16BE であるとして解釈します。いずれも [[Korean-mess]]
後の文字集合と解します。

[[XML]] においては UTF-16 は、必ず BOM で始まらなければなりません。
<http://www.w3.org/TR/REC-xml#charencoding>

*UTF-32
-UTF-32 [IANAREG]
-UTF-32BE [IANAREG]
-UTF-32LE [IANAREG]
-X-UTF-32BE-BOM
-X-UTF-32LE-BOM

<http://www.unicode.org/unicode/reports/tr19/> で定義されています。
UTF-32, UTF-32BE, UTF-32LE の使い分けは、 UTF-16* と同じです。
但し、 UTF-32 の定義を読むと BOM なし LE でも良いように思えます。
これは、うっかり見落としそうですが
<http://www.iana.org/assignments/charset-reg/UTF-32>
に説明があって、 IETF の charset としての UTF-32 では
UTF-16 と同じく BOM がないときは BE だとしています。

*CESU-8
-CESU-8 [IANAREG]
-csCESU-8 [IANAREG]

<http://www.unicode.org/unicode/reports/tr26>

*SCSU
-SCSU [IANAREG]

<http://www.iana.org/assignments/charset-reg/SCSU>
に説明があります。
- [1] [[BOCU-1]] も登録されますたね?
- [2] [CODE(charset)[[[GB18030]]]] も UCS の charset ですか?
- [3] >>2 GB 18030‐2000 には UCS に対応しない大量の未使用・私用領域があるので微妙だと思われ。
@


1.5
log
@auto-commited
@
text
@d1 43
d267 3
a269 3
- [1] [[BOCU-1]] も登録されますたね?
- [2] [CODE(charset)[[[GB18030]]]] も UCS の charset ですか?
- [3] >>2 GB 18030‐2000 には UCS に対応しない大量の未使用・私用領域があるので微妙だと思われ。
@


1.4
log
@Updated.
@
text
@d225 2
@


1.3
log
@Updated.
@
text
@d224 1
@


1.2
log
@Updated.
@
text
@d83 1
d86 1
@


1.1
log
@Updated.
@
text
@d34 5
d52 3
@

