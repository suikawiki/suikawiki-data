head	1.6;
access;
symbols
	suikawiki3-final:1.6
	before-db-leaffile:1.2
	after-upgrade-to-suikawiki-3:1.2
	before-fork-suikawiki3:1.2
	after-restore-20040122:1.2;
locks; strict;
comment	@# @;


1.6
date	2008.11.03.02.49.02;	author wakaba;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.08.02.06.13;	author wakaba;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.13.02.07.58;	author wakaba;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.13.02.03.53;	author wakaba;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.03.02.02.09;	author wakaba;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.06.12.26.30;	author make;	state Exp;
branches;
next	;


desc
@@


1.6
log
@auto-committed
@
text
@

* document 属性 (DOM AbstractView 界面)

[1] [[DOM]] [CODE[[VAR(DOMi)[[[AbstractView]]]].[CODE(DOMa)[document]]]]
属性の値は、その view の対象である文書 
([CODE(DOMi)[[[DocumentView]]]]) です。
この属性は読取専用です。

[2] この属性の初出は [[DOM 2]] View です。 
[CODE(DOMm)[[[hasFeature]]]] では 
[CODE(DOM)[View]]/[CODE(DOM)[2.0]] で実装の有無を確認出来ます。

仕様書:
- [DOM2] ''Document Object Model Views'' <http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView-document>

[16]
[CITE[一行で IE の JavaScript を高速化する方法 - IT戦記]] ([TIME[2008-10-31 23:01:04 +09:00]] 版) <http://d.hatena.ne.jp/amachang/20071010/1192012056>
([[名無しさん]])

[[#comment]]


* document 関数 (XSLT)

[3] [[XSLT]] の関数 [CODE[[[節集合]] ]]
[CODE(XPathf)[document]] ([VAR[物体]], [VAR[節集合]]?)]]
は、外部 [SUP[(>>10)]] [[XML]] 文書を節集合として返します。

[10] [Q[''外部'' XML 文書]]とは言っても、 
XSLT スタイル・シート自分自身を指定することもできます。

[11]
引数の解釈は微妙に複雑です。
,引数 1	,引数 2	,結果
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}"	,(なし)	,"[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), {[VAR[節[SUB[1]]]]}) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), {[VAR[節[SUB[[VAR[n]]]]]]})]]"
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}"	,節集合	,"[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), [VAR[節集合]]) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), [VAR[節集合]])]]"
,[VAR[節集合以外]]	,[VAR[節集合]]?	,[CODE(XPath)[[CODE(XPathf)[string]] ([VAR[節集合以外]])]] という URI の木の節集合

[9] '''基底 URI''':
第1引数が[[相対URI]] である場合には、
第2引数の節集合のうち、[[文書順]]で最初の[[節]]の[[文字列値]]を[[基底URI]]
として解決します。第2引数が与えられていない場合には、
[CODE(XPathf)[document()]] 関数が含まれる式が含まれる節の基底
URI を使います。

[4] >>3 第2引数が空節集合だったらどうするんだろう。。。

[7] >>4 誤りとし、通知又は空節集合を結果にします。 <http://www.w3.org/1999/11/REC-xslt-19991116-errata/#E14>

[5] '''資源を得られない場合''':
与えられた URI 参照の資源を得られなかった場合には、
[[誤り]]とし、通知するか又は空節集合を返します。
[WEAK[なお、実装者は対応している URI [[scheme]] を文書化しておくべきです。]]
資源は[[媒体型]]に関わらず XML として解釈します。 [CODE(MIME)[[[text/[VAR[*]]]]]]
であれば [CODE(MIME)[[[text/xml]]]] と同様に、
そうでなければ [CODE(MIME)[[[application/xml]]]] として扱います。

[8] '''素片識別子''':
[[URI参照]]が[[素片識別子]]を含む場合、その素片識別子が識別する部分を返します。
但し、例えば[[文節]]の何文字目から〜のような [[XPath]] 
的に扱えない素片などは扱えません。
扱えない素片は誤りとし、通知するか、又は空節集合を返します。
[WEAK[実装は素片を扱える媒体型を文書化しておくべきです。]]

[6] >>8 [[RFC 3023]] とは違った独自の定義がある XML
系媒体型だとまずいことになる予感。。。

[14]
実装によっては安全上の理由から取得できる資源を
URI 参照の種類やホスト名などによって制限していることもあります。

そうである場合もそうでない場合も、
単純に変換して Web ブラウザで表示するなどのごく簡単な操作以上のことをする場合は、
利用者の入力に依存して URI 参照を決定したり外部の資源を使ったりする時には安全について十分な配慮が必要です。
([[名無しさん]] [sage])

[15]
'''Firefox で [CODE(XPathf)[document()]] が機能しない''':
[[Firefox]] で [CODE(XPathf)[document()]]
が機能しないことがあります。ブラウザ画面には異常を示すメッセージなどは表示されませんが、意図した通りの[[結果木]]ができません。

そのような場合は、 '''JavaScript コンソール''' (ツール → JavaScript コンソール) にメッセージが出ていないか確認してみてください。
他の鯖にある [[XML]] [[文書]]を参照しようとすると、安全のために制限されて取得できないようです。
([[名無しさん]])

[[#comment]]


* 平文文書 (document) 級 (plaintxt 特性集合)

[12] [RUBYB[平文] [Plain text]] ([[plaintxt]]) [[特性集合]]の[[級]] 
[DFN[[RUBYB[plain text document] [平文文書]] ([CODE(SGML)[document]])]]
は、 plaintxt グローブの[[グローブ根]]となります。
一つの平文の文書 (文字列) に対応します。

仕様書: [[ISO/IEC 10744]]:1997 A.4.4.3 Plain text (PLAINTXT) grove construction
<http://www.y12.doe.gov/sgml/wg8/docs/n1920/html/clause-A.4.4.html#clause-A.4.4.3>

[13]
:規格参照具象構文名 ([CODE(SGMLa)[[[rcsnm]]]]):[CODE(SGML)[document]]
:応用名 ([CODE(SGMLa)[[[appnm]]]]):[CODE(SGML)[document]]
:完全名 ([CODE(SGMLa)[[[fullnm]]]]):[CODE(SGML)[plain text document]]
:[[特性]]:
,特性番号	,規格参照具象構文名	,応用名	,完全名	,型 (節関係型:級)	,説明
,1〜12	,([[内在特性]])	,==	,==	,==	,==
,13 {[[内容特性]]}	,[RUBYB[[CODE(SGML)[[[text]]]]] [文]]	,==	,==	,[CODE(SGML)[[[nodelist]]]] ([CODE(SGML)[[[subnode]]]]:[CODE(SGML)[[[datachar]]]])	,構成する文字の [CODE(SGML)[[[datachar]]]] [[節]]


[[#comment]]


* メモ@


1.5
log
@auto-committed
@
text
@a2 1

d16 5
d78 4
d83 1
a83 6
[15]
'''Firefox で [CODE(XPathf)[document()]] が機能しない''':
[[Firefox]] で [CODE(XPathf)[document()]]
が機能しないことがあります。ブラウザ画面には異常を示すメッセージなどは表示されませんが、意図した通りの[[結果木]]ができません。

そのような場合は、 '''JavaScript コンソール''' (ツール → JavaScript コンソール) にメッセージが出ていないか確認してみてください。
a85 1

@


1.4
log
@auto-committed
@
text
@d65 3
d69 2
a70 6
[14]
実装によっては安全上の理由から取得できる資源を
URI 参照の種類やホスト名などによって制限していることもあります。

そうである場合もそうでない場合も、
単純に変換して Web ブラウザで表示するなどのごく簡単な操作以上のことをする場合は、
d73 10
@


1.3
log
@auto-committed
@
text
@d1 102
a102 85
#?SuikaWiki/0.9
*document 属性 (DOM AbstractView 界面)

[1] [[DOM]] [CODE[[VAR(DOMi)[[[AbstractView]]]].[CODE(DOMa)[document]]]]
属性の値は、その view の対象である文書 
([CODE(DOMi)[[[DocumentView]]]]) です。
この属性は読取専用です。

[2] この属性の初出は [[DOM 2]] View です。 
[CODE(DOMm)[[[hasFeature]]]] では 
[CODE(DOM)[View]]/[CODE(DOM)[2.0]] で実装の有無を確認出来ます。

仕様書:
-[DOM2] ''Document Object Model Views'' <http://www.w3.org/TR/DOM-Level-2-Views/views.html#Views-AbstractView-document>
[[#comment]]

* document 関数 (XSLT)

[3] [[XSLT]] の関数 [CODE[[[節集合]] 
[CODE(XPathf)[document]] ([VAR[物体]], [VAR[節集合]]?)]]
は、外部 [SUP[(>>10)]] [[XML]] 文書を節集合として返します。

[10] [Q[''外部'' XML 文書]]とは言っても、 
XSLT スタイル・シート自分自身を指定することもできます。

[11]
引数の解釈は微妙に複雑です。
,引数 1                              ,引数 2   ,結果
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}",(なし)   ,"[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), {[VAR[節[SUB[1]]]]}) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), {[VAR[節[SUB[[VAR[n]]]]]]})]]"
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}",節集合   ,"[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), [VAR[節集合]]) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), [VAR[節集合]])]]"
,[VAR[節集合以外]],[VAR[節集合]]?,"[CODE(XPath)[[CODE(XPathf)[string]] ([VAR[節集合以外]])]] という URI の木の節集合"

[9] '''基底 URI''':
第1引数が[[相対URI]] である場合には、
第2引数の節集合のうち、[[文書順]]で最初の[[節]]の[[文字列値]]を[[基底URI]]
として解決します。第2引数が与えられていない場合には、
[CODE(XPathf)[document()]] 関数が含まれる式が含まれる節の基底
URI を使います。

[4] >>3 第2引数が空節集合だったらどうするんだろう。。。

[7] >>4 誤りとし、通知又は空節集合を結果にします。 <http://www.w3.org/1999/11/REC-xslt-19991116-errata/#E14>

[5] '''資源を得られない場合''':
与えられた URI 参照の資源を得られなかった場合には、
[[誤り]]とし、通知するか又は空節集合を返します。
[WEAK[なお、実装者は対応している URI [[scheme]] を文書化しておくべきです。]]
資源は[[媒体型]]に関わらず XML として解釈します。 [CODE(MIME)[[[text/[VAR[*]]]]]]
であれば [CODE(MIME)[[[text/xml]]]] と同様に、
そうでなければ [CODE(MIME)[[[application/xml]]]] として扱います。

[8] '''素片識別子''':
[[URI参照]]が[[素片識別子]]を含む場合、その素片識別子が識別する部分を返します。
但し、例えば[[文節]]の何文字目から〜のような [[XPath]] 
的に扱えない素片などは扱えません。
扱えない素片は誤りとし、通知するか、又は空節集合を返します。
[WEAK[実装は素片を扱える媒体型を文書化しておくべきです。]]

[6] >>8 [[RFC 3023]] とは違った独自の定義がある XML
系媒体型だとまずいことになる予感。。。

[[#comment]]

* 平文文書 (document) 級 (plaintxt 特性集合)
[12] [RUBYB[平文][Plain text]] ([[plaintxt]]) [[特性集合]]の[[級]] 
[DFN[[RUBYB[plain text document][平文文書]] ([CODE(SGML)[document]])]]
は、 plaintxt グローブの[[グローブ根]]となります。
一つの平文の文書 (文字列) に対応します。

仕様書: [[ISO/IEC 10744]]:1997 A.4.4.3 Plain text (PLAINTXT) grove construction
<http://www.y12.doe.gov/sgml/wg8/docs/n1920/html/clause-A.4.4.html#clause-A.4.4.3>

[13]
:規格参照具象構文名 ([CODE(SGMLa)[[[rcsnm]]]]):[CODE(SGML)[document]]
:応用名 ([CODE(SGMLa)[[[appnm]]]]):[CODE(SGML)[document]]
:完全名 ([CODE(SGMLa)[[[fullnm]]]]):[CODE(SGML)[plain text document]]
:[[特性]]:
,特性番号,規格参照具象構文名,応用名,完全名,型 (節関係型:級),説明
,1〜12,([[内在特性]]),==,==,==,==
,13 {[[内容特性]]},[RUBYB[[CODE(SGML)[[[text]]]]][文]],==,==,[CODE(SGML)[[[nodelist]]]] ([CODE(SGML)[[[subnode]]]]:[CODE(SGML)[[[datachar]]]]),構成する文字の [CODE(SGML)[[[datachar]]]] [[節]]

[[#comment]]


*メモ@


1.2
log
@auto-committed
@
text
@d4 1
a4 1
[1] [CODE[[VAR(DOMi)[[[AbstractView]]]].[CODE(DOMa)[document]]]]
d9 1
a9 1
[2] この属性は [[DOM2]] View で初出です。 
d13 1
d19 3
a21 2
[3] [[XSLT]] の関数 [CODE[[[節集合]] [CODE(XPathf)[document]] ([VAR[物体]], [VAR[節集合]]?)]]
は、外部 [[XML]] 文書を節集合として返します。
d23 4
d29 3
a31 3
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}",(なし)   ,[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), {[VAR[節[SUB[1]]]]}) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), {[VAR[節[SUB[[VAR[n]]]]]]})]]
,"{[VAR[節[SUB[1]]]],...,[VAR[節[SUB[[VAR[n]]]]]]}",節集合   ,[CODE(XPath)[[CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[1]]]]), [VAR[節集合]]) | [CODE(XPathf)[document]](文字列値 ([VAR[節[SUB[[VAR[n]]]]]]), [VAR[節集合]])]]
,[VAR[節集合以外]],[VAR[節集合]]?,[CODE(XPath)[[CODE(XPathf)[string]] ([VAR[節集合以外]])]] という URI の木の節集合
d33 1
d40 6
a45 1
[5] 与えられた URI 参照の資源を得られなかった場合には、
d48 7
a54 9
資源は[[媒体型]]に関わらず XML
として解釈します。 [CODE[[[text/*]]]]
であれば [CODE[[[text/xml]]]] と同様に、
そうでなければ [CODE[[[application/xml]]]]
として扱います。

[[URI参照]]が[[素片識別子]]を含む場合、
その素片識別子が識別する部分を返します。
但し、例えば文節の何文字目から〜のような [[XPath]]
d59 4
a62 1
[4] >>3 第2引数が空節集合だったらどうするんだろう。。。
d64 17
a80 2
[6] >>5 [[RFC3023]] とは違った独自の定義がある XML
系媒体型だとまずいことになる予感。。。
a81 1
- [7] >>4 誤りとし、通知又は空節集合を結果にします。 <http://www.w3.org/1999/11/REC-xslt-19991116-errata/#E14>
d83 1
@


1.1
log
@auto-commited
@
text
@d15 42
@

